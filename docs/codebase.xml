This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-22T16:24:16.622Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

- Line numbers have been added to the beginning of each line.
</notes>

<additional_info>

For more information about Repomix, visit: https://github.com/yamadashy/repomix
</additional_info>

</file_summary>

<repository_structure>
.markdownlint.json
.vitepress/components/ApiExplorer.vue
.vitepress/components/ArchitectureDiagram.vue
.vitepress/components/FileTree.vue
.vitepress/config.mts
.vitepress/shims-vue.d.ts
.vitepress/theme/custom.css
.vitepress/theme/FirebaseAuth.vue
.vitepress/theme/index.ts
api/index.md
architecture.md
codebase.xml
faq.md
index.md
introduction.md
package.json
performance.md
security.md
services/card-sync.md
services/price-sync.md
setup/configuration.md
setup/installation.md
troubleshooting.md
usage-guide.md
utils/batch.md
utils/cache.md
utils/error-handling.md
utils/image-compressor.md
utils/image-handler.md
utils/image-validator.md
utils/logging.md
utils/progress.md
utils/request.md
utils/sync-logger.md
</repository_structure>

<repository_files>
This section contains the contents of the repository's files.

<file path=".markdownlint.json">
 1: {
 2:     "MD033": {
 3:       "allowed_elements": [
 4:         "ApiExplorer",
 5:         "ArchitectureDiagram",
 6:         "FileTree",
 7:         "div",
 8:         "span",
 9:         "template",
10:         "script",
11:         "style"
12:       ]
13:     }
14:   }
</file>

<file path=".vitepress/components/ApiExplorer.vue">
   1: <script setup lang="ts">
   2: import { ref, computed, watch, onMounted } from 'vue'
   3: import { useDateFormat, useLocalStorage } from '@vueuse/core'
   4: 
   5: interface ApiEndpoint {
   6:   name: string
   7:   method: 'GET' | 'POST' | 'PUT' | 'DELETE'
   8:   path: string
   9:   description: string
  10:   params?: Parameter[]
  11:   responses: ApiResponse[]
  12:   example?: {
  13:     request?: string
  14:     response?: string
  15:   }
  16:   authenticated: boolean
  17:   tags?: string[]
  18: }
  19: 
  20: interface Parameter {
  21:   name: string
  22:   type: string
  23:   required: boolean
  24:   description: string
  25:   default?: string
  26:   validation?: {
  27:     pattern?: string
  28:     min?: number
  29:     max?: number
  30:   }
  31: }
  32: 
  33: interface ApiResponse {
  34:   status: number
  35:   description: string
  36:   schema: string
  37: }
  38: 
  39: interface ResponseState {
  40:   loading: boolean
  41:   data: any
  42:   error: string | null
  43:   headers: Record<string, string>
  44:   status: number
  45:   timestamp: number
  46: }
  47: 
  48: interface RequestHeader {
  49:   key: string
  50:   value: string
  51:   enabled: boolean
  52: }
  53: 
  54: interface HistoryEntry {
  55:   id: string
  56:   endpoint: string
  57:   method: string
  58:   params: Record<string, any>
  59:   headers: RequestHeader[]
  60:   timestamp: number
  61:   status: number
  62:   success: boolean
  63: }
  64: 
  65: const endpoints: ApiEndpoint[] = [
  66:   {
  67:     name: 'List Cards',
  68:     method: 'GET',
  69:     path: '/api/cards',
  70:     description: 'Retrieve a list of all cards with optional filtering',
  71:     authenticated: false,
  72:     tags: ['cards'],
  73:     params: [
  74:       {
  75:         name: 'groupId',
  76:         type: 'string',
  77:         required: false,
  78:         description: 'Filter by specific group ID'
  79:       },
  80:       {
  81:         name: 'limit',
  82:         type: 'number',
  83:         required: false,
  84:         description: 'Maximum number of cards to return',
  85:         default: '50'
  86:       },
  87:       {
  88:         name: 'offset',
  89:         type: 'number',
  90:         required: false,
  91:         description: 'Number of cards to skip',
  92:         default: '0'
  93:       }
  94:     ],
  95:     responses: [
  96:       {
  97:         status: 200,
  98:         description: 'List of cards retrieved successfully',
  99:         schema: `{
 100:   "cards": [
 101:     {
 102:       "id": "string",
 103:       "name": "string",
 104:       "groupId": "string",
 105:       "imageUrl": "string",
 106:       "prices": {
 107:         "normal": "number",
 108:         "foil": "number"
 109:       }
 110:     }
 111:   ],
 112:   "total": "number",
 113:   "limit": "number",
 114:   "offset": "number"
 115: }`
 116:       }
 117:     ]
 118:   },
 119:   {
 120:     name: 'Get Card Details',
 121:     method: 'GET',
 122:     path: '/api/cards/{id}',
 123:     description: 'Retrieve detailed information about a specific card',
 124:     authenticated: false,
 125:     tags: ['cards'],
 126:     params: [
 127:       {
 128:         name: 'id',
 129:         type: 'string',
 130:         required: true,
 131:         description: 'Card ID'
 132:       }
 133:     ],
 134:     responses: [
 135:       {
 136:         status: 200,
 137:         description: 'Card details retrieved successfully',
 138:         schema: `{
 139:   "id": "string",
 140:   "name": "string",
 141:   "groupId": "string",
 142:   "imageUrl": "string",
 143:   "prices": {
 144:     "normal": "number",
 145:     "foil": "number"
 146:   },
 147:   "priceHistory": [
 148:     {
 149:       "date": "string",
 150:       "normal": "number",
 151:       "foil": "number"
 152:     }
 153:   ]
 154: }`
 155:       }
 156:     ]
 157:   },
 158:   {
 159:     name: 'Trigger Card Sync',
 160:     method: 'POST',
 161:     path: '/api/sync/cards',
 162:     description: 'Manually trigger card synchronization',
 163:     authenticated: true,
 164:     tags: ['sync'],
 165:     params: [
 166:       {
 167:         name: 'dryRun',
 168:         type: 'boolean',
 169:         required: false,
 170:         description: 'Run sync without making changes',
 171:         default: 'false'
 172:       },
 173:       {
 174:         name: 'groupId',
 175:         type: 'string',
 176:         required: false,
 177:         description: 'Sync specific group only'
 178:       }
 179:     ],
 180:     responses: [
 181:       {
 182:         status: 200,
 183:         description: 'Sync initiated successfully',
 184:         schema: `{
 185:   "jobId": "string",
 186:   "status": "string",
 187:   "message": "string"
 188: }`
 189:       }
 190:     ]
 191:   },
 192:   {
 193:     name: 'Trigger Price Sync',
 194:     method: 'POST',
 195:     path: '/api/sync/prices',
 196:     description: 'Manually trigger price synchronization',
 197:     authenticated: true,
 198:     tags: ['sync'],
 199:     params: [
 200:       {
 201:         name: 'dryRun',
 202:         type: 'boolean',
 203:         required: false,
 204:         description: 'Run sync without making changes',
 205:         default: 'false'
 206:       }
 207:     ],
 208:     responses: [
 209:       {
 210:         status: 200,
 211:         description: 'Price sync initiated successfully',
 212:         schema: `{
 213:   "jobId": "string",
 214:   "status": "string",
 215:   "message": "string"
 216: }`
 217:       }
 218:     ]
 219:   },
 220:   {
 221:     name: 'Get Sync Status',
 222:     method: 'GET',
 223:     path: '/api/sync/status/{jobId}',
 224:     description: 'Check the status of a sync operation',
 225:     authenticated: true,
 226:     tags: ['sync'],
 227:     params: [
 228:       {
 229:         name: 'jobId',
 230:         type: 'string',
 231:         required: true,
 232:         description: 'Sync job ID'
 233:       }
 234:     ],
 235:     responses: [
 236:       {
 237:         status: 200,
 238:         description: 'Sync status retrieved successfully',
 239:         schema: `{
 240:   "jobId": "string",
 241:   "status": "string",
 242:   "progress": "number",
 243:   "details": {
 244:     "processed": "number",
 245:     "total": "number",
 246:     "errors": "number"
 247:   }
 248: }`
 249:       }
 250:     ]
 251:   }
 252: ]
 253: 
 254: const BASE_URL = 'https://us-central1-fftcg-sync-service.cloudfunctions.net'
 255: const selectedEndpoint = ref<ApiEndpoint>(endpoints[0])
 256: const showResponse = ref(true)
 257: const showHeaders = ref(false)
 258: const showHistory = ref(false)
 259: const showResponseHeaders = ref(false)
 260: const customHeaders = ref<RequestHeader[]>([
 261:   { key: 'Accept', value: 'application/json', enabled: true }
 262: ])
 263: const history = ref<HistoryEntry[]>([])
 264: const selectedTags = ref<string[]>([])
 265: const showAuthenticated = ref(true)
 266: const searchQuery = ref('')
 267: 
 268: // Response state
 269: const responseState = ref<ResponseState>({
 270:   loading: false,
 271:   data: null,
 272:   error: null,
 273:   headers: {},
 274:   status: 0,
 275:   timestamp: 0
 276: })
 277: 
 278: const paramValues = ref<Record<string, any>>({})
 279: 
 280: // Computed properties
 281: const methodColor = computed(() => {
 282:   switch (selectedEndpoint.value.method) {
 283:     case 'GET': return 'var(--vp-c-green)'
 284:     case 'POST': return 'var(--vp-c-brand)'
 285:     case 'PUT': return 'var(--vp-c-yellow)'
 286:     case 'DELETE': return 'var(--vp-c-red)'
 287:     default: return 'var(--vp-c-text-1)'
 288:   }
 289: })
 290: 
 291: const filteredEndpoints = computed(() => {
 292:   return endpoints.filter(endpoint => {
 293:     const matchesSearch = endpoint.name.toLowerCase().includes(searchQuery.value.toLowerCase()) ||
 294:                          endpoint.path.toLowerCase().includes(searchQuery.value.toLowerCase())
 295:     const matchesTags = selectedTags.value.length === 0 || 
 296:                        endpoint.tags?.some(tag => selectedTags.value.includes(tag))
 297:     const matchesAuth = showAuthenticated.value || !endpoint.authenticated
 298:     
 299:     return matchesSearch && matchesTags && matchesAuth
 300:   })
 301: })
 302: 
 303: const formattedDate = computed(() => {
 304:   return (timestamp: number) => {
 305:     return new Date(timestamp).toLocaleString()
 306:   }
 307: })
 308: 
 309: // Lifecycle hooks
 310: onMounted(() => {
 311:   const savedHistory = localStorage.getItem('api-explorer-history')
 312:   if (savedHistory) {
 313:     history.value = JSON.parse(savedHistory)
 314:   }
 315:   
 316:   initParamValues(selectedEndpoint.value)
 317: })
 318: 
 319: // Methods
 320: function initParamValues(endpoint: ApiEndpoint) {
 321:   const values: Record<string, any> = {}
 322:   endpoint.params?.forEach(param => {
 323:     values[param.name] = param.default || ''
 324:   })
 325:   paramValues.value = values
 326: }
 327: 
 328: function addHeader() {
 329:   customHeaders.value.push({ key: '', value: '', enabled: true })
 330: }
 331: 
 332: function removeHeader(index: number) {
 333:   customHeaders.value.splice(index, 1)
 334: }
 335: 
 336: function getEnabledHeaders(): Record<string, string> {
 337:   return customHeaders.value
 338:     .filter(h => h.enabled && h.key.trim() !== '')
 339:     .reduce((acc, h) => ({ ...acc, [h.key]: h.value }), {})
 340: }
 341: 
 342: async function copyToClipboard(text: string) {
 343:   try {
 344:     await navigator.clipboard.writeText(text)
 345:     // Show success message
 346:   } catch (err) {
 347:     // Show error message
 348:   }
 349: }
 350: 
 351: function saveAsJson(data: any, filename: string) {
 352:   const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' })
 353:   const url = URL.createObjectURL(blob)
 354:   const link = document.createElement('a')
 355:   link.href = url
 356:   link.download = filename
 357:   document.body.appendChild(link)
 358:   link.click()
 359:   document.body.removeChild(link)
 360:   URL.revokeObjectURL(url)
 361: }
 362: 
 363: function addToHistory(entry: Omit<HistoryEntry, 'id'>) {
 364:   const newEntry: HistoryEntry = {
 365:     ...entry,
 366:     id: crypto.randomUUID()
 367:   }
 368:   history.value.unshift(newEntry)
 369:   if (history.value.length > 50) {
 370:     history.value.pop()
 371:   }
 372:   localStorage.setItem('api-explorer-history', JSON.stringify(history.value))
 373: }
 374: 
 375: async function replayRequest(historyEntry: HistoryEntry) {
 376:   paramValues.value = { ...historyEntry.params }
 377:   customHeaders.value = [...historyEntry.headers]
 378:   const endpoint = endpoints.find(e => e.path === historyEntry.endpoint)
 379:   if (endpoint) {
 380:     selectedEndpoint.value = endpoint
 381:     await tryEndpoint(endpoint)
 382:   }
 383: }
 384: 
 385: async function tryEndpoint(endpoint: ApiEndpoint) {
 386:   responseState.value = {
 387:     loading: true,
 388:     data: null,
 389:     error: null,
 390:     headers: {},
 391:     status: 0,
 392:     timestamp: Date.now()
 393:   }
 394: 
 395:   try {
 396:     if (endpoint.authenticated && !getAuthToken()) {
 397:       throw new Error('Authentication required for this endpoint')
 398:     }
 399: 
 400:     const url = new URL(`${BASE_URL}${endpoint.path}`)
 401:     if (endpoint.params) {
 402:       Object.entries(paramValues.value).forEach(([key, value]) => {
 403:         if (value !== '') {
 404:           url.searchParams.append(key, value.toString())
 405:         }
 406:       })
 407:     }
 408: 
 409:     const headers = getEnabledHeaders()
 410:     const response = await fetch(url.toString(), {
 411:       method: endpoint.method,
 412:       headers
 413:     })
 414: 
 415:     const responseHeaders: Record<string, string> = {}
 416:     response.headers.forEach((value, key) => {
 417:       responseHeaders[key] = value
 418:     })
 419: 
 420:     const data = await response.json()
 421: 
 422:     if (!response.ok) {
 423:       throw new Error(data.error || 'An error occurred')
 424:     }
 425: 
 426:     responseState.value = {
 427:       loading: false,
 428:       data,
 429:       error: null,
 430:       headers: responseHeaders,
 431:       status: response.status,
 432:       timestamp: Date.now()
 433:     }
 434: 
 435:     addToHistory({
 436:       endpoint: endpoint.path,
 437:       method: endpoint.method,
 438:       params: { ...paramValues.value },
 439:       headers: [...customHeaders.value],
 440:       timestamp: Date.now(),
 441:       status: response.status,
 442:       success: true
 443:     })
 444: 
 445:   } catch (error) {
 446:     responseState.value = {
 447:       ...responseState.value,
 448:       loading: false,
 449:       error: error instanceof Error ? error.message : 'An error occurred',
 450:       status: error instanceof Error && error.message.includes('Authentication') ? 401 : 500
 451:     }
 452: 
 453:     addToHistory({
 454:       endpoint: endpoint.path,
 455:       method: endpoint.method,
 456:       params: { ...paramValues.value },
 457:       headers: [...customHeaders.value],
 458:       timestamp: Date.now(),
 459:       status: responseState.value.status,
 460:       success: false
 461:     })
 462:   }
 463: }
 464: 
 465: function getAuthToken(): string | null {
 466:   // Implement based on your auth system
 467:   return null
 468: }
 469: 
 470: // Watch for endpoint changes
 471: watch(selectedEndpoint, (newEndpoint) => {
 472:   initParamValues(newEndpoint)
 473:   responseState.value = {
 474:     loading: false,
 475:     data: null,
 476:     error: null,
 477:     headers: {},
 478:     status: 0,
 479:     timestamp: 0
 480:   }
 481: })
 482: </script>
 483: 
 484: <template>
 485:   <div class="api-explorer">
 486:     <div class="sidebar">
 487:       <!-- Search and Filter Section -->
 488:       <div class="search-section">
 489:         <input
 490:           v-model="searchQuery"
 491:           type="text"
 492:           placeholder="Search endpoints..."
 493:           class="search-input"
 494:         />
 495:         <div class="filter-options">
 496:           <div class="tags">
 497:             <button
 498:               v-for="tag in ['cards', 'sync']"
 499:               :key="tag"
 500:               class="tag-button"
 501:               :class="{ active: selectedTags.includes(tag) }"
 502:               @click="selectedTags = selectedTags.includes(tag) 
 503:                 ? selectedTags.filter(t => t !== tag)
 504:                 : [...selectedTags, tag]"
 505:             >
 506:               {{ tag }}
 507:             </button>
 508:           </div>
 509:           <label class="auth-toggle">
 510:             <input
 511:               type="checkbox"
 512:               v-model="showAuthenticated"
 513:             >
 514:             Show authenticated
 515:           </label>
 516:         </div>
 517:       </div>
 518: 
 519:       <!-- Endpoint List -->
 520:       <div class="endpoint-list">
 521:         <div
 522:           v-for="endpoint in filteredEndpoints"
 523:           :key="endpoint.path"
 524:           class="endpoint-item"
 525:           :class="{ 
 526:             active: endpoint === selectedEndpoint,
 527:             authenticated: endpoint.authenticated
 528:           }"
 529:           @click="selectedEndpoint = endpoint"
 530:         >
 531:           <div class="endpoint-item-header">
 532:             <span class="method" :style="{ color: methodColor }">
 533:               {{ endpoint.method }}
 534:             </span>
 535:             <span class="name">{{ endpoint.name }}</span>
 536:           </div>
 537:           <div class="endpoint-path">{{ endpoint.path }}</div>
 538:         </div>
 539:       </div>
 540: 
 541:       <!-- History Section -->
 542:       <div class="history-section">
 543:         <div class="history-toggle" @click="showHistory = !showHistory">
 544:           <span>History</span>
 545:           <span class="toggle-icon">{{ showHistory ? '▼' : '▶' }}</span>
 546:         </div>
 547: 
 548:         <div v-if="showHistory" class="history-panel">
 549:           <div
 550:             v-for="entry in history"
 551:             :key="entry.id"
 552:             class="history-entry"
 553:             :class="{ 
 554:               'history-success': entry.success,
 555:               'history-error': !entry.success
 556:             }"
 557:             @click="replayRequest(entry)"
 558:           >
 559:             <div class="history-entry-header">
 560:               <span class="history-method">{{ entry.method }}</span>
 561:               <span 
 562:                 class="history-status"
 563:                 :class="{ 
 564:                   'status-success': entry.status < 400,
 565:                   'status-error': entry.status >= 400
 566:                 }"
 567:               >
 568:                 {{ entry.status }}
 569:               </span>
 570:             </div>
 571:             <div class="history-endpoint">{{ entry.endpoint }}</div>
 572:             <div class="history-timestamp">
 573:               {{ formattedDate(entry.timestamp) }}
 574:             </div>
 575:           </div>
 576:         </div>
 577:       </div>
 578:     </div>
 579: 
 580:     <div class="content">
 581:       <!-- Endpoint Details -->
 582:       <div class="endpoint-header">
 583:         <div class="endpoint-title">
 584:           <h3>{{ selectedEndpoint.name }}</h3>
 585:           <span 
 586:             v-if="selectedEndpoint.authenticated"
 587:             class="auth-badge"
 588:             title="Requires authentication"
 589:           >
 590:             🔒
 591:           </span>
 592:         </div>
 593:         <div class="endpoint-path">
 594:           <span class="method" :style="{ color: methodColor }">
 595:             {{ selectedEndpoint.method }}
 596:           </span>
 597:           <code>{{ selectedEndpoint.path }}</code>
 598:         </div>
 599:       </div>
 600: 
 601:       <div class="description">
 602:         {{ selectedEndpoint.description }}
 603:       </div>
 604: 
 605:       <!-- Tags -->
 606:       <div v-if="selectedEndpoint.tags?.length" class="endpoint-tags">
 607:         <span 
 608:           v-for="tag in selectedEndpoint.tags"
 609:           :key="tag"
 610:           class="tag"
 611:         >
 612:           {{ tag }}
 613:         </span>
 614:       </div>
 615: 
 616:       <!-- Headers Section -->
 617:       <div class="headers-section">
 618:         <div class="section-header" @click="showHeaders = !showHeaders">
 619:           <h4>Headers</h4>
 620:           <span class="toggle-icon">{{ showHeaders ? '▼' : '▶' }}</span>
 621:         </div>
 622:         <div v-if="showHeaders" class="headers-content">
 623:           <div
 624:             v-for="(header, index) in customHeaders"
 625:             :key="index"
 626:             class="header-input"
 627:           >
 628:             <input
 629:               v-model="header.key"
 630:               placeholder="Header name"
 631:               class="header-key"
 632:             />
 633:             <input
 634:               v-model="header.value"
 635:               placeholder="Header value"
 636:               class="header-value"
 637:             />
 638:             <label class="header-enabled">
 639:               <input type="checkbox" v-model="header.enabled" />
 640:               Enable
 641:             </label>
 642:             <button
 643:               class="remove-header"
 644:               @click="removeHeader(index)"
 645:             >
 646:               ✕
 647:             </button>
 648:           </div>
 649:           <button class="add-header" @click="addHeader">
 650:             Add Header
 651:           </button>
 652:         </div>
 653:       </div>
 654: 
 655:       <!-- Parameters Section -->
 656:       <template v-if="selectedEndpoint.params?.length">
 657:         <h4>Parameters</h4>
 658:         <div class="params-form">
 659:           <div
 660:             v-for="param in selectedEndpoint.params"
 661:             :key="param.name"
 662:             class="param-input"
 663:           >
 664:             <label :for="param.name">
 665:               {{ param.name }}
 666:               <span v-if="param.required" class="required">*</span>
 667:             </label>
 668:             <input
 669:               :id="param.name"
 670:               v-model="paramValues[param.name]"
 671:               :type="param.type === 'number' ? 'number' : 'text'"
 672:               :placeholder="param.description"
 673:               :required="param.required"
 674:             />
 675:           </div>
 676:           <button
 677:             class="try-button"
 678:             @click="tryEndpoint(selectedEndpoint)"
 679:             :disabled="responseState.loading"
 680:           >
 681:             {{ responseState.loading ? 'Loading...' : 'Try it' }}
 682:           </button>
 683:         </div>
 684:       </template>
 685: 
 686:       <!-- Response Section -->
 687:       <div 
 688:         v-if="responseState.data || responseState.error" 
 689:         class="live-response"
 690:         :class="{ 'response-error': responseState.error }"
 691:       >
 692:         <div class="response-header">
 693:           <h4>Response</h4>
 694:           <div class="response-actions">
 695:             <button
 696:               class="action-button"
 697:               @click="copyToClipboard(JSON.stringify(responseState.data, null, 2))"
 698:               v-if="responseState.data"
 699:             >
 700:               Copy
 701:             </button>
 702:             <button
 703:               class="action-button"
 704:               @click="saveAsJson(responseState.data, `response-${Date.now()}.json`)"
 705:               v-if="responseState.data"
 706:             >
 707:               Save
 708:             </button>
 709:           </div>
 710:         </div>
 711: 
 712:         <!-- Response Status and Headers -->
 713:         <div v-if="responseState.status" class="response-status">
 714:           Status: {{ responseState.status }}
 715:         </div>
 716:        
 717:         <div v-if="Object.keys(responseState.headers).length" class="response-headers">
 718:           <div class="section-header" @click="showResponseHeaders = !showResponseHeaders">
 719:             <span>Response Headers</span>
 720:             <span class="toggle-icon">{{ showResponseHeaders ? '▼' : '▶' }}</span>
 721:           </div>
 722:           <div v-if="showResponseHeaders" class="headers-list">
 723:             <div
 724:               v-for="(value, key) in responseState.headers"
 725:               :key="key"
 726:               class="header-item"
 727:             >
 728:               <span class="header-key">{{ key }}:</span>
 729:               <span class="header-value">{{ value }}</span>
 730:             </div>
 731:           </div>
 732:         </div>
 733: 
 734:         <div v-if="responseState.error" class="error-message">
 735:           {{ responseState.error }}
 736:         </div>
 737:         <pre v-else class="response-data">
 738:           <code>{{ JSON.stringify(responseState.data, null, 2) }}</code>
 739:         </pre>
 740:       </div>
 741: 
 742:       <!-- Response Schema Section -->
 743:       <h4>Response Schema</h4>
 744:       <div
 745:         v-for="response in selectedEndpoint.responses"
 746:         :key="response.status"
 747:         class="response-section"
 748:       >
 749:         <div class="response-header">
 750:           <span
 751:             class="status"
 752:             :class="response.status < 400 ? 'success' : 'error'"
 753:           >
 754:             {{ response.status }}
 755:           </span>
 756:           <span class="description">{{ response.description }}</span>
 757:         </div>
 758:         <pre class="schema"><code>{{ response.schema }}</code></pre>
 759:       </div>
 760:     </div>
 761:   </div>
 762: </template>
 763: 
 764: <style scoped>
 765: .api-explorer {
 766:   display: grid;
 767:   grid-template-columns: 300px 1fr;
 768:   gap: 20px;
 769:   background: var(--custom-api-bg);
 770:   border-radius: 8px;
 771:   overflow: hidden;
 772:   border: 1px solid var(--vp-c-divider);
 773:   height: 800px;
 774: }
 775: 
 776: .sidebar {
 777:   background: var(--vp-c-bg-soft);
 778:   padding: 1rem;
 779:   border-right: 1px solid var(--vp-c-divider);
 780:   overflow-y: auto;
 781:   display: flex;
 782:   flex-direction: column;
 783: }
 784: 
 785: .search-section {
 786:   margin-bottom: 1rem;
 787:   padding: 0.5rem;
 788: }
 789: 
 790: .search-input {
 791:   width: 100%;
 792:   padding: 0.5rem;
 793:   border: 1px solid var(--vp-c-divider);
 794:   border-radius: 4px;
 795:   background: var(--vp-c-bg);
 796:   color: var(--vp-c-text-1);
 797:   margin-bottom: 0.5rem;
 798: }
 799: 
 800: .filter-options {
 801:   display: flex;
 802:   flex-direction: column;
 803:   gap: 0.5rem;
 804: }
 805: 
 806: .tags {
 807:   display: flex;
 808:   flex-wrap: wrap;
 809:   gap: 0.25rem;
 810: }
 811: 
 812: .tag-button {
 813:   padding: 0.25rem 0.5rem;
 814:   border-radius: 4px;
 815:   border: 1px solid var(--vp-c-divider);
 816:   background: var(--vp-c-bg);
 817:   cursor: pointer;
 818:   font-size: 0.8rem;
 819: }
 820: 
 821: .tag-button.active {
 822:   background: var(--vp-c-brand);
 823:   color: white;
 824:   border-color: var(--vp-c-brand);
 825: }
 826: 
 827: .auth-toggle {
 828:   display: flex;
 829:   align-items: center;
 830:   gap: 0.5rem;
 831:   font-size: 0.9rem;
 832: }
 833: 
 834: .endpoint-list {
 835:   flex: 1;
 836:   overflow-y: auto;
 837: }
 838: 
 839: .endpoint-item {
 840:   padding: 0.75rem;
 841:   border-radius: 6px;
 842:   margin-bottom: 0.5rem;
 843:   cursor: pointer;
 844:   transition: all 0.2s ease;
 845: }
 846: 
 847: .endpoint-item:hover {
 848:   background: var(--vp-c-bg-mute);
 849: }
 850: 
 851: .endpoint-item.active {
 852:   background: var(--vp-c-brand-dimm);
 853: }
 854: 
 855: .endpoint-item.authenticated::after {
 856:   content: "🔒";
 857:   float: right;
 858:   font-size: 0.8rem;
 859: }
 860: 
 861: .endpoint-item-header {
 862:   display: flex;
 863:   align-items: center;
 864:   gap: 0.5rem;
 865:   margin-bottom: 0.25rem;
 866: }
 867: 
 868: .endpoint-path {
 869:   font-size: 0.8rem;
 870:   color: var(--vp-c-text-2);
 871:   word-break: break-all;
 872: }
 873: 
 874: .history-toggle {
 875:   margin-top: auto;
 876:   padding: 0.75rem;
 877:   cursor: pointer;
 878:   display: flex;
 879:   justify-content: space-between;
 880:   align-items: center;
 881:   background: var(--vp-c-bg-mute);
 882:   border-radius: 6px;
 883:   margin-top: 1rem;
 884: }
 885: 
 886: .history-panel {
 887:   margin-top: 0.5rem;
 888:   border-top: 1px solid var(--vp-c-divider);
 889:   padding-top: 0.5rem;
 890: }
 891: 
 892: .history-entry {
 893:   padding: 0.5rem;
 894:   border-radius: 4px;
 895:   margin-bottom: 0.5rem;
 896:   cursor: pointer;
 897:   background: var(--vp-c-bg-mute);
 898:   border: 1px solid var(--vp-c-divider);
 899:   transition: all 0.2s ease;
 900: }
 901: 
 902: .history-entry:hover {
 903:   background: var(--vp-c-bg);
 904: }
 905: 
 906: .history-entry.history-success {
 907:   border-left: 3px solid var(--vp-c-green);
 908: }
 909: 
 910: .history-entry.history-error {
 911:   border-left: 3px solid var(--vp-c-red);
 912: }
 913: 
 914: .history-entry-header {
 915:   display: flex;
 916:   justify-content: space-between;
 917:   margin-bottom: 0.25rem;
 918: }
 919: 
 920: .history-method {
 921:   font-weight: 600;
 922: }
 923: 
 924: .history-status {
 925:   font-size: 0.9em;
 926: }
 927: 
 928: .status-success {
 929:   color: var(--vp-c-green);
 930: }
 931: 
 932: .status-error {
 933:   color: var(--vp-c-red);
 934: }
 935: 
 936: .history-endpoint {
 937:   font-size: 0.9em;
 938:   margin-bottom: 0.25rem;
 939: }
 940: 
 941: .history-timestamp {
 942:   font-size: 0.8em;
 943:   color: var(--vp-c-text-2);
 944: }
 945: 
 946: .content {
 947:   padding: 1rem;
 948:   overflow-y: auto;
 949: }
 950: 
 951: .endpoint-header {
 952:   margin-bottom: 1rem;
 953: }
 954: 
 955: .endpoint-title {
 956:   display: flex;
 957:   align-items: center;
 958:   gap: 0.5rem;
 959: }
 960: 
 961: .auth-badge {
 962:   font-size: 1rem;
 963:   cursor: help;
 964: }
 965: 
 966: .endpoint-tags {
 967:   display: flex;
 968:   gap: 0.5rem;
 969:   margin: 0.5rem 0;
 970: }
 971: 
 972: .tag {
 973:   padding: 0.25rem 0.5rem;
 974:   border-radius: 4px;
 975:   background: var(--vp-c-brand-dimm);
 976:   color: var(--vp-c-brand);
 977:   font-size: 0.8rem;
 978: }
 979: 
 980: .headers-section {
 981:   margin: 1rem 0;
 982:   background: var(--vp-c-bg-soft);
 983:   border-radius: 8px;
 984:   overflow: hidden;
 985: }
 986: 
 987: .section-header {
 988:   padding: 0.75rem;
 989:   cursor: pointer;
 990:   display: flex;
 991:   justify-content: space-between;
 992:   align-items: center;
 993:   background: var(--vp-c-bg-mute);
 994: }
 995: 
 996: .headers-content {
 997:   padding: 1rem;
 998: }
 999: 
1000: .header-input {
1001:   display: grid;
1002:   grid-template-columns: 1fr 1fr auto auto;
1003:   gap: 0.5rem;
1004:   margin-bottom: 0.5rem;
1005:   align-items: center;
1006: }
1007: 
1008: .header-key,
1009: .header-value {
1010:   padding: 0.5rem;
1011:   border: 1px solid var(--vp-c-divider);
1012:   border-radius: 4px;
1013:   font-size: 0.9em;
1014: }
1015: 
1016: .header-enabled {
1017:   display: flex;
1018:   align-items: center;
1019:   gap: 0.25rem;
1020: }
1021: 
1022: .remove-header {
1023:   padding: 0.25rem 0.5rem;
1024:   background: var(--vp-c-red);
1025:   color: white;
1026:   border: none;
1027:   border-radius: 4px;
1028:   cursor: pointer;
1029: }
1030: 
1031: .add-header {
1032:   margin-top: 0.5rem;
1033:   padding: 0.5rem;
1034:   background: var(--vp-c-brand);
1035:   color: white;
1036:   border: none;
1037:   border-radius: 4px;
1038:   cursor: pointer;
1039:   width: 100%;
1040: }
1041: 
1042: .params-form {
1043:   margin: 1rem 0;
1044: }
1045: 
1046: .param-input {
1047:   margin-bottom: 1rem;
1048: }
1049: 
1050: .param-input label {
1051:   display: block;
1052:   margin-bottom: 0.25rem;
1053: }
1054: 
1055: .param-input input {
1056:   width: 100%;
1057:   padding: 0.5rem;
1058:   border: 1px solid var(--vp-c-divider);
1059:   border-radius: 4px;
1060: }
1061: 
1062: .required {
1063:   color: var(--vp-c-red);
1064:   margin-left: 0.25rem;
1065: }
1066: 
1067: .try-button {
1068:   padding: 0.5rem 1rem;
1069:   background: var(--vp-c-brand);
1070:   color: white;
1071:   border: none;
1072:   border-radius: 4px;
1073:   cursor: pointer;
1074:   width: 100%;
1075: }
1076: 
1077: .try-button:disabled {
1078:   opacity: 0.5;
1079:   cursor: not-allowed;
1080: }
1081: 
1082: .live-response {
1083:   margin: 1rem 0;
1084:   padding: 1rem;
1085:   background: var(--vp-c-bg-soft);
1086:   border-radius: 8px;
1087:   border: 1px solid var(--vp-c-divider);
1088:   position: relative;
1089: }
1090: 
1091: .response-error {
1092:   border-color: var(--vp-c-red);
1093: }
1094: 
1095: .response-header {
1096:   display: flex;
1097:   justify-content: space-between;
1098:   align-items: center;
1099:   margin-bottom: 1rem;
1100: }
1101: 
1102: .response-actions {
1103:   display: flex;
1104:   gap: 0.5rem;
1105: }
1106: 
1107: .action-button {
1108:   padding: 0.25rem 0.75rem;
1109:   background: var(--vp-c-brand);
1110:   color: white;
1111:   border: none;
1112:   border-radius: 4px;
1113:   cursor: pointer;
1114:   font-size: 0.9em;
1115: }
1116: 
1117: .response-headers {
1118:   margin: 1rem 0;
1119:   background: var(--vp-c-bg-soft);
1120:   border-radius: 4px;
1121: }
1122: 
1123: .headers-list {
1124:   padding: 0.75rem;
1125: }
1126: 
1127: .header-item {
1128:   display: flex;
1129:   gap: 0.5rem;
1130:   margin-bottom: 0.25rem;
1131:   font-size: 0.9em;
1132: }
1133: 
1134: .error-message {
1135:   color: var(--vp-c-red);
1136:   padding: 0.75rem;
1137:   border: 1px solid var(--vp-c-red);
1138:   border-radius: 4px;
1139:   margin: 1rem 0;
1140: }
1141: 
1142: .response-data {
1143:   background: var(--vp-c-bg-mute);
1144:   padding: 1rem;
1145:   border-radius: 4px;
1146:   overflow-x: auto;
1147:   margin: 1rem 0;
1148: }
1149: 
1150: .response-section {
1151:   margin: 1rem 0;
1152: }
1153: 
1154: .response-section .status {
1155:   padding: 0.25rem 0.5rem;
1156:   border-radius: 4px;
1157:   font-weight: 600;
1158: }
1159: 
1160: .response-section .status.success {
1161:   background: var(--vp-c-green-dimm);
1162:   color: var(--vp-c-green);
1163: }
1164: 
1165: .response-section .status.error {
1166:   background: var(--vp-c-red-dimm);
1167:   color: var(--vp-c-red);
1168: }
1169: 
1170: .schema {
1171:   background: var(--vp-c-bg-mute);
1172:   padding: 1rem;
1173:   border-radius: 4px;
1174:   overflow-x: auto;
1175:   margin-top: 0.5rem;
1176: }
1177: 
1178: .loading-overlay {
1179:   position: absolute;
1180:   top: 0;
1181:   left: 0;
1182:   right: 0;
1183:   bottom: 0;
1184:   background: rgba(0, 0, 0, 0.5);
1185:   display: flex;
1186:   align-items: center;
1187:   justify-content: center;
1188:   border-radius: 8px;
1189: }
1190: 
1191: .loading-spinner {
1192:   width: 2rem;
1193:   height: 2rem;
1194:   border: 2px solid var(--vp-c-brand);
1195:   border-radius: 50%;
1196:   border-top-color: transparent;
1197:   animation: spin 1s linear infinite;
1198: }
1199: 
1200: @keyframes spin {
1201:   to { transform: rotate(360deg); }
1202: }
1203: 
1204: /* Responsive Design */
1205: @media (max-width: 768px) {
1206:   .api-explorer {
1207:     grid-template-columns: 1fr;
1208:     height: auto;
1209:   }
1210: 
1211:   .sidebar {
1212:     max-height: 300px;
1213:     overflow-y: auto;
1214:   }
1215: 
1216:   .content {
1217:     padding: 1rem;
1218:   }
1219: 
1220:   .header-input {
1221:     grid-template-columns: 1fr;
1222:   }
1223: 
1224:   .endpoint-item-header {
1225:     flex-direction: column;
1226:     align-items: flex-start;
1227:   }
1228: 
1229:   .response-header {
1230:     flex-direction: column;
1231:     gap: 0.5rem;
1232:   }
1233: 
1234:   .response-actions {
1235:     width: 100%;
1236:     justify-content: space-between;
1237:   }
1238: 
1239:   .action-button {
1240:     flex: 1;
1241:   }
1242: }
1243: 
1244: /* Dark Mode Adjustments */
1245: :root[class~='dark'] .api-explorer {
1246:   --custom-api-bg: var(--vp-c-bg-soft);
1247: }
1248: 
1249: :root[class~='dark'] .loading-overlay {
1250:   background: rgba(0, 0, 0, 0.7);
1251: }
1252: </style>
</file>

<file path=".vitepress/components/ArchitectureDiagram.vue">
  1: <script setup lang="ts">
  2: import { ref, onMounted, watch } from 'vue'
  3: 
  4: interface DiagramNode {
  5:   id: string
  6:   type: 'service' | 'database' | 'function' | 'external'
  7:   label: string
  8:   x: number
  9:   y: number
 10:   width: number
 11:   height: number
 12: }
 13: 
 14: interface DiagramConnection {
 15:   from: string
 16:   to: string
 17:   label?: string
 18:   type: 'sync' | 'async' | 'storage'
 19: }
 20: 
 21: const props = defineProps<{
 22:   zoom?: number
 23:   showLabels?: boolean
 24: }>()
 25: 
 26: const canvas = ref<HTMLCanvasElement | null>(null)
 27: const wrapper = ref<HTMLDivElement | null>(null)
 28: const scale = ref(props.zoom || 1)
 29: 
 30: // Define system components
 31: const nodes: DiagramNode[] = [
 32:   // External Services
 33:   {
 34:     id: 'tcgplayer',
 35:     type: 'external',
 36:     label: 'TCGPlayer API',
 37:     x: 50,
 38:     y: 50,
 39:     width: 120,
 40:     height: 60
 41:   },
 42:   // Firebase Services
 43:   {
 44:     id: 'functions',
 45:     type: 'service',
 46:     label: 'Firebase Functions',
 47:     x: 250,
 48:     y: 150,
 49:     width: 150,
 50:     height: 70
 51:   },
 52:   {
 53:     id: 'firestore',
 54:     type: 'database',
 55:     label: 'Firestore',
 56:     x: 500,
 57:     y: 50,
 58:     width: 120,
 59:     height: 60
 60:   },
 61:   {
 62:     id: 'storage',
 63:     type: 'database',
 64:     label: 'Firebase Storage',
 65:     x: 500,
 66:     y: 250,
 67:     width: 120,
 68:     height: 60
 69:   },
 70:   // Core Functions
 71:   {
 72:     id: 'cardSync',
 73:     type: 'function',
 74:     label: 'Card Sync',
 75:     x: 250,
 76:     y: 50,
 77:     width: 100,
 78:     height: 50
 79:   },
 80:   {
 81:     id: 'priceSync',
 82:     type: 'function',
 83:     label: 'Price Sync',
 84:     x: 250,
 85:     y: 250,
 86:     width: 100,
 87:     height: 50
 88:   },
 89:   {
 90:     id: 'imageProcessor',
 91:     type: 'function',
 92:     label: 'Image Processor',
 93:     x: 250,
 94:     y: 350,
 95:     width: 100,
 96:     height: 50
 97:   }
 98: ]
 99: 
100: const connections: DiagramConnection[] = [
101:   // TCGPlayer connections
102:   {
103:     from: 'tcgplayer',
104:     to: 'cardSync',
105:     label: 'Card Data',
106:     type: 'sync'
107:   },
108:   {
109:     from: 'tcgplayer',
110:     to: 'priceSync',
111:     label: 'Price Data',
112:     type: 'sync'
113:   },
114:   // Function connections
115:   {
116:     from: 'cardSync',
117:     to: 'firestore',
118:     label: 'Store Cards',
119:     type: 'storage'
120:   },
121:   {
122:     from: 'priceSync',
123:     to: 'firestore',
124:     label: 'Store Prices',
125:     type: 'storage'
126:   },
127:   {
128:     from: 'imageProcessor',
129:     to: 'storage',
130:     label: 'Store Images',
131:     type: 'storage'
132:   },
133:   {
134:     from: 'cardSync',
135:     to: 'imageProcessor',
136:     label: 'Process Images',
137:     type: 'async'
138:   }
139: ]
140: 
141: function drawNode(
142:   ctx: CanvasRenderingContext2D,
143:   node: DiagramNode
144: ) {
145:   const x = node.x * scale.value
146:   const y = node.y * scale.value
147:   const width = node.width * scale.value
148:   const height = node.height * scale.value
149: 
150:   ctx.beginPath()
151:   
152:   switch (node.type) {
153:     case 'service':
154:       ctx.roundRect(x, y, width, height, 10)
155:       ctx.fillStyle = '#646cff'
156:       break
157:     case 'database':
158:       ctx.ellipse(
159:         x + width/2,
160:         y + height/2,
161:         width/2,
162:         height/2,
163:         0,
164:         0,
165:         2 * Math.PI
166:       )
167:       ctx.fillStyle = '#42b883'
168:       break
169:     case 'function':
170:       ctx.roundRect(x, y, width, height, 5)
171:       ctx.fillStyle = '#fb923c'
172:       break
173:     case 'external':
174:       ctx.rect(x, y, width, height)
175:       ctx.fillStyle = '#94a3b8'
176:       break
177:   }
178:   
179:   ctx.fill()
180:   ctx.stroke()
181: 
182:   // Draw label
183:   if (props.showLabels !== false) {
184:     ctx.fillStyle = '#ffffff'
185:     ctx.font = `${12 * scale.value}px sans-serif`
186:     ctx.textAlign = 'center'
187:     ctx.textBaseline = 'middle'
188:     ctx.fillText(
189:       node.label,
190:       x + width/2,
191:       y + height/2
192:     )
193:   }
194: }
195: 
196: function drawConnection(
197:   ctx: CanvasRenderingContext2D,
198:   conn: DiagramConnection
199: ) {
200:   const fromNode = nodes.find(n => n.id === conn.from)
201:   const toNode = nodes.find(n => n.id === conn.to)
202:   
203:   if (!fromNode || !toNode) return
204: 
205:   const start = {
206:     x: (fromNode.x + fromNode.width/2) * scale.value,
207:     y: (fromNode.y + fromNode.height/2) * scale.value
208:   }
209:   
210:   const end = {
211:     x: (toNode.x + toNode.width/2) * scale.value,
212:     y: (toNode.y + toNode.height/2) * scale.value
213:   }
214: 
215:   ctx.beginPath()
216:   ctx.moveTo(start.x, start.y)
217: 
218:   // Draw different line styles based on connection type
219:   switch (conn.type) {
220:     case 'sync':
221:       ctx.setLineDash([])
222:       ctx.strokeStyle = '#646cff'
223:       break
224:     case 'async':
225:       ctx.setLineDash([5, 5])
226:       ctx.strokeStyle = '#fb923c'
227:       break
228:     case 'storage':
229:       ctx.setLineDash([])
230:       ctx.strokeStyle = '#42b883'
231:       break
232:   }
233: 
234:   // Draw curved line
235:   const cp1x = start.x + (end.x - start.x) / 2
236:   const cp1y = start.y
237:   const cp2x = cp1x
238:   const cp2y = end.y
239:   
240:   ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, end.x, end.y)
241:   ctx.stroke()
242: 
243:   // Draw arrow
244:   const angle = Math.atan2(end.y - cp2y, end.x - cp2x)
245:   const arrowLength = 10 * scale.value
246:   
247:   ctx.beginPath()
248:   ctx.moveTo(end.x, end.y)
249:   ctx.lineTo(
250:     end.x - arrowLength * Math.cos(angle - Math.PI/6),
251:     end.y - arrowLength * Math.sin(angle - Math.PI/6)
252:   )
253:   ctx.moveTo(end.x, end.y)
254:   ctx.lineTo(
255:     end.x - arrowLength * Math.cos(angle + Math.PI/6),
256:     end.y - arrowLength * Math.sin(angle + Math.PI/6)
257:   )
258:   ctx.stroke()
259: 
260:   // Draw label if exists
261:   if (conn.label && props.showLabels !== false) {
262:     const midX = (start.x + end.x) / 2
263:     const midY = (start.y + end.y) / 2 - 10 * scale.value
264:     
265:     ctx.font = `${11 * scale.value}px sans-serif`
266:     ctx.fillStyle = '#64748b'
267:     ctx.textAlign = 'center'
268:     ctx.textBaseline = 'bottom'
269:     ctx.fillText(conn.label, midX, midY)
270:   }
271: }
272: 
273: function draw() {
274:   if (!canvas.value) return
275:   
276:   const ctx = canvas.value.getContext('2d')
277:   if (!ctx) return
278: 
279:   // Clear canvas
280:   ctx.clearRect(0, 0, canvas.value.width, canvas.value.height)
281: 
282:   // Set line styles
283:   ctx.lineWidth = 2 * scale.value
284:   ctx.strokeStyle = '#64748b'
285: 
286:   // Draw connections first (behind nodes)
287:   connections.forEach(conn => drawConnection(ctx, conn))
288: 
289:   // Draw nodes
290:   nodes.forEach(node => drawNode(ctx, node))
291: }
292: 
293: function updateCanvasSize() {
294:   if (!canvas.value || !wrapper.value) return
295:   
296:   const rect = wrapper.value.getBoundingClientRect()
297:   canvas.value.width = rect.width
298:   canvas.value.height = rect.height
299:   draw()
300: }
301: 
302: // Resize handling
303: let resizeObserver: ResizeObserver
304: onMounted(() => {
305:   if (wrapper.value) {
306:     resizeObserver = new ResizeObserver(updateCanvasSize)
307:     resizeObserver.observe(wrapper.value)
308:   }
309:   updateCanvasSize()
310: })
311: 
312: // Watch for prop changes
313: watch(() => props.zoom, () => {
314:   scale.value = props.zoom || 1
315:   draw()
316: })
317: </script>
318: 
319: <template>
320:   <div ref="wrapper" class="architecture-diagram">
321:     <canvas ref="canvas"></canvas>
322:     <div class="legend">
323:       <div class="legend-item">
324:         <div class="color-box service"></div>
325:         <span>Firebase Services</span>
326:       </div>
327:       <div class="legend-item">
328:         <div class="color-box database"></div>
329:         <span>Databases</span>
330:       </div>
331:       <div class="legend-item">
332:         <div class="color-box function"></div>
333:         <span>Functions</span>
334:       </div>
335:       <div class="legend-item">
336:         <div class="color-box external"></div>
337:         <span>External Services</span>
338:       </div>
339:     </div>
340:   </div>
341: </template>
342: 
343: <style scoped>
344: .architecture-diagram {
345:   position: relative;
346:   width: 100%;
347:   height: 500px;
348:   background: var(--custom-diagram-bg);
349:   border-radius: 8px;
350:   overflow: hidden;
351: }
352: 
353: canvas {
354:   width: 100%;
355:   height: 100%;
356: }
357: 
358: .legend {
359:   position: absolute;
360:   bottom: 20px;
361:   right: 20px;
362:   background: rgba(255, 255, 255, 0.9);
363:   padding: 10px;
364:   border-radius: 6px;
365:   box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
366: }
367: 
368: .legend-item {
369:   display: flex;
370:   align-items: center;
371:   margin: 5px 0;
372: }
373: 
374: .color-box {
375:   width: 16px;
376:   height: 16px;
377:   margin-right: 8px;
378:   border-radius: 3px;
379: }
380: 
381: .color-box.service {
382:   background: #646cff;
383: }
384: 
385: .color-box.database {
386:   background: #42b883;
387: }
388: 
389: .color-box.function {
390:   background: #fb923c;
391: }
392: 
393: .color-box.external {
394:   background: #94a3b8;
395: }
396: 
397: /* Dark mode adjustments */
398: :deep(.dark) .legend {
399:   background: rgba(0, 0, 0, 0.8);
400: }
401: </style>
</file>

<file path=".vitepress/components/FileTree.vue">
  1: <script setup lang="ts">
  2: import { ref, computed, onMounted } from 'vue'
  3: 
  4: interface TreeNode {
  5:   name: string
  6:   path: string
  7:   type: 'file' | 'directory'
  8:   children?: TreeNode[]
  9: }
 10: 
 11: const props = defineProps<{
 12:   root?: string
 13:   initialExpanded?: boolean
 14: }>()
 15: 
 16: const expandedNodes = ref<Set<string>>(new Set())
 17: const treeData = ref<TreeNode[]>([])
 18: 
 19: // Process the file structure into a tree
 20: onMounted(async () => {
 21:   // Initial structure based on your codebase
 22:   treeData.value = [
 23:     {
 24:       name: 'functions',
 25:       path: 'functions',
 26:       type: 'directory',
 27:       children: [
 28:         {
 29:           name: 'src',
 30:           path: 'functions/src',
 31:           type: 'directory',
 32:           children: [
 33:             {
 34:               name: 'config',
 35:               path: 'functions/src/config',
 36:               type: 'directory',
 37:               children: [
 38:                 {
 39:                   name: 'firebase.ts',
 40:                   path: 'functions/src/config/firebase.ts',
 41:                   type: 'file'
 42:                 }
 43:               ]
 44:             },
 45:             {
 46:               name: 'services',
 47:               path: 'functions/src/services',
 48:               type: 'directory',
 49:               children: [
 50:                 {
 51:                   name: 'cardSync.ts',
 52:                   path: 'functions/src/services/cardSync.ts',
 53:                   type: 'file'
 54:                 },
 55:                 {
 56:                   name: 'priceSync.ts',
 57:                   path: 'functions/src/services/priceSync.ts',
 58:                   type: 'file'
 59:                 }
 60:               ]
 61:             },
 62:             // Add other directories and files based on your structure
 63:           ]
 64:         }
 65:       ]
 66:     }
 67:   ]
 68: 
 69:   // If initialExpanded is true, expand all nodes
 70:   if (props.initialExpanded) {
 71:     const expandAll = (nodes: TreeNode[]) => {
 72:       nodes.forEach(node => {
 73:         if (node.type === 'directory') {
 74:           expandedNodes.value.add(node.path)
 75:           if (node.children) {
 76:             expandAll(node.children)
 77:           }
 78:         }
 79:       })
 80:     }
 81:     expandAll(treeData.value)
 82:   }
 83: })
 84: 
 85: function toggleNode(path: string) {
 86:   if (expandedNodes.value.has(path)) {
 87:     expandedNodes.value.delete(path)
 88:   } else {
 89:     expandedNodes.value.add(path)
 90:   }
 91: }
 92: 
 93: const toggleAllNodes = () => {
 94:   if (expandedNodes.value.size > 0) {
 95:     expandedNodes.value.clear()
 96:   } else {
 97:     const expandAll = (nodes: TreeNode[]) => {
 98:       nodes.forEach(node => {
 99:         if (node.type === 'directory') {
100:           expandedNodes.value.add(node.path)
101:           if (node.children) {
102:             expandAll(node.children)
103:           }
104:         }
105:       })
106:     }
107:     expandAll(treeData.value)
108:   }
109: }
110: 
111: // Recursive component for rendering tree nodes
112: const TreeNode = (node: TreeNode, level: number = 0) => {
113:   const isExpanded = expandedNodes.value.has(node.path)
114:   const hasChildren = node.children && node.children.length > 0
115:   
116:   return (
117:     <div class={`tree-node level-${level}`}>
118:       <div
119:         class={`node-content ${node.type}`}
120:         onClick={() => hasChildren && toggleNode(node.path)}
121:       >
122:         {hasChildren && (
123:           <span class={`expand-icon ${isExpanded ? 'expanded' : ''}`}>
124:             {isExpanded ? '▼' : '▶'}
125:           </span>
126:         )}
127:         <span class="node-name">{node.name}</span>
128:       </div>
129:       {isExpanded && hasChildren && (
130:         <div class="children">
131:           {node.children!.map(child => TreeNode(child, level + 1))}
132:         </div>
133:       )}
134:     </div>
135:   )
136: }
137: </script>
138: 
139: <template>
140:   <div class="file-tree">
141:     <div class="tree-controls">
142:       <button @click="toggleAllNodes">
143:         {{ expandedNodes.size > 0 ? 'Collapse All' : 'Expand All' }}
144:       </button>
145:     </div>
146:     <div class="tree-content">
147:       <template v-for="node in treeData" :key="node.path">
148:         <TreeNode :node="node" />
149:       </template>
150:     </div>
151:   </div>
152: </template>
153: 
154: <style scoped>
155: .file-tree {
156:   background: var(--custom-tree-bg);
157:   border-radius: 8px;
158:   padding: 1rem;
159:   margin: 1rem 0;
160: }
161: 
162: .tree-controls {
163:   margin-bottom: 1rem;
164: }
165: 
166: .tree-controls button {
167:   background: var(--vp-c-brand);
168:   color: white;
169:   border: none;
170:   padding: 0.5rem 1rem;
171:   border-radius: 4px;
172:   cursor: pointer;
173:   font-size: 0.9rem;
174: }
175: 
176: .tree-controls button:hover {
177:   background: var(--vp-c-brand-dark);
178: }
179: 
180: .tree-node {
181:   margin: 0.25rem 0;
182: }
183: 
184: .node-content {
185:   display: flex;
186:   align-items: center;
187:   padding: 0.25rem;
188:   cursor: pointer;
189:   border-radius: 4px;
190: }
191: 
192: .node-content:hover {
193:   background: var(--custom-tree-highlight);
194: }
195: 
196: .expand-icon {
197:   margin-right: 0.5rem;
198:   font-size: 0.8rem;
199:   transition: transform 0.2s ease;
200: }
201: 
202: .expand-icon.expanded {
203:   transform: rotate(0deg);
204: }
205: 
206: .children {
207:   margin-left: 1.5rem;
208:   border-left: 1px dashed var(--vp-c-divider);
209:   padding-left: 0.5rem;
210: }
211: 
212: .directory .node-name {
213:   font-weight: 500;
214: }
215: 
216: .file .node-name {
217:   font-weight: normal;
218: }
219: 
220: .level-0 {
221:   margin-top: 0;
222: }
223: </style>
</file>

<file path=".vitepress/config.mts">
  1: import { defineConfig } from 'vitepress/dist/node/index.js'
  2: 
  3: export default defineConfig({
  4:   title: 'FFTCG Sync Service',
  5:   description: 'Documentation for the FFTCG Card and Price Sync Service',
  6:   
  7:   // Head tags
  8:   head: [
  9:     ['link', { rel: 'icon', type: 'image/svg+xml', href: '/logo.svg' }],
 10:     ['meta', { name: 'theme-color', content: '#646cff' }]
 11:   ],
 12: 
 13:   // Markdown configuration
 14:   markdown: {
 15:     lineNumbers: true,
 16:     theme: 'github-dark'
 17:   },
 18: 
 19:   themeConfig: {
 20:     nav: [
 21:       { text: 'Home', link: '/' },
 22:       { text: 'Guide', link: '/docs/usage-guide' },
 23:       { text: 'Architecture', link: '/docs/architecture' },
 24:       { text: 'API', link: '/api/' },
 25:       { text: 'FAQ', link: '/docs/faq' }
 26:     ],
 27: 
 28:     sidebar: [
 29:       {
 30:         text: 'Introduction',
 31:         items: [
 32:           { text: 'Getting Started', link: '/introduction' },
 33:           { text: 'Architecture Overview', link: '/docs/architecture' },
 34:           { text: 'Usage Guide', link: '/docs/usage-guide' }
 35:         ]
 36:       },
 37:       {
 38:         text: 'Core Documentation',
 39:         items: [
 40:           { text: 'FAQ', link: '/docs/faq' },
 41:           { text: 'Troubleshooting', link: '/docs/troubleshooting' },
 42:           { text: 'Performance', link: '/docs/performance' },
 43:           { text: 'Security', link: '/docs/security' }
 44:         ]
 45:       },
 46:       {
 47:         text: 'Setup & Configuration',
 48:         items: [
 49:           { text: 'Installation', link: '/setup/installation' },
 50:           { text: 'Firebase Setup', link: '/setup/firebase' },
 51:           { text: 'Environment Config', link: '/setup/environment' }
 52:         ]
 53:       },
 54:       {
 55:         text: 'Core Services',
 56:         items: [
 57:           { text: 'Card Sync', link: '/services/card-sync' },
 58:           { text: 'Price Sync', link: '/services/price-sync' },
 59:           { text: 'Image Processing', link: '/services/image-processing' }
 60:         ]
 61:       },
 62:       {
 63:         text: 'Utilities',
 64:         items: [
 65:           { text: 'Image Handler', link: '/utils/image-handler' },
 66:           { text: 'Cache System', link: '/utils/cache' },
 67:           { text: 'Logging', link: '/utils/logging' },
 68:           { text: 'Error Handling', link: '/utils/error-handling' },
 69:           { text: 'Batch Processing', link: '/utils/batch-processing' }
 70:         ]
 71:       },
 72:       {
 73:         text: 'Testing & Monitoring',
 74:         items: [
 75:           { text: 'Test Suite', link: '/testing/overview' },
 76:           { text: 'Image Testing', link: '/testing/image-testing' },
 77:           { text: 'Sync Testing', link: '/testing/sync-testing' },
 78:           { text: 'Performance Monitoring', link: '/testing/monitoring' }
 79:         ]
 80:       }
 81:     ],
 82: 
 83:     search: {
 84:       provider: 'local',
 85:       options: {
 86:         detailedView: true
 87:       }
 88:     },
 89: 
 90:     socialLinks: [
 91:       { icon: 'github', link: 'https://github.com/yourusername/fftcg-sync-service' }
 92:     ],
 93: 
 94:     footer: {
 95:       message: 'Released under the MIT License.',
 96:       copyright: `Copyright © ${new Date().getFullYear()}`
 97:     },
 98: 
 99:     outline: {
100:       level: [2, 3],
101:       label: 'On this page'
102:     },
103: 
104:     lastUpdated: {
105:       text: 'Last updated',
106:       formatOptions: {
107:         dateStyle: 'full',
108:         timeStyle: 'medium'
109:       }
110:     }
111:   }
112: })
</file>

<file path=".vitepress/shims-vue.d.ts">
1: declare module '*.vue' {
2:     import type { DefineComponent } from 'vue'
3:     const component: DefineComponent<{}, {}, any>
4:     export default component
5:   }
</file>

<file path=".vitepress/theme/custom.css">
 1: :root {
 2:     /* Brand Colors */
 3:     --vp-c-brand: #646cff;
 4:     --vp-c-brand-light: #747bff;
 5:     --vp-c-brand-lighter: #9499ff;
 6:     --vp-c-brand-dark: #535bf2;
 7:     --vp-c-brand-darker: #454ce1;
 8:   
 9:     /* Typography */
10:     --vp-font-family-base: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI',
11:       Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
12:       sans-serif;
13:     --vp-font-family-mono: 'Fira Code', Menlo, Monaco, Consolas, 'Courier New',
14:       monospace;
15:   
16:     /* Code Blocks */
17:     --vp-code-block-bg: #1e1e1e;
18:     --vp-code-block-color: #e5e7eb;
19:     --vp-code-line-highlight-color: rgba(255, 255, 255, 0.1);
20:     --vp-code-line-number-color: #636363;
21:   
22:     /* Custom Component Colors */
23:     --custom-tree-bg: var(--vp-c-bg-soft);
24:     --custom-tree-highlight: var(--vp-c-brand-light);
25:     --custom-diagram-bg: var(--vp-c-bg-soft);
26:     --custom-api-bg: var(--vp-c-bg-soft);
27:   }
28:   
29:   /* Dark Mode Overrides */
30:   .dark {
31:     --custom-tree-bg: var(--vp-c-bg-soft);
32:     --custom-tree-highlight: var(--vp-c-brand-dark);
33:   }
34:   
35:   /* Custom Component Base Styles */
36:   .custom-block {
37:     border-radius: 8px;
38:     padding: 16px 20px;
39:     margin: 16px 0;
40:     font-size: 14px;
41:     line-height: 1.6;
42:   }
43:   
44:   /* Responsive Design */
45:   @media (max-width: 768px) {
46:     .custom-block {
47:       padding: 12px 16px;
48:     }
49:   }
50:   
51:   /* Print Styles */
52:   @media print {
53:     .VPNav,
54:     .VPSidebar,
55:     .VPDocAside {
56:       display: none;
57:     }
58:   
59:     .VPDoc {
60:       padding: 0;
61:       margin: 0;
62:     }
63:   }
64:   
65:   /* Transitions */
66:   .fade-enter-active,
67:   .fade-leave-active {
68:     transition: opacity 0.3s ease;
69:   }
70:   
71:   .fade-enter-from,
72:   .fade-leave-to {
73:     opacity: 0;
74:   }
</file>

<file path=".vitepress/theme/FirebaseAuth.vue">
  1: <template>
  2:   <div v-if="!isAuthenticated" class="auth-wrapper">
  3:     <div class="auth-container">
  4:       <h2>FFTCG Sync Service Documentation</h2>
  5:       <p>Authentication required to access documentation.</p>
  6:       <button @click="signIn" class="signin-button">
  7:         Sign in with Google
  8:       </button>
  9:     </div>
 10:   </div>
 11:   <slot v-else></slot>
 12: </template>
 13: 
 14: <script setup>
 15: import { ref, onMounted } from 'vue'
 16: import { initializeApp } from 'firebase/app'
 17: import { getAuth, signInWithPopup, GoogleAuthProvider, onAuthStateChanged } from 'firebase/auth'
 18: import { firebaseConfig } from '../../../functions/src/config/firebase'
 19: 
 20: const isAuthenticated = ref(false)
 21: const allowedEmails = ['mrw1986@gmail.com']
 22: 
 23: const firebaseConfig = {
 24:   apiKey: "AIzaSyDJGSxSVXWEmTs9HMzSGu175vpABHuEez0",
 25:   authDomain: "fftcg-sync-service.firebaseapp.com",
 26:   projectId: "fftcg-sync-service",
 27:   storageBucket: "fftcg-sync-service.firebasestorage.app",
 28:   messagingSenderId: "161248420888",
 29:   appId: "1:161248420888:web:61f524b0fa0287017d4f6d"
 30: }
 31: 
 32: const app = initializeApp(firebaseConfig)
 33: const auth = getAuth(app)
 34: const provider = new GoogleAuthProvider()
 35: 
 36: onMounted(() => {
 37:   onAuthStateChanged(auth, (user) => {
 38:     isAuthenticated.value = user && allowedEmails.includes(user.email)
 39:     if (user && !allowedEmails.includes(user.email)) {
 40:       auth.signOut()
 41:       alert('Access denied. Unauthorized email.')
 42:     }
 43:   })
 44: })
 45: 
 46: const signIn = async () => {
 47:   try {
 48:     await signInWithPopup(auth, provider)
 49:   } catch (error) {
 50:     console.error('Authentication error:', error)
 51:     alert('Authentication failed. Please try again.')
 52:   }
 53: }
 54: </script>
 55: 
 56: <style>
 57: .auth-wrapper {
 58:   display: flex;
 59:   justify-content: center;
 60:   align-items: center;
 61:   min-height: 100vh;
 62:   background: var(--vp-c-bg);
 63: }
 64: 
 65: .auth-container {
 66:   text-align: center;
 67:   padding: 2rem;
 68:   border-radius: 8px;
 69:   background: var(--vp-c-bg-soft);
 70:   box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
 71:   max-width: 400px;
 72:   width: 90%;
 73: }
 74: 
 75: .signin-button {
 76:   margin-top: 1.5rem;
 77:   padding: 0.75rem 1.5rem;
 78:   border-radius: 4px;
 79:   background: var(--vp-c-brand);
 80:   color: white;
 81:   border: none;
 82:   cursor: pointer;
 83:   font-size: 1rem;
 84:   transition: background-color 0.2s;
 85: }
 86: 
 87: .signin-button:hover {
 88:   background: var(--vp-c-brand-dark);
 89: }
 90: 
 91: h2 {
 92:   color: var(--vp-c-text-1);
 93:   margin-bottom: 1rem;
 94: }
 95: 
 96: p {
 97:   color: var(--vp-c-text-2);
 98:   margin-bottom: 1rem;
 99: }
100: </style>
</file>

<file path=".vitepress/theme/index.ts">
 1: // .vitepress/theme/index.ts
 2: 
 3: import { h } from 'vue'
 4: import type { Theme } from 'vitepress'
 5: import DefaultTheme from 'vitepress/theme'
 6: import FileTree from '../components/FileTree.vue'
 7: import ArchitectureDiagram from '../components/ArchitectureDiagram.vue'
 8: import ApiExplorer from '../components/ApiExplorer.vue'
 9: import './custom.css'
10: 
11: export default {
12:   extends: DefaultTheme,
13:   
14:   enhanceApp({ app }) {
15:     // Register global components
16:     app.component('FileTree', FileTree)
17:     app.component('ArchitectureDiagram', ArchitectureDiagram)
18:     app.component('ApiExplorer', ApiExplorer)
19:   },
20: 
21:   Layout: () => {
22:     return h(DefaultTheme.Layout, null, {
23:       // Optional: Add custom slots here if needed
24:     })
25:   }
26: } satisfies Theme
</file>

<file path="api/index.md">
 1: # API Documentation
 2: 
 3: ## Overview
 4: 
 5: This documentation covers the FFTCG Sync Service API endpoints, authentication, and usage.
 6: 
 7: ## Authentication
 8: 
 9: To use authenticated endpoints, you'll need a Firebase Authentication token. Here's how to obtain one:
10: 
11: 1. Log in to the [Firebase Console](https://console.firebase.google.com)
12: 2. Navigate to Project Settings
13: 3. Go to Service Accounts
14: 4. Click "Generate New Private Key"
15: 5. Use the key to generate a token:
16: 
17: ```bash
18: # Install Firebase CLI if you haven't already
19: npm install -g firebase-tools
20: 
21: # Login to Firebase
22: firebase login
23: 
24: # Get a token
25: firebase auth:token
26: ```
27: 
28: ## Making Authenticated Requests
29: 
30: Include the token in your API requests:
31: 
32: ```bash
33: curl -H "Authorization: Bearer YOUR_FIREBASE_TOKEN" https://us-central1-fftcg-sync-service.cloudfunctions.net/api/endpoint
34: ```
35: 
36: ## API Explorer
37: 
38: Use the interactive API explorer below to test endpoints. For authenticated endpoints, you'll need to add your Firebase token in the Headers section.
39: 
40: ::: tip
41: Log in to the Firebase Console first to ensure your token has the necessary permissions.
42: :::
43: 
44: <ApiExplorer />
45: 
46: ## Rate Limits
47: 
48: - 100 requests per minute for authenticated endpoints
49: - 25 requests per minute for unauthenticated endpoints
50: - Batch operations limited to 500 items
51: 
52: ## Response Codes
53: 
54: | Code | Description |
55: |------|-------------|
56: | 200  | Success |
57: | 400  | Bad Request |
58: | 401  | Unauthorized |
59: | 403  | Forbidden |
60: | 429  | Too Many Requests |
61: | 500  | Server Error |
62: 
63: ## Support
64: 
65: For API support or issues:
66: 
67: - Open an issue on GitHub
68: - Contact the development team
69: - Check the troubleshooting guide
</file>

<file path="architecture.md">
  1: # System Architecture
  2: 
  3: ## Overview
  4: 
  5: FFTCG Sync Service is built on Firebase Cloud Functions with a microservices architecture, designed to synchronize card data, prices, and images from TCGplayer while maintaining high performance and reliability.
  6: 
  7: ## System Diagram
  8: 
  9: The diagram below shows the key components and their interactions:
 10: 
 11: <ArchitectureDiagram :zoom="1" :showLabels="true" />
 12: 
 13: ## Core Components
 14: 
 15: ### Cloud Functions
 16: 
 17: ```mermaid
 18: graph TD
 19:     A[Scheduled Triggers] -->|Daily| B[Sync Functions]
 20:     C[HTTP Triggers] -->|Manual| B
 21:     B --> D[Card Sync]
 22:     B --> E[Price Sync]
 23:     B --> F[Image Processing]
 24: ```
 25: 
 26: #### Functions Structure
 27: 
 28: - `scheduledCardSync` - Daily card data synchronization
 29: - `scheduledPriceSync` - Daily price updates
 30: - `testCardSync` - Test endpoint for card sync
 31: - `testPriceSync` - Test endpoint for price sync
 32: - `manualCardSync` - Manual trigger for full sync
 33: - `manualPriceSync` - Manual trigger for price sync
 34: - `healthCheck` - System health monitoring
 35: 
 36: ### Storage Systems
 37: 
 38: ```mermaid
 39: graph LR
 40:     A[Cloud Functions] --> B[Firestore]
 41:     A --> C[Cloud Storage]
 42:     B --> D[(Cards Collection)]
 43:     B --> E[(Prices Collection)]
 44:     B --> F[(Sync Metadata)]
 45:     C --> G[Card Images]
 46: ```
 47: 
 48: #### Database Collections
 49: 
 50: - `cards` - Card information and metadata
 51: - `prices` - Current and historical price data
 52: - `syncMetadata` - Sync operation logs and status
 53: - `logs` - System logs and operations history
 54: - `cardHashes` - Change detection hashes
 55: - `priceHashes` - Price update tracking
 56: - `imageMetadata` - Image processing metadata
 57: 
 58: ### Processing Pipeline
 59: 
 60: ```mermaid
 61: graph TD
 62:     A[Data Source] -->|Fetch| B[Raw Data]
 63:     B -->|Validate| C[Validation Layer]
 64:     C -->|Process| D[Processing Layer]
 65:     D -->|Store| E[Storage Layer]
 66:     D -->|Cache| F[Cache Layer]
 67: ```
 68: 
 69: #### Pipeline Components
 70: 
 71: - Data Fetching
 72: - Validation & Sanitization
 73: - Processing & Transformation
 74: - Storage Management
 75: - Cache Management
 76: 
 77: ## Service Integration
 78: 
 79: ### External Services
 80: 
 81: ```mermaid
 82: graph LR
 83:     A[FFTCG Sync Service] -->|Cards Data| B[TCGplayer API]
 84:     A -->|Prices| B
 85:     A -->|Images| C[TCGplayer CDN]
 86:     A --> D[Firebase Services]
 87: ```
 88: 
 89: ### Internal Services Communication
 90: 
 91: ```mermaid
 92: graph TD
 93:     A[Sync Controller] --> B[Card Service]
 94:     A --> C[Price Service]
 95:     A --> D[Image Service]
 96:     B --> E[Storage Service]
 97:     C --> E
 98:     D --> E
 99: ```
100: 
101: ## Data Flow
102: 
103: ### Synchronization Flow
104: 
105: ```mermaid
106: sequenceDiagram
107:     participant T as Trigger
108:     participant S as Sync Service
109:     participant E as External API
110:     participant D as Database
111:     participant C as Cache
112:    
113:     T->>S: Initiate Sync
114:     S->>C: Check Cache
115:     S->>E: Fetch Updates
116:     E->>S: Return Data
117:     S->>D: Store Updates
118:     S->>C: Update Cache
119: ```
120: 
121: ## Error Handling
122: 
123: ### Recovery System
124: 
125: ```mermaid
126: graph TD
127:     A[Error Detection] -->|Classify| B[Error Types]
128:     B -->|Transient| C[Retry Logic]
129:     B -->|Permanent| D[Failure Handling]
130:     C -->|Success| E[Continue Processing]
131:     C -->|Max Retries| D
132:     D --> F[Error Logging]
133:     D --> G[Fallback Mechanism]
134: ```
135: 
136: ## Performance Optimization
137: 
138: ### Caching Strategy
139: 
140: ```mermaid
141: graph LR
142:     A[Request] --> B{Cache Check}
143:     B -->|Hit| C[Return Cached]
144:     B -->|Miss| D[Fetch Fresh]
145:     D --> E[Process]
146:     E --> F[Update Cache]
147:     F --> G[Return Fresh]
148: ```
149: 
150: ## Security Architecture
151: 
152: ### Access Control
153: 
154: ```mermaid
155: graph TD
156:     A[Request] --> B{Authentication}
157:     B -->|Valid| C{Authorization}
158:     B -->|Invalid| D[Reject]
159:     C -->|Allowed| E[Process]
160:     C -->|Denied| D
161: ```
162: 
163: ## Monitoring System
164: 
165: ### Observability
166: 
167: ```mermaid
168: graph TD
169:     A[Operations] --> B[Logging]
170:     A --> C[Metrics]
171:     A --> D[Traces]
172:     B --> E[Analysis]
173:     C --> E
174:     D --> E
175: ```
176: 
177: ## Resource Management
178: 
179: ### Scaling Strategy
180: 
181: ```mermaid
182: graph TD
183:     A[Load Monitor] -->|Triggers| B[Scaling Decision]
184:     B -->|Up| C[Increase Resources]
185:     B -->|Down| D[Decrease Resources]
186:     C --> E[Update Configuration]
187:     D --> E
188: ```
189: 
190: ## Configuration Management
191: 
192: ### Environment Setup
193: 
194: ```mermaid
195: graph LR
196:     A[Configuration] --> B[Development]
197:     A --> C[Staging]
198:     A --> D[Production]
199:     B --> E[Firebase Project]
200:     C --> E
201:     D --> E
202: ```
203: 
204: ## Best Practices
205: 
206: ### Development Workflow
207: 
208: ```mermaid
209: graph LR
210:     A[Development] -->|Test| B[Staging]
211:     B -->|Validate| C[Production]
212:     C -->|Monitor| D[Maintenance]
213:     D -->|Update| A
214: ```
215: 
216: ## System Requirements
217: 
218: ### Infrastructure
219: 
220: - Node.js 18+
221: - Firebase Admin SDK
222: - Cloud Functions
223: - Firestore
224: - Cloud Storage
225: - Memory: 1GB minimum
226: - Timeout: 540s maximum
227: 
228: ### Dependencies
229: 
230: - Firebase Functions
231: - Firebase Admin
232: - Axios for HTTP requests
233: - Sharp for image processing
234: - LRU Cache for caching
235: - TypeScript for development
236: 
237: ## Deployment Architecture
238: 
239: ### CI/CD Pipeline
240: 
241: ```mermaid
242: graph LR
243:     A[Code Push] -->|Build| B[Tests]
244:     B -->|Pass| C[Deploy]
245:     C -->|Success| D[Monitor]
246:     D -->|Issues| E[Rollback]
247: ```
248: 
249: ## Additional Resources
250: 
251: - [Installation Guide](/setup/installation)
252: - [Configuration Guide](/setup/configuration)
253: - [API Documentation](/api/)
254: - [Troubleshooting Guide](/troubleshooting)
</file>

<file path="codebase.xml">
    1: This file is a merged representation of the entire codebase, combining all repository files into a single document.
    2: Generated by Repomix on: 2024-11-22T15:59:05.801Z
    3: 
    4: <file_summary>
    5: This section contains a summary of this file.
    6: 
    7: <purpose>
    8: This file contains a packed representation of the entire repository's contents.
    9: It is designed to be easily consumable by AI systems for analysis, code review,
   10: or other automated processes.
   11: </purpose>
   12: 
   13: <file_format>
   14: The content is organized as follows:
   15: 1. This summary section
   16: 2. Repository information
   17: 3. Repository structure
   18: 4. Repository files, each consisting of:
   19:   - File path as an attribute
   20:   - Full contents of the file
   21: </file_format>
   22: 
   23: <usage_guidelines>
   24: - This file should be treated as read-only. Any changes should be made to the
   25:   original repository files, not this packed version.
   26: - When processing this file, use the file path to distinguish
   27:   between different files in the repository.
   28: - Be aware that this file may contain sensitive information. Handle it with
   29:   the same level of security as you would the original repository.
   30: </usage_guidelines>
   31: 
   32: <notes>
   33: - Some files may have been excluded based on .gitignore rules and Repomix's
   34:   configuration.
   35: - Binary files are not included in this packed representation. Please refer to
   36:   the Repository Structure section for a complete list of file paths, including
   37:   binary files.
   38: 
   39: - Line numbers have been added to the beginning of each line.
   40: </notes>
   41: 
   42: <additional_info>
   43: 
   44: For more information about Repomix, visit: https://github.com/yamadashy/repomix
   45: </additional_info>
   46: 
   47: </file_summary>
   48: 
   49: <repository_structure>
   50: .markdownlint.json
   51: .vitepress/components/ApiExplorer.vue
   52: .vitepress/components/ArchitectureDiagram.vue
   53: .vitepress/components/FileTree.vue
   54: .vitepress/config.mts
   55: .vitepress/shims-vue.d.ts
   56: .vitepress/theme/custom.css
   57: .vitepress/theme/FirebaseAuth.vue
   58: .vitepress/theme/index.ts
   59: api/index.md
   60: architecture.md
   61: codebase.xml
   62: faq.md
   63: index.md
   64: introduction.md
   65: package.json
   66: performance.md
   67: security.md
   68: services/card-sync.md
   69: services/price-sync.md
   70: setup/configuration.md
   71: setup/installation.md
   72: troubleshooting.md
   73: usage-guide.md
   74: utils/batch.md
   75: utils/cache.md
   76: utils/error-handling.md
   77: utils/image-compressor.md
   78: utils/image-handler.md
   79: utils/image-validator.md
   80: utils/logging.md
   81: utils/progress.md
   82: utils/request.md
   83: utils/sync-logger.md
   84: </repository_structure>
   85: 
   86: <repository_files>
   87: This section contains the contents of the repository's files.
   88: 
   89: <file path=".markdownlint.json">
   90:  1: {
   91:  2:     "MD033": {
   92:  3:       "allowed_elements": [
   93:  4:         "ApiExplorer",
   94:  5:         "ArchitectureDiagram",
   95:  6:         "FileTree",
   96:  7:         "div",
   97:  8:         "span",
   98:  9:         "template",
   99: 10:         "script",
  100: 11:         "style"
  101: 12:       ]
  102: 13:     }
  103: 14:   }
  104: </file>
  105: 
  106: <file path=".vitepress/components/ApiExplorer.vue">
  107:    1: <script setup lang="ts">
  108:    2: import { ref, computed, watch, onMounted } from 'vue'
  109:    3: import { useDateFormat, useLocalStorage } from '@vueuse/core'
  110:    4: 
  111:    5: interface ApiEndpoint {
  112:    6:   name: string
  113:    7:   method: 'GET' | 'POST' | 'PUT' | 'DELETE'
  114:    8:   path: string
  115:    9:   description: string
  116:   10:   params?: Parameter[]
  117:   11:   responses: ApiResponse[]
  118:   12:   example?: {
  119:   13:     request?: string
  120:   14:     response?: string
  121:   15:   }
  122:   16:   authenticated: boolean
  123:   17:   tags?: string[]
  124:   18: }
  125:   19: 
  126:   20: interface Parameter {
  127:   21:   name: string
  128:   22:   type: string
  129:   23:   required: boolean
  130:   24:   description: string
  131:   25:   default?: string
  132:   26:   validation?: {
  133:   27:     pattern?: string
  134:   28:     min?: number
  135:   29:     max?: number
  136:   30:   }
  137:   31: }
  138:   32: 
  139:   33: interface ApiResponse {
  140:   34:   status: number
  141:   35:   description: string
  142:   36:   schema: string
  143:   37: }
  144:   38: 
  145:   39: interface ResponseState {
  146:   40:   loading: boolean
  147:   41:   data: any
  148:   42:   error: string | null
  149:   43:   headers: Record<string, string>
  150:   44:   status: number
  151:   45:   timestamp: number
  152:   46: }
  153:   47: 
  154:   48: interface RequestHeader {
  155:   49:   key: string
  156:   50:   value: string
  157:   51:   enabled: boolean
  158:   52: }
  159:   53: 
  160:   54: interface HistoryEntry {
  161:   55:   id: string
  162:   56:   endpoint: string
  163:   57:   method: string
  164:   58:   params: Record<string, any>
  165:   59:   headers: RequestHeader[]
  166:   60:   timestamp: number
  167:   61:   status: number
  168:   62:   success: boolean
  169:   63: }
  170:   64: 
  171:   65: const endpoints: ApiEndpoint[] = [
  172:   66:   {
  173:   67:     name: 'List Cards',
  174:   68:     method: 'GET',
  175:   69:     path: '/api/cards',
  176:   70:     description: 'Retrieve a list of all cards with optional filtering',
  177:   71:     authenticated: false,
  178:   72:     tags: ['cards'],
  179:   73:     params: [
  180:   74:       {
  181:   75:         name: 'groupId',
  182:   76:         type: 'string',
  183:   77:         required: false,
  184:   78:         description: 'Filter by specific group ID'
  185:   79:       },
  186:   80:       {
  187:   81:         name: 'limit',
  188:   82:         type: 'number',
  189:   83:         required: false,
  190:   84:         description: 'Maximum number of cards to return',
  191:   85:         default: '50'
  192:   86:       },
  193:   87:       {
  194:   88:         name: 'offset',
  195:   89:         type: 'number',
  196:   90:         required: false,
  197:   91:         description: 'Number of cards to skip',
  198:   92:         default: '0'
  199:   93:       }
  200:   94:     ],
  201:   95:     responses: [
  202:   96:       {
  203:   97:         status: 200,
  204:   98:         description: 'List of cards retrieved successfully',
  205:   99:         schema: `{
  206:  100:   "cards": [
  207:  101:     {
  208:  102:       "id": "string",
  209:  103:       "name": "string",
  210:  104:       "groupId": "string",
  211:  105:       "imageUrl": "string",
  212:  106:       "prices": {
  213:  107:         "normal": "number",
  214:  108:         "foil": "number"
  215:  109:       }
  216:  110:     }
  217:  111:   ],
  218:  112:   "total": "number",
  219:  113:   "limit": "number",
  220:  114:   "offset": "number"
  221:  115: }`
  222:  116:       }
  223:  117:     ]
  224:  118:   },
  225:  119:   {
  226:  120:     name: 'Get Card Details',
  227:  121:     method: 'GET',
  228:  122:     path: '/api/cards/{id}',
  229:  123:     description: 'Retrieve detailed information about a specific card',
  230:  124:     authenticated: false,
  231:  125:     tags: ['cards'],
  232:  126:     params: [
  233:  127:       {
  234:  128:         name: 'id',
  235:  129:         type: 'string',
  236:  130:         required: true,
  237:  131:         description: 'Card ID'
  238:  132:       }
  239:  133:     ],
  240:  134:     responses: [
  241:  135:       {
  242:  136:         status: 200,
  243:  137:         description: 'Card details retrieved successfully',
  244:  138:         schema: `{
  245:  139:   "id": "string",
  246:  140:   "name": "string",
  247:  141:   "groupId": "string",
  248:  142:   "imageUrl": "string",
  249:  143:   "prices": {
  250:  144:     "normal": "number",
  251:  145:     "foil": "number"
  252:  146:   },
  253:  147:   "priceHistory": [
  254:  148:     {
  255:  149:       "date": "string",
  256:  150:       "normal": "number",
  257:  151:       "foil": "number"
  258:  152:     }
  259:  153:   ]
  260:  154: }`
  261:  155:       }
  262:  156:     ]
  263:  157:   },
  264:  158:   {
  265:  159:     name: 'Trigger Card Sync',
  266:  160:     method: 'POST',
  267:  161:     path: '/api/sync/cards',
  268:  162:     description: 'Manually trigger card synchronization',
  269:  163:     authenticated: true,
  270:  164:     tags: ['sync'],
  271:  165:     params: [
  272:  166:       {
  273:  167:         name: 'dryRun',
  274:  168:         type: 'boolean',
  275:  169:         required: false,
  276:  170:         description: 'Run sync without making changes',
  277:  171:         default: 'false'
  278:  172:       },
  279:  173:       {
  280:  174:         name: 'groupId',
  281:  175:         type: 'string',
  282:  176:         required: false,
  283:  177:         description: 'Sync specific group only'
  284:  178:       }
  285:  179:     ],
  286:  180:     responses: [
  287:  181:       {
  288:  182:         status: 200,
  289:  183:         description: 'Sync initiated successfully',
  290:  184:         schema: `{
  291:  185:   "jobId": "string",
  292:  186:   "status": "string",
  293:  187:   "message": "string"
  294:  188: }`
  295:  189:       }
  296:  190:     ]
  297:  191:   },
  298:  192:   {
  299:  193:     name: 'Trigger Price Sync',
  300:  194:     method: 'POST',
  301:  195:     path: '/api/sync/prices',
  302:  196:     description: 'Manually trigger price synchronization',
  303:  197:     authenticated: true,
  304:  198:     tags: ['sync'],
  305:  199:     params: [
  306:  200:       {
  307:  201:         name: 'dryRun',
  308:  202:         type: 'boolean',
  309:  203:         required: false,
  310:  204:         description: 'Run sync without making changes',
  311:  205:         default: 'false'
  312:  206:       }
  313:  207:     ],
  314:  208:     responses: [
  315:  209:       {
  316:  210:         status: 200,
  317:  211:         description: 'Price sync initiated successfully',
  318:  212:         schema: `{
  319:  213:   "jobId": "string",
  320:  214:   "status": "string",
  321:  215:   "message": "string"
  322:  216: }`
  323:  217:       }
  324:  218:     ]
  325:  219:   },
  326:  220:   {
  327:  221:     name: 'Get Sync Status',
  328:  222:     method: 'GET',
  329:  223:     path: '/api/sync/status/{jobId}',
  330:  224:     description: 'Check the status of a sync operation',
  331:  225:     authenticated: true,
  332:  226:     tags: ['sync'],
  333:  227:     params: [
  334:  228:       {
  335:  229:         name: 'jobId',
  336:  230:         type: 'string',
  337:  231:         required: true,
  338:  232:         description: 'Sync job ID'
  339:  233:       }
  340:  234:     ],
  341:  235:     responses: [
  342:  236:       {
  343:  237:         status: 200,
  344:  238:         description: 'Sync status retrieved successfully',
  345:  239:         schema: `{
  346:  240:   "jobId": "string",
  347:  241:   "status": "string",
  348:  242:   "progress": "number",
  349:  243:   "details": {
  350:  244:     "processed": "number",
  351:  245:     "total": "number",
  352:  246:     "errors": "number"
  353:  247:   }
  354:  248: }`
  355:  249:       }
  356:  250:     ]
  357:  251:   }
  358:  252: ]
  359:  253: 
  360:  254: const BASE_URL = 'https://us-central1-fftcg-sync-service.cloudfunctions.net'
  361:  255: const selectedEndpoint = ref<ApiEndpoint>(endpoints[0])
  362:  256: const showResponse = ref(true)
  363:  257: const showHeaders = ref(false)
  364:  258: const showHistory = ref(false)
  365:  259: const showResponseHeaders = ref(false)
  366:  260: const customHeaders = ref<RequestHeader[]>([
  367:  261:   { key: 'Accept', value: 'application/json', enabled: true }
  368:  262: ])
  369:  263: const history = ref<HistoryEntry[]>([])
  370:  264: const selectedTags = ref<string[]>([])
  371:  265: const showAuthenticated = ref(true)
  372:  266: const searchQuery = ref('')
  373:  267: 
  374:  268: // Response state
  375:  269: const responseState = ref<ResponseState>({
  376:  270:   loading: false,
  377:  271:   data: null,
  378:  272:   error: null,
  379:  273:   headers: {},
  380:  274:   status: 0,
  381:  275:   timestamp: 0
  382:  276: })
  383:  277: 
  384:  278: const paramValues = ref<Record<string, any>>({})
  385:  279: 
  386:  280: // Computed properties
  387:  281: const methodColor = computed(() => {
  388:  282:   switch (selectedEndpoint.value.method) {
  389:  283:     case 'GET': return 'var(--vp-c-green)'
  390:  284:     case 'POST': return 'var(--vp-c-brand)'
  391:  285:     case 'PUT': return 'var(--vp-c-yellow)'
  392:  286:     case 'DELETE': return 'var(--vp-c-red)'
  393:  287:     default: return 'var(--vp-c-text-1)'
  394:  288:   }
  395:  289: })
  396:  290: 
  397:  291: const filteredEndpoints = computed(() => {
  398:  292:   return endpoints.filter(endpoint => {
  399:  293:     const matchesSearch = endpoint.name.toLowerCase().includes(searchQuery.value.toLowerCase()) ||
  400:  294:                          endpoint.path.toLowerCase().includes(searchQuery.value.toLowerCase())
  401:  295:     const matchesTags = selectedTags.value.length === 0 || 
  402:  296:                        endpoint.tags?.some(tag => selectedTags.value.includes(tag))
  403:  297:     const matchesAuth = showAuthenticated.value || !endpoint.authenticated
  404:  298:     
  405:  299:     return matchesSearch && matchesTags && matchesAuth
  406:  300:   })
  407:  301: })
  408:  302: 
  409:  303: const formattedDate = computed(() => {
  410:  304:   return (timestamp: number) => {
  411:  305:     return new Date(timestamp).toLocaleString()
  412:  306:   }
  413:  307: })
  414:  308: 
  415:  309: // Lifecycle hooks
  416:  310: onMounted(() => {
  417:  311:   const savedHistory = localStorage.getItem('api-explorer-history')
  418:  312:   if (savedHistory) {
  419:  313:     history.value = JSON.parse(savedHistory)
  420:  314:   }
  421:  315:   
  422:  316:   initParamValues(selectedEndpoint.value)
  423:  317: })
  424:  318: 
  425:  319: // Methods
  426:  320: function initParamValues(endpoint: ApiEndpoint) {
  427:  321:   const values: Record<string, any> = {}
  428:  322:   endpoint.params?.forEach(param => {
  429:  323:     values[param.name] = param.default || ''
  430:  324:   })
  431:  325:   paramValues.value = values
  432:  326: }
  433:  327: 
  434:  328: function addHeader() {
  435:  329:   customHeaders.value.push({ key: '', value: '', enabled: true })
  436:  330: }
  437:  331: 
  438:  332: function removeHeader(index: number) {
  439:  333:   customHeaders.value.splice(index, 1)
  440:  334: }
  441:  335: 
  442:  336: function getEnabledHeaders(): Record<string, string> {
  443:  337:   return customHeaders.value
  444:  338:     .filter(h => h.enabled && h.key.trim() !== '')
  445:  339:     .reduce((acc, h) => ({ ...acc, [h.key]: h.value }), {})
  446:  340: }
  447:  341: 
  448:  342: async function copyToClipboard(text: string) {
  449:  343:   try {
  450:  344:     await navigator.clipboard.writeText(text)
  451:  345:     // Show success message
  452:  346:   } catch (err) {
  453:  347:     // Show error message
  454:  348:   }
  455:  349: }
  456:  350: 
  457:  351: function saveAsJson(data: any, filename: string) {
  458:  352:   const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' })
  459:  353:   const url = URL.createObjectURL(blob)
  460:  354:   const link = document.createElement('a')
  461:  355:   link.href = url
  462:  356:   link.download = filename
  463:  357:   document.body.appendChild(link)
  464:  358:   link.click()
  465:  359:   document.body.removeChild(link)
  466:  360:   URL.revokeObjectURL(url)
  467:  361: }
  468:  362: 
  469:  363: function addToHistory(entry: Omit<HistoryEntry, 'id'>) {
  470:  364:   const newEntry: HistoryEntry = {
  471:  365:     ...entry,
  472:  366:     id: crypto.randomUUID()
  473:  367:   }
  474:  368:   history.value.unshift(newEntry)
  475:  369:   if (history.value.length > 50) {
  476:  370:     history.value.pop()
  477:  371:   }
  478:  372:   localStorage.setItem('api-explorer-history', JSON.stringify(history.value))
  479:  373: }
  480:  374: 
  481:  375: async function replayRequest(historyEntry: HistoryEntry) {
  482:  376:   paramValues.value = { ...historyEntry.params }
  483:  377:   customHeaders.value = [...historyEntry.headers]
  484:  378:   const endpoint = endpoints.find(e => e.path === historyEntry.endpoint)
  485:  379:   if (endpoint) {
  486:  380:     selectedEndpoint.value = endpoint
  487:  381:     await tryEndpoint(endpoint)
  488:  382:   }
  489:  383: }
  490:  384: 
  491:  385: async function tryEndpoint(endpoint: ApiEndpoint) {
  492:  386:   responseState.value = {
  493:  387:     loading: true,
  494:  388:     data: null,
  495:  389:     error: null,
  496:  390:     headers: {},
  497:  391:     status: 0,
  498:  392:     timestamp: Date.now()
  499:  393:   }
  500:  394: 
  501:  395:   try {
  502:  396:     if (endpoint.authenticated && !getAuthToken()) {
  503:  397:       throw new Error('Authentication required for this endpoint')
  504:  398:     }
  505:  399: 
  506:  400:     const url = new URL(`${BASE_URL}${endpoint.path}`)
  507:  401:     if (endpoint.params) {
  508:  402:       Object.entries(paramValues.value).forEach(([key, value]) => {
  509:  403:         if (value !== '') {
  510:  404:           url.searchParams.append(key, value.toString())
  511:  405:         }
  512:  406:       })
  513:  407:     }
  514:  408: 
  515:  409:     const headers = getEnabledHeaders()
  516:  410:     const response = await fetch(url.toString(), {
  517:  411:       method: endpoint.method,
  518:  412:       headers
  519:  413:     })
  520:  414: 
  521:  415:     const responseHeaders: Record<string, string> = {}
  522:  416:     response.headers.forEach((value, key) => {
  523:  417:       responseHeaders[key] = value
  524:  418:     })
  525:  419: 
  526:  420:     const data = await response.json()
  527:  421: 
  528:  422:     if (!response.ok) {
  529:  423:       throw new Error(data.error || 'An error occurred')
  530:  424:     }
  531:  425: 
  532:  426:     responseState.value = {
  533:  427:       loading: false,
  534:  428:       data,
  535:  429:       error: null,
  536:  430:       headers: responseHeaders,
  537:  431:       status: response.status,
  538:  432:       timestamp: Date.now()
  539:  433:     }
  540:  434: 
  541:  435:     addToHistory({
  542:  436:       endpoint: endpoint.path,
  543:  437:       method: endpoint.method,
  544:  438:       params: { ...paramValues.value },
  545:  439:       headers: [...customHeaders.value],
  546:  440:       timestamp: Date.now(),
  547:  441:       status: response.status,
  548:  442:       success: true
  549:  443:     })
  550:  444: 
  551:  445:   } catch (error) {
  552:  446:     responseState.value = {
  553:  447:       ...responseState.value,
  554:  448:       loading: false,
  555:  449:       error: error instanceof Error ? error.message : 'An error occurred',
  556:  450:       status: error instanceof Error && error.message.includes('Authentication') ? 401 : 500
  557:  451:     }
  558:  452: 
  559:  453:     addToHistory({
  560:  454:       endpoint: endpoint.path,
  561:  455:       method: endpoint.method,
  562:  456:       params: { ...paramValues.value },
  563:  457:       headers: [...customHeaders.value],
  564:  458:       timestamp: Date.now(),
  565:  459:       status: responseState.value.status,
  566:  460:       success: false
  567:  461:     })
  568:  462:   }
  569:  463: }
  570:  464: 
  571:  465: function getAuthToken(): string | null {
  572:  466:   // Implement based on your auth system
  573:  467:   return null
  574:  468: }
  575:  469: 
  576:  470: // Watch for endpoint changes
  577:  471: watch(selectedEndpoint, (newEndpoint) => {
  578:  472:   initParamValues(newEndpoint)
  579:  473:   responseState.value = {
  580:  474:     loading: false,
  581:  475:     data: null,
  582:  476:     error: null,
  583:  477:     headers: {},
  584:  478:     status: 0,
  585:  479:     timestamp: 0
  586:  480:   }
  587:  481: })
  588:  482: </script>
  589:  483: 
  590:  484: <template>
  591:  485:   <div class="api-explorer">
  592:  486:     <div class="sidebar">
  593:  487:       <!-- Search and Filter Section -->
  594:  488:       <div class="search-section">
  595:  489:         <input
  596:  490:           v-model="searchQuery"
  597:  491:           type="text"
  598:  492:           placeholder="Search endpoints..."
  599:  493:           class="search-input"
  600:  494:         />
  601:  495:         <div class="filter-options">
  602:  496:           <div class="tags">
  603:  497:             <button
  604:  498:               v-for="tag in ['cards', 'sync']"
  605:  499:               :key="tag"
  606:  500:               class="tag-button"
  607:  501:               :class="{ active: selectedTags.includes(tag) }"
  608:  502:               @click="selectedTags = selectedTags.includes(tag) 
  609:  503:                 ? selectedTags.filter(t => t !== tag)
  610:  504:                 : [...selectedTags, tag]"
  611:  505:             >
  612:  506:               {{ tag }}
  613:  507:             </button>
  614:  508:           </div>
  615:  509:           <label class="auth-toggle">
  616:  510:             <input
  617:  511:               type="checkbox"
  618:  512:               v-model="showAuthenticated"
  619:  513:             >
  620:  514:             Show authenticated
  621:  515:           </label>
  622:  516:         </div>
  623:  517:       </div>
  624:  518: 
  625:  519:       <!-- Endpoint List -->
  626:  520:       <div class="endpoint-list">
  627:  521:         <div
  628:  522:           v-for="endpoint in filteredEndpoints"
  629:  523:           :key="endpoint.path"
  630:  524:           class="endpoint-item"
  631:  525:           :class="{ 
  632:  526:             active: endpoint === selectedEndpoint,
  633:  527:             authenticated: endpoint.authenticated
  634:  528:           }"
  635:  529:           @click="selectedEndpoint = endpoint"
  636:  530:         >
  637:  531:           <div class="endpoint-item-header">
  638:  532:             <span class="method" :style="{ color: methodColor }">
  639:  533:               {{ endpoint.method }}
  640:  534:             </span>
  641:  535:             <span class="name">{{ endpoint.name }}</span>
  642:  536:           </div>
  643:  537:           <div class="endpoint-path">{{ endpoint.path }}</div>
  644:  538:         </div>
  645:  539:       </div>
  646:  540: 
  647:  541:       <!-- History Section -->
  648:  542:       <div class="history-section">
  649:  543:         <div class="history-toggle" @click="showHistory = !showHistory">
  650:  544:           <span>History</span>
  651:  545:           <span class="toggle-icon">{{ showHistory ? '▼' : '▶' }}</span>
  652:  546:         </div>
  653:  547: 
  654:  548:         <div v-if="showHistory" class="history-panel">
  655:  549:           <div
  656:  550:             v-for="entry in history"
  657:  551:             :key="entry.id"
  658:  552:             class="history-entry"
  659:  553:             :class="{ 
  660:  554:               'history-success': entry.success,
  661:  555:               'history-error': !entry.success
  662:  556:             }"
  663:  557:             @click="replayRequest(entry)"
  664:  558:           >
  665:  559:             <div class="history-entry-header">
  666:  560:               <span class="history-method">{{ entry.method }}</span>
  667:  561:               <span 
  668:  562:                 class="history-status"
  669:  563:                 :class="{ 
  670:  564:                   'status-success': entry.status < 400,
  671:  565:                   'status-error': entry.status >= 400
  672:  566:                 }"
  673:  567:               >
  674:  568:                 {{ entry.status }}
  675:  569:               </span>
  676:  570:             </div>
  677:  571:             <div class="history-endpoint">{{ entry.endpoint }}</div>
  678:  572:             <div class="history-timestamp">
  679:  573:               {{ formattedDate(entry.timestamp) }}
  680:  574:             </div>
  681:  575:           </div>
  682:  576:         </div>
  683:  577:       </div>
  684:  578:     </div>
  685:  579: 
  686:  580:     <div class="content">
  687:  581:       <!-- Endpoint Details -->
  688:  582:       <div class="endpoint-header">
  689:  583:         <div class="endpoint-title">
  690:  584:           <h3>{{ selectedEndpoint.name }}</h3>
  691:  585:           <span 
  692:  586:             v-if="selectedEndpoint.authenticated"
  693:  587:             class="auth-badge"
  694:  588:             title="Requires authentication"
  695:  589:           >
  696:  590:             🔒
  697:  591:           </span>
  698:  592:         </div>
  699:  593:         <div class="endpoint-path">
  700:  594:           <span class="method" :style="{ color: methodColor }">
  701:  595:             {{ selectedEndpoint.method }}
  702:  596:           </span>
  703:  597:           <code>{{ selectedEndpoint.path }}</code>
  704:  598:         </div>
  705:  599:       </div>
  706:  600: 
  707:  601:       <div class="description">
  708:  602:         {{ selectedEndpoint.description }}
  709:  603:       </div>
  710:  604: 
  711:  605:       <!-- Tags -->
  712:  606:       <div v-if="selectedEndpoint.tags?.length" class="endpoint-tags">
  713:  607:         <span 
  714:  608:           v-for="tag in selectedEndpoint.tags"
  715:  609:           :key="tag"
  716:  610:           class="tag"
  717:  611:         >
  718:  612:           {{ tag }}
  719:  613:         </span>
  720:  614:       </div>
  721:  615: 
  722:  616:       <!-- Headers Section -->
  723:  617:       <div class="headers-section">
  724:  618:         <div class="section-header" @click="showHeaders = !showHeaders">
  725:  619:           <h4>Headers</h4>
  726:  620:           <span class="toggle-icon">{{ showHeaders ? '▼' : '▶' }}</span>
  727:  621:         </div>
  728:  622:         <div v-if="showHeaders" class="headers-content">
  729:  623:           <div
  730:  624:             v-for="(header, index) in customHeaders"
  731:  625:             :key="index"
  732:  626:             class="header-input"
  733:  627:           >
  734:  628:             <input
  735:  629:               v-model="header.key"
  736:  630:               placeholder="Header name"
  737:  631:               class="header-key"
  738:  632:             />
  739:  633:             <input
  740:  634:               v-model="header.value"
  741:  635:               placeholder="Header value"
  742:  636:               class="header-value"
  743:  637:             />
  744:  638:             <label class="header-enabled">
  745:  639:               <input type="checkbox" v-model="header.enabled" />
  746:  640:               Enable
  747:  641:             </label>
  748:  642:             <button
  749:  643:               class="remove-header"
  750:  644:               @click="removeHeader(index)"
  751:  645:             >
  752:  646:               ✕
  753:  647:             </button>
  754:  648:           </div>
  755:  649:           <button class="add-header" @click="addHeader">
  756:  650:             Add Header
  757:  651:           </button>
  758:  652:         </div>
  759:  653:       </div>
  760:  654: 
  761:  655:       <!-- Parameters Section -->
  762:  656:       <template v-if="selectedEndpoint.params?.length">
  763:  657:         <h4>Parameters</h4>
  764:  658:         <div class="params-form">
  765:  659:           <div
  766:  660:             v-for="param in selectedEndpoint.params"
  767:  661:             :key="param.name"
  768:  662:             class="param-input"
  769:  663:           >
  770:  664:             <label :for="param.name">
  771:  665:               {{ param.name }}
  772:  666:               <span v-if="param.required" class="required">*</span>
  773:  667:             </label>
  774:  668:             <input
  775:  669:               :id="param.name"
  776:  670:               v-model="paramValues[param.name]"
  777:  671:               :type="param.type === 'number' ? 'number' : 'text'"
  778:  672:               :placeholder="param.description"
  779:  673:               :required="param.required"
  780:  674:             />
  781:  675:           </div>
  782:  676:           <button
  783:  677:             class="try-button"
  784:  678:             @click="tryEndpoint(selectedEndpoint)"
  785:  679:             :disabled="responseState.loading"
  786:  680:           >
  787:  681:             {{ responseState.loading ? 'Loading...' : 'Try it' }}
  788:  682:           </button>
  789:  683:         </div>
  790:  684:       </template>
  791:  685: 
  792:  686:       <!-- Response Section -->
  793:  687:       <div 
  794:  688:         v-if="responseState.data || responseState.error" 
  795:  689:         class="live-response"
  796:  690:         :class="{ 'response-error': responseState.error }"
  797:  691:       >
  798:  692:         <div class="response-header">
  799:  693:           <h4>Response</h4>
  800:  694:           <div class="response-actions">
  801:  695:             <button
  802:  696:               class="action-button"
  803:  697:               @click="copyToClipboard(JSON.stringify(responseState.data, null, 2))"
  804:  698:               v-if="responseState.data"
  805:  699:             >
  806:  700:               Copy
  807:  701:             </button>
  808:  702:             <button
  809:  703:               class="action-button"
  810:  704:               @click="saveAsJson(responseState.data, `response-${Date.now()}.json`)"
  811:  705:               v-if="responseState.data"
  812:  706:             >
  813:  707:               Save
  814:  708:             </button>
  815:  709:           </div>
  816:  710:         </div>
  817:  711: 
  818:  712:         <!-- Response Status and Headers -->
  819:  713:         <div v-if="responseState.status" class="response-status">
  820:  714:           Status: {{ responseState.status }}
  821:  715:         </div>
  822:  716:        
  823:  717:         <div v-if="Object.keys(responseState.headers).length" class="response-headers">
  824:  718:           <div class="section-header" @click="showResponseHeaders = !showResponseHeaders">
  825:  719:             <span>Response Headers</span>
  826:  720:             <span class="toggle-icon">{{ showResponseHeaders ? '▼' : '▶' }}</span>
  827:  721:           </div>
  828:  722:           <div v-if="showResponseHeaders" class="headers-list">
  829:  723:             <div
  830:  724:               v-for="(value, key) in responseState.headers"
  831:  725:               :key="key"
  832:  726:               class="header-item"
  833:  727:             >
  834:  728:               <span class="header-key">{{ key }}:</span>
  835:  729:               <span class="header-value">{{ value }}</span>
  836:  730:             </div>
  837:  731:           </div>
  838:  732:         </div>
  839:  733: 
  840:  734:         <div v-if="responseState.error" class="error-message">
  841:  735:           {{ responseState.error }}
  842:  736:         </div>
  843:  737:         <pre v-else class="response-data">
  844:  738:           <code>{{ JSON.stringify(responseState.data, null, 2) }}</code>
  845:  739:         </pre>
  846:  740:       </div>
  847:  741: 
  848:  742:       <!-- Response Schema Section -->
  849:  743:       <h4>Response Schema</h4>
  850:  744:       <div
  851:  745:         v-for="response in selectedEndpoint.responses"
  852:  746:         :key="response.status"
  853:  747:         class="response-section"
  854:  748:       >
  855:  749:         <div class="response-header">
  856:  750:           <span
  857:  751:             class="status"
  858:  752:             :class="response.status < 400 ? 'success' : 'error'"
  859:  753:           >
  860:  754:             {{ response.status }}
  861:  755:           </span>
  862:  756:           <span class="description">{{ response.description }}</span>
  863:  757:         </div>
  864:  758:         <pre class="schema"><code>{{ response.schema }}</code></pre>
  865:  759:       </div>
  866:  760:     </div>
  867:  761:   </div>
  868:  762: </template>
  869:  763: 
  870:  764: <style scoped>
  871:  765: .api-explorer {
  872:  766:   display: grid;
  873:  767:   grid-template-columns: 300px 1fr;
  874:  768:   gap: 20px;
  875:  769:   background: var(--custom-api-bg);
  876:  770:   border-radius: 8px;
  877:  771:   overflow: hidden;
  878:  772:   border: 1px solid var(--vp-c-divider);
  879:  773:   height: 800px;
  880:  774: }
  881:  775: 
  882:  776: .sidebar {
  883:  777:   background: var(--vp-c-bg-soft);
  884:  778:   padding: 1rem;
  885:  779:   border-right: 1px solid var(--vp-c-divider);
  886:  780:   overflow-y: auto;
  887:  781:   display: flex;
  888:  782:   flex-direction: column;
  889:  783: }
  890:  784: 
  891:  785: .search-section {
  892:  786:   margin-bottom: 1rem;
  893:  787:   padding: 0.5rem;
  894:  788: }
  895:  789: 
  896:  790: .search-input {
  897:  791:   width: 100%;
  898:  792:   padding: 0.5rem;
  899:  793:   border: 1px solid var(--vp-c-divider);
  900:  794:   border-radius: 4px;
  901:  795:   background: var(--vp-c-bg);
  902:  796:   color: var(--vp-c-text-1);
  903:  797:   margin-bottom: 0.5rem;
  904:  798: }
  905:  799: 
  906:  800: .filter-options {
  907:  801:   display: flex;
  908:  802:   flex-direction: column;
  909:  803:   gap: 0.5rem;
  910:  804: }
  911:  805: 
  912:  806: .tags {
  913:  807:   display: flex;
  914:  808:   flex-wrap: wrap;
  915:  809:   gap: 0.25rem;
  916:  810: }
  917:  811: 
  918:  812: .tag-button {
  919:  813:   padding: 0.25rem 0.5rem;
  920:  814:   border-radius: 4px;
  921:  815:   border: 1px solid var(--vp-c-divider);
  922:  816:   background: var(--vp-c-bg);
  923:  817:   cursor: pointer;
  924:  818:   font-size: 0.8rem;
  925:  819: }
  926:  820: 
  927:  821: .tag-button.active {
  928:  822:   background: var(--vp-c-brand);
  929:  823:   color: white;
  930:  824:   border-color: var(--vp-c-brand);
  931:  825: }
  932:  826: 
  933:  827: .auth-toggle {
  934:  828:   display: flex;
  935:  829:   align-items: center;
  936:  830:   gap: 0.5rem;
  937:  831:   font-size: 0.9rem;
  938:  832: }
  939:  833: 
  940:  834: .endpoint-list {
  941:  835:   flex: 1;
  942:  836:   overflow-y: auto;
  943:  837: }
  944:  838: 
  945:  839: .endpoint-item {
  946:  840:   padding: 0.75rem;
  947:  841:   border-radius: 6px;
  948:  842:   margin-bottom: 0.5rem;
  949:  843:   cursor: pointer;
  950:  844:   transition: all 0.2s ease;
  951:  845: }
  952:  846: 
  953:  847: .endpoint-item:hover {
  954:  848:   background: var(--vp-c-bg-mute);
  955:  849: }
  956:  850: 
  957:  851: .endpoint-item.active {
  958:  852:   background: var(--vp-c-brand-dimm);
  959:  853: }
  960:  854: 
  961:  855: .endpoint-item.authenticated::after {
  962:  856:   content: "🔒";
  963:  857:   float: right;
  964:  858:   font-size: 0.8rem;
  965:  859: }
  966:  860: 
  967:  861: .endpoint-item-header {
  968:  862:   display: flex;
  969:  863:   align-items: center;
  970:  864:   gap: 0.5rem;
  971:  865:   margin-bottom: 0.25rem;
  972:  866: }
  973:  867: 
  974:  868: .endpoint-path {
  975:  869:   font-size: 0.8rem;
  976:  870:   color: var(--vp-c-text-2);
  977:  871:   word-break: break-all;
  978:  872: }
  979:  873: 
  980:  874: .history-toggle {
  981:  875:   margin-top: auto;
  982:  876:   padding: 0.75rem;
  983:  877:   cursor: pointer;
  984:  878:   display: flex;
  985:  879:   justify-content: space-between;
  986:  880:   align-items: center;
  987:  881:   background: var(--vp-c-bg-mute);
  988:  882:   border-radius: 6px;
  989:  883:   margin-top: 1rem;
  990:  884: }
  991:  885: 
  992:  886: .history-panel {
  993:  887:   margin-top: 0.5rem;
  994:  888:   border-top: 1px solid var(--vp-c-divider);
  995:  889:   padding-top: 0.5rem;
  996:  890: }
  997:  891: 
  998:  892: .history-entry {
  999:  893:   padding: 0.5rem;
 1000:  894:   border-radius: 4px;
 1001:  895:   margin-bottom: 0.5rem;
 1002:  896:   cursor: pointer;
 1003:  897:   background: var(--vp-c-bg-mute);
 1004:  898:   border: 1px solid var(--vp-c-divider);
 1005:  899:   transition: all 0.2s ease;
 1006:  900: }
 1007:  901: 
 1008:  902: .history-entry:hover {
 1009:  903:   background: var(--vp-c-bg);
 1010:  904: }
 1011:  905: 
 1012:  906: .history-entry.history-success {
 1013:  907:   border-left: 3px solid var(--vp-c-green);
 1014:  908: }
 1015:  909: 
 1016:  910: .history-entry.history-error {
 1017:  911:   border-left: 3px solid var(--vp-c-red);
 1018:  912: }
 1019:  913: 
 1020:  914: .history-entry-header {
 1021:  915:   display: flex;
 1022:  916:   justify-content: space-between;
 1023:  917:   margin-bottom: 0.25rem;
 1024:  918: }
 1025:  919: 
 1026:  920: .history-method {
 1027:  921:   font-weight: 600;
 1028:  922: }
 1029:  923: 
 1030:  924: .history-status {
 1031:  925:   font-size: 0.9em;
 1032:  926: }
 1033:  927: 
 1034:  928: .status-success {
 1035:  929:   color: var(--vp-c-green);
 1036:  930: }
 1037:  931: 
 1038:  932: .status-error {
 1039:  933:   color: var(--vp-c-red);
 1040:  934: }
 1041:  935: 
 1042:  936: .history-endpoint {
 1043:  937:   font-size: 0.9em;
 1044:  938:   margin-bottom: 0.25rem;
 1045:  939: }
 1046:  940: 
 1047:  941: .history-timestamp {
 1048:  942:   font-size: 0.8em;
 1049:  943:   color: var(--vp-c-text-2);
 1050:  944: }
 1051:  945: 
 1052:  946: .content {
 1053:  947:   padding: 1rem;
 1054:  948:   overflow-y: auto;
 1055:  949: }
 1056:  950: 
 1057:  951: .endpoint-header {
 1058:  952:   margin-bottom: 1rem;
 1059:  953: }
 1060:  954: 
 1061:  955: .endpoint-title {
 1062:  956:   display: flex;
 1063:  957:   align-items: center;
 1064:  958:   gap: 0.5rem;
 1065:  959: }
 1066:  960: 
 1067:  961: .auth-badge {
 1068:  962:   font-size: 1rem;
 1069:  963:   cursor: help;
 1070:  964: }
 1071:  965: 
 1072:  966: .endpoint-tags {
 1073:  967:   display: flex;
 1074:  968:   gap: 0.5rem;
 1075:  969:   margin: 0.5rem 0;
 1076:  970: }
 1077:  971: 
 1078:  972: .tag {
 1079:  973:   padding: 0.25rem 0.5rem;
 1080:  974:   border-radius: 4px;
 1081:  975:   background: var(--vp-c-brand-dimm);
 1082:  976:   color: var(--vp-c-brand);
 1083:  977:   font-size: 0.8rem;
 1084:  978: }
 1085:  979: 
 1086:  980: .headers-section {
 1087:  981:   margin: 1rem 0;
 1088:  982:   background: var(--vp-c-bg-soft);
 1089:  983:   border-radius: 8px;
 1090:  984:   overflow: hidden;
 1091:  985: }
 1092:  986: 
 1093:  987: .section-header {
 1094:  988:   padding: 0.75rem;
 1095:  989:   cursor: pointer;
 1096:  990:   display: flex;
 1097:  991:   justify-content: space-between;
 1098:  992:   align-items: center;
 1099:  993:   background: var(--vp-c-bg-mute);
 1100:  994: }
 1101:  995: 
 1102:  996: .headers-content {
 1103:  997:   padding: 1rem;
 1104:  998: }
 1105:  999: 
 1106: 1000: .header-input {
 1107: 1001:   display: grid;
 1108: 1002:   grid-template-columns: 1fr 1fr auto auto;
 1109: 1003:   gap: 0.5rem;
 1110: 1004:   margin-bottom: 0.5rem;
 1111: 1005:   align-items: center;
 1112: 1006: }
 1113: 1007: 
 1114: 1008: .header-key,
 1115: 1009: .header-value {
 1116: 1010:   padding: 0.5rem;
 1117: 1011:   border: 1px solid var(--vp-c-divider);
 1118: 1012:   border-radius: 4px;
 1119: 1013:   font-size: 0.9em;
 1120: 1014: }
 1121: 1015: 
 1122: 1016: .header-enabled {
 1123: 1017:   display: flex;
 1124: 1018:   align-items: center;
 1125: 1019:   gap: 0.25rem;
 1126: 1020: }
 1127: 1021: 
 1128: 1022: .remove-header {
 1129: 1023:   padding: 0.25rem 0.5rem;
 1130: 1024:   background: var(--vp-c-red);
 1131: 1025:   color: white;
 1132: 1026:   border: none;
 1133: 1027:   border-radius: 4px;
 1134: 1028:   cursor: pointer;
 1135: 1029: }
 1136: 1030: 
 1137: 1031: .add-header {
 1138: 1032:   margin-top: 0.5rem;
 1139: 1033:   padding: 0.5rem;
 1140: 1034:   background: var(--vp-c-brand);
 1141: 1035:   color: white;
 1142: 1036:   border: none;
 1143: 1037:   border-radius: 4px;
 1144: 1038:   cursor: pointer;
 1145: 1039:   width: 100%;
 1146: 1040: }
 1147: 1041: 
 1148: 1042: .params-form {
 1149: 1043:   margin: 1rem 0;
 1150: 1044: }
 1151: 1045: 
 1152: 1046: .param-input {
 1153: 1047:   margin-bottom: 1rem;
 1154: 1048: }
 1155: 1049: 
 1156: 1050: .param-input label {
 1157: 1051:   display: block;
 1158: 1052:   margin-bottom: 0.25rem;
 1159: 1053: }
 1160: 1054: 
 1161: 1055: .param-input input {
 1162: 1056:   width: 100%;
 1163: 1057:   padding: 0.5rem;
 1164: 1058:   border: 1px solid var(--vp-c-divider);
 1165: 1059:   border-radius: 4px;
 1166: 1060: }
 1167: 1061: 
 1168: 1062: .required {
 1169: 1063:   color: var(--vp-c-red);
 1170: 1064:   margin-left: 0.25rem;
 1171: 1065: }
 1172: 1066: 
 1173: 1067: .try-button {
 1174: 1068:   padding: 0.5rem 1rem;
 1175: 1069:   background: var(--vp-c-brand);
 1176: 1070:   color: white;
 1177: 1071:   border: none;
 1178: 1072:   border-radius: 4px;
 1179: 1073:   cursor: pointer;
 1180: 1074:   width: 100%;
 1181: 1075: }
 1182: 1076: 
 1183: 1077: .try-button:disabled {
 1184: 1078:   opacity: 0.5;
 1185: 1079:   cursor: not-allowed;
 1186: 1080: }
 1187: 1081: 
 1188: 1082: .live-response {
 1189: 1083:   margin: 1rem 0;
 1190: 1084:   padding: 1rem;
 1191: 1085:   background: var(--vp-c-bg-soft);
 1192: 1086:   border-radius: 8px;
 1193: 1087:   border: 1px solid var(--vp-c-divider);
 1194: 1088:   position: relative;
 1195: 1089: }
 1196: 1090: 
 1197: 1091: .response-error {
 1198: 1092:   border-color: var(--vp-c-red);
 1199: 1093: }
 1200: 1094: 
 1201: 1095: .response-header {
 1202: 1096:   display: flex;
 1203: 1097:   justify-content: space-between;
 1204: 1098:   align-items: center;
 1205: 1099:   margin-bottom: 1rem;
 1206: 1100: }
 1207: 1101: 
 1208: 1102: .response-actions {
 1209: 1103:   display: flex;
 1210: 1104:   gap: 0.5rem;
 1211: 1105: }
 1212: 1106: 
 1213: 1107: .action-button {
 1214: 1108:   padding: 0.25rem 0.75rem;
 1215: 1109:   background: var(--vp-c-brand);
 1216: 1110:   color: white;
 1217: 1111:   border: none;
 1218: 1112:   border-radius: 4px;
 1219: 1113:   cursor: pointer;
 1220: 1114:   font-size: 0.9em;
 1221: 1115: }
 1222: 1116: 
 1223: 1117: .response-headers {
 1224: 1118:   margin: 1rem 0;
 1225: 1119:   background: var(--vp-c-bg-soft);
 1226: 1120:   border-radius: 4px;
 1227: 1121: }
 1228: 1122: 
 1229: 1123: .headers-list {
 1230: 1124:   padding: 0.75rem;
 1231: 1125: }
 1232: 1126: 
 1233: 1127: .header-item {
 1234: 1128:   display: flex;
 1235: 1129:   gap: 0.5rem;
 1236: 1130:   margin-bottom: 0.25rem;
 1237: 1131:   font-size: 0.9em;
 1238: 1132: }
 1239: 1133: 
 1240: 1134: .error-message {
 1241: 1135:   color: var(--vp-c-red);
 1242: 1136:   padding: 0.75rem;
 1243: 1137:   border: 1px solid var(--vp-c-red);
 1244: 1138:   border-radius: 4px;
 1245: 1139:   margin: 1rem 0;
 1246: 1140: }
 1247: 1141: 
 1248: 1142: .response-data {
 1249: 1143:   background: var(--vp-c-bg-mute);
 1250: 1144:   padding: 1rem;
 1251: 1145:   border-radius: 4px;
 1252: 1146:   overflow-x: auto;
 1253: 1147:   margin: 1rem 0;
 1254: 1148: }
 1255: 1149: 
 1256: 1150: .response-section {
 1257: 1151:   margin: 1rem 0;
 1258: 1152: }
 1259: 1153: 
 1260: 1154: .response-section .status {
 1261: 1155:   padding: 0.25rem 0.5rem;
 1262: 1156:   border-radius: 4px;
 1263: 1157:   font-weight: 600;
 1264: 1158: }
 1265: 1159: 
 1266: 1160: .response-section .status.success {
 1267: 1161:   background: var(--vp-c-green-dimm);
 1268: 1162:   color: var(--vp-c-green);
 1269: 1163: }
 1270: 1164: 
 1271: 1165: .response-section .status.error {
 1272: 1166:   background: var(--vp-c-red-dimm);
 1273: 1167:   color: var(--vp-c-red);
 1274: 1168: }
 1275: 1169: 
 1276: 1170: .schema {
 1277: 1171:   background: var(--vp-c-bg-mute);
 1278: 1172:   padding: 1rem;
 1279: 1173:   border-radius: 4px;
 1280: 1174:   overflow-x: auto;
 1281: 1175:   margin-top: 0.5rem;
 1282: 1176: }
 1283: 1177: 
 1284: 1178: .loading-overlay {
 1285: 1179:   position: absolute;
 1286: 1180:   top: 0;
 1287: 1181:   left: 0;
 1288: 1182:   right: 0;
 1289: 1183:   bottom: 0;
 1290: 1184:   background: rgba(0, 0, 0, 0.5);
 1291: 1185:   display: flex;
 1292: 1186:   align-items: center;
 1293: 1187:   justify-content: center;
 1294: 1188:   border-radius: 8px;
 1295: 1189: }
 1296: 1190: 
 1297: 1191: .loading-spinner {
 1298: 1192:   width: 2rem;
 1299: 1193:   height: 2rem;
 1300: 1194:   border: 2px solid var(--vp-c-brand);
 1301: 1195:   border-radius: 50%;
 1302: 1196:   border-top-color: transparent;
 1303: 1197:   animation: spin 1s linear infinite;
 1304: 1198: }
 1305: 1199: 
 1306: 1200: @keyframes spin {
 1307: 1201:   to { transform: rotate(360deg); }
 1308: 1202: }
 1309: 1203: 
 1310: 1204: /* Responsive Design */
 1311: 1205: @media (max-width: 768px) {
 1312: 1206:   .api-explorer {
 1313: 1207:     grid-template-columns: 1fr;
 1314: 1208:     height: auto;
 1315: 1209:   }
 1316: 1210: 
 1317: 1211:   .sidebar {
 1318: 1212:     max-height: 300px;
 1319: 1213:     overflow-y: auto;
 1320: 1214:   }
 1321: 1215: 
 1322: 1216:   .content {
 1323: 1217:     padding: 1rem;
 1324: 1218:   }
 1325: 1219: 
 1326: 1220:   .header-input {
 1327: 1221:     grid-template-columns: 1fr;
 1328: 1222:   }
 1329: 1223: 
 1330: 1224:   .endpoint-item-header {
 1331: 1225:     flex-direction: column;
 1332: 1226:     align-items: flex-start;
 1333: 1227:   }
 1334: 1228: 
 1335: 1229:   .response-header {
 1336: 1230:     flex-direction: column;
 1337: 1231:     gap: 0.5rem;
 1338: 1232:   }
 1339: 1233: 
 1340: 1234:   .response-actions {
 1341: 1235:     width: 100%;
 1342: 1236:     justify-content: space-between;
 1343: 1237:   }
 1344: 1238: 
 1345: 1239:   .action-button {
 1346: 1240:     flex: 1;
 1347: 1241:   }
 1348: 1242: }
 1349: 1243: 
 1350: 1244: /* Dark Mode Adjustments */
 1351: 1245: :root[class~='dark'] .api-explorer {
 1352: 1246:   --custom-api-bg: var(--vp-c-bg-soft);
 1353: 1247: }
 1354: 1248: 
 1355: 1249: :root[class~='dark'] .loading-overlay {
 1356: 1250:   background: rgba(0, 0, 0, 0.7);
 1357: 1251: }
 1358: 1252: </style>
 1359: </file>
 1360: 
 1361: <file path=".vitepress/components/ArchitectureDiagram.vue">
 1362:   1: <script setup lang="ts">
 1363:   2: import { ref, onMounted, watch } from 'vue'
 1364:   3: 
 1365:   4: interface DiagramNode {
 1366:   5:   id: string
 1367:   6:   type: 'service' | 'database' | 'function' | 'external'
 1368:   7:   label: string
 1369:   8:   x: number
 1370:   9:   y: number
 1371:  10:   width: number
 1372:  11:   height: number
 1373:  12: }
 1374:  13: 
 1375:  14: interface DiagramConnection {
 1376:  15:   from: string
 1377:  16:   to: string
 1378:  17:   label?: string
 1379:  18:   type: 'sync' | 'async' | 'storage'
 1380:  19: }
 1381:  20: 
 1382:  21: const props = defineProps<{
 1383:  22:   zoom?: number
 1384:  23:   showLabels?: boolean
 1385:  24: }>()
 1386:  25: 
 1387:  26: const canvas = ref<HTMLCanvasElement | null>(null)
 1388:  27: const wrapper = ref<HTMLDivElement | null>(null)
 1389:  28: const scale = ref(props.zoom || 1)
 1390:  29: 
 1391:  30: // Define system components
 1392:  31: const nodes: DiagramNode[] = [
 1393:  32:   // External Services
 1394:  33:   {
 1395:  34:     id: 'tcgplayer',
 1396:  35:     type: 'external',
 1397:  36:     label: 'TCGPlayer API',
 1398:  37:     x: 50,
 1399:  38:     y: 50,
 1400:  39:     width: 120,
 1401:  40:     height: 60
 1402:  41:   },
 1403:  42:   // Firebase Services
 1404:  43:   {
 1405:  44:     id: 'functions',
 1406:  45:     type: 'service',
 1407:  46:     label: 'Firebase Functions',
 1408:  47:     x: 250,
 1409:  48:     y: 150,
 1410:  49:     width: 150,
 1411:  50:     height: 70
 1412:  51:   },
 1413:  52:   {
 1414:  53:     id: 'firestore',
 1415:  54:     type: 'database',
 1416:  55:     label: 'Firestore',
 1417:  56:     x: 500,
 1418:  57:     y: 50,
 1419:  58:     width: 120,
 1420:  59:     height: 60
 1421:  60:   },
 1422:  61:   {
 1423:  62:     id: 'storage',
 1424:  63:     type: 'database',
 1425:  64:     label: 'Firebase Storage',
 1426:  65:     x: 500,
 1427:  66:     y: 250,
 1428:  67:     width: 120,
 1429:  68:     height: 60
 1430:  69:   },
 1431:  70:   // Core Functions
 1432:  71:   {
 1433:  72:     id: 'cardSync',
 1434:  73:     type: 'function',
 1435:  74:     label: 'Card Sync',
 1436:  75:     x: 250,
 1437:  76:     y: 50,
 1438:  77:     width: 100,
 1439:  78:     height: 50
 1440:  79:   },
 1441:  80:   {
 1442:  81:     id: 'priceSync',
 1443:  82:     type: 'function',
 1444:  83:     label: 'Price Sync',
 1445:  84:     x: 250,
 1446:  85:     y: 250,
 1447:  86:     width: 100,
 1448:  87:     height: 50
 1449:  88:   },
 1450:  89:   {
 1451:  90:     id: 'imageProcessor',
 1452:  91:     type: 'function',
 1453:  92:     label: 'Image Processor',
 1454:  93:     x: 250,
 1455:  94:     y: 350,
 1456:  95:     width: 100,
 1457:  96:     height: 50
 1458:  97:   }
 1459:  98: ]
 1460:  99: 
 1461: 100: const connections: DiagramConnection[] = [
 1462: 101:   // TCGPlayer connections
 1463: 102:   {
 1464: 103:     from: 'tcgplayer',
 1465: 104:     to: 'cardSync',
 1466: 105:     label: 'Card Data',
 1467: 106:     type: 'sync'
 1468: 107:   },
 1469: 108:   {
 1470: 109:     from: 'tcgplayer',
 1471: 110:     to: 'priceSync',
 1472: 111:     label: 'Price Data',
 1473: 112:     type: 'sync'
 1474: 113:   },
 1475: 114:   // Function connections
 1476: 115:   {
 1477: 116:     from: 'cardSync',
 1478: 117:     to: 'firestore',
 1479: 118:     label: 'Store Cards',
 1480: 119:     type: 'storage'
 1481: 120:   },
 1482: 121:   {
 1483: 122:     from: 'priceSync',
 1484: 123:     to: 'firestore',
 1485: 124:     label: 'Store Prices',
 1486: 125:     type: 'storage'
 1487: 126:   },
 1488: 127:   {
 1489: 128:     from: 'imageProcessor',
 1490: 129:     to: 'storage',
 1491: 130:     label: 'Store Images',
 1492: 131:     type: 'storage'
 1493: 132:   },
 1494: 133:   {
 1495: 134:     from: 'cardSync',
 1496: 135:     to: 'imageProcessor',
 1497: 136:     label: 'Process Images',
 1498: 137:     type: 'async'
 1499: 138:   }
 1500: 139: ]
 1501: 140: 
 1502: 141: function drawNode(
 1503: 142:   ctx: CanvasRenderingContext2D,
 1504: 143:   node: DiagramNode
 1505: 144: ) {
 1506: 145:   const x = node.x * scale.value
 1507: 146:   const y = node.y * scale.value
 1508: 147:   const width = node.width * scale.value
 1509: 148:   const height = node.height * scale.value
 1510: 149: 
 1511: 150:   ctx.beginPath()
 1512: 151:   
 1513: 152:   switch (node.type) {
 1514: 153:     case 'service':
 1515: 154:       ctx.roundRect(x, y, width, height, 10)
 1516: 155:       ctx.fillStyle = '#646cff'
 1517: 156:       break
 1518: 157:     case 'database':
 1519: 158:       ctx.ellipse(
 1520: 159:         x + width/2,
 1521: 160:         y + height/2,
 1522: 161:         width/2,
 1523: 162:         height/2,
 1524: 163:         0,
 1525: 164:         0,
 1526: 165:         2 * Math.PI
 1527: 166:       )
 1528: 167:       ctx.fillStyle = '#42b883'
 1529: 168:       break
 1530: 169:     case 'function':
 1531: 170:       ctx.roundRect(x, y, width, height, 5)
 1532: 171:       ctx.fillStyle = '#fb923c'
 1533: 172:       break
 1534: 173:     case 'external':
 1535: 174:       ctx.rect(x, y, width, height)
 1536: 175:       ctx.fillStyle = '#94a3b8'
 1537: 176:       break
 1538: 177:   }
 1539: 178:   
 1540: 179:   ctx.fill()
 1541: 180:   ctx.stroke()
 1542: 181: 
 1543: 182:   // Draw label
 1544: 183:   if (props.showLabels !== false) {
 1545: 184:     ctx.fillStyle = '#ffffff'
 1546: 185:     ctx.font = `${12 * scale.value}px sans-serif`
 1547: 186:     ctx.textAlign = 'center'
 1548: 187:     ctx.textBaseline = 'middle'
 1549: 188:     ctx.fillText(
 1550: 189:       node.label,
 1551: 190:       x + width/2,
 1552: 191:       y + height/2
 1553: 192:     )
 1554: 193:   }
 1555: 194: }
 1556: 195: 
 1557: 196: function drawConnection(
 1558: 197:   ctx: CanvasRenderingContext2D,
 1559: 198:   conn: DiagramConnection
 1560: 199: ) {
 1561: 200:   const fromNode = nodes.find(n => n.id === conn.from)
 1562: 201:   const toNode = nodes.find(n => n.id === conn.to)
 1563: 202:   
 1564: 203:   if (!fromNode || !toNode) return
 1565: 204: 
 1566: 205:   const start = {
 1567: 206:     x: (fromNode.x + fromNode.width/2) * scale.value,
 1568: 207:     y: (fromNode.y + fromNode.height/2) * scale.value
 1569: 208:   }
 1570: 209:   
 1571: 210:   const end = {
 1572: 211:     x: (toNode.x + toNode.width/2) * scale.value,
 1573: 212:     y: (toNode.y + toNode.height/2) * scale.value
 1574: 213:   }
 1575: 214: 
 1576: 215:   ctx.beginPath()
 1577: 216:   ctx.moveTo(start.x, start.y)
 1578: 217: 
 1579: 218:   // Draw different line styles based on connection type
 1580: 219:   switch (conn.type) {
 1581: 220:     case 'sync':
 1582: 221:       ctx.setLineDash([])
 1583: 222:       ctx.strokeStyle = '#646cff'
 1584: 223:       break
 1585: 224:     case 'async':
 1586: 225:       ctx.setLineDash([5, 5])
 1587: 226:       ctx.strokeStyle = '#fb923c'
 1588: 227:       break
 1589: 228:     case 'storage':
 1590: 229:       ctx.setLineDash([])
 1591: 230:       ctx.strokeStyle = '#42b883'
 1592: 231:       break
 1593: 232:   }
 1594: 233: 
 1595: 234:   // Draw curved line
 1596: 235:   const cp1x = start.x + (end.x - start.x) / 2
 1597: 236:   const cp1y = start.y
 1598: 237:   const cp2x = cp1x
 1599: 238:   const cp2y = end.y
 1600: 239:   
 1601: 240:   ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, end.x, end.y)
 1602: 241:   ctx.stroke()
 1603: 242: 
 1604: 243:   // Draw arrow
 1605: 244:   const angle = Math.atan2(end.y - cp2y, end.x - cp2x)
 1606: 245:   const arrowLength = 10 * scale.value
 1607: 246:   
 1608: 247:   ctx.beginPath()
 1609: 248:   ctx.moveTo(end.x, end.y)
 1610: 249:   ctx.lineTo(
 1611: 250:     end.x - arrowLength * Math.cos(angle - Math.PI/6),
 1612: 251:     end.y - arrowLength * Math.sin(angle - Math.PI/6)
 1613: 252:   )
 1614: 253:   ctx.moveTo(end.x, end.y)
 1615: 254:   ctx.lineTo(
 1616: 255:     end.x - arrowLength * Math.cos(angle + Math.PI/6),
 1617: 256:     end.y - arrowLength * Math.sin(angle + Math.PI/6)
 1618: 257:   )
 1619: 258:   ctx.stroke()
 1620: 259: 
 1621: 260:   // Draw label if exists
 1622: 261:   if (conn.label && props.showLabels !== false) {
 1623: 262:     const midX = (start.x + end.x) / 2
 1624: 263:     const midY = (start.y + end.y) / 2 - 10 * scale.value
 1625: 264:     
 1626: 265:     ctx.font = `${11 * scale.value}px sans-serif`
 1627: 266:     ctx.fillStyle = '#64748b'
 1628: 267:     ctx.textAlign = 'center'
 1629: 268:     ctx.textBaseline = 'bottom'
 1630: 269:     ctx.fillText(conn.label, midX, midY)
 1631: 270:   }
 1632: 271: }
 1633: 272: 
 1634: 273: function draw() {
 1635: 274:   if (!canvas.value) return
 1636: 275:   
 1637: 276:   const ctx = canvas.value.getContext('2d')
 1638: 277:   if (!ctx) return
 1639: 278: 
 1640: 279:   // Clear canvas
 1641: 280:   ctx.clearRect(0, 0, canvas.value.width, canvas.value.height)
 1642: 281: 
 1643: 282:   // Set line styles
 1644: 283:   ctx.lineWidth = 2 * scale.value
 1645: 284:   ctx.strokeStyle = '#64748b'
 1646: 285: 
 1647: 286:   // Draw connections first (behind nodes)
 1648: 287:   connections.forEach(conn => drawConnection(ctx, conn))
 1649: 288: 
 1650: 289:   // Draw nodes
 1651: 290:   nodes.forEach(node => drawNode(ctx, node))
 1652: 291: }
 1653: 292: 
 1654: 293: function updateCanvasSize() {
 1655: 294:   if (!canvas.value || !wrapper.value) return
 1656: 295:   
 1657: 296:   const rect = wrapper.value.getBoundingClientRect()
 1658: 297:   canvas.value.width = rect.width
 1659: 298:   canvas.value.height = rect.height
 1660: 299:   draw()
 1661: 300: }
 1662: 301: 
 1663: 302: // Resize handling
 1664: 303: let resizeObserver: ResizeObserver
 1665: 304: onMounted(() => {
 1666: 305:   if (wrapper.value) {
 1667: 306:     resizeObserver = new ResizeObserver(updateCanvasSize)
 1668: 307:     resizeObserver.observe(wrapper.value)
 1669: 308:   }
 1670: 309:   updateCanvasSize()
 1671: 310: })
 1672: 311: 
 1673: 312: // Watch for prop changes
 1674: 313: watch(() => props.zoom, () => {
 1675: 314:   scale.value = props.zoom || 1
 1676: 315:   draw()
 1677: 316: })
 1678: 317: </script>
 1679: 318: 
 1680: 319: <template>
 1681: 320:   <div ref="wrapper" class="architecture-diagram">
 1682: 321:     <canvas ref="canvas"></canvas>
 1683: 322:     <div class="legend">
 1684: 323:       <div class="legend-item">
 1685: 324:         <div class="color-box service"></div>
 1686: 325:         <span>Firebase Services</span>
 1687: 326:       </div>
 1688: 327:       <div class="legend-item">
 1689: 328:         <div class="color-box database"></div>
 1690: 329:         <span>Databases</span>
 1691: 330:       </div>
 1692: 331:       <div class="legend-item">
 1693: 332:         <div class="color-box function"></div>
 1694: 333:         <span>Functions</span>
 1695: 334:       </div>
 1696: 335:       <div class="legend-item">
 1697: 336:         <div class="color-box external"></div>
 1698: 337:         <span>External Services</span>
 1699: 338:       </div>
 1700: 339:     </div>
 1701: 340:   </div>
 1702: 341: </template>
 1703: 342: 
 1704: 343: <style scoped>
 1705: 344: .architecture-diagram {
 1706: 345:   position: relative;
 1707: 346:   width: 100%;
 1708: 347:   height: 500px;
 1709: 348:   background: var(--custom-diagram-bg);
 1710: 349:   border-radius: 8px;
 1711: 350:   overflow: hidden;
 1712: 351: }
 1713: 352: 
 1714: 353: canvas {
 1715: 354:   width: 100%;
 1716: 355:   height: 100%;
 1717: 356: }
 1718: 357: 
 1719: 358: .legend {
 1720: 359:   position: absolute;
 1721: 360:   bottom: 20px;
 1722: 361:   right: 20px;
 1723: 362:   background: rgba(255, 255, 255, 0.9);
 1724: 363:   padding: 10px;
 1725: 364:   border-radius: 6px;
 1726: 365:   box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
 1727: 366: }
 1728: 367: 
 1729: 368: .legend-item {
 1730: 369:   display: flex;
 1731: 370:   align-items: center;
 1732: 371:   margin: 5px 0;
 1733: 372: }
 1734: 373: 
 1735: 374: .color-box {
 1736: 375:   width: 16px;
 1737: 376:   height: 16px;
 1738: 377:   margin-right: 8px;
 1739: 378:   border-radius: 3px;
 1740: 379: }
 1741: 380: 
 1742: 381: .color-box.service {
 1743: 382:   background: #646cff;
 1744: 383: }
 1745: 384: 
 1746: 385: .color-box.database {
 1747: 386:   background: #42b883;
 1748: 387: }
 1749: 388: 
 1750: 389: .color-box.function {
 1751: 390:   background: #fb923c;
 1752: 391: }
 1753: 392: 
 1754: 393: .color-box.external {
 1755: 394:   background: #94a3b8;
 1756: 395: }
 1757: 396: 
 1758: 397: /* Dark mode adjustments */
 1759: 398: :deep(.dark) .legend {
 1760: 399:   background: rgba(0, 0, 0, 0.8);
 1761: 400: }
 1762: 401: </style>
 1763: </file>
 1764: 
 1765: <file path=".vitepress/components/FileTree.vue">
 1766:   1: <script setup lang="ts">
 1767:   2: import { ref, computed, onMounted } from 'vue'
 1768:   3: 
 1769:   4: interface TreeNode {
 1770:   5:   name: string
 1771:   6:   path: string
 1772:   7:   type: 'file' | 'directory'
 1773:   8:   children?: TreeNode[]
 1774:   9: }
 1775:  10: 
 1776:  11: const props = defineProps<{
 1777:  12:   root?: string
 1778:  13:   initialExpanded?: boolean
 1779:  14: }>()
 1780:  15: 
 1781:  16: const expandedNodes = ref<Set<string>>(new Set())
 1782:  17: const treeData = ref<TreeNode[]>([])
 1783:  18: 
 1784:  19: // Process the file structure into a tree
 1785:  20: onMounted(async () => {
 1786:  21:   // Initial structure based on your codebase
 1787:  22:   treeData.value = [
 1788:  23:     {
 1789:  24:       name: 'functions',
 1790:  25:       path: 'functions',
 1791:  26:       type: 'directory',
 1792:  27:       children: [
 1793:  28:         {
 1794:  29:           name: 'src',
 1795:  30:           path: 'functions/src',
 1796:  31:           type: 'directory',
 1797:  32:           children: [
 1798:  33:             {
 1799:  34:               name: 'config',
 1800:  35:               path: 'functions/src/config',
 1801:  36:               type: 'directory',
 1802:  37:               children: [
 1803:  38:                 {
 1804:  39:                   name: 'firebase.ts',
 1805:  40:                   path: 'functions/src/config/firebase.ts',
 1806:  41:                   type: 'file'
 1807:  42:                 }
 1808:  43:               ]
 1809:  44:             },
 1810:  45:             {
 1811:  46:               name: 'services',
 1812:  47:               path: 'functions/src/services',
 1813:  48:               type: 'directory',
 1814:  49:               children: [
 1815:  50:                 {
 1816:  51:                   name: 'cardSync.ts',
 1817:  52:                   path: 'functions/src/services/cardSync.ts',
 1818:  53:                   type: 'file'
 1819:  54:                 },
 1820:  55:                 {
 1821:  56:                   name: 'priceSync.ts',
 1822:  57:                   path: 'functions/src/services/priceSync.ts',
 1823:  58:                   type: 'file'
 1824:  59:                 }
 1825:  60:               ]
 1826:  61:             },
 1827:  62:             // Add other directories and files based on your structure
 1828:  63:           ]
 1829:  64:         }
 1830:  65:       ]
 1831:  66:     }
 1832:  67:   ]
 1833:  68: 
 1834:  69:   // If initialExpanded is true, expand all nodes
 1835:  70:   if (props.initialExpanded) {
 1836:  71:     const expandAll = (nodes: TreeNode[]) => {
 1837:  72:       nodes.forEach(node => {
 1838:  73:         if (node.type === 'directory') {
 1839:  74:           expandedNodes.value.add(node.path)
 1840:  75:           if (node.children) {
 1841:  76:             expandAll(node.children)
 1842:  77:           }
 1843:  78:         }
 1844:  79:       })
 1845:  80:     }
 1846:  81:     expandAll(treeData.value)
 1847:  82:   }
 1848:  83: })
 1849:  84: 
 1850:  85: function toggleNode(path: string) {
 1851:  86:   if (expandedNodes.value.has(path)) {
 1852:  87:     expandedNodes.value.delete(path)
 1853:  88:   } else {
 1854:  89:     expandedNodes.value.add(path)
 1855:  90:   }
 1856:  91: }
 1857:  92: 
 1858:  93: const toggleAllNodes = () => {
 1859:  94:   if (expandedNodes.value.size > 0) {
 1860:  95:     expandedNodes.value.clear()
 1861:  96:   } else {
 1862:  97:     const expandAll = (nodes: TreeNode[]) => {
 1863:  98:       nodes.forEach(node => {
 1864:  99:         if (node.type === 'directory') {
 1865: 100:           expandedNodes.value.add(node.path)
 1866: 101:           if (node.children) {
 1867: 102:             expandAll(node.children)
 1868: 103:           }
 1869: 104:         }
 1870: 105:       })
 1871: 106:     }
 1872: 107:     expandAll(treeData.value)
 1873: 108:   }
 1874: 109: }
 1875: 110: 
 1876: 111: // Recursive component for rendering tree nodes
 1877: 112: const TreeNode = (node: TreeNode, level: number = 0) => {
 1878: 113:   const isExpanded = expandedNodes.value.has(node.path)
 1879: 114:   const hasChildren = node.children && node.children.length > 0
 1880: 115:   
 1881: 116:   return (
 1882: 117:     <div class={`tree-node level-${level}`}>
 1883: 118:       <div
 1884: 119:         class={`node-content ${node.type}`}
 1885: 120:         onClick={() => hasChildren && toggleNode(node.path)}
 1886: 121:       >
 1887: 122:         {hasChildren && (
 1888: 123:           <span class={`expand-icon ${isExpanded ? 'expanded' : ''}`}>
 1889: 124:             {isExpanded ? '▼' : '▶'}
 1890: 125:           </span>
 1891: 126:         )}
 1892: 127:         <span class="node-name">{node.name}</span>
 1893: 128:       </div>
 1894: 129:       {isExpanded && hasChildren && (
 1895: 130:         <div class="children">
 1896: 131:           {node.children!.map(child => TreeNode(child, level + 1))}
 1897: 132:         </div>
 1898: 133:       )}
 1899: 134:     </div>
 1900: 135:   )
 1901: 136: }
 1902: 137: </script>
 1903: 138: 
 1904: 139: <template>
 1905: 140:   <div class="file-tree">
 1906: 141:     <div class="tree-controls">
 1907: 142:       <button @click="toggleAllNodes">
 1908: 143:         {{ expandedNodes.size > 0 ? 'Collapse All' : 'Expand All' }}
 1909: 144:       </button>
 1910: 145:     </div>
 1911: 146:     <div class="tree-content">
 1912: 147:       <template v-for="node in treeData" :key="node.path">
 1913: 148:         <TreeNode :node="node" />
 1914: 149:       </template>
 1915: 150:     </div>
 1916: 151:   </div>
 1917: 152: </template>
 1918: 153: 
 1919: 154: <style scoped>
 1920: 155: .file-tree {
 1921: 156:   background: var(--custom-tree-bg);
 1922: 157:   border-radius: 8px;
 1923: 158:   padding: 1rem;
 1924: 159:   margin: 1rem 0;
 1925: 160: }
 1926: 161: 
 1927: 162: .tree-controls {
 1928: 163:   margin-bottom: 1rem;
 1929: 164: }
 1930: 165: 
 1931: 166: .tree-controls button {
 1932: 167:   background: var(--vp-c-brand);
 1933: 168:   color: white;
 1934: 169:   border: none;
 1935: 170:   padding: 0.5rem 1rem;
 1936: 171:   border-radius: 4px;
 1937: 172:   cursor: pointer;
 1938: 173:   font-size: 0.9rem;
 1939: 174: }
 1940: 175: 
 1941: 176: .tree-controls button:hover {
 1942: 177:   background: var(--vp-c-brand-dark);
 1943: 178: }
 1944: 179: 
 1945: 180: .tree-node {
 1946: 181:   margin: 0.25rem 0;
 1947: 182: }
 1948: 183: 
 1949: 184: .node-content {
 1950: 185:   display: flex;
 1951: 186:   align-items: center;
 1952: 187:   padding: 0.25rem;
 1953: 188:   cursor: pointer;
 1954: 189:   border-radius: 4px;
 1955: 190: }
 1956: 191: 
 1957: 192: .node-content:hover {
 1958: 193:   background: var(--custom-tree-highlight);
 1959: 194: }
 1960: 195: 
 1961: 196: .expand-icon {
 1962: 197:   margin-right: 0.5rem;
 1963: 198:   font-size: 0.8rem;
 1964: 199:   transition: transform 0.2s ease;
 1965: 200: }
 1966: 201: 
 1967: 202: .expand-icon.expanded {
 1968: 203:   transform: rotate(0deg);
 1969: 204: }
 1970: 205: 
 1971: 206: .children {
 1972: 207:   margin-left: 1.5rem;
 1973: 208:   border-left: 1px dashed var(--vp-c-divider);
 1974: 209:   padding-left: 0.5rem;
 1975: 210: }
 1976: 211: 
 1977: 212: .directory .node-name {
 1978: 213:   font-weight: 500;
 1979: 214: }
 1980: 215: 
 1981: 216: .file .node-name {
 1982: 217:   font-weight: normal;
 1983: 218: }
 1984: 219: 
 1985: 220: .level-0 {
 1986: 221:   margin-top: 0;
 1987: 222: }
 1988: 223: </style>
 1989: </file>
 1990: 
 1991: <file path=".vitepress/config.mts">
 1992:   1: import { defineConfig } from 'vitepress/dist/node/index.js'
 1993:   2: 
 1994:   3: export default defineConfig({
 1995:   4:   title: 'FFTCG Sync Service',
 1996:   5:   description: 'Documentation for the FFTCG Card and Price Sync Service',
 1997:   6:   
 1998:   7:   // Head tags
 1999:   8:   head: [
 2000:   9:     ['link', { rel: 'icon', type: 'image/svg+xml', href: '/logo.svg' }],
 2001:  10:     ['meta', { name: 'theme-color', content: '#646cff' }]
 2002:  11:   ],
 2003:  12: 
 2004:  13:   // Markdown configuration
 2005:  14:   markdown: {
 2006:  15:     lineNumbers: true,
 2007:  16:     theme: 'github-dark'
 2008:  17:   },
 2009:  18: 
 2010:  19:   themeConfig: {
 2011:  20:     nav: [
 2012:  21:       { text: 'Home', link: '/' },
 2013:  22:       { text: 'Guide', link: '/docs/usage-guide' },
 2014:  23:       { text: 'Architecture', link: '/docs/architecture' },
 2015:  24:       { text: 'API', link: '/api/' },
 2016:  25:       { text: 'FAQ', link: '/docs/faq' }
 2017:  26:     ],
 2018:  27: 
 2019:  28:     sidebar: [
 2020:  29:       {
 2021:  30:         text: 'Introduction',
 2022:  31:         items: [
 2023:  32:           { text: 'Getting Started', link: '/introduction' },
 2024:  33:           { text: 'Architecture Overview', link: '/docs/architecture' },
 2025:  34:           { text: 'Usage Guide', link: '/docs/usage-guide' }
 2026:  35:         ]
 2027:  36:       },
 2028:  37:       {
 2029:  38:         text: 'Core Documentation',
 2030:  39:         items: [
 2031:  40:           { text: 'FAQ', link: '/docs/faq' },
 2032:  41:           { text: 'Troubleshooting', link: '/docs/troubleshooting' },
 2033:  42:           { text: 'Performance', link: '/docs/performance' },
 2034:  43:           { text: 'Security', link: '/docs/security' }
 2035:  44:         ]
 2036:  45:       },
 2037:  46:       {
 2038:  47:         text: 'Setup & Configuration',
 2039:  48:         items: [
 2040:  49:           { text: 'Installation', link: '/setup/installation' },
 2041:  50:           { text: 'Firebase Setup', link: '/setup/firebase' },
 2042:  51:           { text: 'Environment Config', link: '/setup/environment' }
 2043:  52:         ]
 2044:  53:       },
 2045:  54:       {
 2046:  55:         text: 'Core Services',
 2047:  56:         items: [
 2048:  57:           { text: 'Card Sync', link: '/services/card-sync' },
 2049:  58:           { text: 'Price Sync', link: '/services/price-sync' },
 2050:  59:           { text: 'Image Processing', link: '/services/image-processing' }
 2051:  60:         ]
 2052:  61:       },
 2053:  62:       {
 2054:  63:         text: 'Utilities',
 2055:  64:         items: [
 2056:  65:           { text: 'Image Handler', link: '/utils/image-handler' },
 2057:  66:           { text: 'Cache System', link: '/utils/cache' },
 2058:  67:           { text: 'Logging', link: '/utils/logging' },
 2059:  68:           { text: 'Error Handling', link: '/utils/error-handling' },
 2060:  69:           { text: 'Batch Processing', link: '/utils/batch-processing' }
 2061:  70:         ]
 2062:  71:       },
 2063:  72:       {
 2064:  73:         text: 'Testing & Monitoring',
 2065:  74:         items: [
 2066:  75:           { text: 'Test Suite', link: '/testing/overview' },
 2067:  76:           { text: 'Image Testing', link: '/testing/image-testing' },
 2068:  77:           { text: 'Sync Testing', link: '/testing/sync-testing' },
 2069:  78:           { text: 'Performance Monitoring', link: '/testing/monitoring' }
 2070:  79:         ]
 2071:  80:       }
 2072:  81:     ],
 2073:  82: 
 2074:  83:     search: {
 2075:  84:       provider: 'local',
 2076:  85:       options: {
 2077:  86:         detailedView: true
 2078:  87:       }
 2079:  88:     },
 2080:  89: 
 2081:  90:     socialLinks: [
 2082:  91:       { icon: 'github', link: 'https://github.com/yourusername/fftcg-sync-service' }
 2083:  92:     ],
 2084:  93: 
 2085:  94:     footer: {
 2086:  95:       message: 'Released under the MIT License.',
 2087:  96:       copyright: `Copyright © ${new Date().getFullYear()}`
 2088:  97:     },
 2089:  98: 
 2090:  99:     outline: {
 2091: 100:       level: [2, 3],
 2092: 101:       label: 'On this page'
 2093: 102:     },
 2094: 103: 
 2095: 104:     lastUpdated: {
 2096: 105:       text: 'Last updated',
 2097: 106:       formatOptions: {
 2098: 107:         dateStyle: 'full',
 2099: 108:         timeStyle: 'medium'
 2100: 109:       }
 2101: 110:     }
 2102: 111:   }
 2103: 112: })
 2104: </file>
 2105: 
 2106: <file path=".vitepress/shims-vue.d.ts">
 2107: 1: declare module '*.vue' {
 2108: 2:     import type { DefineComponent } from 'vue'
 2109: 3:     const component: DefineComponent<{}, {}, any>
 2110: 4:     export default component
 2111: 5:   }
 2112: </file>
 2113: 
 2114: <file path=".vitepress/theme/custom.css">
 2115:  1: :root {
 2116:  2:     /* Brand Colors */
 2117:  3:     --vp-c-brand: #646cff;
 2118:  4:     --vp-c-brand-light: #747bff;
 2119:  5:     --vp-c-brand-lighter: #9499ff;
 2120:  6:     --vp-c-brand-dark: #535bf2;
 2121:  7:     --vp-c-brand-darker: #454ce1;
 2122:  8:   
 2123:  9:     /* Typography */
 2124: 10:     --vp-font-family-base: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI',
 2125: 11:       Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
 2126: 12:       sans-serif;
 2127: 13:     --vp-font-family-mono: 'Fira Code', Menlo, Monaco, Consolas, 'Courier New',
 2128: 14:       monospace;
 2129: 15:   
 2130: 16:     /* Code Blocks */
 2131: 17:     --vp-code-block-bg: #1e1e1e;
 2132: 18:     --vp-code-block-color: #e5e7eb;
 2133: 19:     --vp-code-line-highlight-color: rgba(255, 255, 255, 0.1);
 2134: 20:     --vp-code-line-number-color: #636363;
 2135: 21:   
 2136: 22:     /* Custom Component Colors */
 2137: 23:     --custom-tree-bg: var(--vp-c-bg-soft);
 2138: 24:     --custom-tree-highlight: var(--vp-c-brand-light);
 2139: 25:     --custom-diagram-bg: var(--vp-c-bg-soft);
 2140: 26:     --custom-api-bg: var(--vp-c-bg-soft);
 2141: 27:   }
 2142: 28:   
 2143: 29:   /* Dark Mode Overrides */
 2144: 30:   .dark {
 2145: 31:     --custom-tree-bg: var(--vp-c-bg-soft);
 2146: 32:     --custom-tree-highlight: var(--vp-c-brand-dark);
 2147: 33:   }
 2148: 34:   
 2149: 35:   /* Custom Component Base Styles */
 2150: 36:   .custom-block {
 2151: 37:     border-radius: 8px;
 2152: 38:     padding: 16px 20px;
 2153: 39:     margin: 16px 0;
 2154: 40:     font-size: 14px;
 2155: 41:     line-height: 1.6;
 2156: 42:   }
 2157: 43:   
 2158: 44:   /* Responsive Design */
 2159: 45:   @media (max-width: 768px) {
 2160: 46:     .custom-block {
 2161: 47:       padding: 12px 16px;
 2162: 48:     }
 2163: 49:   }
 2164: 50:   
 2165: 51:   /* Print Styles */
 2166: 52:   @media print {
 2167: 53:     .VPNav,
 2168: 54:     .VPSidebar,
 2169: 55:     .VPDocAside {
 2170: 56:       display: none;
 2171: 57:     }
 2172: 58:   
 2173: 59:     .VPDoc {
 2174: 60:       padding: 0;
 2175: 61:       margin: 0;
 2176: 62:     }
 2177: 63:   }
 2178: 64:   
 2179: 65:   /* Transitions */
 2180: 66:   .fade-enter-active,
 2181: 67:   .fade-leave-active {
 2182: 68:     transition: opacity 0.3s ease;
 2183: 69:   }
 2184: 70:   
 2185: 71:   .fade-enter-from,
 2186: 72:   .fade-leave-to {
 2187: 73:     opacity: 0;
 2188: 74:   }
 2189: </file>
 2190: 
 2191: <file path=".vitepress/theme/FirebaseAuth.vue">
 2192:  1: <template>
 2193:  2:   <div v-if="!isAuthenticated" class="auth-wrapper">
 2194:  3:     <div class="auth-container">
 2195:  4:       <h2>FFTCG Sync Service Documentation</h2>
 2196:  5:       <p>Authentication required to access documentation.</p>
 2197:  6:       <button @click="signIn" class="signin-button">
 2198:  7:         Sign in with Google
 2199:  8:       </button>
 2200:  9:     </div>
 2201: 10:   </div>
 2202: 11:   <slot v-else></slot>
 2203: 12: </template>
 2204: 13: 
 2205: 14: <script setup>
 2206: 15: import { ref, onMounted } from 'vue'
 2207: 16: import { initializeApp } from 'firebase/app'
 2208: 17: import { getAuth, signInWithPopup, GoogleAuthProvider, onAuthStateChanged } from 'firebase/auth'
 2209: 18: 
 2210: 19: const isAuthenticated = ref(false)
 2211: 20: const allowedEmails = ['mrw1986@gmail.com']
 2212: 21: 
 2213: 22: const firebaseConfig = {
 2214: 23:   apiKey: "AIzaSyDJGSxSVXWEmTs9HMzSGu175vpABHuEez0",
 2215: 24:   authDomain: "fftcg-sync-service.firebaseapp.com",
 2216: 25:   projectId: "fftcg-sync-service",
 2217: 26:   storageBucket: "fftcg-sync-service.firebasestorage.app",
 2218: 27:   messagingSenderId: "161248420888",
 2219: 28:   appId: "1:161248420888:web:61f524b0fa0287017d4f6d"
 2220: 29: }
 2221: 30: 
 2222: 31: const app = initializeApp(firebaseConfig)
 2223: 32: const auth = getAuth(app)
 2224: 33: const provider = new GoogleAuthProvider()
 2225: 34: 
 2226: 35: onMounted(() => {
 2227: 36:   onAuthStateChanged(auth, (user) => {
 2228: 37:     isAuthenticated.value = user && allowedEmails.includes(user.email)
 2229: 38:     if (user && !allowedEmails.includes(user.email)) {
 2230: 39:       auth.signOut()
 2231: 40:       alert('Access denied. Unauthorized email.')
 2232: 41:     }
 2233: 42:   })
 2234: 43: })
 2235: 44: 
 2236: 45: const signIn = async () => {
 2237: 46:   try {
 2238: 47:     await signInWithPopup(auth, provider)
 2239: 48:   } catch (error) {
 2240: 49:     console.error('Authentication error:', error)
 2241: 50:     alert('Authentication failed. Please try again.')
 2242: 51:   }
 2243: 52: }
 2244: 53: </script>
 2245: 54: 
 2246: 55: <style>
 2247: 56: .auth-wrapper {
 2248: 57:   display: flex;
 2249: 58:   justify-content: center;
 2250: 59:   align-items: center;
 2251: 60:   min-height: 100vh;
 2252: 61:   background: var(--vp-c-bg);
 2253: 62: }
 2254: 63: 
 2255: 64: .auth-container {
 2256: 65:   text-align: center;
 2257: 66:   padding: 2rem;
 2258: 67:   border-radius: 8px;
 2259: 68:   background: var(--vp-c-bg-soft);
 2260: 69:   box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
 2261: 70:   max-width: 400px;
 2262: 71:   width: 90%;
 2263: 72: }
 2264: 73: 
 2265: 74: .signin-button {
 2266: 75:   margin-top: 1.5rem;
 2267: 76:   padding: 0.75rem 1.5rem;
 2268: 77:   border-radius: 4px;
 2269: 78:   background: var(--vp-c-brand);
 2270: 79:   color: white;
 2271: 80:   border: none;
 2272: 81:   cursor: pointer;
 2273: 82:   font-size: 1rem;
 2274: 83:   transition: background-color 0.2s;
 2275: 84: }
 2276: 85: 
 2277: 86: .signin-button:hover {
 2278: 87:   background: var(--vp-c-brand-dark);
 2279: 88: }
 2280: 89: 
 2281: 90: h2 {
 2282: 91:   color: var(--vp-c-text-1);
 2283: 92:   margin-bottom: 1rem;
 2284: 93: }
 2285: 94: 
 2286: 95: p {
 2287: 96:   color: var(--vp-c-text-2);
 2288: 97:   margin-bottom: 1rem;
 2289: 98: }
 2290: 99: </style>
 2291: </file>
 2292: 
 2293: <file path=".vitepress/theme/index.ts">
 2294:  1: // .vitepress/theme/index.ts
 2295:  2: 
 2296:  3: import { h } from 'vue'
 2297:  4: import type { Theme } from 'vitepress'
 2298:  5: import DefaultTheme from 'vitepress/theme'
 2299:  6: import FileTree from '../../components/FileTree.vue'
 2300:  7: import ArchitectureDiagram from '../../components/ArchitectureDiagram.vue'
 2301:  8: import ApiExplorer from '../../components/ApiExplorer.vue'
 2302:  9: import './custom.css'
 2303: 10: 
 2304: 11: export default {
 2305: 12:   extends: DefaultTheme,
 2306: 13:   
 2307: 14:   enhanceApp({ app }) {
 2308: 15:     // Register global components
 2309: 16:     app.component('FileTree', FileTree)
 2310: 17:     app.component('ArchitectureDiagram', ArchitectureDiagram)
 2311: 18:     app.component('ApiExplorer', ApiExplorer)
 2312: 19:   },
 2313: 20: 
 2314: 21:   Layout: () => {
 2315: 22:     return h(DefaultTheme.Layout, null, {
 2316: 23:       // Optional: Add custom slots here if needed
 2317: 24:     })
 2318: 25:   }
 2319: 26: } satisfies Theme
 2320: </file>
 2321: 
 2322: <file path="api/index.md">
 2323:  1: # API Documentation
 2324:  2: 
 2325:  3: ## Overview
 2326:  4: 
 2327:  5: This documentation covers the FFTCG Sync Service API endpoints, authentication, and usage.
 2328:  6: 
 2329:  7: ## Authentication
 2330:  8: 
 2331:  9: To use authenticated endpoints, you'll need a Firebase Authentication token. Here's how to obtain one:
 2332: 10: 
 2333: 11: 1. Log in to the [Firebase Console](https://console.firebase.google.com)
 2334: 12: 2. Navigate to Project Settings
 2335: 13: 3. Go to Service Accounts
 2336: 14: 4. Click "Generate New Private Key"
 2337: 15: 5. Use the key to generate a token:
 2338: 16: 
 2339: 17: ```bash
 2340: 18: # Install Firebase CLI if you haven't already
 2341: 19: npm install -g firebase-tools
 2342: 20: 
 2343: 21: # Login to Firebase
 2344: 22: firebase login
 2345: 23: 
 2346: 24: # Get a token
 2347: 25: firebase auth:token
 2348: 26: ```
 2349: 27: 
 2350: 28: ## Making Authenticated Requests
 2351: 29: 
 2352: 30: Include the token in your API requests:
 2353: 31: 
 2354: 32: ```bash
 2355: 33: curl -H "Authorization: Bearer YOUR_FIREBASE_TOKEN" https://us-central1-fftcg-sync-service.cloudfunctions.net/api/endpoint
 2356: 34: ```
 2357: 35: 
 2358: 36: ## API Explorer
 2359: 37: 
 2360: 38: Use the interactive API explorer below to test endpoints. For authenticated endpoints, you'll need to add your Firebase token in the Headers section.
 2361: 39: 
 2362: 40: ::: tip
 2363: 41: Log in to the Firebase Console first to ensure your token has the necessary permissions.
 2364: 42: :::
 2365: 43: 
 2366: 44: <ApiExplorer />
 2367: 45: 
 2368: 46: ## Rate Limits
 2369: 47: 
 2370: 48: - 100 requests per minute for authenticated endpoints
 2371: 49: - 25 requests per minute for unauthenticated endpoints
 2372: 50: - Batch operations limited to 500 items
 2373: 51: 
 2374: 52: ## Response Codes
 2375: 53: 
 2376: 54: | Code | Description |
 2377: 55: |------|-------------|
 2378: 56: | 200  | Success |
 2379: 57: | 400  | Bad Request |
 2380: 58: | 401  | Unauthorized |
 2381: 59: | 403  | Forbidden |
 2382: 60: | 429  | Too Many Requests |
 2383: 61: | 500  | Server Error |
 2384: 62: 
 2385: 63: ## Support
 2386: 64: 
 2387: 65: For API support or issues:
 2388: 66: 
 2389: 67: - Open an issue on GitHub
 2390: 68: - Contact the development team
 2391: 69: - Check the troubleshooting guide
 2392: </file>
 2393: 
 2394: <file path="architecture.md">
 2395:   1: # System Architecture
 2396:   2: 
 2397:   3: ## Overview
 2398:   4: 
 2399:   5: FFTCG Sync Service is built on Firebase Cloud Functions with a microservices architecture, designed to synchronize card data, prices, and images from TCGplayer while maintaining high performance and reliability.
 2400:   6: 
 2401:   7: ## System Diagram
 2402:   8: 
 2403:   9: The diagram below shows the key components and their interactions:
 2404:  10: 
 2405:  11: <ArchitectureDiagram :zoom="1" :showLabels="true" />
 2406:  12: 
 2407:  13: ## Core Components
 2408:  14: 
 2409:  15: ### Cloud Functions
 2410:  16: 
 2411:  17: ```mermaid
 2412:  18: graph TD
 2413:  19:     A[Scheduled Triggers] -->|Daily| B[Sync Functions]
 2414:  20:     C[HTTP Triggers] -->|Manual| B
 2415:  21:     B --> D[Card Sync]
 2416:  22:     B --> E[Price Sync]
 2417:  23:     B --> F[Image Processing]
 2418:  24: ```
 2419:  25: 
 2420:  26: #### Functions Structure
 2421:  27: 
 2422:  28: - `scheduledCardSync` - Daily card data synchronization
 2423:  29: - `scheduledPriceSync` - Daily price updates
 2424:  30: - `testCardSync` - Test endpoint for card sync
 2425:  31: - `testPriceSync` - Test endpoint for price sync
 2426:  32: - `manualCardSync` - Manual trigger for full sync
 2427:  33: - `manualPriceSync` - Manual trigger for price sync
 2428:  34: - `healthCheck` - System health monitoring
 2429:  35: 
 2430:  36: ### Storage Systems
 2431:  37: 
 2432:  38: ```mermaid
 2433:  39: graph LR
 2434:  40:     A[Cloud Functions] --> B[Firestore]
 2435:  41:     A --> C[Cloud Storage]
 2436:  42:     B --> D[(Cards Collection)]
 2437:  43:     B --> E[(Prices Collection)]
 2438:  44:     B --> F[(Sync Metadata)]
 2439:  45:     C --> G[Card Images]
 2440:  46: ```
 2441:  47: 
 2442:  48: #### Database Collections
 2443:  49: 
 2444:  50: - `cards` - Card information and metadata
 2445:  51: - `prices` - Current and historical price data
 2446:  52: - `syncMetadata` - Sync operation logs and status
 2447:  53: - `logs` - System logs and operations history
 2448:  54: - `cardHashes` - Change detection hashes
 2449:  55: - `priceHashes` - Price update tracking
 2450:  56: - `imageMetadata` - Image processing metadata
 2451:  57: 
 2452:  58: ### Processing Pipeline
 2453:  59: 
 2454:  60: ```mermaid
 2455:  61: graph TD
 2456:  62:     A[Data Source] -->|Fetch| B[Raw Data]
 2457:  63:     B -->|Validate| C[Validation Layer]
 2458:  64:     C -->|Process| D[Processing Layer]
 2459:  65:     D -->|Store| E[Storage Layer]
 2460:  66:     D -->|Cache| F[Cache Layer]
 2461:  67: ```
 2462:  68: 
 2463:  69: #### Pipeline Components
 2464:  70: 
 2465:  71: - Data Fetching
 2466:  72: - Validation & Sanitization
 2467:  73: - Processing & Transformation
 2468:  74: - Storage Management
 2469:  75: - Cache Management
 2470:  76: 
 2471:  77: ## Service Integration
 2472:  78: 
 2473:  79: ### External Services
 2474:  80: 
 2475:  81: ```mermaid
 2476:  82: graph LR
 2477:  83:     A[FFTCG Sync Service] -->|Cards Data| B[TCGplayer API]
 2478:  84:     A -->|Prices| B
 2479:  85:     A -->|Images| C[TCGplayer CDN]
 2480:  86:     A --> D[Firebase Services]
 2481:  87: ```
 2482:  88: 
 2483:  89: ### Internal Services Communication
 2484:  90: 
 2485:  91: ```mermaid
 2486:  92: graph TD
 2487:  93:     A[Sync Controller] --> B[Card Service]
 2488:  94:     A --> C[Price Service]
 2489:  95:     A --> D[Image Service]
 2490:  96:     B --> E[Storage Service]
 2491:  97:     C --> E
 2492:  98:     D --> E
 2493:  99: ```
 2494: 100: 
 2495: 101: ## Data Flow
 2496: 102: 
 2497: 103: ### Synchronization Flow
 2498: 104: 
 2499: 105: ```mermaid
 2500: 106: sequenceDiagram
 2501: 107:     participant T as Trigger
 2502: 108:     participant S as Sync Service
 2503: 109:     participant E as External API
 2504: 110:     participant D as Database
 2505: 111:     participant C as Cache
 2506: 112:    
 2507: 113:     T->>S: Initiate Sync
 2508: 114:     S->>C: Check Cache
 2509: 115:     S->>E: Fetch Updates
 2510: 116:     E->>S: Return Data
 2511: 117:     S->>D: Store Updates
 2512: 118:     S->>C: Update Cache
 2513: 119: ```
 2514: 120: 
 2515: 121: ## Error Handling
 2516: 122: 
 2517: 123: ### Recovery System
 2518: 124: 
 2519: 125: ```mermaid
 2520: 126: graph TD
 2521: 127:     A[Error Detection] -->|Classify| B[Error Types]
 2522: 128:     B -->|Transient| C[Retry Logic]
 2523: 129:     B -->|Permanent| D[Failure Handling]
 2524: 130:     C -->|Success| E[Continue Processing]
 2525: 131:     C -->|Max Retries| D
 2526: 132:     D --> F[Error Logging]
 2527: 133:     D --> G[Fallback Mechanism]
 2528: 134: ```
 2529: 135: 
 2530: 136: ## Performance Optimization
 2531: 137: 
 2532: 138: ### Caching Strategy
 2533: 139: 
 2534: 140: ```mermaid
 2535: 141: graph LR
 2536: 142:     A[Request] --> B{Cache Check}
 2537: 143:     B -->|Hit| C[Return Cached]
 2538: 144:     B -->|Miss| D[Fetch Fresh]
 2539: 145:     D --> E[Process]
 2540: 146:     E --> F[Update Cache]
 2541: 147:     F --> G[Return Fresh]
 2542: 148: ```
 2543: 149: 
 2544: 150: ## Security Architecture
 2545: 151: 
 2546: 152: ### Access Control
 2547: 153: 
 2548: 154: ```mermaid
 2549: 155: graph TD
 2550: 156:     A[Request] --> B{Authentication}
 2551: 157:     B -->|Valid| C{Authorization}
 2552: 158:     B -->|Invalid| D[Reject]
 2553: 159:     C -->|Allowed| E[Process]
 2554: 160:     C -->|Denied| D
 2555: 161: ```
 2556: 162: 
 2557: 163: ## Monitoring System
 2558: 164: 
 2559: 165: ### Observability
 2560: 166: 
 2561: 167: ```mermaid
 2562: 168: graph TD
 2563: 169:     A[Operations] --> B[Logging]
 2564: 170:     A --> C[Metrics]
 2565: 171:     A --> D[Traces]
 2566: 172:     B --> E[Analysis]
 2567: 173:     C --> E
 2568: 174:     D --> E
 2569: 175: ```
 2570: 176: 
 2571: 177: ## Resource Management
 2572: 178: 
 2573: 179: ### Scaling Strategy
 2574: 180: 
 2575: 181: ```mermaid
 2576: 182: graph TD
 2577: 183:     A[Load Monitor] -->|Triggers| B[Scaling Decision]
 2578: 184:     B -->|Up| C[Increase Resources]
 2579: 185:     B -->|Down| D[Decrease Resources]
 2580: 186:     C --> E[Update Configuration]
 2581: 187:     D --> E
 2582: 188: ```
 2583: 189: 
 2584: 190: ## Configuration Management
 2585: 191: 
 2586: 192: ### Environment Setup
 2587: 193: 
 2588: 194: ```mermaid
 2589: 195: graph LR
 2590: 196:     A[Configuration] --> B[Development]
 2591: 197:     A --> C[Staging]
 2592: 198:     A --> D[Production]
 2593: 199:     B --> E[Firebase Project]
 2594: 200:     C --> E
 2595: 201:     D --> E
 2596: 202: ```
 2597: 203: 
 2598: 204: ## Best Practices
 2599: 205: 
 2600: 206: ### Development Workflow
 2601: 207: 
 2602: 208: ```mermaid
 2603: 209: graph LR
 2604: 210:     A[Development] -->|Test| B[Staging]
 2605: 211:     B -->|Validate| C[Production]
 2606: 212:     C -->|Monitor| D[Maintenance]
 2607: 213:     D -->|Update| A
 2608: 214: ```
 2609: 215: 
 2610: 216: ## System Requirements
 2611: 217: 
 2612: 218: ### Infrastructure
 2613: 219: 
 2614: 220: - Node.js 18+
 2615: 221: - Firebase Admin SDK
 2616: 222: - Cloud Functions
 2617: 223: - Firestore
 2618: 224: - Cloud Storage
 2619: 225: - Memory: 1GB minimum
 2620: 226: - Timeout: 540s maximum
 2621: 227: 
 2622: 228: ### Dependencies
 2623: 229: 
 2624: 230: - Firebase Functions
 2625: 231: - Firebase Admin
 2626: 232: - Axios for HTTP requests
 2627: 233: - Sharp for image processing
 2628: 234: - LRU Cache for caching
 2629: 235: - TypeScript for development
 2630: 236: 
 2631: 237: ## Deployment Architecture
 2632: 238: 
 2633: 239: ### CI/CD Pipeline
 2634: 240: 
 2635: 241: ```mermaid
 2636: 242: graph LR
 2637: 243:     A[Code Push] -->|Build| B[Tests]
 2638: 244:     B -->|Pass| C[Deploy]
 2639: 245:     C -->|Success| D[Monitor]
 2640: 246:     D -->|Issues| E[Rollback]
 2641: 247: ```
 2642: 248: 
 2643: 249: ## Additional Resources
 2644: 250: 
 2645: 251: - [Installation Guide](/setup/installation)
 2646: 252: - [Configuration Guide](/setup/configuration)
 2647: 253: - [API Documentation](/api/)
 2648: 254: - [Troubleshooting Guide](/troubleshooting)
 2649: </file>
 2650: 
 2651: <file path="codebase.xml">
 2652:     1: This file is a merged representation of the entire codebase, combining all repository files into a single document.
 2653:     2: Generated by Repomix on: 2024-11-22T15:25:08.429Z
 2654:     3: 
 2655:     4: <file_summary>
 2656:     5: This section contains a summary of this file.
 2657:     6: 
 2658:     7: <purpose>
 2659:     8: This file contains a packed representation of the entire repository's contents.
 2660:     9: It is designed to be easily consumable by AI systems for analysis, code review,
 2661:    10: or other automated processes.
 2662:    11: </purpose>
 2663:    12: 
 2664:    13: <file_format>
 2665:    14: The content is organized as follows:
 2666:    15: 1. This summary section
 2667:    16: 2. Repository information
 2668:    17: 3. Repository structure
 2669:    18: 4. Repository files, each consisting of:
 2670:    19:   - File path as an attribute
 2671:    20:   - Full contents of the file
 2672:    21: </file_format>
 2673:    22: 
 2674:    23: <usage_guidelines>
 2675:    24: - This file should be treated as read-only. Any changes should be made to the
 2676:    25:   original repository files, not this packed version.
 2677:    26: - When processing this file, use the file path to distinguish
 2678:    27:   between different files in the repository.
 2679:    28: - Be aware that this file may contain sensitive information. Handle it with
 2680:    29:   the same level of security as you would the original repository.
 2681:    30: </usage_guidelines>
 2682:    31: 
 2683:    32: <notes>
 2684:    33: - Some files may have been excluded based on .gitignore rules and Repomix's
 2685:    34:   configuration.
 2686:    35: - Binary files are not included in this packed representation. Please refer to
 2687:    36:   the Repository Structure section for a complete list of file paths, including
 2688:    37:   binary files.
 2689:    38: 
 2690:    39: - Line numbers have been added to the beginning of each line.
 2691:    40: </notes>
 2692:    41: 
 2693:    42: <additional_info>
 2694:    43: 
 2695:    44: For more information about Repomix, visit: https://github.com/yamadashy/repomix
 2696:    45: </additional_info>
 2697:    46: 
 2698:    47: </file_summary>
 2699:    48: 
 2700:    49: <repository_structure>
 2701:    50: .vitepress/components/ApiExplorer.vue
 2702:    51: .vitepress/components/ArchitectureDiagram.vue
 2703:    52: .vitepress/components/FileTree.vue
 2704:    53: .vitepress/config.mts
 2705:    54: .vitepress/shims-vue.d.ts
 2706:    55: .vitepress/theme/custom.css
 2707:    56: .vitepress/theme/FirebaseAuth.vue
 2708:    57: .vitepress/theme/index.ts
 2709:    58: api/index.md
 2710:    59: architecture.md
 2711:    60: codebase.xml
 2712:    61: faq.md
 2713:    62: index.md
 2714:    63: introduction.md
 2715:    64: package.json
 2716:    65: performance.md
 2717:    66: security.md
 2718:    67: services/card-sync.md
 2719:    68: services/price-sync.md
 2720:    69: setup/configuration.md
 2721:    70: setup/installation.md
 2722:    71: troubleshooting.md
 2723:    72: usage-guide.md
 2724:    73: utils/batch.md
 2725:    74: utils/cache.md
 2726:    75: utils/error-handling.md
 2727:    76: utils/image-compressor.md
 2728:    77: utils/image-handler.md
 2729:    78: utils/image-validator.md
 2730:    79: utils/logging.md
 2731:    80: utils/progress.md
 2732:    81: utils/request.md
 2733:    82: utils/sync-logger.md
 2734:    83: </repository_structure>
 2735:    84: 
 2736:    85: <repository_files>
 2737:    86: This section contains the contents of the repository's files.
 2738:    87: 
 2739:    88: <file path=".vitepress/components/ApiExplorer.vue">
 2740:    89:    1: <script setup lang="ts">
 2741:    90:    2: import { ref, computed, watch, onMounted } from 'vue'
 2742:    91:    3: import { useDateFormat, useLocalStorage } from '@vueuse/core'
 2743:    92:    4: 
 2744:    93:    5: interface ApiEndpoint {
 2745:    94:    6:   name: string
 2746:    95:    7:   method: 'GET' | 'POST' | 'PUT' | 'DELETE'
 2747:    96:    8:   path: string
 2748:    97:    9:   description: string
 2749:    98:   10:   params?: Parameter[]
 2750:    99:   11:   responses: ApiResponse[]
 2751:   100:   12:   example?: {
 2752:   101:   13:     request?: string
 2753:   102:   14:     response?: string
 2754:   103:   15:   }
 2755:   104:   16:   authenticated: boolean
 2756:   105:   17:   tags?: string[]
 2757:   106:   18: }
 2758:   107:   19: 
 2759:   108:   20: interface Parameter {
 2760:   109:   21:   name: string
 2761:   110:   22:   type: string
 2762:   111:   23:   required: boolean
 2763:   112:   24:   description: string
 2764:   113:   25:   default?: string
 2765:   114:   26:   validation?: {
 2766:   115:   27:     pattern?: string
 2767:   116:   28:     min?: number
 2768:   117:   29:     max?: number
 2769:   118:   30:   }
 2770:   119:   31: }
 2771:   120:   32: 
 2772:   121:   33: interface ApiResponse {
 2773:   122:   34:   status: number
 2774:   123:   35:   description: string
 2775:   124:   36:   schema: string
 2776:   125:   37: }
 2777:   126:   38: 
 2778:   127:   39: interface ResponseState {
 2779:   128:   40:   loading: boolean
 2780:   129:   41:   data: any
 2781:   130:   42:   error: string | null
 2782:   131:   43:   headers: Record<string, string>
 2783:   132:   44:   status: number
 2784:   133:   45:   timestamp: number
 2785:   134:   46: }
 2786:   135:   47: 
 2787:   136:   48: interface RequestHeader {
 2788:   137:   49:   key: string
 2789:   138:   50:   value: string
 2790:   139:   51:   enabled: boolean
 2791:   140:   52: }
 2792:   141:   53: 
 2793:   142:   54: interface HistoryEntry {
 2794:   143:   55:   id: string
 2795:   144:   56:   endpoint: string
 2796:   145:   57:   method: string
 2797:   146:   58:   params: Record<string, any>
 2798:   147:   59:   headers: RequestHeader[]
 2799:   148:   60:   timestamp: number
 2800:   149:   61:   status: number
 2801:   150:   62:   success: boolean
 2802:   151:   63: }
 2803:   152:   64: 
 2804:   153:   65: const endpoints: ApiEndpoint[] = [
 2805:   154:   66:   {
 2806:   155:   67:     name: 'List Cards',
 2807:   156:   68:     method: 'GET',
 2808:   157:   69:     path: '/api/cards',
 2809:   158:   70:     description: 'Retrieve a list of all cards with optional filtering',
 2810:   159:   71:     authenticated: false,
 2811:   160:   72:     tags: ['cards'],
 2812:   161:   73:     params: [
 2813:   162:   74:       {
 2814:   163:   75:         name: 'groupId',
 2815:   164:   76:         type: 'string',
 2816:   165:   77:         required: false,
 2817:   166:   78:         description: 'Filter by specific group ID'
 2818:   167:   79:       },
 2819:   168:   80:       {
 2820:   169:   81:         name: 'limit',
 2821:   170:   82:         type: 'number',
 2822:   171:   83:         required: false,
 2823:   172:   84:         description: 'Maximum number of cards to return',
 2824:   173:   85:         default: '50'
 2825:   174:   86:       },
 2826:   175:   87:       {
 2827:   176:   88:         name: 'offset',
 2828:   177:   89:         type: 'number',
 2829:   178:   90:         required: false,
 2830:   179:   91:         description: 'Number of cards to skip',
 2831:   180:   92:         default: '0'
 2832:   181:   93:       }
 2833:   182:   94:     ],
 2834:   183:   95:     responses: [
 2835:   184:   96:       {
 2836:   185:   97:         status: 200,
 2837:   186:   98:         description: 'List of cards retrieved successfully',
 2838:   187:   99:         schema: `{
 2839:   188:  100:   "cards": [
 2840:   189:  101:     {
 2841:   190:  102:       "id": "string",
 2842:   191:  103:       "name": "string",
 2843:   192:  104:       "groupId": "string",
 2844:   193:  105:       "imageUrl": "string",
 2845:   194:  106:       "prices": {
 2846:   195:  107:         "normal": "number",
 2847:   196:  108:         "foil": "number"
 2848:   197:  109:       }
 2849:   198:  110:     }
 2850:   199:  111:   ],
 2851:   200:  112:   "total": "number",
 2852:   201:  113:   "limit": "number",
 2853:   202:  114:   "offset": "number"
 2854:   203:  115: }`
 2855:   204:  116:       }
 2856:   205:  117:     ]
 2857:   206:  118:   },
 2858:   207:  119:   {
 2859:   208:  120:     name: 'Get Card Details',
 2860:   209:  121:     method: 'GET',
 2861:   210:  122:     path: '/api/cards/{id}',
 2862:   211:  123:     description: 'Retrieve detailed information about a specific card',
 2863:   212:  124:     authenticated: false,
 2864:   213:  125:     tags: ['cards'],
 2865:   214:  126:     params: [
 2866:   215:  127:       {
 2867:   216:  128:         name: 'id',
 2868:   217:  129:         type: 'string',
 2869:   218:  130:         required: true,
 2870:   219:  131:         description: 'Card ID'
 2871:   220:  132:       }
 2872:   221:  133:     ],
 2873:   222:  134:     responses: [
 2874:   223:  135:       {
 2875:   224:  136:         status: 200,
 2876:   225:  137:         description: 'Card details retrieved successfully',
 2877:   226:  138:         schema: `{
 2878:   227:  139:   "id": "string",
 2879:   228:  140:   "name": "string",
 2880:   229:  141:   "groupId": "string",
 2881:   230:  142:   "imageUrl": "string",
 2882:   231:  143:   "prices": {
 2883:   232:  144:     "normal": "number",
 2884:   233:  145:     "foil": "number"
 2885:   234:  146:   },
 2886:   235:  147:   "priceHistory": [
 2887:   236:  148:     {
 2888:   237:  149:       "date": "string",
 2889:   238:  150:       "normal": "number",
 2890:   239:  151:       "foil": "number"
 2891:   240:  152:     }
 2892:   241:  153:   ]
 2893:   242:  154: }`
 2894:   243:  155:       }
 2895:   244:  156:     ]
 2896:   245:  157:   },
 2897:   246:  158:   {
 2898:   247:  159:     name: 'Trigger Card Sync',
 2899:   248:  160:     method: 'POST',
 2900:   249:  161:     path: '/api/sync/cards',
 2901:   250:  162:     description: 'Manually trigger card synchronization',
 2902:   251:  163:     authenticated: true,
 2903:   252:  164:     tags: ['sync'],
 2904:   253:  165:     params: [
 2905:   254:  166:       {
 2906:   255:  167:         name: 'dryRun',
 2907:   256:  168:         type: 'boolean',
 2908:   257:  169:         required: false,
 2909:   258:  170:         description: 'Run sync without making changes',
 2910:   259:  171:         default: 'false'
 2911:   260:  172:       },
 2912:   261:  173:       {
 2913:   262:  174:         name: 'groupId',
 2914:   263:  175:         type: 'string',
 2915:   264:  176:         required: false,
 2916:   265:  177:         description: 'Sync specific group only'
 2917:   266:  178:       }
 2918:   267:  179:     ],
 2919:   268:  180:     responses: [
 2920:   269:  181:       {
 2921:   270:  182:         status: 200,
 2922:   271:  183:         description: 'Sync initiated successfully',
 2923:   272:  184:         schema: `{
 2924:   273:  185:   "jobId": "string",
 2925:   274:  186:   "status": "string",
 2926:   275:  187:   "message": "string"
 2927:   276:  188: }`
 2928:   277:  189:       }
 2929:   278:  190:     ]
 2930:   279:  191:   },
 2931:   280:  192:   {
 2932:   281:  193:     name: 'Trigger Price Sync',
 2933:   282:  194:     method: 'POST',
 2934:   283:  195:     path: '/api/sync/prices',
 2935:   284:  196:     description: 'Manually trigger price synchronization',
 2936:   285:  197:     authenticated: true,
 2937:   286:  198:     tags: ['sync'],
 2938:   287:  199:     params: [
 2939:   288:  200:       {
 2940:   289:  201:         name: 'dryRun',
 2941:   290:  202:         type: 'boolean',
 2942:   291:  203:         required: false,
 2943:   292:  204:         description: 'Run sync without making changes',
 2944:   293:  205:         default: 'false'
 2945:   294:  206:       }
 2946:   295:  207:     ],
 2947:   296:  208:     responses: [
 2948:   297:  209:       {
 2949:   298:  210:         status: 200,
 2950:   299:  211:         description: 'Price sync initiated successfully',
 2951:   300:  212:         schema: `{
 2952:   301:  213:   "jobId": "string",
 2953:   302:  214:   "status": "string",
 2954:   303:  215:   "message": "string"
 2955:   304:  216: }`
 2956:   305:  217:       }
 2957:   306:  218:     ]
 2958:   307:  219:   },
 2959:   308:  220:   {
 2960:   309:  221:     name: 'Get Sync Status',
 2961:   310:  222:     method: 'GET',
 2962:   311:  223:     path: '/api/sync/status/{jobId}',
 2963:   312:  224:     description: 'Check the status of a sync operation',
 2964:   313:  225:     authenticated: true,
 2965:   314:  226:     tags: ['sync'],
 2966:   315:  227:     params: [
 2967:   316:  228:       {
 2968:   317:  229:         name: 'jobId',
 2969:   318:  230:         type: 'string',
 2970:   319:  231:         required: true,
 2971:   320:  232:         description: 'Sync job ID'
 2972:   321:  233:       }
 2973:   322:  234:     ],
 2974:   323:  235:     responses: [
 2975:   324:  236:       {
 2976:   325:  237:         status: 200,
 2977:   326:  238:         description: 'Sync status retrieved successfully',
 2978:   327:  239:         schema: `{
 2979:   328:  240:   "jobId": "string",
 2980:   329:  241:   "status": "string",
 2981:   330:  242:   "progress": "number",
 2982:   331:  243:   "details": {
 2983:   332:  244:     "processed": "number",
 2984:   333:  245:     "total": "number",
 2985:   334:  246:     "errors": "number"
 2986:   335:  247:   }
 2987:   336:  248: }`
 2988:   337:  249:       }
 2989:   338:  250:     ]
 2990:   339:  251:   }
 2991:   340:  252: ]
 2992:   341:  253: 
 2993:   342:  254: const BASE_URL = 'https://us-central1-fftcg-sync-service.cloudfunctions.net'
 2994:   343:  255: const selectedEndpoint = ref<ApiEndpoint>(endpoints[0])
 2995:   344:  256: const showResponse = ref(true)
 2996:   345:  257: const showHeaders = ref(false)
 2997:   346:  258: const showHistory = ref(false)
 2998:   347:  259: const showResponseHeaders = ref(false)
 2999:   348:  260: const customHeaders = ref<RequestHeader[]>([
 3000:   349:  261:   { key: 'Accept', value: 'application/json', enabled: true }
 3001:   350:  262: ])
 3002:   351:  263: const history = ref<HistoryEntry[]>([])
 3003:   352:  264: const selectedTags = ref<string[]>([])
 3004:   353:  265: const showAuthenticated = ref(true)
 3005:   354:  266: const searchQuery = ref('')
 3006:   355:  267: 
 3007:   356:  268: // Response state
 3008:   357:  269: const responseState = ref<ResponseState>({
 3009:   358:  270:   loading: false,
 3010:   359:  271:   data: null,
 3011:   360:  272:   error: null,
 3012:   361:  273:   headers: {},
 3013:   362:  274:   status: 0,
 3014:   363:  275:   timestamp: 0
 3015:   364:  276: })
 3016:   365:  277: 
 3017:   366:  278: const paramValues = ref<Record<string, any>>({})
 3018:   367:  279: 
 3019:   368:  280: // Computed properties
 3020:   369:  281: const methodColor = computed(() => {
 3021:   370:  282:   switch (selectedEndpoint.value.method) {
 3022:   371:  283:     case 'GET': return 'var(--vp-c-green)'
 3023:   372:  284:     case 'POST': return 'var(--vp-c-brand)'
 3024:   373:  285:     case 'PUT': return 'var(--vp-c-yellow)'
 3025:   374:  286:     case 'DELETE': return 'var(--vp-c-red)'
 3026:   375:  287:     default: return 'var(--vp-c-text-1)'
 3027:   376:  288:   }
 3028:   377:  289: })
 3029:   378:  290: 
 3030:   379:  291: const filteredEndpoints = computed(() => {
 3031:   380:  292:   return endpoints.filter(endpoint => {
 3032:   381:  293:     const matchesSearch = endpoint.name.toLowerCase().includes(searchQuery.value.toLowerCase()) ||
 3033:   382:  294:                          endpoint.path.toLowerCase().includes(searchQuery.value.toLowerCase())
 3034:   383:  295:     const matchesTags = selectedTags.value.length === 0 || 
 3035:   384:  296:                        endpoint.tags?.some(tag => selectedTags.value.includes(tag))
 3036:   385:  297:     const matchesAuth = showAuthenticated.value || !endpoint.authenticated
 3037:   386:  298:     
 3038:   387:  299:     return matchesSearch && matchesTags && matchesAuth
 3039:   388:  300:   })
 3040:   389:  301: })
 3041:   390:  302: 
 3042:   391:  303: const formattedDate = computed(() => {
 3043:   392:  304:   return (timestamp: number) => {
 3044:   393:  305:     return new Date(timestamp).toLocaleString()
 3045:   394:  306:   }
 3046:   395:  307: })
 3047:   396:  308: 
 3048:   397:  309: // Lifecycle hooks
 3049:   398:  310: onMounted(() => {
 3050:   399:  311:   const savedHistory = localStorage.getItem('api-explorer-history')
 3051:   400:  312:   if (savedHistory) {
 3052:   401:  313:     history.value = JSON.parse(savedHistory)
 3053:   402:  314:   }
 3054:   403:  315:   
 3055:   404:  316:   initParamValues(selectedEndpoint.value)
 3056:   405:  317: })
 3057:   406:  318: 
 3058:   407:  319: // Methods
 3059:   408:  320: function initParamValues(endpoint: ApiEndpoint) {
 3060:   409:  321:   const values: Record<string, any> = {}
 3061:   410:  322:   endpoint.params?.forEach(param => {
 3062:   411:  323:     values[param.name] = param.default || ''
 3063:   412:  324:   })
 3064:   413:  325:   paramValues.value = values
 3065:   414:  326: }
 3066:   415:  327: 
 3067:   416:  328: function addHeader() {
 3068:   417:  329:   customHeaders.value.push({ key: '', value: '', enabled: true })
 3069:   418:  330: }
 3070:   419:  331: 
 3071:   420:  332: function removeHeader(index: number) {
 3072:   421:  333:   customHeaders.value.splice(index, 1)
 3073:   422:  334: }
 3074:   423:  335: 
 3075:   424:  336: function getEnabledHeaders(): Record<string, string> {
 3076:   425:  337:   return customHeaders.value
 3077:   426:  338:     .filter(h => h.enabled && h.key.trim() !== '')
 3078:   427:  339:     .reduce((acc, h) => ({ ...acc, [h.key]: h.value }), {})
 3079:   428:  340: }
 3080:   429:  341: 
 3081:   430:  342: async function copyToClipboard(text: string) {
 3082:   431:  343:   try {
 3083:   432:  344:     await navigator.clipboard.writeText(text)
 3084:   433:  345:     // Show success message
 3085:   434:  346:   } catch (err) {
 3086:   435:  347:     // Show error message
 3087:   436:  348:   }
 3088:   437:  349: }
 3089:   438:  350: 
 3090:   439:  351: function saveAsJson(data: any, filename: string) {
 3091:   440:  352:   const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' })
 3092:   441:  353:   const url = URL.createObjectURL(blob)
 3093:   442:  354:   const link = document.createElement('a')
 3094:   443:  355:   link.href = url
 3095:   444:  356:   link.download = filename
 3096:   445:  357:   document.body.appendChild(link)
 3097:   446:  358:   link.click()
 3098:   447:  359:   document.body.removeChild(link)
 3099:   448:  360:   URL.revokeObjectURL(url)
 3100:   449:  361: }
 3101:   450:  362: 
 3102:   451:  363: function addToHistory(entry: Omit<HistoryEntry, 'id'>) {
 3103:   452:  364:   const newEntry: HistoryEntry = {
 3104:   453:  365:     ...entry,
 3105:   454:  366:     id: crypto.randomUUID()
 3106:   455:  367:   }
 3107:   456:  368:   history.value.unshift(newEntry)
 3108:   457:  369:   if (history.value.length > 50) {
 3109:   458:  370:     history.value.pop()
 3110:   459:  371:   }
 3111:   460:  372:   localStorage.setItem('api-explorer-history', JSON.stringify(history.value))
 3112:   461:  373: }
 3113:   462:  374: 
 3114:   463:  375: async function replayRequest(historyEntry: HistoryEntry) {
 3115:   464:  376:   paramValues.value = { ...historyEntry.params }
 3116:   465:  377:   customHeaders.value = [...historyEntry.headers]
 3117:   466:  378:   const endpoint = endpoints.find(e => e.path === historyEntry.endpoint)
 3118:   467:  379:   if (endpoint) {
 3119:   468:  380:     selectedEndpoint.value = endpoint
 3120:   469:  381:     await tryEndpoint(endpoint)
 3121:   470:  382:   }
 3122:   471:  383: }
 3123:   472:  384: 
 3124:   473:  385: async function tryEndpoint(endpoint: ApiEndpoint) {
 3125:   474:  386:   responseState.value = {
 3126:   475:  387:     loading: true,
 3127:   476:  388:     data: null,
 3128:   477:  389:     error: null,
 3129:   478:  390:     headers: {},
 3130:   479:  391:     status: 0,
 3131:   480:  392:     timestamp: Date.now()
 3132:   481:  393:   }
 3133:   482:  394: 
 3134:   483:  395:   try {
 3135:   484:  396:     if (endpoint.authenticated && !getAuthToken()) {
 3136:   485:  397:       throw new Error('Authentication required for this endpoint')
 3137:   486:  398:     }
 3138:   487:  399: 
 3139:   488:  400:     const url = new URL(`${BASE_URL}${endpoint.path}`)
 3140:   489:  401:     if (endpoint.params) {
 3141:   490:  402:       Object.entries(paramValues.value).forEach(([key, value]) => {
 3142:   491:  403:         if (value !== '') {
 3143:   492:  404:           url.searchParams.append(key, value.toString())
 3144:   493:  405:         }
 3145:   494:  406:       })
 3146:   495:  407:     }
 3147:   496:  408: 
 3148:   497:  409:     const headers = getEnabledHeaders()
 3149:   498:  410:     const response = await fetch(url.toString(), {
 3150:   499:  411:       method: endpoint.method,
 3151:   500:  412:       headers
 3152:   501:  413:     })
 3153:   502:  414: 
 3154:   503:  415:     const responseHeaders: Record<string, string> = {}
 3155:   504:  416:     response.headers.forEach((value, key) => {
 3156:   505:  417:       responseHeaders[key] = value
 3157:   506:  418:     })
 3158:   507:  419: 
 3159:   508:  420:     const data = await response.json()
 3160:   509:  421: 
 3161:   510:  422:     if (!response.ok) {
 3162:   511:  423:       throw new Error(data.error || 'An error occurred')
 3163:   512:  424:     }
 3164:   513:  425: 
 3165:   514:  426:     responseState.value = {
 3166:   515:  427:       loading: false,
 3167:   516:  428:       data,
 3168:   517:  429:       error: null,
 3169:   518:  430:       headers: responseHeaders,
 3170:   519:  431:       status: response.status,
 3171:   520:  432:       timestamp: Date.now()
 3172:   521:  433:     }
 3173:   522:  434: 
 3174:   523:  435:     addToHistory({
 3175:   524:  436:       endpoint: endpoint.path,
 3176:   525:  437:       method: endpoint.method,
 3177:   526:  438:       params: { ...paramValues.value },
 3178:   527:  439:       headers: [...customHeaders.value],
 3179:   528:  440:       timestamp: Date.now(),
 3180:   529:  441:       status: response.status,
 3181:   530:  442:       success: true
 3182:   531:  443:     })
 3183:   532:  444: 
 3184:   533:  445:   } catch (error) {
 3185:   534:  446:     responseState.value = {
 3186:   535:  447:       ...responseState.value,
 3187:   536:  448:       loading: false,
 3188:   537:  449:       error: error instanceof Error ? error.message : 'An error occurred',
 3189:   538:  450:       status: error instanceof Error && error.message.includes('Authentication') ? 401 : 500
 3190:   539:  451:     }
 3191:   540:  452: 
 3192:   541:  453:     addToHistory({
 3193:   542:  454:       endpoint: endpoint.path,
 3194:   543:  455:       method: endpoint.method,
 3195:   544:  456:       params: { ...paramValues.value },
 3196:   545:  457:       headers: [...customHeaders.value],
 3197:   546:  458:       timestamp: Date.now(),
 3198:   547:  459:       status: responseState.value.status,
 3199:   548:  460:       success: false
 3200:   549:  461:     })
 3201:   550:  462:   }
 3202:   551:  463: }
 3203:   552:  464: 
 3204:   553:  465: function getAuthToken(): string | null {
 3205:   554:  466:   // Implement based on your auth system
 3206:   555:  467:   return null
 3207:   556:  468: }
 3208:   557:  469: 
 3209:   558:  470: // Watch for endpoint changes
 3210:   559:  471: watch(selectedEndpoint, (newEndpoint) => {
 3211:   560:  472:   initParamValues(newEndpoint)
 3212:   561:  473:   responseState.value = {
 3213:   562:  474:     loading: false,
 3214:   563:  475:     data: null,
 3215:   564:  476:     error: null,
 3216:   565:  477:     headers: {},
 3217:   566:  478:     status: 0,
 3218:   567:  479:     timestamp: 0
 3219:   568:  480:   }
 3220:   569:  481: })
 3221:   570:  482: </script>
 3222:   571:  483: 
 3223:   572:  484: <template>
 3224:   573:  485:   <div class="api-explorer">
 3225:   574:  486:     <div class="sidebar">
 3226:   575:  487:       <!-- Search and Filter Section -->
 3227:   576:  488:       <div class="search-section">
 3228:   577:  489:         <input
 3229:   578:  490:           v-model="searchQuery"
 3230:   579:  491:           type="text"
 3231:   580:  492:           placeholder="Search endpoints..."
 3232:   581:  493:           class="search-input"
 3233:   582:  494:         />
 3234:   583:  495:         <div class="filter-options">
 3235:   584:  496:           <div class="tags">
 3236:   585:  497:             <button
 3237:   586:  498:               v-for="tag in ['cards', 'sync']"
 3238:   587:  499:               :key="tag"
 3239:   588:  500:               class="tag-button"
 3240:   589:  501:               :class="{ active: selectedTags.includes(tag) }"
 3241:   590:  502:               @click="selectedTags = selectedTags.includes(tag) 
 3242:   591:  503:                 ? selectedTags.filter(t => t !== tag)
 3243:   592:  504:                 : [...selectedTags, tag]"
 3244:   593:  505:             >
 3245:   594:  506:               {{ tag }}
 3246:   595:  507:             </button>
 3247:   596:  508:           </div>
 3248:   597:  509:           <label class="auth-toggle">
 3249:   598:  510:             <input
 3250:   599:  511:               type="checkbox"
 3251:   600:  512:               v-model="showAuthenticated"
 3252:   601:  513:             >
 3253:   602:  514:             Show authenticated
 3254:   603:  515:           </label>
 3255:   604:  516:         </div>
 3256:   605:  517:       </div>
 3257:   606:  518: 
 3258:   607:  519:       <!-- Endpoint List -->
 3259:   608:  520:       <div class="endpoint-list">
 3260:   609:  521:         <div
 3261:   610:  522:           v-for="endpoint in filteredEndpoints"
 3262:   611:  523:           :key="endpoint.path"
 3263:   612:  524:           class="endpoint-item"
 3264:   613:  525:           :class="{ 
 3265:   614:  526:             active: endpoint === selectedEndpoint,
 3266:   615:  527:             authenticated: endpoint.authenticated
 3267:   616:  528:           }"
 3268:   617:  529:           @click="selectedEndpoint = endpoint"
 3269:   618:  530:         >
 3270:   619:  531:           <div class="endpoint-item-header">
 3271:   620:  532:             <span class="method" :style="{ color: methodColor }">
 3272:   621:  533:               {{ endpoint.method }}
 3273:   622:  534:             </span>
 3274:   623:  535:             <span class="name">{{ endpoint.name }}</span>
 3275:   624:  536:           </div>
 3276:   625:  537:           <div class="endpoint-path">{{ endpoint.path }}</div>
 3277:   626:  538:         </div>
 3278:   627:  539:       </div>
 3279:   628:  540: 
 3280:   629:  541:       <!-- History Section -->
 3281:   630:  542:       <div class="history-section">
 3282:   631:  543:         <div class="history-toggle" @click="showHistory = !showHistory">
 3283:   632:  544:           <span>History</span>
 3284:   633:  545:           <span class="toggle-icon">{{ showHistory ? '▼' : '▶' }}</span>
 3285:   634:  546:         </div>
 3286:   635:  547: 
 3287:   636:  548:         <div v-if="showHistory" class="history-panel">
 3288:   637:  549:           <div
 3289:   638:  550:             v-for="entry in history"
 3290:   639:  551:             :key="entry.id"
 3291:   640:  552:             class="history-entry"
 3292:   641:  553:             :class="{ 
 3293:   642:  554:               'history-success': entry.success,
 3294:   643:  555:               'history-error': !entry.success
 3295:   644:  556:             }"
 3296:   645:  557:             @click="replayRequest(entry)"
 3297:   646:  558:           >
 3298:   647:  559:             <div class="history-entry-header">
 3299:   648:  560:               <span class="history-method">{{ entry.method }}</span>
 3300:   649:  561:               <span 
 3301:   650:  562:                 class="history-status"
 3302:   651:  563:                 :class="{ 
 3303:   652:  564:                   'status-success': entry.status < 400,
 3304:   653:  565:                   'status-error': entry.status >= 400
 3305:   654:  566:                 }"
 3306:   655:  567:               >
 3307:   656:  568:                 {{ entry.status }}
 3308:   657:  569:               </span>
 3309:   658:  570:             </div>
 3310:   659:  571:             <div class="history-endpoint">{{ entry.endpoint }}</div>
 3311:   660:  572:             <div class="history-timestamp">
 3312:   661:  573:               {{ formattedDate(entry.timestamp) }}
 3313:   662:  574:             </div>
 3314:   663:  575:           </div>
 3315:   664:  576:         </div>
 3316:   665:  577:       </div>
 3317:   666:  578:     </div>
 3318:   667:  579: 
 3319:   668:  580:     <div class="content">
 3320:   669:  581:       <!-- Endpoint Details -->
 3321:   670:  582:       <div class="endpoint-header">
 3322:   671:  583:         <div class="endpoint-title">
 3323:   672:  584:           <h3>{{ selectedEndpoint.name }}</h3>
 3324:   673:  585:           <span 
 3325:   674:  586:             v-if="selectedEndpoint.authenticated"
 3326:   675:  587:             class="auth-badge"
 3327:   676:  588:             title="Requires authentication"
 3328:   677:  589:           >
 3329:   678:  590:             🔒
 3330:   679:  591:           </span>
 3331:   680:  592:         </div>
 3332:   681:  593:         <div class="endpoint-path">
 3333:   682:  594:           <span class="method" :style="{ color: methodColor }">
 3334:   683:  595:             {{ selectedEndpoint.method }}
 3335:   684:  596:           </span>
 3336:   685:  597:           <code>{{ selectedEndpoint.path }}</code>
 3337:   686:  598:         </div>
 3338:   687:  599:       </div>
 3339:   688:  600: 
 3340:   689:  601:       <div class="description">
 3341:   690:  602:         {{ selectedEndpoint.description }}
 3342:   691:  603:       </div>
 3343:   692:  604: 
 3344:   693:  605:       <!-- Tags -->
 3345:   694:  606:       <div v-if="selectedEndpoint.tags?.length" class="endpoint-tags">
 3346:   695:  607:         <span 
 3347:   696:  608:           v-for="tag in selectedEndpoint.tags"
 3348:   697:  609:           :key="tag"
 3349:   698:  610:           class="tag"
 3350:   699:  611:         >
 3351:   700:  612:           {{ tag }}
 3352:   701:  613:         </span>
 3353:   702:  614:       </div>
 3354:   703:  615: 
 3355:   704:  616:       <!-- Headers Section -->
 3356:   705:  617:       <div class="headers-section">
 3357:   706:  618:         <div class="section-header" @click="showHeaders = !showHeaders">
 3358:   707:  619:           <h4>Headers</h4>
 3359:   708:  620:           <span class="toggle-icon">{{ showHeaders ? '▼' : '▶' }}</span>
 3360:   709:  621:         </div>
 3361:   710:  622:         <div v-if="showHeaders" class="headers-content">
 3362:   711:  623:           <div
 3363:   712:  624:             v-for="(header, index) in customHeaders"
 3364:   713:  625:             :key="index"
 3365:   714:  626:             class="header-input"
 3366:   715:  627:           >
 3367:   716:  628:             <input
 3368:   717:  629:               v-model="header.key"
 3369:   718:  630:               placeholder="Header name"
 3370:   719:  631:               class="header-key"
 3371:   720:  632:             />
 3372:   721:  633:             <input
 3373:   722:  634:               v-model="header.value"
 3374:   723:  635:               placeholder="Header value"
 3375:   724:  636:               class="header-value"
 3376:   725:  637:             />
 3377:   726:  638:             <label class="header-enabled">
 3378:   727:  639:               <input type="checkbox" v-model="header.enabled" />
 3379:   728:  640:               Enable
 3380:   729:  641:             </label>
 3381:   730:  642:             <button
 3382:   731:  643:               class="remove-header"
 3383:   732:  644:               @click="removeHeader(index)"
 3384:   733:  645:             >
 3385:   734:  646:               ✕
 3386:   735:  647:             </button>
 3387:   736:  648:           </div>
 3388:   737:  649:           <button class="add-header" @click="addHeader">
 3389:   738:  650:             Add Header
 3390:   739:  651:           </button>
 3391:   740:  652:         </div>
 3392:   741:  653:       </div>
 3393:   742:  654: 
 3394:   743:  655:       <!-- Parameters Section -->
 3395:   744:  656:       <template v-if="selectedEndpoint.params?.length">
 3396:   745:  657:         <h4>Parameters</h4>
 3397:   746:  658:         <div class="params-form">
 3398:   747:  659:           <div
 3399:   748:  660:             v-for="param in selectedEndpoint.params"
 3400:   749:  661:             :key="param.name"
 3401:   750:  662:             class="param-input"
 3402:   751:  663:           >
 3403:   752:  664:             <label :for="param.name">
 3404:   753:  665:               {{ param.name }}
 3405:   754:  666:               <span v-if="param.required" class="required">*</span>
 3406:   755:  667:             </label>
 3407:   756:  668:             <input
 3408:   757:  669:               :id="param.name"
 3409:   758:  670:               v-model="paramValues[param.name]"
 3410:   759:  671:               :type="param.type === 'number' ? 'number' : 'text'"
 3411:   760:  672:               :placeholder="param.description"
 3412:   761:  673:               :required="param.required"
 3413:   762:  674:             />
 3414:   763:  675:           </div>
 3415:   764:  676:           <button
 3416:   765:  677:             class="try-button"
 3417:   766:  678:             @click="tryEndpoint(selectedEndpoint)"
 3418:   767:  679:             :disabled="responseState.loading"
 3419:   768:  680:           >
 3420:   769:  681:             {{ responseState.loading ? 'Loading...' : 'Try it' }}
 3421:   770:  682:           </button>
 3422:   771:  683:         </div>
 3423:   772:  684:       </template>
 3424:   773:  685: 
 3425:   774:  686:       <!-- Response Section -->
 3426:   775:  687:       <div 
 3427:   776:  688:         v-if="responseState.data || responseState.error" 
 3428:   777:  689:         class="live-response"
 3429:   778:  690:         :class="{ 'response-error': responseState.error }"
 3430:   779:  691:       >
 3431:   780:  692:         <div class="response-header">
 3432:   781:  693:           <h4>Response</h4>
 3433:   782:  694:           <div class="response-actions">
 3434:   783:  695:             <button
 3435:   784:  696:               class="action-button"
 3436:   785:  697:               @click="copyToClipboard(JSON.stringify(responseState.data, null, 2))"
 3437:   786:  698:               v-if="responseState.data"
 3438:   787:  699:             >
 3439:   788:  700:               Copy
 3440:   789:  701:             </button>
 3441:   790:  702:             <button
 3442:   791:  703:               class="action-button"
 3443:   792:  704:               @click="saveAsJson(responseState.data, `response-${Date.now()}.json`)"
 3444:   793:  705:               v-if="responseState.data"
 3445:   794:  706:             >
 3446:   795:  707:               Save
 3447:   796:  708:             </button>
 3448:   797:  709:           </div>
 3449:   798:  710:         </div>
 3450:   799:  711: 
 3451:   800:  712:         <!-- Response Status and Headers -->
 3452:   801:  713:         <div v-if="responseState.status" class="response-status">
 3453:   802:  714:           Status: {{ responseState.status }}
 3454:   803:  715:         </div>
 3455:   804:  716:        
 3456:   805:  717:         <div v-if="Object.keys(responseState.headers).length" class="response-headers">
 3457:   806:  718:           <div class="section-header" @click="showResponseHeaders = !showResponseHeaders">
 3458:   807:  719:             <span>Response Headers</span>
 3459:   808:  720:             <span class="toggle-icon">{{ showResponseHeaders ? '▼' : '▶' }}</span>
 3460:   809:  721:           </div>
 3461:   810:  722:           <div v-if="showResponseHeaders" class="headers-list">
 3462:   811:  723:             <div
 3463:   812:  724:               v-for="(value, key) in responseState.headers"
 3464:   813:  725:               :key="key"
 3465:   814:  726:               class="header-item"
 3466:   815:  727:             >
 3467:   816:  728:               <span class="header-key">{{ key }}:</span>
 3468:   817:  729:               <span class="header-value">{{ value }}</span>
 3469:   818:  730:             </div>
 3470:   819:  731:           </div>
 3471:   820:  732:         </div>
 3472:   821:  733: 
 3473:   822:  734:         <div v-if="responseState.error" class="error-message">
 3474:   823:  735:           {{ responseState.error }}
 3475:   824:  736:         </div>
 3476:   825:  737:         <pre v-else class="response-data">
 3477:   826:  738:           <code>{{ JSON.stringify(responseState.data, null, 2) }}</code>
 3478:   827:  739:         </pre>
 3479:   828:  740:       </div>
 3480:   829:  741: 
 3481:   830:  742:       <!-- Response Schema Section -->
 3482:   831:  743:       <h4>Response Schema</h4>
 3483:   832:  744:       <div
 3484:   833:  745:         v-for="response in selectedEndpoint.responses"
 3485:   834:  746:         :key="response.status"
 3486:   835:  747:         class="response-section"
 3487:   836:  748:       >
 3488:   837:  749:         <div class="response-header">
 3489:   838:  750:           <span
 3490:   839:  751:             class="status"
 3491:   840:  752:             :class="response.status < 400 ? 'success' : 'error'"
 3492:   841:  753:           >
 3493:   842:  754:             {{ response.status }}
 3494:   843:  755:           </span>
 3495:   844:  756:           <span class="description">{{ response.description }}</span>
 3496:   845:  757:         </div>
 3497:   846:  758:         <pre class="schema"><code>{{ response.schema }}</code></pre>
 3498:   847:  759:       </div>
 3499:   848:  760:     </div>
 3500:   849:  761:   </div>
 3501:   850:  762: </template>
 3502:   851:  763: 
 3503:   852:  764: <style scoped>
 3504:   853:  765: .api-explorer {
 3505:   854:  766:   display: grid;
 3506:   855:  767:   grid-template-columns: 300px 1fr;
 3507:   856:  768:   gap: 20px;
 3508:   857:  769:   background: var(--custom-api-bg);
 3509:   858:  770:   border-radius: 8px;
 3510:   859:  771:   overflow: hidden;
 3511:   860:  772:   border: 1px solid var(--vp-c-divider);
 3512:   861:  773:   height: 800px;
 3513:   862:  774: }
 3514:   863:  775: 
 3515:   864:  776: .sidebar {
 3516:   865:  777:   background: var(--vp-c-bg-soft);
 3517:   866:  778:   padding: 1rem;
 3518:   867:  779:   border-right: 1px solid var(--vp-c-divider);
 3519:   868:  780:   overflow-y: auto;
 3520:   869:  781:   display: flex;
 3521:   870:  782:   flex-direction: column;
 3522:   871:  783: }
 3523:   872:  784: 
 3524:   873:  785: .search-section {
 3525:   874:  786:   margin-bottom: 1rem;
 3526:   875:  787:   padding: 0.5rem;
 3527:   876:  788: }
 3528:   877:  789: 
 3529:   878:  790: .search-input {
 3530:   879:  791:   width: 100%;
 3531:   880:  792:   padding: 0.5rem;
 3532:   881:  793:   border: 1px solid var(--vp-c-divider);
 3533:   882:  794:   border-radius: 4px;
 3534:   883:  795:   background: var(--vp-c-bg);
 3535:   884:  796:   color: var(--vp-c-text-1);
 3536:   885:  797:   margin-bottom: 0.5rem;
 3537:   886:  798: }
 3538:   887:  799: 
 3539:   888:  800: .filter-options {
 3540:   889:  801:   display: flex;
 3541:   890:  802:   flex-direction: column;
 3542:   891:  803:   gap: 0.5rem;
 3543:   892:  804: }
 3544:   893:  805: 
 3545:   894:  806: .tags {
 3546:   895:  807:   display: flex;
 3547:   896:  808:   flex-wrap: wrap;
 3548:   897:  809:   gap: 0.25rem;
 3549:   898:  810: }
 3550:   899:  811: 
 3551:   900:  812: .tag-button {
 3552:   901:  813:   padding: 0.25rem 0.5rem;
 3553:   902:  814:   border-radius: 4px;
 3554:   903:  815:   border: 1px solid var(--vp-c-divider);
 3555:   904:  816:   background: var(--vp-c-bg);
 3556:   905:  817:   cursor: pointer;
 3557:   906:  818:   font-size: 0.8rem;
 3558:   907:  819: }
 3559:   908:  820: 
 3560:   909:  821: .tag-button.active {
 3561:   910:  822:   background: var(--vp-c-brand);
 3562:   911:  823:   color: white;
 3563:   912:  824:   border-color: var(--vp-c-brand);
 3564:   913:  825: }
 3565:   914:  826: 
 3566:   915:  827: .auth-toggle {
 3567:   916:  828:   display: flex;
 3568:   917:  829:   align-items: center;
 3569:   918:  830:   gap: 0.5rem;
 3570:   919:  831:   font-size: 0.9rem;
 3571:   920:  832: }
 3572:   921:  833: 
 3573:   922:  834: .endpoint-list {
 3574:   923:  835:   flex: 1;
 3575:   924:  836:   overflow-y: auto;
 3576:   925:  837: }
 3577:   926:  838: 
 3578:   927:  839: .endpoint-item {
 3579:   928:  840:   padding: 0.75rem;
 3580:   929:  841:   border-radius: 6px;
 3581:   930:  842:   margin-bottom: 0.5rem;
 3582:   931:  843:   cursor: pointer;
 3583:   932:  844:   transition: all 0.2s ease;
 3584:   933:  845: }
 3585:   934:  846: 
 3586:   935:  847: .endpoint-item:hover {
 3587:   936:  848:   background: var(--vp-c-bg-mute);
 3588:   937:  849: }
 3589:   938:  850: 
 3590:   939:  851: .endpoint-item.active {
 3591:   940:  852:   background: var(--vp-c-brand-dimm);
 3592:   941:  853: }
 3593:   942:  854: 
 3594:   943:  855: .endpoint-item.authenticated::after {
 3595:   944:  856:   content: "🔒";
 3596:   945:  857:   float: right;
 3597:   946:  858:   font-size: 0.8rem;
 3598:   947:  859: }
 3599:   948:  860: 
 3600:   949:  861: .endpoint-item-header {
 3601:   950:  862:   display: flex;
 3602:   951:  863:   align-items: center;
 3603:   952:  864:   gap: 0.5rem;
 3604:   953:  865:   margin-bottom: 0.25rem;
 3605:   954:  866: }
 3606:   955:  867: 
 3607:   956:  868: .endpoint-path {
 3608:   957:  869:   font-size: 0.8rem;
 3609:   958:  870:   color: var(--vp-c-text-2);
 3610:   959:  871:   word-break: break-all;
 3611:   960:  872: }
 3612:   961:  873: 
 3613:   962:  874: .history-toggle {
 3614:   963:  875:   margin-top: auto;
 3615:   964:  876:   padding: 0.75rem;
 3616:   965:  877:   cursor: pointer;
 3617:   966:  878:   display: flex;
 3618:   967:  879:   justify-content: space-between;
 3619:   968:  880:   align-items: center;
 3620:   969:  881:   background: var(--vp-c-bg-mute);
 3621:   970:  882:   border-radius: 6px;
 3622:   971:  883:   margin-top: 1rem;
 3623:   972:  884: }
 3624:   973:  885: 
 3625:   974:  886: .history-panel {
 3626:   975:  887:   margin-top: 0.5rem;
 3627:   976:  888:   border-top: 1px solid var(--vp-c-divider);
 3628:   977:  889:   padding-top: 0.5rem;
 3629:   978:  890: }
 3630:   979:  891: 
 3631:   980:  892: .history-entry {
 3632:   981:  893:   padding: 0.5rem;
 3633:   982:  894:   border-radius: 4px;
 3634:   983:  895:   margin-bottom: 0.5rem;
 3635:   984:  896:   cursor: pointer;
 3636:   985:  897:   background: var(--vp-c-bg-mute);
 3637:   986:  898:   border: 1px solid var(--vp-c-divider);
 3638:   987:  899:   transition: all 0.2s ease;
 3639:   988:  900: }
 3640:   989:  901: 
 3641:   990:  902: .history-entry:hover {
 3642:   991:  903:   background: var(--vp-c-bg);
 3643:   992:  904: }
 3644:   993:  905: 
 3645:   994:  906: .history-entry.history-success {
 3646:   995:  907:   border-left: 3px solid var(--vp-c-green);
 3647:   996:  908: }
 3648:   997:  909: 
 3649:   998:  910: .history-entry.history-error {
 3650:   999:  911:   border-left: 3px solid var(--vp-c-red);
 3651:  1000:  912: }
 3652:  1001:  913: 
 3653:  1002:  914: .history-entry-header {
 3654:  1003:  915:   display: flex;
 3655:  1004:  916:   justify-content: space-between;
 3656:  1005:  917:   margin-bottom: 0.25rem;
 3657:  1006:  918: }
 3658:  1007:  919: 
 3659:  1008:  920: .history-method {
 3660:  1009:  921:   font-weight: 600;
 3661:  1010:  922: }
 3662:  1011:  923: 
 3663:  1012:  924: .history-status {
 3664:  1013:  925:   font-size: 0.9em;
 3665:  1014:  926: }
 3666:  1015:  927: 
 3667:  1016:  928: .status-success {
 3668:  1017:  929:   color: var(--vp-c-green);
 3669:  1018:  930: }
 3670:  1019:  931: 
 3671:  1020:  932: .status-error {
 3672:  1021:  933:   color: var(--vp-c-red);
 3673:  1022:  934: }
 3674:  1023:  935: 
 3675:  1024:  936: .history-endpoint {
 3676:  1025:  937:   font-size: 0.9em;
 3677:  1026:  938:   margin-bottom: 0.25rem;
 3678:  1027:  939: }
 3679:  1028:  940: 
 3680:  1029:  941: .history-timestamp {
 3681:  1030:  942:   font-size: 0.8em;
 3682:  1031:  943:   color: var(--vp-c-text-2);
 3683:  1032:  944: }
 3684:  1033:  945: 
 3685:  1034:  946: .content {
 3686:  1035:  947:   padding: 1rem;
 3687:  1036:  948:   overflow-y: auto;
 3688:  1037:  949: }
 3689:  1038:  950: 
 3690:  1039:  951: .endpoint-header {
 3691:  1040:  952:   margin-bottom: 1rem;
 3692:  1041:  953: }
 3693:  1042:  954: 
 3694:  1043:  955: .endpoint-title {
 3695:  1044:  956:   display: flex;
 3696:  1045:  957:   align-items: center;
 3697:  1046:  958:   gap: 0.5rem;
 3698:  1047:  959: }
 3699:  1048:  960: 
 3700:  1049:  961: .auth-badge {
 3701:  1050:  962:   font-size: 1rem;
 3702:  1051:  963:   cursor: help;
 3703:  1052:  964: }
 3704:  1053:  965: 
 3705:  1054:  966: .endpoint-tags {
 3706:  1055:  967:   display: flex;
 3707:  1056:  968:   gap: 0.5rem;
 3708:  1057:  969:   margin: 0.5rem 0;
 3709:  1058:  970: }
 3710:  1059:  971: 
 3711:  1060:  972: .tag {
 3712:  1061:  973:   padding: 0.25rem 0.5rem;
 3713:  1062:  974:   border-radius: 4px;
 3714:  1063:  975:   background: var(--vp-c-brand-dimm);
 3715:  1064:  976:   color: var(--vp-c-brand);
 3716:  1065:  977:   font-size: 0.8rem;
 3717:  1066:  978: }
 3718:  1067:  979: 
 3719:  1068:  980: .headers-section {
 3720:  1069:  981:   margin: 1rem 0;
 3721:  1070:  982:   background: var(--vp-c-bg-soft);
 3722:  1071:  983:   border-radius: 8px;
 3723:  1072:  984:   overflow: hidden;
 3724:  1073:  985: }
 3725:  1074:  986: 
 3726:  1075:  987: .section-header {
 3727:  1076:  988:   padding: 0.75rem;
 3728:  1077:  989:   cursor: pointer;
 3729:  1078:  990:   display: flex;
 3730:  1079:  991:   justify-content: space-between;
 3731:  1080:  992:   align-items: center;
 3732:  1081:  993:   background: var(--vp-c-bg-mute);
 3733:  1082:  994: }
 3734:  1083:  995: 
 3735:  1084:  996: .headers-content {
 3736:  1085:  997:   padding: 1rem;
 3737:  1086:  998: }
 3738:  1087:  999: 
 3739:  1088: 1000: .header-input {
 3740:  1089: 1001:   display: grid;
 3741:  1090: 1002:   grid-template-columns: 1fr 1fr auto auto;
 3742:  1091: 1003:   gap: 0.5rem;
 3743:  1092: 1004:   margin-bottom: 0.5rem;
 3744:  1093: 1005:   align-items: center;
 3745:  1094: 1006: }
 3746:  1095: 1007: 
 3747:  1096: 1008: .header-key,
 3748:  1097: 1009: .header-value {
 3749:  1098: 1010:   padding: 0.5rem;
 3750:  1099: 1011:   border: 1px solid var(--vp-c-divider);
 3751:  1100: 1012:   border-radius: 4px;
 3752:  1101: 1013:   font-size: 0.9em;
 3753:  1102: 1014: }
 3754:  1103: 1015: 
 3755:  1104: 1016: .header-enabled {
 3756:  1105: 1017:   display: flex;
 3757:  1106: 1018:   align-items: center;
 3758:  1107: 1019:   gap: 0.25rem;
 3759:  1108: 1020: }
 3760:  1109: 1021: 
 3761:  1110: 1022: .remove-header {
 3762:  1111: 1023:   padding: 0.25rem 0.5rem;
 3763:  1112: 1024:   background: var(--vp-c-red);
 3764:  1113: 1025:   color: white;
 3765:  1114: 1026:   border: none;
 3766:  1115: 1027:   border-radius: 4px;
 3767:  1116: 1028:   cursor: pointer;
 3768:  1117: 1029: }
 3769:  1118: 1030: 
 3770:  1119: 1031: .add-header {
 3771:  1120: 1032:   margin-top: 0.5rem;
 3772:  1121: 1033:   padding: 0.5rem;
 3773:  1122: 1034:   background: var(--vp-c-brand);
 3774:  1123: 1035:   color: white;
 3775:  1124: 1036:   border: none;
 3776:  1125: 1037:   border-radius: 4px;
 3777:  1126: 1038:   cursor: pointer;
 3778:  1127: 1039:   width: 100%;
 3779:  1128: 1040: }
 3780:  1129: 1041: 
 3781:  1130: 1042: .params-form {
 3782:  1131: 1043:   margin: 1rem 0;
 3783:  1132: 1044: }
 3784:  1133: 1045: 
 3785:  1134: 1046: .param-input {
 3786:  1135: 1047:   margin-bottom: 1rem;
 3787:  1136: 1048: }
 3788:  1137: 1049: 
 3789:  1138: 1050: .param-input label {
 3790:  1139: 1051:   display: block;
 3791:  1140: 1052:   margin-bottom: 0.25rem;
 3792:  1141: 1053: }
 3793:  1142: 1054: 
 3794:  1143: 1055: .param-input input {
 3795:  1144: 1056:   width: 100%;
 3796:  1145: 1057:   padding: 0.5rem;
 3797:  1146: 1058:   border: 1px solid var(--vp-c-divider);
 3798:  1147: 1059:   border-radius: 4px;
 3799:  1148: 1060: }
 3800:  1149: 1061: 
 3801:  1150: 1062: .required {
 3802:  1151: 1063:   color: var(--vp-c-red);
 3803:  1152: 1064:   margin-left: 0.25rem;
 3804:  1153: 1065: }
 3805:  1154: 1066: 
 3806:  1155: 1067: .try-button {
 3807:  1156: 1068:   padding: 0.5rem 1rem;
 3808:  1157: 1069:   background: var(--vp-c-brand);
 3809:  1158: 1070:   color: white;
 3810:  1159: 1071:   border: none;
 3811:  1160: 1072:   border-radius: 4px;
 3812:  1161: 1073:   cursor: pointer;
 3813:  1162: 1074:   width: 100%;
 3814:  1163: 1075: }
 3815:  1164: 1076: 
 3816:  1165: 1077: .try-button:disabled {
 3817:  1166: 1078:   opacity: 0.5;
 3818:  1167: 1079:   cursor: not-allowed;
 3819:  1168: 1080: }
 3820:  1169: 1081: 
 3821:  1170: 1082: .live-response {
 3822:  1171: 1083:   margin: 1rem 0;
 3823:  1172: 1084:   padding: 1rem;
 3824:  1173: 1085:   background: var(--vp-c-bg-soft);
 3825:  1174: 1086:   border-radius: 8px;
 3826:  1175: 1087:   border: 1px solid var(--vp-c-divider);
 3827:  1176: 1088:   position: relative;
 3828:  1177: 1089: }
 3829:  1178: 1090: 
 3830:  1179: 1091: .response-error {
 3831:  1180: 1092:   border-color: var(--vp-c-red);
 3832:  1181: 1093: }
 3833:  1182: 1094: 
 3834:  1183: 1095: .response-header {
 3835:  1184: 1096:   display: flex;
 3836:  1185: 1097:   justify-content: space-between;
 3837:  1186: 1098:   align-items: center;
 3838:  1187: 1099:   margin-bottom: 1rem;
 3839:  1188: 1100: }
 3840:  1189: 1101: 
 3841:  1190: 1102: .response-actions {
 3842:  1191: 1103:   display: flex;
 3843:  1192: 1104:   gap: 0.5rem;
 3844:  1193: 1105: }
 3845:  1194: 1106: 
 3846:  1195: 1107: .action-button {
 3847:  1196: 1108:   padding: 0.25rem 0.75rem;
 3848:  1197: 1109:   background: var(--vp-c-brand);
 3849:  1198: 1110:   color: white;
 3850:  1199: 1111:   border: none;
 3851:  1200: 1112:   border-radius: 4px;
 3852:  1201: 1113:   cursor: pointer;
 3853:  1202: 1114:   font-size: 0.9em;
 3854:  1203: 1115: }
 3855:  1204: 1116: 
 3856:  1205: 1117: .response-headers {
 3857:  1206: 1118:   margin: 1rem 0;
 3858:  1207: 1119:   background: var(--vp-c-bg-soft);
 3859:  1208: 1120:   border-radius: 4px;
 3860:  1209: 1121: }
 3861:  1210: 1122: 
 3862:  1211: 1123: .headers-list {
 3863:  1212: 1124:   padding: 0.75rem;
 3864:  1213: 1125: }
 3865:  1214: 1126: 
 3866:  1215: 1127: .header-item {
 3867:  1216: 1128:   display: flex;
 3868:  1217: 1129:   gap: 0.5rem;
 3869:  1218: 1130:   margin-bottom: 0.25rem;
 3870:  1219: 1131:   font-size: 0.9em;
 3871:  1220: 1132: }
 3872:  1221: 1133: 
 3873:  1222: 1134: .error-message {
 3874:  1223: 1135:   color: var(--vp-c-red);
 3875:  1224: 1136:   padding: 0.75rem;
 3876:  1225: 1137:   border: 1px solid var(--vp-c-red);
 3877:  1226: 1138:   border-radius: 4px;
 3878:  1227: 1139:   margin: 1rem 0;
 3879:  1228: 1140: }
 3880:  1229: 1141: 
 3881:  1230: 1142: .response-data {
 3882:  1231: 1143:   background: var(--vp-c-bg-mute);
 3883:  1232: 1144:   padding: 1rem;
 3884:  1233: 1145:   border-radius: 4px;
 3885:  1234: 1146:   overflow-x: auto;
 3886:  1235: 1147:   margin: 1rem 0;
 3887:  1236: 1148: }
 3888:  1237: 1149: 
 3889:  1238: 1150: .response-section {
 3890:  1239: 1151:   margin: 1rem 0;
 3891:  1240: 1152: }
 3892:  1241: 1153: 
 3893:  1242: 1154: .response-section .status {
 3894:  1243: 1155:   padding: 0.25rem 0.5rem;
 3895:  1244: 1156:   border-radius: 4px;
 3896:  1245: 1157:   font-weight: 600;
 3897:  1246: 1158: }
 3898:  1247: 1159: 
 3899:  1248: 1160: .response-section .status.success {
 3900:  1249: 1161:   background: var(--vp-c-green-dimm);
 3901:  1250: 1162:   color: var(--vp-c-green);
 3902:  1251: 1163: }
 3903:  1252: 1164: 
 3904:  1253: 1165: .response-section .status.error {
 3905:  1254: 1166:   background: var(--vp-c-red-dimm);
 3906:  1255: 1167:   color: var(--vp-c-red);
 3907:  1256: 1168: }
 3908:  1257: 1169: 
 3909:  1258: 1170: .schema {
 3910:  1259: 1171:   background: var(--vp-c-bg-mute);
 3911:  1260: 1172:   padding: 1rem;
 3912:  1261: 1173:   border-radius: 4px;
 3913:  1262: 1174:   overflow-x: auto;
 3914:  1263: 1175:   margin-top: 0.5rem;
 3915:  1264: 1176: }
 3916:  1265: 1177: 
 3917:  1266: 1178: .loading-overlay {
 3918:  1267: 1179:   position: absolute;
 3919:  1268: 1180:   top: 0;
 3920:  1269: 1181:   left: 0;
 3921:  1270: 1182:   right: 0;
 3922:  1271: 1183:   bottom: 0;
 3923:  1272: 1184:   background: rgba(0, 0, 0, 0.5);
 3924:  1273: 1185:   display: flex;
 3925:  1274: 1186:   align-items: center;
 3926:  1275: 1187:   justify-content: center;
 3927:  1276: 1188:   border-radius: 8px;
 3928:  1277: 1189: }
 3929:  1278: 1190: 
 3930:  1279: 1191: .loading-spinner {
 3931:  1280: 1192:   width: 2rem;
 3932:  1281: 1193:   height: 2rem;
 3933:  1282: 1194:   border: 2px solid var(--vp-c-brand);
 3934:  1283: 1195:   border-radius: 50%;
 3935:  1284: 1196:   border-top-color: transparent;
 3936:  1285: 1197:   animation: spin 1s linear infinite;
 3937:  1286: 1198: }
 3938:  1287: 1199: 
 3939:  1288: 1200: @keyframes spin {
 3940:  1289: 1201:   to { transform: rotate(360deg); }
 3941:  1290: 1202: }
 3942:  1291: 1203: 
 3943:  1292: 1204: /* Responsive Design */
 3944:  1293: 1205: @media (max-width: 768px) {
 3945:  1294: 1206:   .api-explorer {
 3946:  1295: 1207:     grid-template-columns: 1fr;
 3947:  1296: 1208:     height: auto;
 3948:  1297: 1209:   }
 3949:  1298: 1210: 
 3950:  1299: 1211:   .sidebar {
 3951:  1300: 1212:     max-height: 300px;
 3952:  1301: 1213:     overflow-y: auto;
 3953:  1302: 1214:   }
 3954:  1303: 1215: 
 3955:  1304: 1216:   .content {
 3956:  1305: 1217:     padding: 1rem;
 3957:  1306: 1218:   }
 3958:  1307: 1219: 
 3959:  1308: 1220:   .header-input {
 3960:  1309: 1221:     grid-template-columns: 1fr;
 3961:  1310: 1222:   }
 3962:  1311: 1223: 
 3963:  1312: 1224:   .endpoint-item-header {
 3964:  1313: 1225:     flex-direction: column;
 3965:  1314: 1226:     align-items: flex-start;
 3966:  1315: 1227:   }
 3967:  1316: 1228: 
 3968:  1317: 1229:   .response-header {
 3969:  1318: 1230:     flex-direction: column;
 3970:  1319: 1231:     gap: 0.5rem;
 3971:  1320: 1232:   }
 3972:  1321: 1233: 
 3973:  1322: 1234:   .response-actions {
 3974:  1323: 1235:     width: 100%;
 3975:  1324: 1236:     justify-content: space-between;
 3976:  1325: 1237:   }
 3977:  1326: 1238: 
 3978:  1327: 1239:   .action-button {
 3979:  1328: 1240:     flex: 1;
 3980:  1329: 1241:   }
 3981:  1330: 1242: }
 3982:  1331: 1243: 
 3983:  1332: 1244: /* Dark Mode Adjustments */
 3984:  1333: 1245: :root[class~='dark'] .api-explorer {
 3985:  1334: 1246:   --custom-api-bg: var(--vp-c-bg-soft);
 3986:  1335: 1247: }
 3987:  1336: 1248: 
 3988:  1337: 1249: :root[class~='dark'] .loading-overlay {
 3989:  1338: 1250:   background: rgba(0, 0, 0, 0.7);
 3990:  1339: 1251: }
 3991:  1340: 1252: </style>
 3992:  1341: </file>
 3993:  1342: 
 3994:  1343: <file path=".vitepress/components/ArchitectureDiagram.vue">
 3995:  1344:   1: <script setup lang="ts">
 3996:  1345:   2: import { ref, onMounted, watch } from 'vue'
 3997:  1346:   3: 
 3998:  1347:   4: interface DiagramNode {
 3999:  1348:   5:   id: string
 4000:  1349:   6:   type: 'service' | 'database' | 'function' | 'external'
 4001:  1350:   7:   label: string
 4002:  1351:   8:   x: number
 4003:  1352:   9:   y: number
 4004:  1353:  10:   width: number
 4005:  1354:  11:   height: number
 4006:  1355:  12: }
 4007:  1356:  13: 
 4008:  1357:  14: interface DiagramConnection {
 4009:  1358:  15:   from: string
 4010:  1359:  16:   to: string
 4011:  1360:  17:   label?: string
 4012:  1361:  18:   type: 'sync' | 'async' | 'storage'
 4013:  1362:  19: }
 4014:  1363:  20: 
 4015:  1364:  21: const props = defineProps<{
 4016:  1365:  22:   zoom?: number
 4017:  1366:  23:   showLabels?: boolean
 4018:  1367:  24: }>()
 4019:  1368:  25: 
 4020:  1369:  26: const canvas = ref<HTMLCanvasElement | null>(null)
 4021:  1370:  27: const wrapper = ref<HTMLDivElement | null>(null)
 4022:  1371:  28: const scale = ref(props.zoom || 1)
 4023:  1372:  29: 
 4024:  1373:  30: // Define system components
 4025:  1374:  31: const nodes: DiagramNode[] = [
 4026:  1375:  32:   // External Services
 4027:  1376:  33:   {
 4028:  1377:  34:     id: 'tcgplayer',
 4029:  1378:  35:     type: 'external',
 4030:  1379:  36:     label: 'TCGPlayer API',
 4031:  1380:  37:     x: 50,
 4032:  1381:  38:     y: 50,
 4033:  1382:  39:     width: 120,
 4034:  1383:  40:     height: 60
 4035:  1384:  41:   },
 4036:  1385:  42:   // Firebase Services
 4037:  1386:  43:   {
 4038:  1387:  44:     id: 'functions',
 4039:  1388:  45:     type: 'service',
 4040:  1389:  46:     label: 'Firebase Functions',
 4041:  1390:  47:     x: 250,
 4042:  1391:  48:     y: 150,
 4043:  1392:  49:     width: 150,
 4044:  1393:  50:     height: 70
 4045:  1394:  51:   },
 4046:  1395:  52:   {
 4047:  1396:  53:     id: 'firestore',
 4048:  1397:  54:     type: 'database',
 4049:  1398:  55:     label: 'Firestore',
 4050:  1399:  56:     x: 500,
 4051:  1400:  57:     y: 50,
 4052:  1401:  58:     width: 120,
 4053:  1402:  59:     height: 60
 4054:  1403:  60:   },
 4055:  1404:  61:   {
 4056:  1405:  62:     id: 'storage',
 4057:  1406:  63:     type: 'database',
 4058:  1407:  64:     label: 'Firebase Storage',
 4059:  1408:  65:     x: 500,
 4060:  1409:  66:     y: 250,
 4061:  1410:  67:     width: 120,
 4062:  1411:  68:     height: 60
 4063:  1412:  69:   },
 4064:  1413:  70:   // Core Functions
 4065:  1414:  71:   {
 4066:  1415:  72:     id: 'cardSync',
 4067:  1416:  73:     type: 'function',
 4068:  1417:  74:     label: 'Card Sync',
 4069:  1418:  75:     x: 250,
 4070:  1419:  76:     y: 50,
 4071:  1420:  77:     width: 100,
 4072:  1421:  78:     height: 50
 4073:  1422:  79:   },
 4074:  1423:  80:   {
 4075:  1424:  81:     id: 'priceSync',
 4076:  1425:  82:     type: 'function',
 4077:  1426:  83:     label: 'Price Sync',
 4078:  1427:  84:     x: 250,
 4079:  1428:  85:     y: 250,
 4080:  1429:  86:     width: 100,
 4081:  1430:  87:     height: 50
 4082:  1431:  88:   },
 4083:  1432:  89:   {
 4084:  1433:  90:     id: 'imageProcessor',
 4085:  1434:  91:     type: 'function',
 4086:  1435:  92:     label: 'Image Processor',
 4087:  1436:  93:     x: 250,
 4088:  1437:  94:     y: 350,
 4089:  1438:  95:     width: 100,
 4090:  1439:  96:     height: 50
 4091:  1440:  97:   }
 4092:  1441:  98: ]
 4093:  1442:  99: 
 4094:  1443: 100: const connections: DiagramConnection[] = [
 4095:  1444: 101:   // TCGPlayer connections
 4096:  1445: 102:   {
 4097:  1446: 103:     from: 'tcgplayer',
 4098:  1447: 104:     to: 'cardSync',
 4099:  1448: 105:     label: 'Card Data',
 4100:  1449: 106:     type: 'sync'
 4101:  1450: 107:   },
 4102:  1451: 108:   {
 4103:  1452: 109:     from: 'tcgplayer',
 4104:  1453: 110:     to: 'priceSync',
 4105:  1454: 111:     label: 'Price Data',
 4106:  1455: 112:     type: 'sync'
 4107:  1456: 113:   },
 4108:  1457: 114:   // Function connections
 4109:  1458: 115:   {
 4110:  1459: 116:     from: 'cardSync',
 4111:  1460: 117:     to: 'firestore',
 4112:  1461: 118:     label: 'Store Cards',
 4113:  1462: 119:     type: 'storage'
 4114:  1463: 120:   },
 4115:  1464: 121:   {
 4116:  1465: 122:     from: 'priceSync',
 4117:  1466: 123:     to: 'firestore',
 4118:  1467: 124:     label: 'Store Prices',
 4119:  1468: 125:     type: 'storage'
 4120:  1469: 126:   },
 4121:  1470: 127:   {
 4122:  1471: 128:     from: 'imageProcessor',
 4123:  1472: 129:     to: 'storage',
 4124:  1473: 130:     label: 'Store Images',
 4125:  1474: 131:     type: 'storage'
 4126:  1475: 132:   },
 4127:  1476: 133:   {
 4128:  1477: 134:     from: 'cardSync',
 4129:  1478: 135:     to: 'imageProcessor',
 4130:  1479: 136:     label: 'Process Images',
 4131:  1480: 137:     type: 'async'
 4132:  1481: 138:   }
 4133:  1482: 139: ]
 4134:  1483: 140: 
 4135:  1484: 141: function drawNode(
 4136:  1485: 142:   ctx: CanvasRenderingContext2D,
 4137:  1486: 143:   node: DiagramNode
 4138:  1487: 144: ) {
 4139:  1488: 145:   const x = node.x * scale.value
 4140:  1489: 146:   const y = node.y * scale.value
 4141:  1490: 147:   const width = node.width * scale.value
 4142:  1491: 148:   const height = node.height * scale.value
 4143:  1492: 149: 
 4144:  1493: 150:   ctx.beginPath()
 4145:  1494: 151:   
 4146:  1495: 152:   switch (node.type) {
 4147:  1496: 153:     case 'service':
 4148:  1497: 154:       ctx.roundRect(x, y, width, height, 10)
 4149:  1498: 155:       ctx.fillStyle = '#646cff'
 4150:  1499: 156:       break
 4151:  1500: 157:     case 'database':
 4152:  1501: 158:       ctx.ellipse(
 4153:  1502: 159:         x + width/2,
 4154:  1503: 160:         y + height/2,
 4155:  1504: 161:         width/2,
 4156:  1505: 162:         height/2,
 4157:  1506: 163:         0,
 4158:  1507: 164:         0,
 4159:  1508: 165:         2 * Math.PI
 4160:  1509: 166:       )
 4161:  1510: 167:       ctx.fillStyle = '#42b883'
 4162:  1511: 168:       break
 4163:  1512: 169:     case 'function':
 4164:  1513: 170:       ctx.roundRect(x, y, width, height, 5)
 4165:  1514: 171:       ctx.fillStyle = '#fb923c'
 4166:  1515: 172:       break
 4167:  1516: 173:     case 'external':
 4168:  1517: 174:       ctx.rect(x, y, width, height)
 4169:  1518: 175:       ctx.fillStyle = '#94a3b8'
 4170:  1519: 176:       break
 4171:  1520: 177:   }
 4172:  1521: 178:   
 4173:  1522: 179:   ctx.fill()
 4174:  1523: 180:   ctx.stroke()
 4175:  1524: 181: 
 4176:  1525: 182:   // Draw label
 4177:  1526: 183:   if (props.showLabels !== false) {
 4178:  1527: 184:     ctx.fillStyle = '#ffffff'
 4179:  1528: 185:     ctx.font = `${12 * scale.value}px sans-serif`
 4180:  1529: 186:     ctx.textAlign = 'center'
 4181:  1530: 187:     ctx.textBaseline = 'middle'
 4182:  1531: 188:     ctx.fillText(
 4183:  1532: 189:       node.label,
 4184:  1533: 190:       x + width/2,
 4185:  1534: 191:       y + height/2
 4186:  1535: 192:     )
 4187:  1536: 193:   }
 4188:  1537: 194: }
 4189:  1538: 195: 
 4190:  1539: 196: function drawConnection(
 4191:  1540: 197:   ctx: CanvasRenderingContext2D,
 4192:  1541: 198:   conn: DiagramConnection
 4193:  1542: 199: ) {
 4194:  1543: 200:   const fromNode = nodes.find(n => n.id === conn.from)
 4195:  1544: 201:   const toNode = nodes.find(n => n.id === conn.to)
 4196:  1545: 202:   
 4197:  1546: 203:   if (!fromNode || !toNode) return
 4198:  1547: 204: 
 4199:  1548: 205:   const start = {
 4200:  1549: 206:     x: (fromNode.x + fromNode.width/2) * scale.value,
 4201:  1550: 207:     y: (fromNode.y + fromNode.height/2) * scale.value
 4202:  1551: 208:   }
 4203:  1552: 209:   
 4204:  1553: 210:   const end = {
 4205:  1554: 211:     x: (toNode.x + toNode.width/2) * scale.value,
 4206:  1555: 212:     y: (toNode.y + toNode.height/2) * scale.value
 4207:  1556: 213:   }
 4208:  1557: 214: 
 4209:  1558: 215:   ctx.beginPath()
 4210:  1559: 216:   ctx.moveTo(start.x, start.y)
 4211:  1560: 217: 
 4212:  1561: 218:   // Draw different line styles based on connection type
 4213:  1562: 219:   switch (conn.type) {
 4214:  1563: 220:     case 'sync':
 4215:  1564: 221:       ctx.setLineDash([])
 4216:  1565: 222:       ctx.strokeStyle = '#646cff'
 4217:  1566: 223:       break
 4218:  1567: 224:     case 'async':
 4219:  1568: 225:       ctx.setLineDash([5, 5])
 4220:  1569: 226:       ctx.strokeStyle = '#fb923c'
 4221:  1570: 227:       break
 4222:  1571: 228:     case 'storage':
 4223:  1572: 229:       ctx.setLineDash([])
 4224:  1573: 230:       ctx.strokeStyle = '#42b883'
 4225:  1574: 231:       break
 4226:  1575: 232:   }
 4227:  1576: 233: 
 4228:  1577: 234:   // Draw curved line
 4229:  1578: 235:   const cp1x = start.x + (end.x - start.x) / 2
 4230:  1579: 236:   const cp1y = start.y
 4231:  1580: 237:   const cp2x = cp1x
 4232:  1581: 238:   const cp2y = end.y
 4233:  1582: 239:   
 4234:  1583: 240:   ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, end.x, end.y)
 4235:  1584: 241:   ctx.stroke()
 4236:  1585: 242: 
 4237:  1586: 243:   // Draw arrow
 4238:  1587: 244:   const angle = Math.atan2(end.y - cp2y, end.x - cp2x)
 4239:  1588: 245:   const arrowLength = 10 * scale.value
 4240:  1589: 246:   
 4241:  1590: 247:   ctx.beginPath()
 4242:  1591: 248:   ctx.moveTo(end.x, end.y)
 4243:  1592: 249:   ctx.lineTo(
 4244:  1593: 250:     end.x - arrowLength * Math.cos(angle - Math.PI/6),
 4245:  1594: 251:     end.y - arrowLength * Math.sin(angle - Math.PI/6)
 4246:  1595: 252:   )
 4247:  1596: 253:   ctx.moveTo(end.x, end.y)
 4248:  1597: 254:   ctx.lineTo(
 4249:  1598: 255:     end.x - arrowLength * Math.cos(angle + Math.PI/6),
 4250:  1599: 256:     end.y - arrowLength * Math.sin(angle + Math.PI/6)
 4251:  1600: 257:   )
 4252:  1601: 258:   ctx.stroke()
 4253:  1602: 259: 
 4254:  1603: 260:   // Draw label if exists
 4255:  1604: 261:   if (conn.label && props.showLabels !== false) {
 4256:  1605: 262:     const midX = (start.x + end.x) / 2
 4257:  1606: 263:     const midY = (start.y + end.y) / 2 - 10 * scale.value
 4258:  1607: 264:     
 4259:  1608: 265:     ctx.font = `${11 * scale.value}px sans-serif`
 4260:  1609: 266:     ctx.fillStyle = '#64748b'
 4261:  1610: 267:     ctx.textAlign = 'center'
 4262:  1611: 268:     ctx.textBaseline = 'bottom'
 4263:  1612: 269:     ctx.fillText(conn.label, midX, midY)
 4264:  1613: 270:   }
 4265:  1614: 271: }
 4266:  1615: 272: 
 4267:  1616: 273: function draw() {
 4268:  1617: 274:   if (!canvas.value) return
 4269:  1618: 275:   
 4270:  1619: 276:   const ctx = canvas.value.getContext('2d')
 4271:  1620: 277:   if (!ctx) return
 4272:  1621: 278: 
 4273:  1622: 279:   // Clear canvas
 4274:  1623: 280:   ctx.clearRect(0, 0, canvas.value.width, canvas.value.height)
 4275:  1624: 281: 
 4276:  1625: 282:   // Set line styles
 4277:  1626: 283:   ctx.lineWidth = 2 * scale.value
 4278:  1627: 284:   ctx.strokeStyle = '#64748b'
 4279:  1628: 285: 
 4280:  1629: 286:   // Draw connections first (behind nodes)
 4281:  1630: 287:   connections.forEach(conn => drawConnection(ctx, conn))
 4282:  1631: 288: 
 4283:  1632: 289:   // Draw nodes
 4284:  1633: 290:   nodes.forEach(node => drawNode(ctx, node))
 4285:  1634: 291: }
 4286:  1635: 292: 
 4287:  1636: 293: function updateCanvasSize() {
 4288:  1637: 294:   if (!canvas.value || !wrapper.value) return
 4289:  1638: 295:   
 4290:  1639: 296:   const rect = wrapper.value.getBoundingClientRect()
 4291:  1640: 297:   canvas.value.width = rect.width
 4292:  1641: 298:   canvas.value.height = rect.height
 4293:  1642: 299:   draw()
 4294:  1643: 300: }
 4295:  1644: 301: 
 4296:  1645: 302: // Resize handling
 4297:  1646: 303: let resizeObserver: ResizeObserver
 4298:  1647: 304: onMounted(() => {
 4299:  1648: 305:   if (wrapper.value) {
 4300:  1649: 306:     resizeObserver = new ResizeObserver(updateCanvasSize)
 4301:  1650: 307:     resizeObserver.observe(wrapper.value)
 4302:  1651: 308:   }
 4303:  1652: 309:   updateCanvasSize()
 4304:  1653: 310: })
 4305:  1654: 311: 
 4306:  1655: 312: // Watch for prop changes
 4307:  1656: 313: watch(() => props.zoom, () => {
 4308:  1657: 314:   scale.value = props.zoom || 1
 4309:  1658: 315:   draw()
 4310:  1659: 316: })
 4311:  1660: 317: </script>
 4312:  1661: 318: 
 4313:  1662: 319: <template>
 4314:  1663: 320:   <div ref="wrapper" class="architecture-diagram">
 4315:  1664: 321:     <canvas ref="canvas"></canvas>
 4316:  1665: 322:     <div class="legend">
 4317:  1666: 323:       <div class="legend-item">
 4318:  1667: 324:         <div class="color-box service"></div>
 4319:  1668: 325:         <span>Firebase Services</span>
 4320:  1669: 326:       </div>
 4321:  1670: 327:       <div class="legend-item">
 4322:  1671: 328:         <div class="color-box database"></div>
 4323:  1672: 329:         <span>Databases</span>
 4324:  1673: 330:       </div>
 4325:  1674: 331:       <div class="legend-item">
 4326:  1675: 332:         <div class="color-box function"></div>
 4327:  1676: 333:         <span>Functions</span>
 4328:  1677: 334:       </div>
 4329:  1678: 335:       <div class="legend-item">
 4330:  1679: 336:         <div class="color-box external"></div>
 4331:  1680: 337:         <span>External Services</span>
 4332:  1681: 338:       </div>
 4333:  1682: 339:     </div>
 4334:  1683: 340:   </div>
 4335:  1684: 341: </template>
 4336:  1685: 342: 
 4337:  1686: 343: <style scoped>
 4338:  1687: 344: .architecture-diagram {
 4339:  1688: 345:   position: relative;
 4340:  1689: 346:   width: 100%;
 4341:  1690: 347:   height: 500px;
 4342:  1691: 348:   background: var(--custom-diagram-bg);
 4343:  1692: 349:   border-radius: 8px;
 4344:  1693: 350:   overflow: hidden;
 4345:  1694: 351: }
 4346:  1695: 352: 
 4347:  1696: 353: canvas {
 4348:  1697: 354:   width: 100%;
 4349:  1698: 355:   height: 100%;
 4350:  1699: 356: }
 4351:  1700: 357: 
 4352:  1701: 358: .legend {
 4353:  1702: 359:   position: absolute;
 4354:  1703: 360:   bottom: 20px;
 4355:  1704: 361:   right: 20px;
 4356:  1705: 362:   background: rgba(255, 255, 255, 0.9);
 4357:  1706: 363:   padding: 10px;
 4358:  1707: 364:   border-radius: 6px;
 4359:  1708: 365:   box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
 4360:  1709: 366: }
 4361:  1710: 367: 
 4362:  1711: 368: .legend-item {
 4363:  1712: 369:   display: flex;
 4364:  1713: 370:   align-items: center;
 4365:  1714: 371:   margin: 5px 0;
 4366:  1715: 372: }
 4367:  1716: 373: 
 4368:  1717: 374: .color-box {
 4369:  1718: 375:   width: 16px;
 4370:  1719: 376:   height: 16px;
 4371:  1720: 377:   margin-right: 8px;
 4372:  1721: 378:   border-radius: 3px;
 4373:  1722: 379: }
 4374:  1723: 380: 
 4375:  1724: 381: .color-box.service {
 4376:  1725: 382:   background: #646cff;
 4377:  1726: 383: }
 4378:  1727: 384: 
 4379:  1728: 385: .color-box.database {
 4380:  1729: 386:   background: #42b883;
 4381:  1730: 387: }
 4382:  1731: 388: 
 4383:  1732: 389: .color-box.function {
 4384:  1733: 390:   background: #fb923c;
 4385:  1734: 391: }
 4386:  1735: 392: 
 4387:  1736: 393: .color-box.external {
 4388:  1737: 394:   background: #94a3b8;
 4389:  1738: 395: }
 4390:  1739: 396: 
 4391:  1740: 397: /* Dark mode adjustments */
 4392:  1741: 398: :deep(.dark) .legend {
 4393:  1742: 399:   background: rgba(0, 0, 0, 0.8);
 4394:  1743: 400: }
 4395:  1744: 401: </style>
 4396:  1745: </file>
 4397:  1746: 
 4398:  1747: <file path=".vitepress/components/FileTree.vue">
 4399:  1748:   1: <script setup lang="ts">
 4400:  1749:   2: import { ref, computed, onMounted } from 'vue'
 4401:  1750:   3: 
 4402:  1751:   4: interface TreeNode {
 4403:  1752:   5:   name: string
 4404:  1753:   6:   path: string
 4405:  1754:   7:   type: 'file' | 'directory'
 4406:  1755:   8:   children?: TreeNode[]
 4407:  1756:   9: }
 4408:  1757:  10: 
 4409:  1758:  11: const props = defineProps<{
 4410:  1759:  12:   root?: string
 4411:  1760:  13:   initialExpanded?: boolean
 4412:  1761:  14: }>()
 4413:  1762:  15: 
 4414:  1763:  16: const expandedNodes = ref<Set<string>>(new Set())
 4415:  1764:  17: const treeData = ref<TreeNode[]>([])
 4416:  1765:  18: 
 4417:  1766:  19: // Process the file structure into a tree
 4418:  1767:  20: onMounted(async () => {
 4419:  1768:  21:   // Initial structure based on your codebase
 4420:  1769:  22:   treeData.value = [
 4421:  1770:  23:     {
 4422:  1771:  24:       name: 'functions',
 4423:  1772:  25:       path: 'functions',
 4424:  1773:  26:       type: 'directory',
 4425:  1774:  27:       children: [
 4426:  1775:  28:         {
 4427:  1776:  29:           name: 'src',
 4428:  1777:  30:           path: 'functions/src',
 4429:  1778:  31:           type: 'directory',
 4430:  1779:  32:           children: [
 4431:  1780:  33:             {
 4432:  1781:  34:               name: 'config',
 4433:  1782:  35:               path: 'functions/src/config',
 4434:  1783:  36:               type: 'directory',
 4435:  1784:  37:               children: [
 4436:  1785:  38:                 {
 4437:  1786:  39:                   name: 'firebase.ts',
 4438:  1787:  40:                   path: 'functions/src/config/firebase.ts',
 4439:  1788:  41:                   type: 'file'
 4440:  1789:  42:                 }
 4441:  1790:  43:               ]
 4442:  1791:  44:             },
 4443:  1792:  45:             {
 4444:  1793:  46:               name: 'services',
 4445:  1794:  47:               path: 'functions/src/services',
 4446:  1795:  48:               type: 'directory',
 4447:  1796:  49:               children: [
 4448:  1797:  50:                 {
 4449:  1798:  51:                   name: 'cardSync.ts',
 4450:  1799:  52:                   path: 'functions/src/services/cardSync.ts',
 4451:  1800:  53:                   type: 'file'
 4452:  1801:  54:                 },
 4453:  1802:  55:                 {
 4454:  1803:  56:                   name: 'priceSync.ts',
 4455:  1804:  57:                   path: 'functions/src/services/priceSync.ts',
 4456:  1805:  58:                   type: 'file'
 4457:  1806:  59:                 }
 4458:  1807:  60:               ]
 4459:  1808:  61:             },
 4460:  1809:  62:             // Add other directories and files based on your structure
 4461:  1810:  63:           ]
 4462:  1811:  64:         }
 4463:  1812:  65:       ]
 4464:  1813:  66:     }
 4465:  1814:  67:   ]
 4466:  1815:  68: 
 4467:  1816:  69:   // If initialExpanded is true, expand all nodes
 4468:  1817:  70:   if (props.initialExpanded) {
 4469:  1818:  71:     const expandAll = (nodes: TreeNode[]) => {
 4470:  1819:  72:       nodes.forEach(node => {
 4471:  1820:  73:         if (node.type === 'directory') {
 4472:  1821:  74:           expandedNodes.value.add(node.path)
 4473:  1822:  75:           if (node.children) {
 4474:  1823:  76:             expandAll(node.children)
 4475:  1824:  77:           }
 4476:  1825:  78:         }
 4477:  1826:  79:       })
 4478:  1827:  80:     }
 4479:  1828:  81:     expandAll(treeData.value)
 4480:  1829:  82:   }
 4481:  1830:  83: })
 4482:  1831:  84: 
 4483:  1832:  85: function toggleNode(path: string) {
 4484:  1833:  86:   if (expandedNodes.value.has(path)) {
 4485:  1834:  87:     expandedNodes.value.delete(path)
 4486:  1835:  88:   } else {
 4487:  1836:  89:     expandedNodes.value.add(path)
 4488:  1837:  90:   }
 4489:  1838:  91: }
 4490:  1839:  92: 
 4491:  1840:  93: const toggleAllNodes = () => {
 4492:  1841:  94:   if (expandedNodes.value.size > 0) {
 4493:  1842:  95:     expandedNodes.value.clear()
 4494:  1843:  96:   } else {
 4495:  1844:  97:     const expandAll = (nodes: TreeNode[]) => {
 4496:  1845:  98:       nodes.forEach(node => {
 4497:  1846:  99:         if (node.type === 'directory') {
 4498:  1847: 100:           expandedNodes.value.add(node.path)
 4499:  1848: 101:           if (node.children) {
 4500:  1849: 102:             expandAll(node.children)
 4501:  1850: 103:           }
 4502:  1851: 104:         }
 4503:  1852: 105:       })
 4504:  1853: 106:     }
 4505:  1854: 107:     expandAll(treeData.value)
 4506:  1855: 108:   }
 4507:  1856: 109: }
 4508:  1857: 110: 
 4509:  1858: 111: // Recursive component for rendering tree nodes
 4510:  1859: 112: const TreeNode = (node: TreeNode, level: number = 0) => {
 4511:  1860: 113:   const isExpanded = expandedNodes.value.has(node.path)
 4512:  1861: 114:   const hasChildren = node.children && node.children.length > 0
 4513:  1862: 115:   
 4514:  1863: 116:   return (
 4515:  1864: 117:     <div class={`tree-node level-${level}`}>
 4516:  1865: 118:       <div
 4517:  1866: 119:         class={`node-content ${node.type}`}
 4518:  1867: 120:         onClick={() => hasChildren && toggleNode(node.path)}
 4519:  1868: 121:       >
 4520:  1869: 122:         {hasChildren && (
 4521:  1870: 123:           <span class={`expand-icon ${isExpanded ? 'expanded' : ''}`}>
 4522:  1871: 124:             {isExpanded ? '▼' : '▶'}
 4523:  1872: 125:           </span>
 4524:  1873: 126:         )}
 4525:  1874: 127:         <span class="node-name">{node.name}</span>
 4526:  1875: 128:       </div>
 4527:  1876: 129:       {isExpanded && hasChildren && (
 4528:  1877: 130:         <div class="children">
 4529:  1878: 131:           {node.children!.map(child => TreeNode(child, level + 1))}
 4530:  1879: 132:         </div>
 4531:  1880: 133:       )}
 4532:  1881: 134:     </div>
 4533:  1882: 135:   )
 4534:  1883: 136: }
 4535:  1884: 137: </script>
 4536:  1885: 138: 
 4537:  1886: 139: <template>
 4538:  1887: 140:   <div class="file-tree">
 4539:  1888: 141:     <div class="tree-controls">
 4540:  1889: 142:       <button @click="toggleAllNodes">
 4541:  1890: 143:         {{ expandedNodes.size > 0 ? 'Collapse All' : 'Expand All' }}
 4542:  1891: 144:       </button>
 4543:  1892: 145:     </div>
 4544:  1893: 146:     <div class="tree-content">
 4545:  1894: 147:       <template v-for="node in treeData" :key="node.path">
 4546:  1895: 148:         <TreeNode :node="node" />
 4547:  1896: 149:       </template>
 4548:  1897: 150:     </div>
 4549:  1898: 151:   </div>
 4550:  1899: 152: </template>
 4551:  1900: 153: 
 4552:  1901: 154: <style scoped>
 4553:  1902: 155: .file-tree {
 4554:  1903: 156:   background: var(--custom-tree-bg);
 4555:  1904: 157:   border-radius: 8px;
 4556:  1905: 158:   padding: 1rem;
 4557:  1906: 159:   margin: 1rem 0;
 4558:  1907: 160: }
 4559:  1908: 161: 
 4560:  1909: 162: .tree-controls {
 4561:  1910: 163:   margin-bottom: 1rem;
 4562:  1911: 164: }
 4563:  1912: 165: 
 4564:  1913: 166: .tree-controls button {
 4565:  1914: 167:   background: var(--vp-c-brand);
 4566:  1915: 168:   color: white;
 4567:  1916: 169:   border: none;
 4568:  1917: 170:   padding: 0.5rem 1rem;
 4569:  1918: 171:   border-radius: 4px;
 4570:  1919: 172:   cursor: pointer;
 4571:  1920: 173:   font-size: 0.9rem;
 4572:  1921: 174: }
 4573:  1922: 175: 
 4574:  1923: 176: .tree-controls button:hover {
 4575:  1924: 177:   background: var(--vp-c-brand-dark);
 4576:  1925: 178: }
 4577:  1926: 179: 
 4578:  1927: 180: .tree-node {
 4579:  1928: 181:   margin: 0.25rem 0;
 4580:  1929: 182: }
 4581:  1930: 183: 
 4582:  1931: 184: .node-content {
 4583:  1932: 185:   display: flex;
 4584:  1933: 186:   align-items: center;
 4585:  1934: 187:   padding: 0.25rem;
 4586:  1935: 188:   cursor: pointer;
 4587:  1936: 189:   border-radius: 4px;
 4588:  1937: 190: }
 4589:  1938: 191: 
 4590:  1939: 192: .node-content:hover {
 4591:  1940: 193:   background: var(--custom-tree-highlight);
 4592:  1941: 194: }
 4593:  1942: 195: 
 4594:  1943: 196: .expand-icon {
 4595:  1944: 197:   margin-right: 0.5rem;
 4596:  1945: 198:   font-size: 0.8rem;
 4597:  1946: 199:   transition: transform 0.2s ease;
 4598:  1947: 200: }
 4599:  1948: 201: 
 4600:  1949: 202: .expand-icon.expanded {
 4601:  1950: 203:   transform: rotate(0deg);
 4602:  1951: 204: }
 4603:  1952: 205: 
 4604:  1953: 206: .children {
 4605:  1954: 207:   margin-left: 1.5rem;
 4606:  1955: 208:   border-left: 1px dashed var(--vp-c-divider);
 4607:  1956: 209:   padding-left: 0.5rem;
 4608:  1957: 210: }
 4609:  1958: 211: 
 4610:  1959: 212: .directory .node-name {
 4611:  1960: 213:   font-weight: 500;
 4612:  1961: 214: }
 4613:  1962: 215: 
 4614:  1963: 216: .file .node-name {
 4615:  1964: 217:   font-weight: normal;
 4616:  1965: 218: }
 4617:  1966: 219: 
 4618:  1967: 220: .level-0 {
 4619:  1968: 221:   margin-top: 0;
 4620:  1969: 222: }
 4621:  1970: 223: </style>
 4622:  1971: </file>
 4623:  1972: 
 4624:  1973: <file path=".vitepress/config.mts">
 4625:  1974:   1: import { defineConfig } from 'vitepress/dist/node/index.js'
 4626:  1975:   2: 
 4627:  1976:   3: export default defineConfig({
 4628:  1977:   4:   title: 'FFTCG Sync Service',
 4629:  1978:   5:   description: 'Documentation for the FFTCG Card and Price Sync Service',
 4630:  1979:   6:   
 4631:  1980:   7:   // Head tags
 4632:  1981:   8:   head: [
 4633:  1982:   9:     ['link', { rel: 'icon', type: 'image/svg+xml', href: '/logo.svg' }],
 4634:  1983:  10:     ['meta', { name: 'theme-color', content: '#646cff' }]
 4635:  1984:  11:   ],
 4636:  1985:  12: 
 4637:  1986:  13:   // Markdown configuration
 4638:  1987:  14:   markdown: {
 4639:  1988:  15:     lineNumbers: true,
 4640:  1989:  16:     theme: 'github-dark'
 4641:  1990:  17:   },
 4642:  1991:  18: 
 4643:  1992:  19:   themeConfig: {
 4644:  1993:  20:     nav: [
 4645:  1994:  21:       { text: 'Home', link: '/' },
 4646:  1995:  22:       { text: 'Guide', link: '/docs/usage-guide' },
 4647:  1996:  23:       { text: 'Architecture', link: '/docs/architecture' },
 4648:  1997:  24:       { text: 'API', link: '/api/' },
 4649:  1998:  25:       { text: 'FAQ', link: '/docs/faq' }
 4650:  1999:  26:     ],
 4651:  2000:  27: 
 4652:  2001:  28:     sidebar: [
 4653:  2002:  29:       {
 4654:  2003:  30:         text: 'Introduction',
 4655:  2004:  31:         items: [
 4656:  2005:  32:           { text: 'Getting Started', link: '/introduction' },
 4657:  2006:  33:           { text: 'Architecture Overview', link: '/docs/architecture' },
 4658:  2007:  34:           { text: 'Usage Guide', link: '/docs/usage-guide' }
 4659:  2008:  35:         ]
 4660:  2009:  36:       },
 4661:  2010:  37:       {
 4662:  2011:  38:         text: 'Core Documentation',
 4663:  2012:  39:         items: [
 4664:  2013:  40:           { text: 'FAQ', link: '/docs/faq' },
 4665:  2014:  41:           { text: 'Troubleshooting', link: '/docs/troubleshooting' },
 4666:  2015:  42:           { text: 'Performance', link: '/docs/performance' },
 4667:  2016:  43:           { text: 'Security', link: '/docs/security' }
 4668:  2017:  44:         ]
 4669:  2018:  45:       },
 4670:  2019:  46:       {
 4671:  2020:  47:         text: 'Setup & Configuration',
 4672:  2021:  48:         items: [
 4673:  2022:  49:           { text: 'Installation', link: '/setup/installation' },
 4674:  2023:  50:           { text: 'Firebase Setup', link: '/setup/firebase' },
 4675:  2024:  51:           { text: 'Environment Config', link: '/setup/environment' }
 4676:  2025:  52:         ]
 4677:  2026:  53:       },
 4678:  2027:  54:       {
 4679:  2028:  55:         text: 'Core Services',
 4680:  2029:  56:         items: [
 4681:  2030:  57:           { text: 'Card Sync', link: '/services/card-sync' },
 4682:  2031:  58:           { text: 'Price Sync', link: '/services/price-sync' },
 4683:  2032:  59:           { text: 'Image Processing', link: '/services/image-processing' }
 4684:  2033:  60:         ]
 4685:  2034:  61:       },
 4686:  2035:  62:       {
 4687:  2036:  63:         text: 'Utilities',
 4688:  2037:  64:         items: [
 4689:  2038:  65:           { text: 'Image Handler', link: '/utils/image-handler' },
 4690:  2039:  66:           { text: 'Cache System', link: '/utils/cache' },
 4691:  2040:  67:           { text: 'Logging', link: '/utils/logging' },
 4692:  2041:  68:           { text: 'Error Handling', link: '/utils/error-handling' },
 4693:  2042:  69:           { text: 'Batch Processing', link: '/utils/batch-processing' }
 4694:  2043:  70:         ]
 4695:  2044:  71:       },
 4696:  2045:  72:       {
 4697:  2046:  73:         text: 'Testing & Monitoring',
 4698:  2047:  74:         items: [
 4699:  2048:  75:           { text: 'Test Suite', link: '/testing/overview' },
 4700:  2049:  76:           { text: 'Image Testing', link: '/testing/image-testing' },
 4701:  2050:  77:           { text: 'Sync Testing', link: '/testing/sync-testing' },
 4702:  2051:  78:           { text: 'Performance Monitoring', link: '/testing/monitoring' }
 4703:  2052:  79:         ]
 4704:  2053:  80:       }
 4705:  2054:  81:     ],
 4706:  2055:  82: 
 4707:  2056:  83:     search: {
 4708:  2057:  84:       provider: 'local',
 4709:  2058:  85:       options: {
 4710:  2059:  86:         detailedView: true
 4711:  2060:  87:       }
 4712:  2061:  88:     },
 4713:  2062:  89: 
 4714:  2063:  90:     socialLinks: [
 4715:  2064:  91:       { icon: 'github', link: 'https://github.com/yourusername/fftcg-sync-service' }
 4716:  2065:  92:     ],
 4717:  2066:  93: 
 4718:  2067:  94:     footer: {
 4719:  2068:  95:       message: 'Released under the MIT License.',
 4720:  2069:  96:       copyright: `Copyright © ${new Date().getFullYear()}`
 4721:  2070:  97:     },
 4722:  2071:  98: 
 4723:  2072:  99:     outline: {
 4724:  2073: 100:       level: [2, 3],
 4725:  2074: 101:       label: 'On this page'
 4726:  2075: 102:     },
 4727:  2076: 103: 
 4728:  2077: 104:     lastUpdated: {
 4729:  2078: 105:       text: 'Last updated',
 4730:  2079: 106:       formatOptions: {
 4731:  2080: 107:         dateStyle: 'full',
 4732:  2081: 108:         timeStyle: 'medium'
 4733:  2082: 109:       }
 4734:  2083: 110:     }
 4735:  2084: 111:   }
 4736:  2085: 112: })
 4737:  2086: </file>
 4738:  2087: 
 4739:  2088: <file path=".vitepress/shims-vue.d.ts">
 4740:  2089: 1: declare module '*.vue' {
 4741:  2090: 2:     import type { DefineComponent } from 'vue'
 4742:  2091: 3:     const component: DefineComponent<{}, {}, any>
 4743:  2092: 4:     export default component
 4744:  2093: 5:   }
 4745:  2094: </file>
 4746:  2095: 
 4747:  2096: <file path=".vitepress/theme/custom.css">
 4748:  2097:  1: :root {
 4749:  2098:  2:     /* Brand Colors */
 4750:  2099:  3:     --vp-c-brand: #646cff;
 4751:  2100:  4:     --vp-c-brand-light: #747bff;
 4752:  2101:  5:     --vp-c-brand-lighter: #9499ff;
 4753:  2102:  6:     --vp-c-brand-dark: #535bf2;
 4754:  2103:  7:     --vp-c-brand-darker: #454ce1;
 4755:  2104:  8:   
 4756:  2105:  9:     /* Typography */
 4757:  2106: 10:     --vp-font-family-base: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI',
 4758:  2107: 11:       Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
 4759:  2108: 12:       sans-serif;
 4760:  2109: 13:     --vp-font-family-mono: 'Fira Code', Menlo, Monaco, Consolas, 'Courier New',
 4761:  2110: 14:       monospace;
 4762:  2111: 15:   
 4763:  2112: 16:     /* Code Blocks */
 4764:  2113: 17:     --vp-code-block-bg: #1e1e1e;
 4765:  2114: 18:     --vp-code-block-color: #e5e7eb;
 4766:  2115: 19:     --vp-code-line-highlight-color: rgba(255, 255, 255, 0.1);
 4767:  2116: 20:     --vp-code-line-number-color: #636363;
 4768:  2117: 21:   
 4769:  2118: 22:     /* Custom Component Colors */
 4770:  2119: 23:     --custom-tree-bg: var(--vp-c-bg-soft);
 4771:  2120: 24:     --custom-tree-highlight: var(--vp-c-brand-light);
 4772:  2121: 25:     --custom-diagram-bg: var(--vp-c-bg-soft);
 4773:  2122: 26:     --custom-api-bg: var(--vp-c-bg-soft);
 4774:  2123: 27:   }
 4775:  2124: 28:   
 4776:  2125: 29:   /* Dark Mode Overrides */
 4777:  2126: 30:   .dark {
 4778:  2127: 31:     --custom-tree-bg: var(--vp-c-bg-soft);
 4779:  2128: 32:     --custom-tree-highlight: var(--vp-c-brand-dark);
 4780:  2129: 33:   }
 4781:  2130: 34:   
 4782:  2131: 35:   /* Custom Component Base Styles */
 4783:  2132: 36:   .custom-block {
 4784:  2133: 37:     border-radius: 8px;
 4785:  2134: 38:     padding: 16px 20px;
 4786:  2135: 39:     margin: 16px 0;
 4787:  2136: 40:     font-size: 14px;
 4788:  2137: 41:     line-height: 1.6;
 4789:  2138: 42:   }
 4790:  2139: 43:   
 4791:  2140: 44:   /* Responsive Design */
 4792:  2141: 45:   @media (max-width: 768px) {
 4793:  2142: 46:     .custom-block {
 4794:  2143: 47:       padding: 12px 16px;
 4795:  2144: 48:     }
 4796:  2145: 49:   }
 4797:  2146: 50:   
 4798:  2147: 51:   /* Print Styles */
 4799:  2148: 52:   @media print {
 4800:  2149: 53:     .VPNav,
 4801:  2150: 54:     .VPSidebar,
 4802:  2151: 55:     .VPDocAside {
 4803:  2152: 56:       display: none;
 4804:  2153: 57:     }
 4805:  2154: 58:   
 4806:  2155: 59:     .VPDoc {
 4807:  2156: 60:       padding: 0;
 4808:  2157: 61:       margin: 0;
 4809:  2158: 62:     }
 4810:  2159: 63:   }
 4811:  2160: 64:   
 4812:  2161: 65:   /* Transitions */
 4813:  2162: 66:   .fade-enter-active,
 4814:  2163: 67:   .fade-leave-active {
 4815:  2164: 68:     transition: opacity 0.3s ease;
 4816:  2165: 69:   }
 4817:  2166: 70:   
 4818:  2167: 71:   .fade-enter-from,
 4819:  2168: 72:   .fade-leave-to {
 4820:  2169: 73:     opacity: 0;
 4821:  2170: 74:   }
 4822:  2171: </file>
 4823:  2172: 
 4824:  2173: <file path=".vitepress/theme/FirebaseAuth.vue">
 4825:  2174:  1: <template>
 4826:  2175:  2:   <div v-if="!isAuthenticated" class="auth-wrapper">
 4827:  2176:  3:     <div class="auth-container">
 4828:  2177:  4:       <h2>FFTCG Sync Service Documentation</h2>
 4829:  2178:  5:       <p>Authentication required to access documentation.</p>
 4830:  2179:  6:       <button @click="signIn" class="signin-button">
 4831:  2180:  7:         Sign in with Google
 4832:  2181:  8:       </button>
 4833:  2182:  9:     </div>
 4834:  2183: 10:   </div>
 4835:  2184: 11:   <slot v-else></slot>
 4836:  2185: 12: </template>
 4837:  2186: 13: 
 4838:  2187: 14: <script setup>
 4839:  2188: 15: import { ref, onMounted } from 'vue'
 4840:  2189: 16: import { initializeApp } from 'firebase/app'
 4841:  2190: 17: import { getAuth, signInWithPopup, GoogleAuthProvider, onAuthStateChanged } from 'firebase/auth'
 4842:  2191: 18: 
 4843:  2192: 19: const isAuthenticated = ref(false)
 4844:  2193: 20: const allowedEmails = ['mrw1986@gmail.com']
 4845:  2194: 21: 
 4846:  2195: 22: const firebaseConfig = {
 4847:  2196: 23:   apiKey: "AIzaSyDJGSxSVXWEmTs9HMzSGu175vpABHuEez0",
 4848:  2197: 24:   authDomain: "fftcg-sync-service.firebaseapp.com",
 4849:  2198: 25:   projectId: "fftcg-sync-service",
 4850:  2199: 26:   storageBucket: "fftcg-sync-service.firebasestorage.app",
 4851:  2200: 27:   messagingSenderId: "161248420888",
 4852:  2201: 28:   appId: "1:161248420888:web:61f524b0fa0287017d4f6d"
 4853:  2202: 29: }
 4854:  2203: 30: 
 4855:  2204: 31: const app = initializeApp(firebaseConfig)
 4856:  2205: 32: const auth = getAuth(app)
 4857:  2206: 33: const provider = new GoogleAuthProvider()
 4858:  2207: 34: 
 4859:  2208: 35: onMounted(() => {
 4860:  2209: 36:   onAuthStateChanged(auth, (user) => {
 4861:  2210: 37:     isAuthenticated.value = user && allowedEmails.includes(user.email)
 4862:  2211: 38:     if (user && !allowedEmails.includes(user.email)) {
 4863:  2212: 39:       auth.signOut()
 4864:  2213: 40:       alert('Access denied. Unauthorized email.')
 4865:  2214: 41:     }
 4866:  2215: 42:   })
 4867:  2216: 43: })
 4868:  2217: 44: 
 4869:  2218: 45: const signIn = async () => {
 4870:  2219: 46:   try {
 4871:  2220: 47:     await signInWithPopup(auth, provider)
 4872:  2221: 48:   } catch (error) {
 4873:  2222: 49:     console.error('Authentication error:', error)
 4874:  2223: 50:     alert('Authentication failed. Please try again.')
 4875:  2224: 51:   }
 4876:  2225: 52: }
 4877:  2226: 53: </script>
 4878:  2227: 54: 
 4879:  2228: 55: <style>
 4880:  2229: 56: .auth-wrapper {
 4881:  2230: 57:   display: flex;
 4882:  2231: 58:   justify-content: center;
 4883:  2232: 59:   align-items: center;
 4884:  2233: 60:   min-height: 100vh;
 4885:  2234: 61:   background: var(--vp-c-bg);
 4886:  2235: 62: }
 4887:  2236: 63: 
 4888:  2237: 64: .auth-container {
 4889:  2238: 65:   text-align: center;
 4890:  2239: 66:   padding: 2rem;
 4891:  2240: 67:   border-radius: 8px;
 4892:  2241: 68:   background: var(--vp-c-bg-soft);
 4893:  2242: 69:   box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
 4894:  2243: 70:   max-width: 400px;
 4895:  2244: 71:   width: 90%;
 4896:  2245: 72: }
 4897:  2246: 73: 
 4898:  2247: 74: .signin-button {
 4899:  2248: 75:   margin-top: 1.5rem;
 4900:  2249: 76:   padding: 0.75rem 1.5rem;
 4901:  2250: 77:   border-radius: 4px;
 4902:  2251: 78:   background: var(--vp-c-brand);
 4903:  2252: 79:   color: white;
 4904:  2253: 80:   border: none;
 4905:  2254: 81:   cursor: pointer;
 4906:  2255: 82:   font-size: 1rem;
 4907:  2256: 83:   transition: background-color 0.2s;
 4908:  2257: 84: }
 4909:  2258: 85: 
 4910:  2259: 86: .signin-button:hover {
 4911:  2260: 87:   background: var(--vp-c-brand-dark);
 4912:  2261: 88: }
 4913:  2262: 89: 
 4914:  2263: 90: h2 {
 4915:  2264: 91:   color: var(--vp-c-text-1);
 4916:  2265: 92:   margin-bottom: 1rem;
 4917:  2266: 93: }
 4918:  2267: 94: 
 4919:  2268: 95: p {
 4920:  2269: 96:   color: var(--vp-c-text-2);
 4921:  2270: 97:   margin-bottom: 1rem;
 4922:  2271: 98: }
 4923:  2272: 99: </style>
 4924:  2273: </file>
 4925:  2274: 
 4926:  2275: <file path=".vitepress/theme/index.ts">
 4927:  2276:  1: // .vitepress/theme/index.ts
 4928:  2277:  2: 
 4929:  2278:  3: import { h } from 'vue'
 4930:  2279:  4: import type { Theme } from 'vitepress'
 4931:  2280:  5: import DefaultTheme from 'vitepress/theme'
 4932:  2281:  6: import FileTree from '../../components/FileTree.vue'
 4933:  2282:  7: import ArchitectureDiagram from '../../components/ArchitectureDiagram.vue'
 4934:  2283:  8: import ApiExplorer from '../../components/ApiExplorer.vue'
 4935:  2284:  9: import './custom.css'
 4936:  2285: 10: 
 4937:  2286: 11: export default {
 4938:  2287: 12:   extends: DefaultTheme,
 4939:  2288: 13:   
 4940:  2289: 14:   enhanceApp({ app }) {
 4941:  2290: 15:     // Register global components
 4942:  2291: 16:     app.component('FileTree', FileTree)
 4943:  2292: 17:     app.component('ArchitectureDiagram', ArchitectureDiagram)
 4944:  2293: 18:     app.component('ApiExplorer', ApiExplorer)
 4945:  2294: 19:   },
 4946:  2295: 20: 
 4947:  2296: 21:   Layout: () => {
 4948:  2297: 22:     return h(DefaultTheme.Layout, null, {
 4949:  2298: 23:       // Optional: Add custom slots here if needed
 4950:  2299: 24:     })
 4951:  2300: 25:   }
 4952:  2301: 26: } satisfies Theme
 4953:  2302: </file>
 4954:  2303: 
 4955:  2304: <file path="api/index.md">
 4956:  2305:  1: # API Documentation
 4957:  2306:  2: 
 4958:  2307:  3: ## Overview
 4959:  2308:  4: 
 4960:  2309:  5: This documentation covers the FFTCG Sync Service API endpoints, authentication, and usage.
 4961:  2310:  6: 
 4962:  2311:  7: ## Authentication
 4963:  2312:  8: 
 4964:  2313:  9: To use authenticated endpoints, you'll need a Firebase Authentication token. Here's how to obtain one:
 4965:  2314: 10: 
 4966:  2315: 11: 1. Log in to the [Firebase Console](https://console.firebase.google.com)
 4967:  2316: 12: 2. Navigate to Project Settings
 4968:  2317: 13: 3. Go to Service Accounts
 4969:  2318: 14: 4. Click "Generate New Private Key"
 4970:  2319: 15: 5. Use the key to generate a token:
 4971:  2320: 16: 
 4972:  2321: 17: ```bash
 4973:  2322: 18: # Install Firebase CLI if you haven't already
 4974:  2323: 19: npm install -g firebase-tools
 4975:  2324: 20: 
 4976:  2325: 21: # Login to Firebase
 4977:  2326: 22: firebase login
 4978:  2327: 23: 
 4979:  2328: 24: # Get a token
 4980:  2329: 25: firebase auth:token
 4981:  2330: 26: ```
 4982:  2331: 27: 
 4983:  2332: 28: ## Making Authenticated Requests
 4984:  2333: 29: 
 4985:  2334: 30: Include the token in your API requests:
 4986:  2335: 31: 
 4987:  2336: 32: ```bash
 4988:  2337: 33: curl -H "Authorization: Bearer YOUR_FIREBASE_TOKEN" https://us-central1-fftcg-sync-service.cloudfunctions.net/api/endpoint
 4989:  2338: 34: ```
 4990:  2339: 35: 
 4991:  2340: 36: ## API Explorer
 4992:  2341: 37: 
 4993:  2342: 38: Use the interactive API explorer below to test endpoints. For authenticated endpoints, you'll need to add your Firebase token in the Headers section.
 4994:  2343: 39: 
 4995:  2344: 40: ::: tip
 4996:  2345: 41: Log in to the Firebase Console first to ensure your token has the necessary permissions.
 4997:  2346: 42: :::
 4998:  2347: 43: 
 4999:  2348: 44: {% api-explorer %}
 5000:  2349: 45: 
 5001:  2350: 46: ## Rate Limits
 5002:  2351: 47: 
 5003:  2352: 48: - 100 requests per minute for authenticated endpoints
 5004:  2353: 49: - 25 requests per minute for unauthenticated endpoints
 5005:  2354: 50: - Batch operations limited to 500 items
 5006:  2355: 51: 
 5007:  2356: 52: ## Response Codes
 5008:  2357: 53: 
 5009:  2358: 54: | Code | Description |
 5010:  2359: 55: |------|-------------|
 5011:  2360: 56: | 200  | Success |
 5012:  2361: 57: | 400  | Bad Request |
 5013:  2362: 58: | 401  | Unauthorized |
 5014:  2363: 59: | 403  | Forbidden |
 5015:  2364: 60: | 429  | Too Many Requests |
 5016:  2365: 61: | 500  | Server Error |
 5017:  2366: 62: 
 5018:  2367: 63: ## Support
 5019:  2368: 64: 
 5020:  2369: 65: For API support or issues:
 5021:  2370: 66: 
 5022:  2371: 67: - Open an issue on GitHub
 5023:  2372: 68: - Contact the development team
 5024:  2373: 69: - Check the troubleshooting guide
 5025:  2374: </file>
 5026:  2375: 
 5027:  2376: <file path="architecture.md">
 5028:  2377:   1: # System Architecture
 5029:  2378:   2: 
 5030:  2379:   3: ## Overview
 5031:  2380:   4: 
 5032:  2381:   5: FFTCG Sync Service is built on Firebase Cloud Functions with a microservices architecture, designed to synchronize card data, prices, and images from TCGplayer while maintaining high performance and reliability.
 5033:  2382:   6: 
 5034:  2383:   7: ## System Diagram
 5035:  2384:   8: 
 5036:  2385:   9: The diagram below shows the key components and their interactions:
 5037:  2386:  10: 
 5038:  2387:  11: {% architecture-diagram %}
 5039:  2388:  12: 
 5040:  2389:  13: ## Core Components
 5041:  2390:  14: 
 5042:  2391:  15: ### Cloud Functions
 5043:  2392:  16: 
 5044:  2393:  17: ```mermaid
 5045:  2394:  18: graph TD
 5046:  2395:  19:     A[Scheduled Triggers] -->|Daily| B[Sync Functions]
 5047:  2396:  20:     C[HTTP Triggers] -->|Manual| B
 5048:  2397:  21:     B --> D[Card Sync]
 5049:  2398:  22:     B --> E[Price Sync]
 5050:  2399:  23:     B --> F[Image Processing]
 5051:  2400:  24: ```
 5052:  2401:  25: 
 5053:  2402:  26: #### Functions Structure
 5054:  2403:  27: 
 5055:  2404:  28: - `scheduledCardSync` - Daily card data synchronization
 5056:  2405:  29: - `scheduledPriceSync` - Daily price updates
 5057:  2406:  30: - `testCardSync` - Test endpoint for card sync
 5058:  2407:  31: - `testPriceSync` - Test endpoint for price sync
 5059:  2408:  32: - `manualCardSync` - Manual trigger for full sync
 5060:  2409:  33: - `manualPriceSync` - Manual trigger for price sync
 5061:  2410:  34: - `healthCheck` - System health monitoring
 5062:  2411:  35: 
 5063:  2412:  36: ### Storage Systems
 5064:  2413:  37: 
 5065:  2414:  38: ```mermaid
 5066:  2415:  39: graph LR
 5067:  2416:  40:     A[Cloud Functions] --> B[Firestore]
 5068:  2417:  41:     A --> C[Cloud Storage]
 5069:  2418:  42:     B --> D[(Cards Collection)]
 5070:  2419:  43:     B --> E[(Prices Collection)]
 5071:  2420:  44:     B --> F[(Sync Metadata)]
 5072:  2421:  45:     C --> G[Card Images]
 5073:  2422:  46: ```
 5074:  2423:  47: 
 5075:  2424:  48: #### Database Collections
 5076:  2425:  49: 
 5077:  2426:  50: - `cards` - Card information and metadata
 5078:  2427:  51: - `prices` - Current and historical price data
 5079:  2428:  52: - `syncMetadata` - Sync operation logs and status
 5080:  2429:  53: - `logs` - System logs and operations history
 5081:  2430:  54: - `cardHashes` - Change detection hashes
 5082:  2431:  55: - `priceHashes` - Price update tracking
 5083:  2432:  56: - `imageMetadata` - Image processing metadata
 5084:  2433:  57: 
 5085:  2434:  58: ### Processing Pipeline
 5086:  2435:  59: 
 5087:  2436:  60: ```mermaid
 5088:  2437:  61: graph TD
 5089:  2438:  62:     A[Data Source] -->|Fetch| B[Raw Data]
 5090:  2439:  63:     B -->|Validate| C[Validation Layer]
 5091:  2440:  64:     C -->|Process| D[Processing Layer]
 5092:  2441:  65:     D -->|Store| E[Storage Layer]
 5093:  2442:  66:     D -->|Cache| F[Cache Layer]
 5094:  2443:  67: ```
 5095:  2444:  68: 
 5096:  2445:  69: #### Pipeline Components
 5097:  2446:  70: 
 5098:  2447:  71: - Data Fetching
 5099:  2448:  72: - Validation & Sanitization
 5100:  2449:  73: - Processing & Transformation
 5101:  2450:  74: - Storage Management
 5102:  2451:  75: - Cache Management
 5103:  2452:  76: 
 5104:  2453:  77: ## Service Integration
 5105:  2454:  78: 
 5106:  2455:  79: ### External Services
 5107:  2456:  80: 
 5108:  2457:  81: ```mermaid
 5109:  2458:  82: graph LR
 5110:  2459:  83:     A[FFTCG Sync Service] -->|Cards Data| B[TCGplayer API]
 5111:  2460:  84:     A -->|Prices| B
 5112:  2461:  85:     A -->|Images| C[TCGplayer CDN]
 5113:  2462:  86:     A --> D[Firebase Services]
 5114:  2463:  87: ```
 5115:  2464:  88: 
 5116:  2465:  89: ### Internal Services Communication
 5117:  2466:  90: 
 5118:  2467:  91: ```mermaid
 5119:  2468:  92: graph TD
 5120:  2469:  93:     A[Sync Controller] --> B[Card Service]
 5121:  2470:  94:     A --> C[Price Service]
 5122:  2471:  95:     A --> D[Image Service]
 5123:  2472:  96:     B --> E[Storage Service]
 5124:  2473:  97:     C --> E
 5125:  2474:  98:     D --> E
 5126:  2475:  99: ```
 5127:  2476: 100: 
 5128:  2477: 101: ## Data Flow
 5129:  2478: 102: 
 5130:  2479: 103: ### Synchronization Flow
 5131:  2480: 104: 
 5132:  2481: 105: ```mermaid
 5133:  2482: 106: sequenceDiagram
 5134:  2483: 107:     participant T as Trigger
 5135:  2484: 108:     participant S as Sync Service
 5136:  2485: 109:     participant E as External API
 5137:  2486: 110:     participant D as Database
 5138:  2487: 111:     participant C as Cache
 5139:  2488: 112:    
 5140:  2489: 113:     T->>S: Initiate Sync
 5141:  2490: 114:     S->>C: Check Cache
 5142:  2491: 115:     S->>E: Fetch Updates
 5143:  2492: 116:     E->>S: Return Data
 5144:  2493: 117:     S->>D: Store Updates
 5145:  2494: 118:     S->>C: Update Cache
 5146:  2495: 119: ```
 5147:  2496: 120: 
 5148:  2497: 121: ## Error Handling
 5149:  2498: 122: 
 5150:  2499: 123: ### Recovery System
 5151:  2500: 124: 
 5152:  2501: 125: ```mermaid
 5153:  2502: 126: graph TD
 5154:  2503: 127:     A[Error Detection] -->|Classify| B[Error Types]
 5155:  2504: 128:     B -->|Transient| C[Retry Logic]
 5156:  2505: 129:     B -->|Permanent| D[Failure Handling]
 5157:  2506: 130:     C -->|Success| E[Continue Processing]
 5158:  2507: 131:     C -->|Max Retries| D
 5159:  2508: 132:     D --> F[Error Logging]
 5160:  2509: 133:     D --> G[Fallback Mechanism]
 5161:  2510: 134: ```
 5162:  2511: 135: 
 5163:  2512: 136: ## Performance Optimization
 5164:  2513: 137: 
 5165:  2514: 138: ### Caching Strategy
 5166:  2515: 139: 
 5167:  2516: 140: ```mermaid
 5168:  2517: 141: graph LR
 5169:  2518: 142:     A[Request] --> B{Cache Check}
 5170:  2519: 143:     B -->|Hit| C[Return Cached]
 5171:  2520: 144:     B -->|Miss| D[Fetch Fresh]
 5172:  2521: 145:     D --> E[Process]
 5173:  2522: 146:     E --> F[Update Cache]
 5174:  2523: 147:     F --> G[Return Fresh]
 5175:  2524: 148: ```
 5176:  2525: 149: 
 5177:  2526: 150: ## Security Architecture
 5178:  2527: 151: 
 5179:  2528: 152: ### Access Control
 5180:  2529: 153: 
 5181:  2530: 154: ```mermaid
 5182:  2531: 155: graph TD
 5183:  2532: 156:     A[Request] --> B{Authentication}
 5184:  2533: 157:     B -->|Valid| C{Authorization}
 5185:  2534: 158:     B -->|Invalid| D[Reject]
 5186:  2535: 159:     C -->|Allowed| E[Process]
 5187:  2536: 160:     C -->|Denied| D
 5188:  2537: 161: ```
 5189:  2538: 162: 
 5190:  2539: 163: ## Monitoring System
 5191:  2540: 164: 
 5192:  2541: 165: ### Observability
 5193:  2542: 166: 
 5194:  2543: 167: ```mermaid
 5195:  2544: 168: graph TD
 5196:  2545: 169:     A[Operations] --> B[Logging]
 5197:  2546: 170:     A --> C[Metrics]
 5198:  2547: 171:     A --> D[Traces]
 5199:  2548: 172:     B --> E[Analysis]
 5200:  2549: 173:     C --> E
 5201:  2550: 174:     D --> E
 5202:  2551: 175: ```
 5203:  2552: 176: 
 5204:  2553: 177: ## Resource Management
 5205:  2554: 178: 
 5206:  2555: 179: ### Scaling Strategy
 5207:  2556: 180: 
 5208:  2557: 181: ```mermaid
 5209:  2558: 182: graph TD
 5210:  2559: 183:     A[Load Monitor] -->|Triggers| B[Scaling Decision]
 5211:  2560: 184:     B -->|Up| C[Increase Resources]
 5212:  2561: 185:     B -->|Down| D[Decrease Resources]
 5213:  2562: 186:     C --> E[Update Configuration]
 5214:  2563: 187:     D --> E
 5215:  2564: 188: ```
 5216:  2565: 189: 
 5217:  2566: 190: ## Configuration Management
 5218:  2567: 191: 
 5219:  2568: 192: ### Environment Setup
 5220:  2569: 193: 
 5221:  2570: 194: ```mermaid
 5222:  2571: 195: graph LR
 5223:  2572: 196:     A[Configuration] --> B[Development]
 5224:  2573: 197:     A --> C[Staging]
 5225:  2574: 198:     A --> D[Production]
 5226:  2575: 199:     B --> E[Firebase Project]
 5227:  2576: 200:     C --> E
 5228:  2577: 201:     D --> E
 5229:  2578: 202: ```
 5230:  2579: 203: 
 5231:  2580: 204: ## Best Practices
 5232:  2581: 205: 
 5233:  2582: 206: ### Development Workflow
 5234:  2583: 207: 
 5235:  2584: 208: ```mermaid
 5236:  2585: 209: graph LR
 5237:  2586: 210:     A[Development] -->|Test| B[Staging]
 5238:  2587: 211:     B -->|Validate| C[Production]
 5239:  2588: 212:     C -->|Monitor| D[Maintenance]
 5240:  2589: 213:     D -->|Update| A
 5241:  2590: 214: ```
 5242:  2591: 215: 
 5243:  2592: 216: ## System Requirements
 5244:  2593: 217: 
 5245:  2594: 218: ### Infrastructure
 5246:  2595: 219: 
 5247:  2596: 220: - Node.js 18+
 5248:  2597: 221: - Firebase Admin SDK
 5249:  2598: 222: - Cloud Functions
 5250:  2599: 223: - Firestore
 5251:  2600: 224: - Cloud Storage
 5252:  2601: 225: - Memory: 1GB minimum
 5253:  2602: 226: - Timeout: 540s maximum
 5254:  2603: 227: 
 5255:  2604: 228: ### Dependencies
 5256:  2605: 229: 
 5257:  2606: 230: - Firebase Functions
 5258:  2607: 231: - Firebase Admin
 5259:  2608: 232: - Axios for HTTP requests
 5260:  2609: 233: - Sharp for image processing
 5261:  2610: 234: - LRU Cache for caching
 5262:  2611: 235: - TypeScript for development
 5263:  2612: 236: 
 5264:  2613: 237: ## Deployment Architecture
 5265:  2614: 238: 
 5266:  2615: 239: ### CI/CD Pipeline
 5267:  2616: 240: 
 5268:  2617: 241: ```mermaid
 5269:  2618: 242: graph LR
 5270:  2619: 243:     A[Code Push] -->|Build| B[Tests]
 5271:  2620: 244:     B -->|Pass| C[Deploy]
 5272:  2621: 245:     C -->|Success| D[Monitor]
 5273:  2622: 246:     D -->|Issues| E[Rollback]
 5274:  2623: 247: ```
 5275:  2624: 248: 
 5276:  2625: 249: ## Additional Resources
 5277:  2626: 250: 
 5278:  2627: 251: - [Installation Guide](/setup/installation)
 5279:  2628: 252: - [Configuration Guide](/setup/configuration)
 5280:  2629: 253: - [API Documentation](/api/)
 5281:  2630: 254: - [Troubleshooting Guide](/troubleshooting)
 5282:  2631: </file>
 5283:  2632: 
 5284:  2633: <file path="codebase.xml">
 5285:  2634:     1: This file is a merged representation of the entire codebase, combining all repository files into a single document.
 5286:  2635:     2: Generated by Repomix on: 2024-11-22T14:55:09.077Z
 5287:  2636:     3: 
 5288:  2637:     4: <file_summary>
 5289:  2638:     5: This section contains a summary of this file.
 5290:  2639:     6: 
 5291:  2640:     7: <purpose>
 5292:  2641:     8: This file contains a packed representation of the entire repository's contents.
 5293:  2642:     9: It is designed to be easily consumable by AI systems for analysis, code review,
 5294:  2643:    10: or other automated processes.
 5295:  2644:    11: </purpose>
 5296:  2645:    12: 
 5297:  2646:    13: <file_format>
 5298:  2647:    14: The content is organized as follows:
 5299:  2648:    15: 1. This summary section
 5300:  2649:    16: 2. Repository information
 5301:  2650:    17: 3. Repository structure
 5302:  2651:    18: 4. Repository files, each consisting of:
 5303:  2652:    19:   - File path as an attribute
 5304:  2653:    20:   - Full contents of the file
 5305:  2654:    21: </file_format>
 5306:  2655:    22: 
 5307:  2656:    23: <usage_guidelines>
 5308:  2657:    24: - This file should be treated as read-only. Any changes should be made to the
 5309:  2658:    25:   original repository files, not this packed version.
 5310:  2659:    26: - When processing this file, use the file path to distinguish
 5311:  2660:    27:   between different files in the repository.
 5312:  2661:    28: - Be aware that this file may contain sensitive information. Handle it with
 5313:  2662:    29:   the same level of security as you would the original repository.
 5314:  2663:    30: </usage_guidelines>
 5315:  2664:    31: 
 5316:  2665:    32: <notes>
 5317:  2666:    33: - Some files may have been excluded based on .gitignore rules and Repomix's
 5318:  2667:    34:   configuration.
 5319:  2668:    35: - Binary files are not included in this packed representation. Please refer to
 5320:  2669:    36:   the Repository Structure section for a complete list of file paths, including
 5321:  2670:    37:   binary files.
 5322:  2671:    38: 
 5323:  2672:    39: - Line numbers have been added to the beginning of each line.
 5324:  2673:    40: </notes>
 5325:  2674:    41: 
 5326:  2675:    42: <additional_info>
 5327:  2676:    43: 
 5328:  2677:    44: For more information about Repomix, visit: https://github.com/yamadashy/repomix
 5329:  2678:    45: </additional_info>
 5330:  2679:    46: 
 5331:  2680:    47: </file_summary>
 5332:  2681:    48: 
 5333:  2682:    49: <repository_structure>
 5334:  2683:    50: .vitepress/components/ApiExplorer.vue
 5335:  2684:    51: .vitepress/components/ArchitectureDiagram.vue
 5336:  2685:    52: .vitepress/components/FileTree.vue
 5337:  2686:    53: .vitepress/config.mts
 5338:  2687:    54: .vitepress/shims-vue.d.ts
 5339:  2688:    55: .vitepress/theme/custom.css
 5340:  2689:    56: .vitepress/theme/FirebaseAuth.vue
 5341:  2690:    57: .vitepress/theme/index.ts
 5342:  2691:    58: architecture.md
 5343:  2692:    59: codebase.xml
 5344:  2693:    60: faq.md
 5345:  2694:    61: index.md
 5346:  2695:    62: introduction.md
 5347:  2696:    63: package.json
 5348:  2697:    64: performance.md
 5349:  2698:    65: security.md
 5350:  2699:    66: services/card-sync.md
 5351:  2700:    67: services/price-sync.md
 5352:  2701:    68: setup/configuration.md
 5353:  2702:    69: setup/installation.md
 5354:  2703:    70: troubleshooting.md
 5355:  2704:    71: usage-guide.md
 5356:  2705:    72: utils/batch.md
 5357:  2706:    73: utils/cache.md
 5358:  2707:    74: utils/error-handling.md
 5359:  2708:    75: utils/image-compressor.md
 5360:  2709:    76: utils/image-handler.md
 5361:  2710:    77: utils/image-validator.md
 5362:  2711:    78: utils/logging.md
 5363:  2712:    79: utils/progress.md
 5364:  2713:    80: utils/request.md
 5365:  2714:    81: utils/sync-logger.md
 5366:  2715:    82: </repository_structure>
 5367:  2716:    83: 
 5368:  2717:    84: <repository_files>
 5369:  2718:    85: This section contains the contents of the repository's files.
 5370:  2719:    86: 
 5371:  2720:    87: <file path=".vitepress/components/ApiExplorer.vue">
 5372:  2721:    88:    1: <script setup lang="ts">
 5373:  2722:    89:    2: import { ref, computed, watch, onMounted } from 'vue'
 5374:  2723:    90:    3: import { useDateFormat, useLocalStorage } from '@vueuse/core'
 5375:  2724:    91:    4: 
 5376:  2725:    92:    5: interface ApiEndpoint {
 5377:  2726:    93:    6:   name: string
 5378:  2727:    94:    7:   method: 'GET' | 'POST' | 'PUT' | 'DELETE'
 5379:  2728:    95:    8:   path: string
 5380:  2729:    96:    9:   description: string
 5381:  2730:    97:   10:   params?: Parameter[]
 5382:  2731:    98:   11:   responses: ApiResponse[]
 5383:  2732:    99:   12:   example?: {
 5384:  2733:   100:   13:     request?: string
 5385:  2734:   101:   14:     response?: string
 5386:  2735:   102:   15:   }
 5387:  2736:   103:   16:   authenticated: boolean
 5388:  2737:   104:   17:   tags?: string[]
 5389:  2738:   105:   18: }
 5390:  2739:   106:   19: 
 5391:  2740:   107:   20: interface Parameter {
 5392:  2741:   108:   21:   name: string
 5393:  2742:   109:   22:   type: string
 5394:  2743:   110:   23:   required: boolean
 5395:  2744:   111:   24:   description: string
 5396:  2745:   112:   25:   default?: string
 5397:  2746:   113:   26:   validation?: {
 5398:  2747:   114:   27:     pattern?: string
 5399:  2748:   115:   28:     min?: number
 5400:  2749:   116:   29:     max?: number
 5401:  2750:   117:   30:   }
 5402:  2751:   118:   31: }
 5403:  2752:   119:   32: 
 5404:  2753:   120:   33: interface ApiResponse {
 5405:  2754:   121:   34:   status: number
 5406:  2755:   122:   35:   description: string
 5407:  2756:   123:   36:   schema: string
 5408:  2757:   124:   37: }
 5409:  2758:   125:   38: 
 5410:  2759:   126:   39: interface ResponseState {
 5411:  2760:   127:   40:   loading: boolean
 5412:  2761:   128:   41:   data: any
 5413:  2762:   129:   42:   error: string | null
 5414:  2763:   130:   43:   headers: Record<string, string>
 5415:  2764:   131:   44:   status: number
 5416:  2765:   132:   45:   timestamp: number
 5417:  2766:   133:   46: }
 5418:  2767:   134:   47: 
 5419:  2768:   135:   48: interface RequestHeader {
 5420:  2769:   136:   49:   key: string
 5421:  2770:   137:   50:   value: string
 5422:  2771:   138:   51:   enabled: boolean
 5423:  2772:   139:   52: }
 5424:  2773:   140:   53: 
 5425:  2774:   141:   54: interface HistoryEntry {
 5426:  2775:   142:   55:   id: string
 5427:  2776:   143:   56:   endpoint: string
 5428:  2777:   144:   57:   method: string
 5429:  2778:   145:   58:   params: Record<string, any>
 5430:  2779:   146:   59:   headers: RequestHeader[]
 5431:  2780:   147:   60:   timestamp: number
 5432:  2781:   148:   61:   status: number
 5433:  2782:   149:   62:   success: boolean
 5434:  2783:   150:   63: }
 5435:  2784:   151:   64: 
 5436:  2785:   152:   65: const endpoints: ApiEndpoint[] = [
 5437:  2786:   153:   66:   {
 5438:  2787:   154:   67:     name: 'List Cards',
 5439:  2788:   155:   68:     method: 'GET',
 5440:  2789:   156:   69:     path: '/api/cards',
 5441:  2790:   157:   70:     description: 'Retrieve a list of all cards with optional filtering',
 5442:  2791:   158:   71:     authenticated: false,
 5443:  2792:   159:   72:     tags: ['cards'],
 5444:  2793:   160:   73:     params: [
 5445:  2794:   161:   74:       {
 5446:  2795:   162:   75:         name: 'groupId',
 5447:  2796:   163:   76:         type: 'string',
 5448:  2797:   164:   77:         required: false,
 5449:  2798:   165:   78:         description: 'Filter by specific group ID'
 5450:  2799:   166:   79:       },
 5451:  2800:   167:   80:       {
 5452:  2801:   168:   81:         name: 'limit',
 5453:  2802:   169:   82:         type: 'number',
 5454:  2803:   170:   83:         required: false,
 5455:  2804:   171:   84:         description: 'Maximum number of cards to return',
 5456:  2805:   172:   85:         default: '50'
 5457:  2806:   173:   86:       },
 5458:  2807:   174:   87:       {
 5459:  2808:   175:   88:         name: 'offset',
 5460:  2809:   176:   89:         type: 'number',
 5461:  2810:   177:   90:         required: false,
 5462:  2811:   178:   91:         description: 'Number of cards to skip',
 5463:  2812:   179:   92:         default: '0'
 5464:  2813:   180:   93:       }
 5465:  2814:   181:   94:     ],
 5466:  2815:   182:   95:     responses: [
 5467:  2816:   183:   96:       {
 5468:  2817:   184:   97:         status: 200,
 5469:  2818:   185:   98:         description: 'List of cards retrieved successfully',
 5470:  2819:   186:   99:         schema: `{
 5471:  2820:   187:  100:   "cards": [
 5472:  2821:   188:  101:     {
 5473:  2822:   189:  102:       "id": "string",
 5474:  2823:   190:  103:       "name": "string",
 5475:  2824:   191:  104:       "groupId": "string",
 5476:  2825:   192:  105:       "imageUrl": "string",
 5477:  2826:   193:  106:       "prices": {
 5478:  2827:   194:  107:         "normal": "number",
 5479:  2828:   195:  108:         "foil": "number"
 5480:  2829:   196:  109:       }
 5481:  2830:   197:  110:     }
 5482:  2831:   198:  111:   ],
 5483:  2832:   199:  112:   "total": "number",
 5484:  2833:   200:  113:   "limit": "number",
 5485:  2834:   201:  114:   "offset": "number"
 5486:  2835:   202:  115: }`
 5487:  2836:   203:  116:       }
 5488:  2837:   204:  117:     ]
 5489:  2838:   205:  118:   },
 5490:  2839:   206:  119:   {
 5491:  2840:   207:  120:     name: 'Get Card Details',
 5492:  2841:   208:  121:     method: 'GET',
 5493:  2842:   209:  122:     path: '/api/cards/{id}',
 5494:  2843:   210:  123:     description: 'Retrieve detailed information about a specific card',
 5495:  2844:   211:  124:     authenticated: false,
 5496:  2845:   212:  125:     tags: ['cards'],
 5497:  2846:   213:  126:     params: [
 5498:  2847:   214:  127:       {
 5499:  2848:   215:  128:         name: 'id',
 5500:  2849:   216:  129:         type: 'string',
 5501:  2850:   217:  130:         required: true,
 5502:  2851:   218:  131:         description: 'Card ID'
 5503:  2852:   219:  132:       }
 5504:  2853:   220:  133:     ],
 5505:  2854:   221:  134:     responses: [
 5506:  2855:   222:  135:       {
 5507:  2856:   223:  136:         status: 200,
 5508:  2857:   224:  137:         description: 'Card details retrieved successfully',
 5509:  2858:   225:  138:         schema: `{
 5510:  2859:   226:  139:   "id": "string",
 5511:  2860:   227:  140:   "name": "string",
 5512:  2861:   228:  141:   "groupId": "string",
 5513:  2862:   229:  142:   "imageUrl": "string",
 5514:  2863:   230:  143:   "prices": {
 5515:  2864:   231:  144:     "normal": "number",
 5516:  2865:   232:  145:     "foil": "number"
 5517:  2866:   233:  146:   },
 5518:  2867:   234:  147:   "priceHistory": [
 5519:  2868:   235:  148:     {
 5520:  2869:   236:  149:       "date": "string",
 5521:  2870:   237:  150:       "normal": "number",
 5522:  2871:   238:  151:       "foil": "number"
 5523:  2872:   239:  152:     }
 5524:  2873:   240:  153:   ]
 5525:  2874:   241:  154: }`
 5526:  2875:   242:  155:       }
 5527:  2876:   243:  156:     ]
 5528:  2877:   244:  157:   },
 5529:  2878:   245:  158:   {
 5530:  2879:   246:  159:     name: 'Trigger Card Sync',
 5531:  2880:   247:  160:     method: 'POST',
 5532:  2881:   248:  161:     path: '/api/sync/cards',
 5533:  2882:   249:  162:     description: 'Manually trigger card synchronization',
 5534:  2883:   250:  163:     authenticated: true,
 5535:  2884:   251:  164:     tags: ['sync'],
 5536:  2885:   252:  165:     params: [
 5537:  2886:   253:  166:       {
 5538:  2887:   254:  167:         name: 'dryRun',
 5539:  2888:   255:  168:         type: 'boolean',
 5540:  2889:   256:  169:         required: false,
 5541:  2890:   257:  170:         description: 'Run sync without making changes',
 5542:  2891:   258:  171:         default: 'false'
 5543:  2892:   259:  172:       },
 5544:  2893:   260:  173:       {
 5545:  2894:   261:  174:         name: 'groupId',
 5546:  2895:   262:  175:         type: 'string',
 5547:  2896:   263:  176:         required: false,
 5548:  2897:   264:  177:         description: 'Sync specific group only'
 5549:  2898:   265:  178:       }
 5550:  2899:   266:  179:     ],
 5551:  2900:   267:  180:     responses: [
 5552:  2901:   268:  181:       {
 5553:  2902:   269:  182:         status: 200,
 5554:  2903:   270:  183:         description: 'Sync initiated successfully',
 5555:  2904:   271:  184:         schema: `{
 5556:  2905:   272:  185:   "jobId": "string",
 5557:  2906:   273:  186:   "status": "string",
 5558:  2907:   274:  187:   "message": "string"
 5559:  2908:   275:  188: }`
 5560:  2909:   276:  189:       }
 5561:  2910:   277:  190:     ]
 5562:  2911:   278:  191:   },
 5563:  2912:   279:  192:   {
 5564:  2913:   280:  193:     name: 'Trigger Price Sync',
 5565:  2914:   281:  194:     method: 'POST',
 5566:  2915:   282:  195:     path: '/api/sync/prices',
 5567:  2916:   283:  196:     description: 'Manually trigger price synchronization',
 5568:  2917:   284:  197:     authenticated: true,
 5569:  2918:   285:  198:     tags: ['sync'],
 5570:  2919:   286:  199:     params: [
 5571:  2920:   287:  200:       {
 5572:  2921:   288:  201:         name: 'dryRun',
 5573:  2922:   289:  202:         type: 'boolean',
 5574:  2923:   290:  203:         required: false,
 5575:  2924:   291:  204:         description: 'Run sync without making changes',
 5576:  2925:   292:  205:         default: 'false'
 5577:  2926:   293:  206:       }
 5578:  2927:   294:  207:     ],
 5579:  2928:   295:  208:     responses: [
 5580:  2929:   296:  209:       {
 5581:  2930:   297:  210:         status: 200,
 5582:  2931:   298:  211:         description: 'Price sync initiated successfully',
 5583:  2932:   299:  212:         schema: `{
 5584:  2933:   300:  213:   "jobId": "string",
 5585:  2934:   301:  214:   "status": "string",
 5586:  2935:   302:  215:   "message": "string"
 5587:  2936:   303:  216: }`
 5588:  2937:   304:  217:       }
 5589:  2938:   305:  218:     ]
 5590:  2939:   306:  219:   },
 5591:  2940:   307:  220:   {
 5592:  2941:   308:  221:     name: 'Get Sync Status',
 5593:  2942:   309:  222:     method: 'GET',
 5594:  2943:   310:  223:     path: '/api/sync/status/{jobId}',
 5595:  2944:   311:  224:     description: 'Check the status of a sync operation',
 5596:  2945:   312:  225:     authenticated: true,
 5597:  2946:   313:  226:     tags: ['sync'],
 5598:  2947:   314:  227:     params: [
 5599:  2948:   315:  228:       {
 5600:  2949:   316:  229:         name: 'jobId',
 5601:  2950:   317:  230:         type: 'string',
 5602:  2951:   318:  231:         required: true,
 5603:  2952:   319:  232:         description: 'Sync job ID'
 5604:  2953:   320:  233:       }
 5605:  2954:   321:  234:     ],
 5606:  2955:   322:  235:     responses: [
 5607:  2956:   323:  236:       {
 5608:  2957:   324:  237:         status: 200,
 5609:  2958:   325:  238:         description: 'Sync status retrieved successfully',
 5610:  2959:   326:  239:         schema: `{
 5611:  2960:   327:  240:   "jobId": "string",
 5612:  2961:   328:  241:   "status": "string",
 5613:  2962:   329:  242:   "progress": "number",
 5614:  2963:   330:  243:   "details": {
 5615:  2964:   331:  244:     "processed": "number",
 5616:  2965:   332:  245:     "total": "number",
 5617:  2966:   333:  246:     "errors": "number"
 5618:  2967:   334:  247:   }
 5619:  2968:   335:  248: }`
 5620:  2969:   336:  249:       }
 5621:  2970:   337:  250:     ]
 5622:  2971:   338:  251:   }
 5623:  2972:   339:  252: ]
 5624:  2973:   340:  253: 
 5625:  2974:   341:  254: const BASE_URL = 'https://us-central1-fftcg-sync-service.cloudfunctions.net'
 5626:  2975:   342:  255: const selectedEndpoint = ref<ApiEndpoint>(endpoints[0])
 5627:  2976:   343:  256: const showResponse = ref(true)
 5628:  2977:   344:  257: const showHeaders = ref(false)
 5629:  2978:   345:  258: const showHistory = ref(false)
 5630:  2979:   346:  259: const showResponseHeaders = ref(false)
 5631:  2980:   347:  260: const customHeaders = ref<RequestHeader[]>([
 5632:  2981:   348:  261:   { key: 'Accept', value: 'application/json', enabled: true }
 5633:  2982:   349:  262: ])
 5634:  2983:   350:  263: const history = ref<HistoryEntry[]>([])
 5635:  2984:   351:  264: const selectedTags = ref<string[]>([])
 5636:  2985:   352:  265: const showAuthenticated = ref(true)
 5637:  2986:   353:  266: const searchQuery = ref('')
 5638:  2987:   354:  267: 
 5639:  2988:   355:  268: // Response state
 5640:  2989:   356:  269: const responseState = ref<ResponseState>({
 5641:  2990:   357:  270:   loading: false,
 5642:  2991:   358:  271:   data: null,
 5643:  2992:   359:  272:   error: null,
 5644:  2993:   360:  273:   headers: {},
 5645:  2994:   361:  274:   status: 0,
 5646:  2995:   362:  275:   timestamp: 0
 5647:  2996:   363:  276: })
 5648:  2997:   364:  277: 
 5649:  2998:   365:  278: const paramValues = ref<Record<string, any>>({})
 5650:  2999:   366:  279: 
 5651:  3000:   367:  280: // Computed properties
 5652:  3001:   368:  281: const methodColor = computed(() => {
 5653:  3002:   369:  282:   switch (selectedEndpoint.value.method) {
 5654:  3003:   370:  283:     case 'GET': return 'var(--vp-c-green)'
 5655:  3004:   371:  284:     case 'POST': return 'var(--vp-c-brand)'
 5656:  3005:   372:  285:     case 'PUT': return 'var(--vp-c-yellow)'
 5657:  3006:   373:  286:     case 'DELETE': return 'var(--vp-c-red)'
 5658:  3007:   374:  287:     default: return 'var(--vp-c-text-1)'
 5659:  3008:   375:  288:   }
 5660:  3009:   376:  289: })
 5661:  3010:   377:  290: 
 5662:  3011:   378:  291: const filteredEndpoints = computed(() => {
 5663:  3012:   379:  292:   return endpoints.filter(endpoint => {
 5664:  3013:   380:  293:     const matchesSearch = endpoint.name.toLowerCase().includes(searchQuery.value.toLowerCase()) ||
 5665:  3014:   381:  294:                          endpoint.path.toLowerCase().includes(searchQuery.value.toLowerCase())
 5666:  3015:   382:  295:     const matchesTags = selectedTags.value.length === 0 || 
 5667:  3016:   383:  296:                        endpoint.tags?.some(tag => selectedTags.value.includes(tag))
 5668:  3017:   384:  297:     const matchesAuth = showAuthenticated.value || !endpoint.authenticated
 5669:  3018:   385:  298:     
 5670:  3019:   386:  299:     return matchesSearch && matchesTags && matchesAuth
 5671:  3020:   387:  300:   })
 5672:  3021:   388:  301: })
 5673:  3022:   389:  302: 
 5674:  3023:   390:  303: const formattedDate = computed(() => {
 5675:  3024:   391:  304:   return (timestamp: number) => {
 5676:  3025:   392:  305:     return new Date(timestamp).toLocaleString()
 5677:  3026:   393:  306:   }
 5678:  3027:   394:  307: })
 5679:  3028:   395:  308: 
 5680:  3029:   396:  309: // Lifecycle hooks
 5681:  3030:   397:  310: onMounted(() => {
 5682:  3031:   398:  311:   const savedHistory = localStorage.getItem('api-explorer-history')
 5683:  3032:   399:  312:   if (savedHistory) {
 5684:  3033:   400:  313:     history.value = JSON.parse(savedHistory)
 5685:  3034:   401:  314:   }
 5686:  3035:   402:  315:   
 5687:  3036:   403:  316:   initParamValues(selectedEndpoint.value)
 5688:  3037:   404:  317: })
 5689:  3038:   405:  318: 
 5690:  3039:   406:  319: // Methods
 5691:  3040:   407:  320: function initParamValues(endpoint: ApiEndpoint) {
 5692:  3041:   408:  321:   const values: Record<string, any> = {}
 5693:  3042:   409:  322:   endpoint.params?.forEach(param => {
 5694:  3043:   410:  323:     values[param.name] = param.default || ''
 5695:  3044:   411:  324:   })
 5696:  3045:   412:  325:   paramValues.value = values
 5697:  3046:   413:  326: }
 5698:  3047:   414:  327: 
 5699:  3048:   415:  328: function addHeader() {
 5700:  3049:   416:  329:   customHeaders.value.push({ key: '', value: '', enabled: true })
 5701:  3050:   417:  330: }
 5702:  3051:   418:  331: 
 5703:  3052:   419:  332: function removeHeader(index: number) {
 5704:  3053:   420:  333:   customHeaders.value.splice(index, 1)
 5705:  3054:   421:  334: }
 5706:  3055:   422:  335: 
 5707:  3056:   423:  336: function getEnabledHeaders(): Record<string, string> {
 5708:  3057:   424:  337:   return customHeaders.value
 5709:  3058:   425:  338:     .filter(h => h.enabled && h.key.trim() !== '')
 5710:  3059:   426:  339:     .reduce((acc, h) => ({ ...acc, [h.key]: h.value }), {})
 5711:  3060:   427:  340: }
 5712:  3061:   428:  341: 
 5713:  3062:   429:  342: async function copyToClipboard(text: string) {
 5714:  3063:   430:  343:   try {
 5715:  3064:   431:  344:     await navigator.clipboard.writeText(text)
 5716:  3065:   432:  345:     // Show success message
 5717:  3066:   433:  346:   } catch (err) {
 5718:  3067:   434:  347:     // Show error message
 5719:  3068:   435:  348:   }
 5720:  3069:   436:  349: }
 5721:  3070:   437:  350: 
 5722:  3071:   438:  351: function saveAsJson(data: any, filename: string) {
 5723:  3072:   439:  352:   const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' })
 5724:  3073:   440:  353:   const url = URL.createObjectURL(blob)
 5725:  3074:   441:  354:   const link = document.createElement('a')
 5726:  3075:   442:  355:   link.href = url
 5727:  3076:   443:  356:   link.download = filename
 5728:  3077:   444:  357:   document.body.appendChild(link)
 5729:  3078:   445:  358:   link.click()
 5730:  3079:   446:  359:   document.body.removeChild(link)
 5731:  3080:   447:  360:   URL.revokeObjectURL(url)
 5732:  3081:   448:  361: }
 5733:  3082:   449:  362: 
 5734:  3083:   450:  363: function addToHistory(entry: Omit<HistoryEntry, 'id'>) {
 5735:  3084:   451:  364:   const newEntry: HistoryEntry = {
 5736:  3085:   452:  365:     ...entry,
 5737:  3086:   453:  366:     id: crypto.randomUUID()
 5738:  3087:   454:  367:   }
 5739:  3088:   455:  368:   history.value.unshift(newEntry)
 5740:  3089:   456:  369:   if (history.value.length > 50) {
 5741:  3090:   457:  370:     history.value.pop()
 5742:  3091:   458:  371:   }
 5743:  3092:   459:  372:   localStorage.setItem('api-explorer-history', JSON.stringify(history.value))
 5744:  3093:   460:  373: }
 5745:  3094:   461:  374: 
 5746:  3095:   462:  375: async function replayRequest(historyEntry: HistoryEntry) {
 5747:  3096:   463:  376:   paramValues.value = { ...historyEntry.params }
 5748:  3097:   464:  377:   customHeaders.value = [...historyEntry.headers]
 5749:  3098:   465:  378:   const endpoint = endpoints.find(e => e.path === historyEntry.endpoint)
 5750:  3099:   466:  379:   if (endpoint) {
 5751:  3100:   467:  380:     selectedEndpoint.value = endpoint
 5752:  3101:   468:  381:     await tryEndpoint(endpoint)
 5753:  3102:   469:  382:   }
 5754:  3103:   470:  383: }
 5755:  3104:   471:  384: 
 5756:  3105:   472:  385: async function tryEndpoint(endpoint: ApiEndpoint) {
 5757:  3106:   473:  386:   responseState.value = {
 5758:  3107:   474:  387:     loading: true,
 5759:  3108:   475:  388:     data: null,
 5760:  3109:   476:  389:     error: null,
 5761:  3110:   477:  390:     headers: {},
 5762:  3111:   478:  391:     status: 0,
 5763:  3112:   479:  392:     timestamp: Date.now()
 5764:  3113:   480:  393:   }
 5765:  3114:   481:  394: 
 5766:  3115:   482:  395:   try {
 5767:  3116:   483:  396:     if (endpoint.authenticated && !getAuthToken()) {
 5768:  3117:   484:  397:       throw new Error('Authentication required for this endpoint')
 5769:  3118:   485:  398:     }
 5770:  3119:   486:  399: 
 5771:  3120:   487:  400:     const url = new URL(`${BASE_URL}${endpoint.path}`)
 5772:  3121:   488:  401:     if (endpoint.params) {
 5773:  3122:   489:  402:       Object.entries(paramValues.value).forEach(([key, value]) => {
 5774:  3123:   490:  403:         if (value !== '') {
 5775:  3124:   491:  404:           url.searchParams.append(key, value.toString())
 5776:  3125:   492:  405:         }
 5777:  3126:   493:  406:       })
 5778:  3127:   494:  407:     }
 5779:  3128:   495:  408: 
 5780:  3129:   496:  409:     const headers = getEnabledHeaders()
 5781:  3130:   497:  410:     const response = await fetch(url.toString(), {
 5782:  3131:   498:  411:       method: endpoint.method,
 5783:  3132:   499:  412:       headers
 5784:  3133:   500:  413:     })
 5785:  3134:   501:  414: 
 5786:  3135:   502:  415:     const responseHeaders: Record<string, string> = {}
 5787:  3136:   503:  416:     response.headers.forEach((value, key) => {
 5788:  3137:   504:  417:       responseHeaders[key] = value
 5789:  3138:   505:  418:     })
 5790:  3139:   506:  419: 
 5791:  3140:   507:  420:     const data = await response.json()
 5792:  3141:   508:  421: 
 5793:  3142:   509:  422:     if (!response.ok) {
 5794:  3143:   510:  423:       throw new Error(data.error || 'An error occurred')
 5795:  3144:   511:  424:     }
 5796:  3145:   512:  425: 
 5797:  3146:   513:  426:     responseState.value = {
 5798:  3147:   514:  427:       loading: false,
 5799:  3148:   515:  428:       data,
 5800:  3149:   516:  429:       error: null,
 5801:  3150:   517:  430:       headers: responseHeaders,
 5802:  3151:   518:  431:       status: response.status,
 5803:  3152:   519:  432:       timestamp: Date.now()
 5804:  3153:   520:  433:     }
 5805:  3154:   521:  434: 
 5806:  3155:   522:  435:     addToHistory({
 5807:  3156:   523:  436:       endpoint: endpoint.path,
 5808:  3157:   524:  437:       method: endpoint.method,
 5809:  3158:   525:  438:       params: { ...paramValues.value },
 5810:  3159:   526:  439:       headers: [...customHeaders.value],
 5811:  3160:   527:  440:       timestamp: Date.now(),
 5812:  3161:   528:  441:       status: response.status,
 5813:  3162:   529:  442:       success: true
 5814:  3163:   530:  443:     })
 5815:  3164:   531:  444: 
 5816:  3165:   532:  445:   } catch (error) {
 5817:  3166:   533:  446:     responseState.value = {
 5818:  3167:   534:  447:       ...responseState.value,
 5819:  3168:   535:  448:       loading: false,
 5820:  3169:   536:  449:       error: error instanceof Error ? error.message : 'An error occurred',
 5821:  3170:   537:  450:       status: error instanceof Error && error.message.includes('Authentication') ? 401 : 500
 5822:  3171:   538:  451:     }
 5823:  3172:   539:  452: 
 5824:  3173:   540:  453:     addToHistory({
 5825:  3174:   541:  454:       endpoint: endpoint.path,
 5826:  3175:   542:  455:       method: endpoint.method,
 5827:  3176:   543:  456:       params: { ...paramValues.value },
 5828:  3177:   544:  457:       headers: [...customHeaders.value],
 5829:  3178:   545:  458:       timestamp: Date.now(),
 5830:  3179:   546:  459:       status: responseState.value.status,
 5831:  3180:   547:  460:       success: false
 5832:  3181:   548:  461:     })
 5833:  3182:   549:  462:   }
 5834:  3183:   550:  463: }
 5835:  3184:   551:  464: 
 5836:  3185:   552:  465: function getAuthToken(): string | null {
 5837:  3186:   553:  466:   // Implement based on your auth system
 5838:  3187:   554:  467:   return null
 5839:  3188:   555:  468: }
 5840:  3189:   556:  469: 
 5841:  3190:   557:  470: // Watch for endpoint changes
 5842:  3191:   558:  471: watch(selectedEndpoint, (newEndpoint) => {
 5843:  3192:   559:  472:   initParamValues(newEndpoint)
 5844:  3193:   560:  473:   responseState.value = {
 5845:  3194:   561:  474:     loading: false,
 5846:  3195:   562:  475:     data: null,
 5847:  3196:   563:  476:     error: null,
 5848:  3197:   564:  477:     headers: {},
 5849:  3198:   565:  478:     status: 0,
 5850:  3199:   566:  479:     timestamp: 0
 5851:  3200:   567:  480:   }
 5852:  3201:   568:  481: })
 5853:  3202:   569:  482: </script>
 5854:  3203:   570:  483: 
 5855:  3204:   571:  484: <template>
 5856:  3205:   572:  485:   <div class="api-explorer">
 5857:  3206:   573:  486:     <div class="sidebar">
 5858:  3207:   574:  487:       <!-- Search and Filter Section -->
 5859:  3208:   575:  488:       <div class="search-section">
 5860:  3209:   576:  489:         <input
 5861:  3210:   577:  490:           v-model="searchQuery"
 5862:  3211:   578:  491:           type="text"
 5863:  3212:   579:  492:           placeholder="Search endpoints..."
 5864:  3213:   580:  493:           class="search-input"
 5865:  3214:   581:  494:         />
 5866:  3215:   582:  495:         <div class="filter-options">
 5867:  3216:   583:  496:           <div class="tags">
 5868:  3217:   584:  497:             <button
 5869:  3218:   585:  498:               v-for="tag in ['cards', 'sync']"
 5870:  3219:   586:  499:               :key="tag"
 5871:  3220:   587:  500:               class="tag-button"
 5872:  3221:   588:  501:               :class="{ active: selectedTags.includes(tag) }"
 5873:  3222:   589:  502:               @click="selectedTags = selectedTags.includes(tag) 
 5874:  3223:   590:  503:                 ? selectedTags.filter(t => t !== tag)
 5875:  3224:   591:  504:                 : [...selectedTags, tag]"
 5876:  3225:   592:  505:             >
 5877:  3226:   593:  506:               {{ tag }}
 5878:  3227:   594:  507:             </button>
 5879:  3228:   595:  508:           </div>
 5880:  3229:   596:  509:           <label class="auth-toggle">
 5881:  3230:   597:  510:             <input
 5882:  3231:   598:  511:               type="checkbox"
 5883:  3232:   599:  512:               v-model="showAuthenticated"
 5884:  3233:   600:  513:             >
 5885:  3234:   601:  514:             Show authenticated
 5886:  3235:   602:  515:           </label>
 5887:  3236:   603:  516:         </div>
 5888:  3237:   604:  517:       </div>
 5889:  3238:   605:  518: 
 5890:  3239:   606:  519:       <!-- Endpoint List -->
 5891:  3240:   607:  520:       <div class="endpoint-list">
 5892:  3241:   608:  521:         <div
 5893:  3242:   609:  522:           v-for="endpoint in filteredEndpoints"
 5894:  3243:   610:  523:           :key="endpoint.path"
 5895:  3244:   611:  524:           class="endpoint-item"
 5896:  3245:   612:  525:           :class="{ 
 5897:  3246:   613:  526:             active: endpoint === selectedEndpoint,
 5898:  3247:   614:  527:             authenticated: endpoint.authenticated
 5899:  3248:   615:  528:           }"
 5900:  3249:   616:  529:           @click="selectedEndpoint = endpoint"
 5901:  3250:   617:  530:         >
 5902:  3251:   618:  531:           <div class="endpoint-item-header">
 5903:  3252:   619:  532:             <span class="method" :style="{ color: methodColor }">
 5904:  3253:   620:  533:               {{ endpoint.method }}
 5905:  3254:   621:  534:             </span>
 5906:  3255:   622:  535:             <span class="name">{{ endpoint.name }}</span>
 5907:  3256:   623:  536:           </div>
 5908:  3257:   624:  537:           <div class="endpoint-path">{{ endpoint.path }}</div>
 5909:  3258:   625:  538:         </div>
 5910:  3259:   626:  539:       </div>
 5911:  3260:   627:  540: 
 5912:  3261:   628:  541:       <!-- History Section -->
 5913:  3262:   629:  542:       <div class="history-section">
 5914:  3263:   630:  543:         <div class="history-toggle" @click="showHistory = !showHistory">
 5915:  3264:   631:  544:           <span>History</span>
 5916:  3265:   632:  545:           <span class="toggle-icon">{{ showHistory ? '▼' : '▶' }}</span>
 5917:  3266:   633:  546:         </div>
 5918:  3267:   634:  547: 
 5919:  3268:   635:  548:         <div v-if="showHistory" class="history-panel">
 5920:  3269:   636:  549:           <div
 5921:  3270:   637:  550:             v-for="entry in history"
 5922:  3271:   638:  551:             :key="entry.id"
 5923:  3272:   639:  552:             class="history-entry"
 5924:  3273:   640:  553:             :class="{ 
 5925:  3274:   641:  554:               'history-success': entry.success,
 5926:  3275:   642:  555:               'history-error': !entry.success
 5927:  3276:   643:  556:             }"
 5928:  3277:   644:  557:             @click="replayRequest(entry)"
 5929:  3278:   645:  558:           >
 5930:  3279:   646:  559:             <div class="history-entry-header">
 5931:  3280:   647:  560:               <span class="history-method">{{ entry.method }}</span>
 5932:  3281:   648:  561:               <span 
 5933:  3282:   649:  562:                 class="history-status"
 5934:  3283:   650:  563:                 :class="{ 
 5935:  3284:   651:  564:                   'status-success': entry.status < 400,
 5936:  3285:   652:  565:                   'status-error': entry.status >= 400
 5937:  3286:   653:  566:                 }"
 5938:  3287:   654:  567:               >
 5939:  3288:   655:  568:                 {{ entry.status }}
 5940:  3289:   656:  569:               </span>
 5941:  3290:   657:  570:             </div>
 5942:  3291:   658:  571:             <div class="history-endpoint">{{ entry.endpoint }}</div>
 5943:  3292:   659:  572:             <div class="history-timestamp">
 5944:  3293:   660:  573:               {{ formattedDate(entry.timestamp) }}
 5945:  3294:   661:  574:             </div>
 5946:  3295:   662:  575:           </div>
 5947:  3296:   663:  576:         </div>
 5948:  3297:   664:  577:       </div>
 5949:  3298:   665:  578:     </div>
 5950:  3299:   666:  579: 
 5951:  3300:   667:  580:     <div class="content">
 5952:  3301:   668:  581:       <!-- Endpoint Details -->
 5953:  3302:   669:  582:       <div class="endpoint-header">
 5954:  3303:   670:  583:         <div class="endpoint-title">
 5955:  3304:   671:  584:           <h3>{{ selectedEndpoint.name }}</h3>
 5956:  3305:   672:  585:           <span 
 5957:  3306:   673:  586:             v-if="selectedEndpoint.authenticated"
 5958:  3307:   674:  587:             class="auth-badge"
 5959:  3308:   675:  588:             title="Requires authentication"
 5960:  3309:   676:  589:           >
 5961:  3310:   677:  590:             🔒
 5962:  3311:   678:  591:           </span>
 5963:  3312:   679:  592:         </div>
 5964:  3313:   680:  593:         <div class="endpoint-path">
 5965:  3314:   681:  594:           <span class="method" :style="{ color: methodColor }">
 5966:  3315:   682:  595:             {{ selectedEndpoint.method }}
 5967:  3316:   683:  596:           </span>
 5968:  3317:   684:  597:           <code>{{ selectedEndpoint.path }}</code>
 5969:  3318:   685:  598:         </div>
 5970:  3319:   686:  599:       </div>
 5971:  3320:   687:  600: 
 5972:  3321:   688:  601:       <div class="description">
 5973:  3322:   689:  602:         {{ selectedEndpoint.description }}
 5974:  3323:   690:  603:       </div>
 5975:  3324:   691:  604: 
 5976:  3325:   692:  605:       <!-- Tags -->
 5977:  3326:   693:  606:       <div v-if="selectedEndpoint.tags?.length" class="endpoint-tags">
 5978:  3327:   694:  607:         <span 
 5979:  3328:   695:  608:           v-for="tag in selectedEndpoint.tags"
 5980:  3329:   696:  609:           :key="tag"
 5981:  3330:   697:  610:           class="tag"
 5982:  3331:   698:  611:         >
 5983:  3332:   699:  612:           {{ tag }}
 5984:  3333:   700:  613:         </span>
 5985:  3334:   701:  614:       </div>
 5986:  3335:   702:  615: 
 5987:  3336:   703:  616:       <!-- Headers Section -->
 5988:  3337:   704:  617:       <div class="headers-section">
 5989:  3338:   705:  618:         <div class="section-header" @click="showHeaders = !showHeaders">
 5990:  3339:   706:  619:           <h4>Headers</h4>
 5991:  3340:   707:  620:           <span class="toggle-icon">{{ showHeaders ? '▼' : '▶' }}</span>
 5992:  3341:   708:  621:         </div>
 5993:  3342:   709:  622:         <div v-if="showHeaders" class="headers-content">
 5994:  3343:   710:  623:           <div
 5995:  3344:   711:  624:             v-for="(header, index) in customHeaders"
 5996:  3345:   712:  625:             :key="index"
 5997:  3346:   713:  626:             class="header-input"
 5998:  3347:   714:  627:           >
 5999:  3348:   715:  628:             <input
 6000:  3349:   716:  629:               v-model="header.key"
 6001:  3350:   717:  630:               placeholder="Header name"
 6002:  3351:   718:  631:               class="header-key"
 6003:  3352:   719:  632:             />
 6004:  3353:   720:  633:             <input
 6005:  3354:   721:  634:               v-model="header.value"
 6006:  3355:   722:  635:               placeholder="Header value"
 6007:  3356:   723:  636:               class="header-value"
 6008:  3357:   724:  637:             />
 6009:  3358:   725:  638:             <label class="header-enabled">
 6010:  3359:   726:  639:               <input type="checkbox" v-model="header.enabled" />
 6011:  3360:   727:  640:               Enable
 6012:  3361:   728:  641:             </label>
 6013:  3362:   729:  642:             <button
 6014:  3363:   730:  643:               class="remove-header"
 6015:  3364:   731:  644:               @click="removeHeader(index)"
 6016:  3365:   732:  645:             >
 6017:  3366:   733:  646:               ✕
 6018:  3367:   734:  647:             </button>
 6019:  3368:   735:  648:           </div>
 6020:  3369:   736:  649:           <button class="add-header" @click="addHeader">
 6021:  3370:   737:  650:             Add Header
 6022:  3371:   738:  651:           </button>
 6023:  3372:   739:  652:         </div>
 6024:  3373:   740:  653:       </div>
 6025:  3374:   741:  654: 
 6026:  3375:   742:  655:       <!-- Parameters Section -->
 6027:  3376:   743:  656:       <template v-if="selectedEndpoint.params?.length">
 6028:  3377:   744:  657:         <h4>Parameters</h4>
 6029:  3378:   745:  658:         <div class="params-form">
 6030:  3379:   746:  659:           <div
 6031:  3380:   747:  660:             v-for="param in selectedEndpoint.params"
 6032:  3381:   748:  661:             :key="param.name"
 6033:  3382:   749:  662:             class="param-input"
 6034:  3383:   750:  663:           >
 6035:  3384:   751:  664:             <label :for="param.name">
 6036:  3385:   752:  665:               {{ param.name }}
 6037:  3386:   753:  666:               <span v-if="param.required" class="required">*</span>
 6038:  3387:   754:  667:             </label>
 6039:  3388:   755:  668:             <input
 6040:  3389:   756:  669:               :id="param.name"
 6041:  3390:   757:  670:               v-model="paramValues[param.name]"
 6042:  3391:   758:  671:               :type="param.type === 'number' ? 'number' : 'text'"
 6043:  3392:   759:  672:               :placeholder="param.description"
 6044:  3393:   760:  673:               :required="param.required"
 6045:  3394:   761:  674:             />
 6046:  3395:   762:  675:           </div>
 6047:  3396:   763:  676:           <button
 6048:  3397:   764:  677:             class="try-button"
 6049:  3398:   765:  678:             @click="tryEndpoint(selectedEndpoint)"
 6050:  3399:   766:  679:             :disabled="responseState.loading"
 6051:  3400:   767:  680:           >
 6052:  3401:   768:  681:             {{ responseState.loading ? 'Loading...' : 'Try it' }}
 6053:  3402:   769:  682:           </button>
 6054:  3403:   770:  683:         </div>
 6055:  3404:   771:  684:       </template>
 6056:  3405:   772:  685: 
 6057:  3406:   773:  686:       <!-- Response Section -->
 6058:  3407:   774:  687:       <div 
 6059:  3408:   775:  688:         v-if="responseState.data || responseState.error" 
 6060:  3409:   776:  689:         class="live-response"
 6061:  3410:   777:  690:         :class="{ 'response-error': responseState.error }"
 6062:  3411:   778:  691:       >
 6063:  3412:   779:  692:         <div class="response-header">
 6064:  3413:   780:  693:           <h4>Response</h4>
 6065:  3414:   781:  694:           <div class="response-actions">
 6066:  3415:   782:  695:             <button
 6067:  3416:   783:  696:               class="action-button"
 6068:  3417:   784:  697:               @click="copyToClipboard(JSON.stringify(responseState.data, null, 2))"
 6069:  3418:   785:  698:               v-if="responseState.data"
 6070:  3419:   786:  699:             >
 6071:  3420:   787:  700:               Copy
 6072:  3421:   788:  701:             </button>
 6073:  3422:   789:  702:             <button
 6074:  3423:   790:  703:               class="action-button"
 6075:  3424:   791:  704:               @click="saveAsJson(responseState.data, `response-${Date.now()}.json`)"
 6076:  3425:   792:  705:               v-if="responseState.data"
 6077:  3426:   793:  706:             >
 6078:  3427:   794:  707:               Save
 6079:  3428:   795:  708:             </button>
 6080:  3429:   796:  709:           </div>
 6081:  3430:   797:  710:         </div>
 6082:  3431:   798:  711: 
 6083:  3432:   799:  712:         <!-- Response Status and Headers -->
 6084:  3433:   800:  713:         <div v-if="responseState.status" class="response-status">
 6085:  3434:   801:  714:           Status: {{ responseState.status }}
 6086:  3435:   802:  715:         </div>
 6087:  3436:   803:  716:        
 6088:  3437:   804:  717:         <div v-if="Object.keys(responseState.headers).length" class="response-headers">
 6089:  3438:   805:  718:           <div class="section-header" @click="showResponseHeaders = !showResponseHeaders">
 6090:  3439:   806:  719:             <span>Response Headers</span>
 6091:  3440:   807:  720:             <span class="toggle-icon">{{ showResponseHeaders ? '▼' : '▶' }}</span>
 6092:  3441:   808:  721:           </div>
 6093:  3442:   809:  722:           <div v-if="showResponseHeaders" class="headers-list">
 6094:  3443:   810:  723:             <div
 6095:  3444:   811:  724:               v-for="(value, key) in responseState.headers"
 6096:  3445:   812:  725:               :key="key"
 6097:  3446:   813:  726:               class="header-item"
 6098:  3447:   814:  727:             >
 6099:  3448:   815:  728:               <span class="header-key">{{ key }}:</span>
 6100:  3449:   816:  729:               <span class="header-value">{{ value }}</span>
 6101:  3450:   817:  730:             </div>
 6102:  3451:   818:  731:           </div>
 6103:  3452:   819:  732:         </div>
 6104:  3453:   820:  733: 
 6105:  3454:   821:  734:         <div v-if="responseState.error" class="error-message">
 6106:  3455:   822:  735:           {{ responseState.error }}
 6107:  3456:   823:  736:         </div>
 6108:  3457:   824:  737:         <pre v-else class="response-data">
 6109:  3458:   825:  738:           <code>{{ JSON.stringify(responseState.data, null, 2) }}</code>
 6110:  3459:   826:  739:         </pre>
 6111:  3460:   827:  740:       </div>
 6112:  3461:   828:  741: 
 6113:  3462:   829:  742:       <!-- Response Schema Section -->
 6114:  3463:   830:  743:       <h4>Response Schema</h4>
 6115:  3464:   831:  744:       <div
 6116:  3465:   832:  745:         v-for="response in selectedEndpoint.responses"
 6117:  3466:   833:  746:         :key="response.status"
 6118:  3467:   834:  747:         class="response-section"
 6119:  3468:   835:  748:       >
 6120:  3469:   836:  749:         <div class="response-header">
 6121:  3470:   837:  750:           <span
 6122:  3471:   838:  751:             class="status"
 6123:  3472:   839:  752:             :class="response.status < 400 ? 'success' : 'error'"
 6124:  3473:   840:  753:           >
 6125:  3474:   841:  754:             {{ response.status }}
 6126:  3475:   842:  755:           </span>
 6127:  3476:   843:  756:           <span class="description">{{ response.description }}</span>
 6128:  3477:   844:  757:         </div>
 6129:  3478:   845:  758:         <pre class="schema"><code>{{ response.schema }}</code></pre>
 6130:  3479:   846:  759:       </div>
 6131:  3480:   847:  760:     </div>
 6132:  3481:   848:  761:   </div>
 6133:  3482:   849:  762: </template>
 6134:  3483:   850:  763: 
 6135:  3484:   851:  764: <style scoped>
 6136:  3485:   852:  765: .api-explorer {
 6137:  3486:   853:  766:   display: grid;
 6138:  3487:   854:  767:   grid-template-columns: 300px 1fr;
 6139:  3488:   855:  768:   gap: 20px;
 6140:  3489:   856:  769:   background: var(--custom-api-bg);
 6141:  3490:   857:  770:   border-radius: 8px;
 6142:  3491:   858:  771:   overflow: hidden;
 6143:  3492:   859:  772:   border: 1px solid var(--vp-c-divider);
 6144:  3493:   860:  773:   height: 800px;
 6145:  3494:   861:  774: }
 6146:  3495:   862:  775: 
 6147:  3496:   863:  776: .sidebar {
 6148:  3497:   864:  777:   background: var(--vp-c-bg-soft);
 6149:  3498:   865:  778:   padding: 1rem;
 6150:  3499:   866:  779:   border-right: 1px solid var(--vp-c-divider);
 6151:  3500:   867:  780:   overflow-y: auto;
 6152:  3501:   868:  781:   display: flex;
 6153:  3502:   869:  782:   flex-direction: column;
 6154:  3503:   870:  783: }
 6155:  3504:   871:  784: 
 6156:  3505:   872:  785: .search-section {
 6157:  3506:   873:  786:   margin-bottom: 1rem;
 6158:  3507:   874:  787:   padding: 0.5rem;
 6159:  3508:   875:  788: }
 6160:  3509:   876:  789: 
 6161:  3510:   877:  790: .search-input {
 6162:  3511:   878:  791:   width: 100%;
 6163:  3512:   879:  792:   padding: 0.5rem;
 6164:  3513:   880:  793:   border: 1px solid var(--vp-c-divider);
 6165:  3514:   881:  794:   border-radius: 4px;
 6166:  3515:   882:  795:   background: var(--vp-c-bg);
 6167:  3516:   883:  796:   color: var(--vp-c-text-1);
 6168:  3517:   884:  797:   margin-bottom: 0.5rem;
 6169:  3518:   885:  798: }
 6170:  3519:   886:  799: 
 6171:  3520:   887:  800: .filter-options {
 6172:  3521:   888:  801:   display: flex;
 6173:  3522:   889:  802:   flex-direction: column;
 6174:  3523:   890:  803:   gap: 0.5rem;
 6175:  3524:   891:  804: }
 6176:  3525:   892:  805: 
 6177:  3526:   893:  806: .tags {
 6178:  3527:   894:  807:   display: flex;
 6179:  3528:   895:  808:   flex-wrap: wrap;
 6180:  3529:   896:  809:   gap: 0.25rem;
 6181:  3530:   897:  810: }
 6182:  3531:   898:  811: 
 6183:  3532:   899:  812: .tag-button {
 6184:  3533:   900:  813:   padding: 0.25rem 0.5rem;
 6185:  3534:   901:  814:   border-radius: 4px;
 6186:  3535:   902:  815:   border: 1px solid var(--vp-c-divider);
 6187:  3536:   903:  816:   background: var(--vp-c-bg);
 6188:  3537:   904:  817:   cursor: pointer;
 6189:  3538:   905:  818:   font-size: 0.8rem;
 6190:  3539:   906:  819: }
 6191:  3540:   907:  820: 
 6192:  3541:   908:  821: .tag-button.active {
 6193:  3542:   909:  822:   background: var(--vp-c-brand);
 6194:  3543:   910:  823:   color: white;
 6195:  3544:   911:  824:   border-color: var(--vp-c-brand);
 6196:  3545:   912:  825: }
 6197:  3546:   913:  826: 
 6198:  3547:   914:  827: .auth-toggle {
 6199:  3548:   915:  828:   display: flex;
 6200:  3549:   916:  829:   align-items: center;
 6201:  3550:   917:  830:   gap: 0.5rem;
 6202:  3551:   918:  831:   font-size: 0.9rem;
 6203:  3552:   919:  832: }
 6204:  3553:   920:  833: 
 6205:  3554:   921:  834: .endpoint-list {
 6206:  3555:   922:  835:   flex: 1;
 6207:  3556:   923:  836:   overflow-y: auto;
 6208:  3557:   924:  837: }
 6209:  3558:   925:  838: 
 6210:  3559:   926:  839: .endpoint-item {
 6211:  3560:   927:  840:   padding: 0.75rem;
 6212:  3561:   928:  841:   border-radius: 6px;
 6213:  3562:   929:  842:   margin-bottom: 0.5rem;
 6214:  3563:   930:  843:   cursor: pointer;
 6215:  3564:   931:  844:   transition: all 0.2s ease;
 6216:  3565:   932:  845: }
 6217:  3566:   933:  846: 
 6218:  3567:   934:  847: .endpoint-item:hover {
 6219:  3568:   935:  848:   background: var(--vp-c-bg-mute);
 6220:  3569:   936:  849: }
 6221:  3570:   937:  850: 
 6222:  3571:   938:  851: .endpoint-item.active {
 6223:  3572:   939:  852:   background: var(--vp-c-brand-dimm);
 6224:  3573:   940:  853: }
 6225:  3574:   941:  854: 
 6226:  3575:   942:  855: .endpoint-item.authenticated::after {
 6227:  3576:   943:  856:   content: "🔒";
 6228:  3577:   944:  857:   float: right;
 6229:  3578:   945:  858:   font-size: 0.8rem;
 6230:  3579:   946:  859: }
 6231:  3580:   947:  860: 
 6232:  3581:   948:  861: .endpoint-item-header {
 6233:  3582:   949:  862:   display: flex;
 6234:  3583:   950:  863:   align-items: center;
 6235:  3584:   951:  864:   gap: 0.5rem;
 6236:  3585:   952:  865:   margin-bottom: 0.25rem;
 6237:  3586:   953:  866: }
 6238:  3587:   954:  867: 
 6239:  3588:   955:  868: .endpoint-path {
 6240:  3589:   956:  869:   font-size: 0.8rem;
 6241:  3590:   957:  870:   color: var(--vp-c-text-2);
 6242:  3591:   958:  871:   word-break: break-all;
 6243:  3592:   959:  872: }
 6244:  3593:   960:  873: 
 6245:  3594:   961:  874: .history-toggle {
 6246:  3595:   962:  875:   margin-top: auto;
 6247:  3596:   963:  876:   padding: 0.75rem;
 6248:  3597:   964:  877:   cursor: pointer;
 6249:  3598:   965:  878:   display: flex;
 6250:  3599:   966:  879:   justify-content: space-between;
 6251:  3600:   967:  880:   align-items: center;
 6252:  3601:   968:  881:   background: var(--vp-c-bg-mute);
 6253:  3602:   969:  882:   border-radius: 6px;
 6254:  3603:   970:  883:   margin-top: 1rem;
 6255:  3604:   971:  884: }
 6256:  3605:   972:  885: 
 6257:  3606:   973:  886: .history-panel {
 6258:  3607:   974:  887:   margin-top: 0.5rem;
 6259:  3608:   975:  888:   border-top: 1px solid var(--vp-c-divider);
 6260:  3609:   976:  889:   padding-top: 0.5rem;
 6261:  3610:   977:  890: }
 6262:  3611:   978:  891: 
 6263:  3612:   979:  892: .history-entry {
 6264:  3613:   980:  893:   padding: 0.5rem;
 6265:  3614:   981:  894:   border-radius: 4px;
 6266:  3615:   982:  895:   margin-bottom: 0.5rem;
 6267:  3616:   983:  896:   cursor: pointer;
 6268:  3617:   984:  897:   background: var(--vp-c-bg-mute);
 6269:  3618:   985:  898:   border: 1px solid var(--vp-c-divider);
 6270:  3619:   986:  899:   transition: all 0.2s ease;
 6271:  3620:   987:  900: }
 6272:  3621:   988:  901: 
 6273:  3622:   989:  902: .history-entry:hover {
 6274:  3623:   990:  903:   background: var(--vp-c-bg);
 6275:  3624:   991:  904: }
 6276:  3625:   992:  905: 
 6277:  3626:   993:  906: .history-entry.history-success {
 6278:  3627:   994:  907:   border-left: 3px solid var(--vp-c-green);
 6279:  3628:   995:  908: }
 6280:  3629:   996:  909: 
 6281:  3630:   997:  910: .history-entry.history-error {
 6282:  3631:   998:  911:   border-left: 3px solid var(--vp-c-red);
 6283:  3632:   999:  912: }
 6284:  3633:  1000:  913: 
 6285:  3634:  1001:  914: .history-entry-header {
 6286:  3635:  1002:  915:   display: flex;
 6287:  3636:  1003:  916:   justify-content: space-between;
 6288:  3637:  1004:  917:   margin-bottom: 0.25rem;
 6289:  3638:  1005:  918: }
 6290:  3639:  1006:  919: 
 6291:  3640:  1007:  920: .history-method {
 6292:  3641:  1008:  921:   font-weight: 600;
 6293:  3642:  1009:  922: }
 6294:  3643:  1010:  923: 
 6295:  3644:  1011:  924: .history-status {
 6296:  3645:  1012:  925:   font-size: 0.9em;
 6297:  3646:  1013:  926: }
 6298:  3647:  1014:  927: 
 6299:  3648:  1015:  928: .status-success {
 6300:  3649:  1016:  929:   color: var(--vp-c-green);
 6301:  3650:  1017:  930: }
 6302:  3651:  1018:  931: 
 6303:  3652:  1019:  932: .status-error {
 6304:  3653:  1020:  933:   color: var(--vp-c-red);
 6305:  3654:  1021:  934: }
 6306:  3655:  1022:  935: 
 6307:  3656:  1023:  936: .history-endpoint {
 6308:  3657:  1024:  937:   font-size: 0.9em;
 6309:  3658:  1025:  938:   margin-bottom: 0.25rem;
 6310:  3659:  1026:  939: }
 6311:  3660:  1027:  940: 
 6312:  3661:  1028:  941: .history-timestamp {
 6313:  3662:  1029:  942:   font-size: 0.8em;
 6314:  3663:  1030:  943:   color: var(--vp-c-text-2);
 6315:  3664:  1031:  944: }
 6316:  3665:  1032:  945: 
 6317:  3666:  1033:  946: .content {
 6318:  3667:  1034:  947:   padding: 1rem;
 6319:  3668:  1035:  948:   overflow-y: auto;
 6320:  3669:  1036:  949: }
 6321:  3670:  1037:  950: 
 6322:  3671:  1038:  951: .endpoint-header {
 6323:  3672:  1039:  952:   margin-bottom: 1rem;
 6324:  3673:  1040:  953: }
 6325:  3674:  1041:  954: 
 6326:  3675:  1042:  955: .endpoint-title {
 6327:  3676:  1043:  956:   display: flex;
 6328:  3677:  1044:  957:   align-items: center;
 6329:  3678:  1045:  958:   gap: 0.5rem;
 6330:  3679:  1046:  959: }
 6331:  3680:  1047:  960: 
 6332:  3681:  1048:  961: .auth-badge {
 6333:  3682:  1049:  962:   font-size: 1rem;
 6334:  3683:  1050:  963:   cursor: help;
 6335:  3684:  1051:  964: }
 6336:  3685:  1052:  965: 
 6337:  3686:  1053:  966: .endpoint-tags {
 6338:  3687:  1054:  967:   display: flex;
 6339:  3688:  1055:  968:   gap: 0.5rem;
 6340:  3689:  1056:  969:   margin: 0.5rem 0;
 6341:  3690:  1057:  970: }
 6342:  3691:  1058:  971: 
 6343:  3692:  1059:  972: .tag {
 6344:  3693:  1060:  973:   padding: 0.25rem 0.5rem;
 6345:  3694:  1061:  974:   border-radius: 4px;
 6346:  3695:  1062:  975:   background: var(--vp-c-brand-dimm);
 6347:  3696:  1063:  976:   color: var(--vp-c-brand);
 6348:  3697:  1064:  977:   font-size: 0.8rem;
 6349:  3698:  1065:  978: }
 6350:  3699:  1066:  979: 
 6351:  3700:  1067:  980: .headers-section {
 6352:  3701:  1068:  981:   margin: 1rem 0;
 6353:  3702:  1069:  982:   background: var(--vp-c-bg-soft);
 6354:  3703:  1070:  983:   border-radius: 8px;
 6355:  3704:  1071:  984:   overflow: hidden;
 6356:  3705:  1072:  985: }
 6357:  3706:  1073:  986: 
 6358:  3707:  1074:  987: .section-header {
 6359:  3708:  1075:  988:   padding: 0.75rem;
 6360:  3709:  1076:  989:   cursor: pointer;
 6361:  3710:  1077:  990:   display: flex;
 6362:  3711:  1078:  991:   justify-content: space-between;
 6363:  3712:  1079:  992:   align-items: center;
 6364:  3713:  1080:  993:   background: var(--vp-c-bg-mute);
 6365:  3714:  1081:  994: }
 6366:  3715:  1082:  995: 
 6367:  3716:  1083:  996: .headers-content {
 6368:  3717:  1084:  997:   padding: 1rem;
 6369:  3718:  1085:  998: }
 6370:  3719:  1086:  999: 
 6371:  3720:  1087: 1000: .header-input {
 6372:  3721:  1088: 1001:   display: grid;
 6373:  3722:  1089: 1002:   grid-template-columns: 1fr 1fr auto auto;
 6374:  3723:  1090: 1003:   gap: 0.5rem;
 6375:  3724:  1091: 1004:   margin-bottom: 0.5rem;
 6376:  3725:  1092: 1005:   align-items: center;
 6377:  3726:  1093: 1006: }
 6378:  3727:  1094: 1007: 
 6379:  3728:  1095: 1008: .header-key,
 6380:  3729:  1096: 1009: .header-value {
 6381:  3730:  1097: 1010:   padding: 0.5rem;
 6382:  3731:  1098: 1011:   border: 1px solid var(--vp-c-divider);
 6383:  3732:  1099: 1012:   border-radius: 4px;
 6384:  3733:  1100: 1013:   font-size: 0.9em;
 6385:  3734:  1101: 1014: }
 6386:  3735:  1102: 1015: 
 6387:  3736:  1103: 1016: .header-enabled {
 6388:  3737:  1104: 1017:   display: flex;
 6389:  3738:  1105: 1018:   align-items: center;
 6390:  3739:  1106: 1019:   gap: 0.25rem;
 6391:  3740:  1107: 1020: }
 6392:  3741:  1108: 1021: 
 6393:  3742:  1109: 1022: .remove-header {
 6394:  3743:  1110: 1023:   padding: 0.25rem 0.5rem;
 6395:  3744:  1111: 1024:   background: var(--vp-c-red);
 6396:  3745:  1112: 1025:   color: white;
 6397:  3746:  1113: 1026:   border: none;
 6398:  3747:  1114: 1027:   border-radius: 4px;
 6399:  3748:  1115: 1028:   cursor: pointer;
 6400:  3749:  1116: 1029: }
 6401:  3750:  1117: 1030: 
 6402:  3751:  1118: 1031: .add-header {
 6403:  3752:  1119: 1032:   margin-top: 0.5rem;
 6404:  3753:  1120: 1033:   padding: 0.5rem;
 6405:  3754:  1121: 1034:   background: var(--vp-c-brand);
 6406:  3755:  1122: 1035:   color: white;
 6407:  3756:  1123: 1036:   border: none;
 6408:  3757:  1124: 1037:   border-radius: 4px;
 6409:  3758:  1125: 1038:   cursor: pointer;
 6410:  3759:  1126: 1039:   width: 100%;
 6411:  3760:  1127: 1040: }
 6412:  3761:  1128: 1041: 
 6413:  3762:  1129: 1042: .params-form {
 6414:  3763:  1130: 1043:   margin: 1rem 0;
 6415:  3764:  1131: 1044: }
 6416:  3765:  1132: 1045: 
 6417:  3766:  1133: 1046: .param-input {
 6418:  3767:  1134: 1047:   margin-bottom: 1rem;
 6419:  3768:  1135: 1048: }
 6420:  3769:  1136: 1049: 
 6421:  3770:  1137: 1050: .param-input label {
 6422:  3771:  1138: 1051:   display: block;
 6423:  3772:  1139: 1052:   margin-bottom: 0.25rem;
 6424:  3773:  1140: 1053: }
 6425:  3774:  1141: 1054: 
 6426:  3775:  1142: 1055: .param-input input {
 6427:  3776:  1143: 1056:   width: 100%;
 6428:  3777:  1144: 1057:   padding: 0.5rem;
 6429:  3778:  1145: 1058:   border: 1px solid var(--vp-c-divider);
 6430:  3779:  1146: 1059:   border-radius: 4px;
 6431:  3780:  1147: 1060: }
 6432:  3781:  1148: 1061: 
 6433:  3782:  1149: 1062: .required {
 6434:  3783:  1150: 1063:   color: var(--vp-c-red);
 6435:  3784:  1151: 1064:   margin-left: 0.25rem;
 6436:  3785:  1152: 1065: }
 6437:  3786:  1153: 1066: 
 6438:  3787:  1154: 1067: .try-button {
 6439:  3788:  1155: 1068:   padding: 0.5rem 1rem;
 6440:  3789:  1156: 1069:   background: var(--vp-c-brand);
 6441:  3790:  1157: 1070:   color: white;
 6442:  3791:  1158: 1071:   border: none;
 6443:  3792:  1159: 1072:   border-radius: 4px;
 6444:  3793:  1160: 1073:   cursor: pointer;
 6445:  3794:  1161: 1074:   width: 100%;
 6446:  3795:  1162: 1075: }
 6447:  3796:  1163: 1076: 
 6448:  3797:  1164: 1077: .try-button:disabled {
 6449:  3798:  1165: 1078:   opacity: 0.5;
 6450:  3799:  1166: 1079:   cursor: not-allowed;
 6451:  3800:  1167: 1080: }
 6452:  3801:  1168: 1081: 
 6453:  3802:  1169: 1082: .live-response {
 6454:  3803:  1170: 1083:   margin: 1rem 0;
 6455:  3804:  1171: 1084:   padding: 1rem;
 6456:  3805:  1172: 1085:   background: var(--vp-c-bg-soft);
 6457:  3806:  1173: 1086:   border-radius: 8px;
 6458:  3807:  1174: 1087:   border: 1px solid var(--vp-c-divider);
 6459:  3808:  1175: 1088:   position: relative;
 6460:  3809:  1176: 1089: }
 6461:  3810:  1177: 1090: 
 6462:  3811:  1178: 1091: .response-error {
 6463:  3812:  1179: 1092:   border-color: var(--vp-c-red);
 6464:  3813:  1180: 1093: }
 6465:  3814:  1181: 1094: 
 6466:  3815:  1182: 1095: .response-header {
 6467:  3816:  1183: 1096:   display: flex;
 6468:  3817:  1184: 1097:   justify-content: space-between;
 6469:  3818:  1185: 1098:   align-items: center;
 6470:  3819:  1186: 1099:   margin-bottom: 1rem;
 6471:  3820:  1187: 1100: }
 6472:  3821:  1188: 1101: 
 6473:  3822:  1189: 1102: .response-actions {
 6474:  3823:  1190: 1103:   display: flex;
 6475:  3824:  1191: 1104:   gap: 0.5rem;
 6476:  3825:  1192: 1105: }
 6477:  3826:  1193: 1106: 
 6478:  3827:  1194: 1107: .action-button {
 6479:  3828:  1195: 1108:   padding: 0.25rem 0.75rem;
 6480:  3829:  1196: 1109:   background: var(--vp-c-brand);
 6481:  3830:  1197: 1110:   color: white;
 6482:  3831:  1198: 1111:   border: none;
 6483:  3832:  1199: 1112:   border-radius: 4px;
 6484:  3833:  1200: 1113:   cursor: pointer;
 6485:  3834:  1201: 1114:   font-size: 0.9em;
 6486:  3835:  1202: 1115: }
 6487:  3836:  1203: 1116: 
 6488:  3837:  1204: 1117: .response-headers {
 6489:  3838:  1205: 1118:   margin: 1rem 0;
 6490:  3839:  1206: 1119:   background: var(--vp-c-bg-soft);
 6491:  3840:  1207: 1120:   border-radius: 4px;
 6492:  3841:  1208: 1121: }
 6493:  3842:  1209: 1122: 
 6494:  3843:  1210: 1123: .headers-list {
 6495:  3844:  1211: 1124:   padding: 0.75rem;
 6496:  3845:  1212: 1125: }
 6497:  3846:  1213: 1126: 
 6498:  3847:  1214: 1127: .header-item {
 6499:  3848:  1215: 1128:   display: flex;
 6500:  3849:  1216: 1129:   gap: 0.5rem;
 6501:  3850:  1217: 1130:   margin-bottom: 0.25rem;
 6502:  3851:  1218: 1131:   font-size: 0.9em;
 6503:  3852:  1219: 1132: }
 6504:  3853:  1220: 1133: 
 6505:  3854:  1221: 1134: .error-message {
 6506:  3855:  1222: 1135:   color: var(--vp-c-red);
 6507:  3856:  1223: 1136:   padding: 0.75rem;
 6508:  3857:  1224: 1137:   border: 1px solid var(--vp-c-red);
 6509:  3858:  1225: 1138:   border-radius: 4px;
 6510:  3859:  1226: 1139:   margin: 1rem 0;
 6511:  3860:  1227: 1140: }
 6512:  3861:  1228: 1141: 
 6513:  3862:  1229: 1142: .response-data {
 6514:  3863:  1230: 1143:   background: var(--vp-c-bg-mute);
 6515:  3864:  1231: 1144:   padding: 1rem;
 6516:  3865:  1232: 1145:   border-radius: 4px;
 6517:  3866:  1233: 1146:   overflow-x: auto;
 6518:  3867:  1234: 1147:   margin: 1rem 0;
 6519:  3868:  1235: 1148: }
 6520:  3869:  1236: 1149: 
 6521:  3870:  1237: 1150: .response-section {
 6522:  3871:  1238: 1151:   margin: 1rem 0;
 6523:  3872:  1239: 1152: }
 6524:  3873:  1240: 1153: 
 6525:  3874:  1241: 1154: .response-section .status {
 6526:  3875:  1242: 1155:   padding: 0.25rem 0.5rem;
 6527:  3876:  1243: 1156:   border-radius: 4px;
 6528:  3877:  1244: 1157:   font-weight: 600;
 6529:  3878:  1245: 1158: }
 6530:  3879:  1246: 1159: 
 6531:  3880:  1247: 1160: .response-section .status.success {
 6532:  3881:  1248: 1161:   background: var(--vp-c-green-dimm);
 6533:  3882:  1249: 1162:   color: var(--vp-c-green);
 6534:  3883:  1250: 1163: }
 6535:  3884:  1251: 1164: 
 6536:  3885:  1252: 1165: .response-section .status.error {
 6537:  3886:  1253: 1166:   background: var(--vp-c-red-dimm);
 6538:  3887:  1254: 1167:   color: var(--vp-c-red);
 6539:  3888:  1255: 1168: }
 6540:  3889:  1256: 1169: 
 6541:  3890:  1257: 1170: .schema {
 6542:  3891:  1258: 1171:   background: var(--vp-c-bg-mute);
 6543:  3892:  1259: 1172:   padding: 1rem;
 6544:  3893:  1260: 1173:   border-radius: 4px;
 6545:  3894:  1261: 1174:   overflow-x: auto;
 6546:  3895:  1262: 1175:   margin-top: 0.5rem;
 6547:  3896:  1263: 1176: }
 6548:  3897:  1264: 1177: 
 6549:  3898:  1265: 1178: .loading-overlay {
 6550:  3899:  1266: 1179:   position: absolute;
 6551:  3900:  1267: 1180:   top: 0;
 6552:  3901:  1268: 1181:   left: 0;
 6553:  3902:  1269: 1182:   right: 0;
 6554:  3903:  1270: 1183:   bottom: 0;
 6555:  3904:  1271: 1184:   background: rgba(0, 0, 0, 0.5);
 6556:  3905:  1272: 1185:   display: flex;
 6557:  3906:  1273: 1186:   align-items: center;
 6558:  3907:  1274: 1187:   justify-content: center;
 6559:  3908:  1275: 1188:   border-radius: 8px;
 6560:  3909:  1276: 1189: }
 6561:  3910:  1277: 1190: 
 6562:  3911:  1278: 1191: .loading-spinner {
 6563:  3912:  1279: 1192:   width: 2rem;
 6564:  3913:  1280: 1193:   height: 2rem;
 6565:  3914:  1281: 1194:   border: 2px solid var(--vp-c-brand);
 6566:  3915:  1282: 1195:   border-radius: 50%;
 6567:  3916:  1283: 1196:   border-top-color: transparent;
 6568:  3917:  1284: 1197:   animation: spin 1s linear infinite;
 6569:  3918:  1285: 1198: }
 6570:  3919:  1286: 1199: 
 6571:  3920:  1287: 1200: @keyframes spin {
 6572:  3921:  1288: 1201:   to { transform: rotate(360deg); }
 6573:  3922:  1289: 1202: }
 6574:  3923:  1290: 1203: 
 6575:  3924:  1291: 1204: /* Responsive Design */
 6576:  3925:  1292: 1205: @media (max-width: 768px) {
 6577:  3926:  1293: 1206:   .api-explorer {
 6578:  3927:  1294: 1207:     grid-template-columns: 1fr;
 6579:  3928:  1295: 1208:     height: auto;
 6580:  3929:  1296: 1209:   }
 6581:  3930:  1297: 1210: 
 6582:  3931:  1298: 1211:   .sidebar {
 6583:  3932:  1299: 1212:     max-height: 300px;
 6584:  3933:  1300: 1213:     overflow-y: auto;
 6585:  3934:  1301: 1214:   }
 6586:  3935:  1302: 1215: 
 6587:  3936:  1303: 1216:   .content {
 6588:  3937:  1304: 1217:     padding: 1rem;
 6589:  3938:  1305: 1218:   }
 6590:  3939:  1306: 1219: 
 6591:  3940:  1307: 1220:   .header-input {
 6592:  3941:  1308: 1221:     grid-template-columns: 1fr;
 6593:  3942:  1309: 1222:   }
 6594:  3943:  1310: 1223: 
 6595:  3944:  1311: 1224:   .endpoint-item-header {
 6596:  3945:  1312: 1225:     flex-direction: column;
 6597:  3946:  1313: 1226:     align-items: flex-start;
 6598:  3947:  1314: 1227:   }
 6599:  3948:  1315: 1228: 
 6600:  3949:  1316: 1229:   .response-header {
 6601:  3950:  1317: 1230:     flex-direction: column;
 6602:  3951:  1318: 1231:     gap: 0.5rem;
 6603:  3952:  1319: 1232:   }
 6604:  3953:  1320: 1233: 
 6605:  3954:  1321: 1234:   .response-actions {
 6606:  3955:  1322: 1235:     width: 100%;
 6607:  3956:  1323: 1236:     justify-content: space-between;
 6608:  3957:  1324: 1237:   }
 6609:  3958:  1325: 1238: 
 6610:  3959:  1326: 1239:   .action-button {
 6611:  3960:  1327: 1240:     flex: 1;
 6612:  3961:  1328: 1241:   }
 6613:  3962:  1329: 1242: }
 6614:  3963:  1330: 1243: 
 6615:  3964:  1331: 1244: /* Dark Mode Adjustments */
 6616:  3965:  1332: 1245: :root[class~='dark'] .api-explorer {
 6617:  3966:  1333: 1246:   --custom-api-bg: var(--vp-c-bg-soft);
 6618:  3967:  1334: 1247: }
 6619:  3968:  1335: 1248: 
 6620:  3969:  1336: 1249: :root[class~='dark'] .loading-overlay {
 6621:  3970:  1337: 1250:   background: rgba(0, 0, 0, 0.7);
 6622:  3971:  1338: 1251: }
 6623:  3972:  1339: 1252: </style>
 6624:  3973:  1340: </file>
 6625:  3974:  1341: 
 6626:  3975:  1342: <file path=".vitepress/components/ArchitectureDiagram.vue">
 6627:  3976:  1343:   1: <script setup lang="ts">
 6628:  3977:  1344:   2: import { ref, onMounted, watch } from 'vue'
 6629:  3978:  1345:   3: 
 6630:  3979:  1346:   4: interface DiagramNode {
 6631:  3980:  1347:   5:   id: string
 6632:  3981:  1348:   6:   type: 'service' | 'database' | 'function' | 'external'
 6633:  3982:  1349:   7:   label: string
 6634:  3983:  1350:   8:   x: number
 6635:  3984:  1351:   9:   y: number
 6636:  3985:  1352:  10:   width: number
 6637:  3986:  1353:  11:   height: number
 6638:  3987:  1354:  12: }
 6639:  3988:  1355:  13: 
 6640:  3989:  1356:  14: interface DiagramConnection {
 6641:  3990:  1357:  15:   from: string
 6642:  3991:  1358:  16:   to: string
 6643:  3992:  1359:  17:   label?: string
 6644:  3993:  1360:  18:   type: 'sync' | 'async' | 'storage'
 6645:  3994:  1361:  19: }
 6646:  3995:  1362:  20: 
 6647:  3996:  1363:  21: const props = defineProps<{
 6648:  3997:  1364:  22:   zoom?: number
 6649:  3998:  1365:  23:   showLabels?: boolean
 6650:  3999:  1366:  24: }>()
 6651:  4000:  1367:  25: 
 6652:  4001:  1368:  26: const canvas = ref<HTMLCanvasElement | null>(null)
 6653:  4002:  1369:  27: const wrapper = ref<HTMLDivElement | null>(null)
 6654:  4003:  1370:  28: const scale = ref(props.zoom || 1)
 6655:  4004:  1371:  29: 
 6656:  4005:  1372:  30: // Define system components
 6657:  4006:  1373:  31: const nodes: DiagramNode[] = [
 6658:  4007:  1374:  32:   // External Services
 6659:  4008:  1375:  33:   {
 6660:  4009:  1376:  34:     id: 'tcgplayer',
 6661:  4010:  1377:  35:     type: 'external',
 6662:  4011:  1378:  36:     label: 'TCGPlayer API',
 6663:  4012:  1379:  37:     x: 50,
 6664:  4013:  1380:  38:     y: 50,
 6665:  4014:  1381:  39:     width: 120,
 6666:  4015:  1382:  40:     height: 60
 6667:  4016:  1383:  41:   },
 6668:  4017:  1384:  42:   // Firebase Services
 6669:  4018:  1385:  43:   {
 6670:  4019:  1386:  44:     id: 'functions',
 6671:  4020:  1387:  45:     type: 'service',
 6672:  4021:  1388:  46:     label: 'Firebase Functions',
 6673:  4022:  1389:  47:     x: 250,
 6674:  4023:  1390:  48:     y: 150,
 6675:  4024:  1391:  49:     width: 150,
 6676:  4025:  1392:  50:     height: 70
 6677:  4026:  1393:  51:   },
 6678:  4027:  1394:  52:   {
 6679:  4028:  1395:  53:     id: 'firestore',
 6680:  4029:  1396:  54:     type: 'database',
 6681:  4030:  1397:  55:     label: 'Firestore',
 6682:  4031:  1398:  56:     x: 500,
 6683:  4032:  1399:  57:     y: 50,
 6684:  4033:  1400:  58:     width: 120,
 6685:  4034:  1401:  59:     height: 60
 6686:  4035:  1402:  60:   },
 6687:  4036:  1403:  61:   {
 6688:  4037:  1404:  62:     id: 'storage',
 6689:  4038:  1405:  63:     type: 'database',
 6690:  4039:  1406:  64:     label: 'Firebase Storage',
 6691:  4040:  1407:  65:     x: 500,
 6692:  4041:  1408:  66:     y: 250,
 6693:  4042:  1409:  67:     width: 120,
 6694:  4043:  1410:  68:     height: 60
 6695:  4044:  1411:  69:   },
 6696:  4045:  1412:  70:   // Core Functions
 6697:  4046:  1413:  71:   {
 6698:  4047:  1414:  72:     id: 'cardSync',
 6699:  4048:  1415:  73:     type: 'function',
 6700:  4049:  1416:  74:     label: 'Card Sync',
 6701:  4050:  1417:  75:     x: 250,
 6702:  4051:  1418:  76:     y: 50,
 6703:  4052:  1419:  77:     width: 100,
 6704:  4053:  1420:  78:     height: 50
 6705:  4054:  1421:  79:   },
 6706:  4055:  1422:  80:   {
 6707:  4056:  1423:  81:     id: 'priceSync',
 6708:  4057:  1424:  82:     type: 'function',
 6709:  4058:  1425:  83:     label: 'Price Sync',
 6710:  4059:  1426:  84:     x: 250,
 6711:  4060:  1427:  85:     y: 250,
 6712:  4061:  1428:  86:     width: 100,
 6713:  4062:  1429:  87:     height: 50
 6714:  4063:  1430:  88:   },
 6715:  4064:  1431:  89:   {
 6716:  4065:  1432:  90:     id: 'imageProcessor',
 6717:  4066:  1433:  91:     type: 'function',
 6718:  4067:  1434:  92:     label: 'Image Processor',
 6719:  4068:  1435:  93:     x: 250,
 6720:  4069:  1436:  94:     y: 350,
 6721:  4070:  1437:  95:     width: 100,
 6722:  4071:  1438:  96:     height: 50
 6723:  4072:  1439:  97:   }
 6724:  4073:  1440:  98: ]
 6725:  4074:  1441:  99: 
 6726:  4075:  1442: 100: const connections: DiagramConnection[] = [
 6727:  4076:  1443: 101:   // TCGPlayer connections
 6728:  4077:  1444: 102:   {
 6729:  4078:  1445: 103:     from: 'tcgplayer',
 6730:  4079:  1446: 104:     to: 'cardSync',
 6731:  4080:  1447: 105:     label: 'Card Data',
 6732:  4081:  1448: 106:     type: 'sync'
 6733:  4082:  1449: 107:   },
 6734:  4083:  1450: 108:   {
 6735:  4084:  1451: 109:     from: 'tcgplayer',
 6736:  4085:  1452: 110:     to: 'priceSync',
 6737:  4086:  1453: 111:     label: 'Price Data',
 6738:  4087:  1454: 112:     type: 'sync'
 6739:  4088:  1455: 113:   },
 6740:  4089:  1456: 114:   // Function connections
 6741:  4090:  1457: 115:   {
 6742:  4091:  1458: 116:     from: 'cardSync',
 6743:  4092:  1459: 117:     to: 'firestore',
 6744:  4093:  1460: 118:     label: 'Store Cards',
 6745:  4094:  1461: 119:     type: 'storage'
 6746:  4095:  1462: 120:   },
 6747:  4096:  1463: 121:   {
 6748:  4097:  1464: 122:     from: 'priceSync',
 6749:  4098:  1465: 123:     to: 'firestore',
 6750:  4099:  1466: 124:     label: 'Store Prices',
 6751:  4100:  1467: 125:     type: 'storage'
 6752:  4101:  1468: 126:   },
 6753:  4102:  1469: 127:   {
 6754:  4103:  1470: 128:     from: 'imageProcessor',
 6755:  4104:  1471: 129:     to: 'storage',
 6756:  4105:  1472: 130:     label: 'Store Images',
 6757:  4106:  1473: 131:     type: 'storage'
 6758:  4107:  1474: 132:   },
 6759:  4108:  1475: 133:   {
 6760:  4109:  1476: 134:     from: 'cardSync',
 6761:  4110:  1477: 135:     to: 'imageProcessor',
 6762:  4111:  1478: 136:     label: 'Process Images',
 6763:  4112:  1479: 137:     type: 'async'
 6764:  4113:  1480: 138:   }
 6765:  4114:  1481: 139: ]
 6766:  4115:  1482: 140: 
 6767:  4116:  1483: 141: function drawNode(
 6768:  4117:  1484: 142:   ctx: CanvasRenderingContext2D,
 6769:  4118:  1485: 143:   node: DiagramNode
 6770:  4119:  1486: 144: ) {
 6771:  4120:  1487: 145:   const x = node.x * scale.value
 6772:  4121:  1488: 146:   const y = node.y * scale.value
 6773:  4122:  1489: 147:   const width = node.width * scale.value
 6774:  4123:  1490: 148:   const height = node.height * scale.value
 6775:  4124:  1491: 149: 
 6776:  4125:  1492: 150:   ctx.beginPath()
 6777:  4126:  1493: 151:   
 6778:  4127:  1494: 152:   switch (node.type) {
 6779:  4128:  1495: 153:     case 'service':
 6780:  4129:  1496: 154:       ctx.roundRect(x, y, width, height, 10)
 6781:  4130:  1497: 155:       ctx.fillStyle = '#646cff'
 6782:  4131:  1498: 156:       break
 6783:  4132:  1499: 157:     case 'database':
 6784:  4133:  1500: 158:       ctx.ellipse(
 6785:  4134:  1501: 159:         x + width/2,
 6786:  4135:  1502: 160:         y + height/2,
 6787:  4136:  1503: 161:         width/2,
 6788:  4137:  1504: 162:         height/2,
 6789:  4138:  1505: 163:         0,
 6790:  4139:  1506: 164:         0,
 6791:  4140:  1507: 165:         2 * Math.PI
 6792:  4141:  1508: 166:       )
 6793:  4142:  1509: 167:       ctx.fillStyle = '#42b883'
 6794:  4143:  1510: 168:       break
 6795:  4144:  1511: 169:     case 'function':
 6796:  4145:  1512: 170:       ctx.roundRect(x, y, width, height, 5)
 6797:  4146:  1513: 171:       ctx.fillStyle = '#fb923c'
 6798:  4147:  1514: 172:       break
 6799:  4148:  1515: 173:     case 'external':
 6800:  4149:  1516: 174:       ctx.rect(x, y, width, height)
 6801:  4150:  1517: 175:       ctx.fillStyle = '#94a3b8'
 6802:  4151:  1518: 176:       break
 6803:  4152:  1519: 177:   }
 6804:  4153:  1520: 178:   
 6805:  4154:  1521: 179:   ctx.fill()
 6806:  4155:  1522: 180:   ctx.stroke()
 6807:  4156:  1523: 181: 
 6808:  4157:  1524: 182:   // Draw label
 6809:  4158:  1525: 183:   if (props.showLabels !== false) {
 6810:  4159:  1526: 184:     ctx.fillStyle = '#ffffff'
 6811:  4160:  1527: 185:     ctx.font = `${12 * scale.value}px sans-serif`
 6812:  4161:  1528: 186:     ctx.textAlign = 'center'
 6813:  4162:  1529: 187:     ctx.textBaseline = 'middle'
 6814:  4163:  1530: 188:     ctx.fillText(
 6815:  4164:  1531: 189:       node.label,
 6816:  4165:  1532: 190:       x + width/2,
 6817:  4166:  1533: 191:       y + height/2
 6818:  4167:  1534: 192:     )
 6819:  4168:  1535: 193:   }
 6820:  4169:  1536: 194: }
 6821:  4170:  1537: 195: 
 6822:  4171:  1538: 196: function drawConnection(
 6823:  4172:  1539: 197:   ctx: CanvasRenderingContext2D,
 6824:  4173:  1540: 198:   conn: DiagramConnection
 6825:  4174:  1541: 199: ) {
 6826:  4175:  1542: 200:   const fromNode = nodes.find(n => n.id === conn.from)
 6827:  4176:  1543: 201:   const toNode = nodes.find(n => n.id === conn.to)
 6828:  4177:  1544: 202:   
 6829:  4178:  1545: 203:   if (!fromNode || !toNode) return
 6830:  4179:  1546: 204: 
 6831:  4180:  1547: 205:   const start = {
 6832:  4181:  1548: 206:     x: (fromNode.x + fromNode.width/2) * scale.value,
 6833:  4182:  1549: 207:     y: (fromNode.y + fromNode.height/2) * scale.value
 6834:  4183:  1550: 208:   }
 6835:  4184:  1551: 209:   
 6836:  4185:  1552: 210:   const end = {
 6837:  4186:  1553: 211:     x: (toNode.x + toNode.width/2) * scale.value,
 6838:  4187:  1554: 212:     y: (toNode.y + toNode.height/2) * scale.value
 6839:  4188:  1555: 213:   }
 6840:  4189:  1556: 214: 
 6841:  4190:  1557: 215:   ctx.beginPath()
 6842:  4191:  1558: 216:   ctx.moveTo(start.x, start.y)
 6843:  4192:  1559: 217: 
 6844:  4193:  1560: 218:   // Draw different line styles based on connection type
 6845:  4194:  1561: 219:   switch (conn.type) {
 6846:  4195:  1562: 220:     case 'sync':
 6847:  4196:  1563: 221:       ctx.setLineDash([])
 6848:  4197:  1564: 222:       ctx.strokeStyle = '#646cff'
 6849:  4198:  1565: 223:       break
 6850:  4199:  1566: 224:     case 'async':
 6851:  4200:  1567: 225:       ctx.setLineDash([5, 5])
 6852:  4201:  1568: 226:       ctx.strokeStyle = '#fb923c'
 6853:  4202:  1569: 227:       break
 6854:  4203:  1570: 228:     case 'storage':
 6855:  4204:  1571: 229:       ctx.setLineDash([])
 6856:  4205:  1572: 230:       ctx.strokeStyle = '#42b883'
 6857:  4206:  1573: 231:       break
 6858:  4207:  1574: 232:   }
 6859:  4208:  1575: 233: 
 6860:  4209:  1576: 234:   // Draw curved line
 6861:  4210:  1577: 235:   const cp1x = start.x + (end.x - start.x) / 2
 6862:  4211:  1578: 236:   const cp1y = start.y
 6863:  4212:  1579: 237:   const cp2x = cp1x
 6864:  4213:  1580: 238:   const cp2y = end.y
 6865:  4214:  1581: 239:   
 6866:  4215:  1582: 240:   ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, end.x, end.y)
 6867:  4216:  1583: 241:   ctx.stroke()
 6868:  4217:  1584: 242: 
 6869:  4218:  1585: 243:   // Draw arrow
 6870:  4219:  1586: 244:   const angle = Math.atan2(end.y - cp2y, end.x - cp2x)
 6871:  4220:  1587: 245:   const arrowLength = 10 * scale.value
 6872:  4221:  1588: 246:   
 6873:  4222:  1589: 247:   ctx.beginPath()
 6874:  4223:  1590: 248:   ctx.moveTo(end.x, end.y)
 6875:  4224:  1591: 249:   ctx.lineTo(
 6876:  4225:  1592: 250:     end.x - arrowLength * Math.cos(angle - Math.PI/6),
 6877:  4226:  1593: 251:     end.y - arrowLength * Math.sin(angle - Math.PI/6)
 6878:  4227:  1594: 252:   )
 6879:  4228:  1595: 253:   ctx.moveTo(end.x, end.y)
 6880:  4229:  1596: 254:   ctx.lineTo(
 6881:  4230:  1597: 255:     end.x - arrowLength * Math.cos(angle + Math.PI/6),
 6882:  4231:  1598: 256:     end.y - arrowLength * Math.sin(angle + Math.PI/6)
 6883:  4232:  1599: 257:   )
 6884:  4233:  1600: 258:   ctx.stroke()
 6885:  4234:  1601: 259: 
 6886:  4235:  1602: 260:   // Draw label if exists
 6887:  4236:  1603: 261:   if (conn.label && props.showLabels !== false) {
 6888:  4237:  1604: 262:     const midX = (start.x + end.x) / 2
 6889:  4238:  1605: 263:     const midY = (start.y + end.y) / 2 - 10 * scale.value
 6890:  4239:  1606: 264:     
 6891:  4240:  1607: 265:     ctx.font = `${11 * scale.value}px sans-serif`
 6892:  4241:  1608: 266:     ctx.fillStyle = '#64748b'
 6893:  4242:  1609: 267:     ctx.textAlign = 'center'
 6894:  4243:  1610: 268:     ctx.textBaseline = 'bottom'
 6895:  4244:  1611: 269:     ctx.fillText(conn.label, midX, midY)
 6896:  4245:  1612: 270:   }
 6897:  4246:  1613: 271: }
 6898:  4247:  1614: 272: 
 6899:  4248:  1615: 273: function draw() {
 6900:  4249:  1616: 274:   if (!canvas.value) return
 6901:  4250:  1617: 275:   
 6902:  4251:  1618: 276:   const ctx = canvas.value.getContext('2d')
 6903:  4252:  1619: 277:   if (!ctx) return
 6904:  4253:  1620: 278: 
 6905:  4254:  1621: 279:   // Clear canvas
 6906:  4255:  1622: 280:   ctx.clearRect(0, 0, canvas.value.width, canvas.value.height)
 6907:  4256:  1623: 281: 
 6908:  4257:  1624: 282:   // Set line styles
 6909:  4258:  1625: 283:   ctx.lineWidth = 2 * scale.value
 6910:  4259:  1626: 284:   ctx.strokeStyle = '#64748b'
 6911:  4260:  1627: 285: 
 6912:  4261:  1628: 286:   // Draw connections first (behind nodes)
 6913:  4262:  1629: 287:   connections.forEach(conn => drawConnection(ctx, conn))
 6914:  4263:  1630: 288: 
 6915:  4264:  1631: 289:   // Draw nodes
 6916:  4265:  1632: 290:   nodes.forEach(node => drawNode(ctx, node))
 6917:  4266:  1633: 291: }
 6918:  4267:  1634: 292: 
 6919:  4268:  1635: 293: function updateCanvasSize() {
 6920:  4269:  1636: 294:   if (!canvas.value || !wrapper.value) return
 6921:  4270:  1637: 295:   
 6922:  4271:  1638: 296:   const rect = wrapper.value.getBoundingClientRect()
 6923:  4272:  1639: 297:   canvas.value.width = rect.width
 6924:  4273:  1640: 298:   canvas.value.height = rect.height
 6925:  4274:  1641: 299:   draw()
 6926:  4275:  1642: 300: }
 6927:  4276:  1643: 301: 
 6928:  4277:  1644: 302: // Resize handling
 6929:  4278:  1645: 303: let resizeObserver: ResizeObserver
 6930:  4279:  1646: 304: onMounted(() => {
 6931:  4280:  1647: 305:   if (wrapper.value) {
 6932:  4281:  1648: 306:     resizeObserver = new ResizeObserver(updateCanvasSize)
 6933:  4282:  1649: 307:     resizeObserver.observe(wrapper.value)
 6934:  4283:  1650: 308:   }
 6935:  4284:  1651: 309:   updateCanvasSize()
 6936:  4285:  1652: 310: })
 6937:  4286:  1653: 311: 
 6938:  4287:  1654: 312: // Watch for prop changes
 6939:  4288:  1655: 313: watch(() => props.zoom, () => {
 6940:  4289:  1656: 314:   scale.value = props.zoom || 1
 6941:  4290:  1657: 315:   draw()
 6942:  4291:  1658: 316: })
 6943:  4292:  1659: 317: </script>
 6944:  4293:  1660: 318: 
 6945:  4294:  1661: 319: <template>
 6946:  4295:  1662: 320:   <div ref="wrapper" class="architecture-diagram">
 6947:  4296:  1663: 321:     <canvas ref="canvas"></canvas>
 6948:  4297:  1664: 322:     <div class="legend">
 6949:  4298:  1665: 323:       <div class="legend-item">
 6950:  4299:  1666: 324:         <div class="color-box service"></div>
 6951:  4300:  1667: 325:         <span>Firebase Services</span>
 6952:  4301:  1668: 326:       </div>
 6953:  4302:  1669: 327:       <div class="legend-item">
 6954:  4303:  1670: 328:         <div class="color-box database"></div>
 6955:  4304:  1671: 329:         <span>Databases</span>
 6956:  4305:  1672: 330:       </div>
 6957:  4306:  1673: 331:       <div class="legend-item">
 6958:  4307:  1674: 332:         <div class="color-box function"></div>
 6959:  4308:  1675: 333:         <span>Functions</span>
 6960:  4309:  1676: 334:       </div>
 6961:  4310:  1677: 335:       <div class="legend-item">
 6962:  4311:  1678: 336:         <div class="color-box external"></div>
 6963:  4312:  1679: 337:         <span>External Services</span>
 6964:  4313:  1680: 338:       </div>
 6965:  4314:  1681: 339:     </div>
 6966:  4315:  1682: 340:   </div>
 6967:  4316:  1683: 341: </template>
 6968:  4317:  1684: 342: 
 6969:  4318:  1685: 343: <style scoped>
 6970:  4319:  1686: 344: .architecture-diagram {
 6971:  4320:  1687: 345:   position: relative;
 6972:  4321:  1688: 346:   width: 100%;
 6973:  4322:  1689: 347:   height: 500px;
 6974:  4323:  1690: 348:   background: var(--custom-diagram-bg);
 6975:  4324:  1691: 349:   border-radius: 8px;
 6976:  4325:  1692: 350:   overflow: hidden;
 6977:  4326:  1693: 351: }
 6978:  4327:  1694: 352: 
 6979:  4328:  1695: 353: canvas {
 6980:  4329:  1696: 354:   width: 100%;
 6981:  4330:  1697: 355:   height: 100%;
 6982:  4331:  1698: 356: }
 6983:  4332:  1699: 357: 
 6984:  4333:  1700: 358: .legend {
 6985:  4334:  1701: 359:   position: absolute;
 6986:  4335:  1702: 360:   bottom: 20px;
 6987:  4336:  1703: 361:   right: 20px;
 6988:  4337:  1704: 362:   background: rgba(255, 255, 255, 0.9);
 6989:  4338:  1705: 363:   padding: 10px;
 6990:  4339:  1706: 364:   border-radius: 6px;
 6991:  4340:  1707: 365:   box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
 6992:  4341:  1708: 366: }
 6993:  4342:  1709: 367: 
 6994:  4343:  1710: 368: .legend-item {
 6995:  4344:  1711: 369:   display: flex;
 6996:  4345:  1712: 370:   align-items: center;
 6997:  4346:  1713: 371:   margin: 5px 0;
 6998:  4347:  1714: 372: }
 6999:  4348:  1715: 373: 
 7000:  4349:  1716: 374: .color-box {
 7001:  4350:  1717: 375:   width: 16px;
 7002:  4351:  1718: 376:   height: 16px;
 7003:  4352:  1719: 377:   margin-right: 8px;
 7004:  4353:  1720: 378:   border-radius: 3px;
 7005:  4354:  1721: 379: }
 7006:  4355:  1722: 380: 
 7007:  4356:  1723: 381: .color-box.service {
 7008:  4357:  1724: 382:   background: #646cff;
 7009:  4358:  1725: 383: }
 7010:  4359:  1726: 384: 
 7011:  4360:  1727: 385: .color-box.database {
 7012:  4361:  1728: 386:   background: #42b883;
 7013:  4362:  1729: 387: }
 7014:  4363:  1730: 388: 
 7015:  4364:  1731: 389: .color-box.function {
 7016:  4365:  1732: 390:   background: #fb923c;
 7017:  4366:  1733: 391: }
 7018:  4367:  1734: 392: 
 7019:  4368:  1735: 393: .color-box.external {
 7020:  4369:  1736: 394:   background: #94a3b8;
 7021:  4370:  1737: 395: }
 7022:  4371:  1738: 396: 
 7023:  4372:  1739: 397: /* Dark mode adjustments */
 7024:  4373:  1740: 398: :deep(.dark) .legend {
 7025:  4374:  1741: 399:   background: rgba(0, 0, 0, 0.8);
 7026:  4375:  1742: 400: }
 7027:  4376:  1743: 401: </style>
 7028:  4377:  1744: </file>
 7029:  4378:  1745: 
 7030:  4379:  1746: <file path=".vitepress/components/FileTree.vue">
 7031:  4380:  1747:   1: <script setup lang="ts">
 7032:  4381:  1748:   2: import { ref, computed, onMounted } from 'vue'
 7033:  4382:  1749:   3: 
 7034:  4383:  1750:   4: interface TreeNode {
 7035:  4384:  1751:   5:   name: string
 7036:  4385:  1752:   6:   path: string
 7037:  4386:  1753:   7:   type: 'file' | 'directory'
 7038:  4387:  1754:   8:   children?: TreeNode[]
 7039:  4388:  1755:   9: }
 7040:  4389:  1756:  10: 
 7041:  4390:  1757:  11: const props = defineProps<{
 7042:  4391:  1758:  12:   root?: string
 7043:  4392:  1759:  13:   initialExpanded?: boolean
 7044:  4393:  1760:  14: }>()
 7045:  4394:  1761:  15: 
 7046:  4395:  1762:  16: const expandedNodes = ref<Set<string>>(new Set())
 7047:  4396:  1763:  17: const treeData = ref<TreeNode[]>([])
 7048:  4397:  1764:  18: 
 7049:  4398:  1765:  19: // Process the file structure into a tree
 7050:  4399:  1766:  20: onMounted(async () => {
 7051:  4400:  1767:  21:   // Initial structure based on your codebase
 7052:  4401:  1768:  22:   treeData.value = [
 7053:  4402:  1769:  23:     {
 7054:  4403:  1770:  24:       name: 'functions',
 7055:  4404:  1771:  25:       path: 'functions',
 7056:  4405:  1772:  26:       type: 'directory',
 7057:  4406:  1773:  27:       children: [
 7058:  4407:  1774:  28:         {
 7059:  4408:  1775:  29:           name: 'src',
 7060:  4409:  1776:  30:           path: 'functions/src',
 7061:  4410:  1777:  31:           type: 'directory',
 7062:  4411:  1778:  32:           children: [
 7063:  4412:  1779:  33:             {
 7064:  4413:  1780:  34:               name: 'config',
 7065:  4414:  1781:  35:               path: 'functions/src/config',
 7066:  4415:  1782:  36:               type: 'directory',
 7067:  4416:  1783:  37:               children: [
 7068:  4417:  1784:  38:                 {
 7069:  4418:  1785:  39:                   name: 'firebase.ts',
 7070:  4419:  1786:  40:                   path: 'functions/src/config/firebase.ts',
 7071:  4420:  1787:  41:                   type: 'file'
 7072:  4421:  1788:  42:                 }
 7073:  4422:  1789:  43:               ]
 7074:  4423:  1790:  44:             },
 7075:  4424:  1791:  45:             {
 7076:  4425:  1792:  46:               name: 'services',
 7077:  4426:  1793:  47:               path: 'functions/src/services',
 7078:  4427:  1794:  48:               type: 'directory',
 7079:  4428:  1795:  49:               children: [
 7080:  4429:  1796:  50:                 {
 7081:  4430:  1797:  51:                   name: 'cardSync.ts',
 7082:  4431:  1798:  52:                   path: 'functions/src/services/cardSync.ts',
 7083:  4432:  1799:  53:                   type: 'file'
 7084:  4433:  1800:  54:                 },
 7085:  4434:  1801:  55:                 {
 7086:  4435:  1802:  56:                   name: 'priceSync.ts',
 7087:  4436:  1803:  57:                   path: 'functions/src/services/priceSync.ts',
 7088:  4437:  1804:  58:                   type: 'file'
 7089:  4438:  1805:  59:                 }
 7090:  4439:  1806:  60:               ]
 7091:  4440:  1807:  61:             },
 7092:  4441:  1808:  62:             // Add other directories and files based on your structure
 7093:  4442:  1809:  63:           ]
 7094:  4443:  1810:  64:         }
 7095:  4444:  1811:  65:       ]
 7096:  4445:  1812:  66:     }
 7097:  4446:  1813:  67:   ]
 7098:  4447:  1814:  68: 
 7099:  4448:  1815:  69:   // If initialExpanded is true, expand all nodes
 7100:  4449:  1816:  70:   if (props.initialExpanded) {
 7101:  4450:  1817:  71:     const expandAll = (nodes: TreeNode[]) => {
 7102:  4451:  1818:  72:       nodes.forEach(node => {
 7103:  4452:  1819:  73:         if (node.type === 'directory') {
 7104:  4453:  1820:  74:           expandedNodes.value.add(node.path)
 7105:  4454:  1821:  75:           if (node.children) {
 7106:  4455:  1822:  76:             expandAll(node.children)
 7107:  4456:  1823:  77:           }
 7108:  4457:  1824:  78:         }
 7109:  4458:  1825:  79:       })
 7110:  4459:  1826:  80:     }
 7111:  4460:  1827:  81:     expandAll(treeData.value)
 7112:  4461:  1828:  82:   }
 7113:  4462:  1829:  83: })
 7114:  4463:  1830:  84: 
 7115:  4464:  1831:  85: function toggleNode(path: string) {
 7116:  4465:  1832:  86:   if (expandedNodes.value.has(path)) {
 7117:  4466:  1833:  87:     expandedNodes.value.delete(path)
 7118:  4467:  1834:  88:   } else {
 7119:  4468:  1835:  89:     expandedNodes.value.add(path)
 7120:  4469:  1836:  90:   }
 7121:  4470:  1837:  91: }
 7122:  4471:  1838:  92: 
 7123:  4472:  1839:  93: const toggleAllNodes = () => {
 7124:  4473:  1840:  94:   if (expandedNodes.value.size > 0) {
 7125:  4474:  1841:  95:     expandedNodes.value.clear()
 7126:  4475:  1842:  96:   } else {
 7127:  4476:  1843:  97:     const expandAll = (nodes: TreeNode[]) => {
 7128:  4477:  1844:  98:       nodes.forEach(node => {
 7129:  4478:  1845:  99:         if (node.type === 'directory') {
 7130:  4479:  1846: 100:           expandedNodes.value.add(node.path)
 7131:  4480:  1847: 101:           if (node.children) {
 7132:  4481:  1848: 102:             expandAll(node.children)
 7133:  4482:  1849: 103:           }
 7134:  4483:  1850: 104:         }
 7135:  4484:  1851: 105:       })
 7136:  4485:  1852: 106:     }
 7137:  4486:  1853: 107:     expandAll(treeData.value)
 7138:  4487:  1854: 108:   }
 7139:  4488:  1855: 109: }
 7140:  4489:  1856: 110: 
 7141:  4490:  1857: 111: // Recursive component for rendering tree nodes
 7142:  4491:  1858: 112: const TreeNode = (node: TreeNode, level: number = 0) => {
 7143:  4492:  1859: 113:   const isExpanded = expandedNodes.value.has(node.path)
 7144:  4493:  1860: 114:   const hasChildren = node.children && node.children.length > 0
 7145:  4494:  1861: 115:   
 7146:  4495:  1862: 116:   return (
 7147:  4496:  1863: 117:     <div class={`tree-node level-${level}`}>
 7148:  4497:  1864: 118:       <div
 7149:  4498:  1865: 119:         class={`node-content ${node.type}`}
 7150:  4499:  1866: 120:         onClick={() => hasChildren && toggleNode(node.path)}
 7151:  4500:  1867: 121:       >
 7152:  4501:  1868: 122:         {hasChildren && (
 7153:  4502:  1869: 123:           <span class={`expand-icon ${isExpanded ? 'expanded' : ''}`}>
 7154:  4503:  1870: 124:             {isExpanded ? '▼' : '▶'}
 7155:  4504:  1871: 125:           </span>
 7156:  4505:  1872: 126:         )}
 7157:  4506:  1873: 127:         <span class="node-name">{node.name}</span>
 7158:  4507:  1874: 128:       </div>
 7159:  4508:  1875: 129:       {isExpanded && hasChildren && (
 7160:  4509:  1876: 130:         <div class="children">
 7161:  4510:  1877: 131:           {node.children!.map(child => TreeNode(child, level + 1))}
 7162:  4511:  1878: 132:         </div>
 7163:  4512:  1879: 133:       )}
 7164:  4513:  1880: 134:     </div>
 7165:  4514:  1881: 135:   )
 7166:  4515:  1882: 136: }
 7167:  4516:  1883: 137: </script>
 7168:  4517:  1884: 138: 
 7169:  4518:  1885: 139: <template>
 7170:  4519:  1886: 140:   <div class="file-tree">
 7171:  4520:  1887: 141:     <div class="tree-controls">
 7172:  4521:  1888: 142:       <button @click="toggleAllNodes">
 7173:  4522:  1889: 143:         {{ expandedNodes.size > 0 ? 'Collapse All' : 'Expand All' }}
 7174:  4523:  1890: 144:       </button>
 7175:  4524:  1891: 145:     </div>
 7176:  4525:  1892: 146:     <div class="tree-content">
 7177:  4526:  1893: 147:       <template v-for="node in treeData" :key="node.path">
 7178:  4527:  1894: 148:         <TreeNode :node="node" />
 7179:  4528:  1895: 149:       </template>
 7180:  4529:  1896: 150:     </div>
 7181:  4530:  1897: 151:   </div>
 7182:  4531:  1898: 152: </template>
 7183:  4532:  1899: 153: 
 7184:  4533:  1900: 154: <style scoped>
 7185:  4534:  1901: 155: .file-tree {
 7186:  4535:  1902: 156:   background: var(--custom-tree-bg);
 7187:  4536:  1903: 157:   border-radius: 8px;
 7188:  4537:  1904: 158:   padding: 1rem;
 7189:  4538:  1905: 159:   margin: 1rem 0;
 7190:  4539:  1906: 160: }
 7191:  4540:  1907: 161: 
 7192:  4541:  1908: 162: .tree-controls {
 7193:  4542:  1909: 163:   margin-bottom: 1rem;
 7194:  4543:  1910: 164: }
 7195:  4544:  1911: 165: 
 7196:  4545:  1912: 166: .tree-controls button {
 7197:  4546:  1913: 167:   background: var(--vp-c-brand);
 7198:  4547:  1914: 168:   color: white;
 7199:  4548:  1915: 169:   border: none;
 7200:  4549:  1916: 170:   padding: 0.5rem 1rem;
 7201:  4550:  1917: 171:   border-radius: 4px;
 7202:  4551:  1918: 172:   cursor: pointer;
 7203:  4552:  1919: 173:   font-size: 0.9rem;
 7204:  4553:  1920: 174: }
 7205:  4554:  1921: 175: 
 7206:  4555:  1922: 176: .tree-controls button:hover {
 7207:  4556:  1923: 177:   background: var(--vp-c-brand-dark);
 7208:  4557:  1924: 178: }
 7209:  4558:  1925: 179: 
 7210:  4559:  1926: 180: .tree-node {
 7211:  4560:  1927: 181:   margin: 0.25rem 0;
 7212:  4561:  1928: 182: }
 7213:  4562:  1929: 183: 
 7214:  4563:  1930: 184: .node-content {
 7215:  4564:  1931: 185:   display: flex;
 7216:  4565:  1932: 186:   align-items: center;
 7217:  4566:  1933: 187:   padding: 0.25rem;
 7218:  4567:  1934: 188:   cursor: pointer;
 7219:  4568:  1935: 189:   border-radius: 4px;
 7220:  4569:  1936: 190: }
 7221:  4570:  1937: 191: 
 7222:  4571:  1938: 192: .node-content:hover {
 7223:  4572:  1939: 193:   background: var(--custom-tree-highlight);
 7224:  4573:  1940: 194: }
 7225:  4574:  1941: 195: 
 7226:  4575:  1942: 196: .expand-icon {
 7227:  4576:  1943: 197:   margin-right: 0.5rem;
 7228:  4577:  1944: 198:   font-size: 0.8rem;
 7229:  4578:  1945: 199:   transition: transform 0.2s ease;
 7230:  4579:  1946: 200: }
 7231:  4580:  1947: 201: 
 7232:  4581:  1948: 202: .expand-icon.expanded {
 7233:  4582:  1949: 203:   transform: rotate(0deg);
 7234:  4583:  1950: 204: }
 7235:  4584:  1951: 205: 
 7236:  4585:  1952: 206: .children {
 7237:  4586:  1953: 207:   margin-left: 1.5rem;
 7238:  4587:  1954: 208:   border-left: 1px dashed var(--vp-c-divider);
 7239:  4588:  1955: 209:   padding-left: 0.5rem;
 7240:  4589:  1956: 210: }
 7241:  4590:  1957: 211: 
 7242:  4591:  1958: 212: .directory .node-name {
 7243:  4592:  1959: 213:   font-weight: 500;
 7244:  4593:  1960: 214: }
 7245:  4594:  1961: 215: 
 7246:  4595:  1962: 216: .file .node-name {
 7247:  4596:  1963: 217:   font-weight: normal;
 7248:  4597:  1964: 218: }
 7249:  4598:  1965: 219: 
 7250:  4599:  1966: 220: .level-0 {
 7251:  4600:  1967: 221:   margin-top: 0;
 7252:  4601:  1968: 222: }
 7253:  4602:  1969: 223: </style>
 7254:  4603:  1970: </file>
 7255:  4604:  1971: 
 7256:  4605:  1972: <file path=".vitepress/config.mts">
 7257:  4606:  1973:   1: import { defineConfig } from 'vitepress/dist/node/index.js'
 7258:  4607:  1974:   2: 
 7259:  4608:  1975:   3: export default defineConfig({
 7260:  4609:  1976:   4:   title: 'FFTCG Sync Service',
 7261:  4610:  1977:   5:   description: 'Documentation for the FFTCG Card and Price Sync Service',
 7262:  4611:  1978:   6:   
 7263:  4612:  1979:   7:   // Head tags
 7264:  4613:  1980:   8:   head: [
 7265:  4614:  1981:   9:     ['link', { rel: 'icon', type: 'image/svg+xml', href: '/logo.svg' }],
 7266:  4615:  1982:  10:     ['meta', { name: 'theme-color', content: '#646cff' }]
 7267:  4616:  1983:  11:   ],
 7268:  4617:  1984:  12: 
 7269:  4618:  1985:  13:   // Markdown configuration
 7270:  4619:  1986:  14:   markdown: {
 7271:  4620:  1987:  15:     lineNumbers: true,
 7272:  4621:  1988:  16:     theme: 'github-dark'
 7273:  4622:  1989:  17:   },
 7274:  4623:  1990:  18: 
 7275:  4624:  1991:  19:   themeConfig: {
 7276:  4625:  1992:  20:     nav: [
 7277:  4626:  1993:  21:       { text: 'Home', link: '/' },
 7278:  4627:  1994:  22:       { text: 'Guide', link: '/docs/usage-guide' },
 7279:  4628:  1995:  23:       { text: 'Architecture', link: '/docs/architecture' },
 7280:  4629:  1996:  24:       { text: 'API', link: '/api/' },
 7281:  4630:  1997:  25:       { text: 'FAQ', link: '/docs/faq' }
 7282:  4631:  1998:  26:     ],
 7283:  4632:  1999:  27: 
 7284:  4633:  2000:  28:     sidebar: [
 7285:  4634:  2001:  29:       {
 7286:  4635:  2002:  30:         text: 'Introduction',
 7287:  4636:  2003:  31:         items: [
 7288:  4637:  2004:  32:           { text: 'Getting Started', link: '/introduction' },
 7289:  4638:  2005:  33:           { text: 'Architecture Overview', link: '/docs/architecture' },
 7290:  4639:  2006:  34:           { text: 'Usage Guide', link: '/docs/usage-guide' }
 7291:  4640:  2007:  35:         ]
 7292:  4641:  2008:  36:       },
 7293:  4642:  2009:  37:       {
 7294:  4643:  2010:  38:         text: 'Core Documentation',
 7295:  4644:  2011:  39:         items: [
 7296:  4645:  2012:  40:           { text: 'FAQ', link: '/docs/faq' },
 7297:  4646:  2013:  41:           { text: 'Troubleshooting', link: '/docs/troubleshooting' },
 7298:  4647:  2014:  42:           { text: 'Performance', link: '/docs/performance' },
 7299:  4648:  2015:  43:           { text: 'Security', link: '/docs/security' }
 7300:  4649:  2016:  44:         ]
 7301:  4650:  2017:  45:       },
 7302:  4651:  2018:  46:       {
 7303:  4652:  2019:  47:         text: 'Setup & Configuration',
 7304:  4653:  2020:  48:         items: [
 7305:  4654:  2021:  49:           { text: 'Installation', link: '/setup/installation' },
 7306:  4655:  2022:  50:           { text: 'Firebase Setup', link: '/setup/firebase' },
 7307:  4656:  2023:  51:           { text: 'Environment Config', link: '/setup/environment' }
 7308:  4657:  2024:  52:         ]
 7309:  4658:  2025:  53:       },
 7310:  4659:  2026:  54:       {
 7311:  4660:  2027:  55:         text: 'Core Services',
 7312:  4661:  2028:  56:         items: [
 7313:  4662:  2029:  57:           { text: 'Card Sync', link: '/services/card-sync' },
 7314:  4663:  2030:  58:           { text: 'Price Sync', link: '/services/price-sync' },
 7315:  4664:  2031:  59:           { text: 'Image Processing', link: '/services/image-processing' }
 7316:  4665:  2032:  60:         ]
 7317:  4666:  2033:  61:       },
 7318:  4667:  2034:  62:       {
 7319:  4668:  2035:  63:         text: 'Utilities',
 7320:  4669:  2036:  64:         items: [
 7321:  4670:  2037:  65:           { text: 'Image Handler', link: '/utils/image-handler' },
 7322:  4671:  2038:  66:           { text: 'Cache System', link: '/utils/cache' },
 7323:  4672:  2039:  67:           { text: 'Logging', link: '/utils/logging' },
 7324:  4673:  2040:  68:           { text: 'Error Handling', link: '/utils/error-handling' },
 7325:  4674:  2041:  69:           { text: 'Batch Processing', link: '/utils/batch-processing' }
 7326:  4675:  2042:  70:         ]
 7327:  4676:  2043:  71:       },
 7328:  4677:  2044:  72:       {
 7329:  4678:  2045:  73:         text: 'Testing & Monitoring',
 7330:  4679:  2046:  74:         items: [
 7331:  4680:  2047:  75:           { text: 'Test Suite', link: '/testing/overview' },
 7332:  4681:  2048:  76:           { text: 'Image Testing', link: '/testing/image-testing' },
 7333:  4682:  2049:  77:           { text: 'Sync Testing', link: '/testing/sync-testing' },
 7334:  4683:  2050:  78:           { text: 'Performance Monitoring', link: '/testing/monitoring' }
 7335:  4684:  2051:  79:         ]
 7336:  4685:  2052:  80:       }
 7337:  4686:  2053:  81:     ],
 7338:  4687:  2054:  82: 
 7339:  4688:  2055:  83:     search: {
 7340:  4689:  2056:  84:       provider: 'local',
 7341:  4690:  2057:  85:       options: {
 7342:  4691:  2058:  86:         detailedView: true
 7343:  4692:  2059:  87:       }
 7344:  4693:  2060:  88:     },
 7345:  4694:  2061:  89: 
 7346:  4695:  2062:  90:     socialLinks: [
 7347:  4696:  2063:  91:       { icon: 'github', link: 'https://github.com/yourusername/fftcg-sync-service' }
 7348:  4697:  2064:  92:     ],
 7349:  4698:  2065:  93: 
 7350:  4699:  2066:  94:     footer: {
 7351:  4700:  2067:  95:       message: 'Released under the MIT License.',
 7352:  4701:  2068:  96:       copyright: `Copyright © ${new Date().getFullYear()}`
 7353:  4702:  2069:  97:     },
 7354:  4703:  2070:  98: 
 7355:  4704:  2071:  99:     outline: {
 7356:  4705:  2072: 100:       level: [2, 3],
 7357:  4706:  2073: 101:       label: 'On this page'
 7358:  4707:  2074: 102:     },
 7359:  4708:  2075: 103: 
 7360:  4709:  2076: 104:     lastUpdated: {
 7361:  4710:  2077: 105:       text: 'Last updated',
 7362:  4711:  2078: 106:       formatOptions: {
 7363:  4712:  2079: 107:         dateStyle: 'full',
 7364:  4713:  2080: 108:         timeStyle: 'medium'
 7365:  4714:  2081: 109:       }
 7366:  4715:  2082: 110:     }
 7367:  4716:  2083: 111:   }
 7368:  4717:  2084: 112: })
 7369:  4718:  2085: </file>
 7370:  4719:  2086: 
 7371:  4720:  2087: <file path=".vitepress/shims-vue.d.ts">
 7372:  4721:  2088: 1: declare module '*.vue' {
 7373:  4722:  2089: 2:     import type { DefineComponent } from 'vue'
 7374:  4723:  2090: 3:     const component: DefineComponent<{}, {}, any>
 7375:  4724:  2091: 4:     export default component
 7376:  4725:  2092: 5:   }
 7377:  4726:  2093: </file>
 7378:  4727:  2094: 
 7379:  4728:  2095: <file path=".vitepress/theme/custom.css">
 7380:  4729:  2096:  1: :root {
 7381:  4730:  2097:  2:     /* Brand Colors */
 7382:  4731:  2098:  3:     --vp-c-brand: #646cff;
 7383:  4732:  2099:  4:     --vp-c-brand-light: #747bff;
 7384:  4733:  2100:  5:     --vp-c-brand-lighter: #9499ff;
 7385:  4734:  2101:  6:     --vp-c-brand-dark: #535bf2;
 7386:  4735:  2102:  7:     --vp-c-brand-darker: #454ce1;
 7387:  4736:  2103:  8:   
 7388:  4737:  2104:  9:     /* Typography */
 7389:  4738:  2105: 10:     --vp-font-family-base: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI',
 7390:  4739:  2106: 11:       Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
 7391:  4740:  2107: 12:       sans-serif;
 7392:  4741:  2108: 13:     --vp-font-family-mono: 'Fira Code', Menlo, Monaco, Consolas, 'Courier New',
 7393:  4742:  2109: 14:       monospace;
 7394:  4743:  2110: 15:   
 7395:  4744:  2111: 16:     /* Code Blocks */
 7396:  4745:  2112: 17:     --vp-code-block-bg: #1e1e1e;
 7397:  4746:  2113: 18:     --vp-code-block-color: #e5e7eb;
 7398:  4747:  2114: 19:     --vp-code-line-highlight-color: rgba(255, 255, 255, 0.1);
 7399:  4748:  2115: 20:     --vp-code-line-number-color: #636363;
 7400:  4749:  2116: 21:   
 7401:  4750:  2117: 22:     /* Custom Component Colors */
 7402:  4751:  2118: 23:     --custom-tree-bg: var(--vp-c-bg-soft);
 7403:  4752:  2119: 24:     --custom-tree-highlight: var(--vp-c-brand-light);
 7404:  4753:  2120: 25:     --custom-diagram-bg: var(--vp-c-bg-soft);
 7405:  4754:  2121: 26:     --custom-api-bg: var(--vp-c-bg-soft);
 7406:  4755:  2122: 27:   }
 7407:  4756:  2123: 28:   
 7408:  4757:  2124: 29:   /* Dark Mode Overrides */
 7409:  4758:  2125: 30:   .dark {
 7410:  4759:  2126: 31:     --custom-tree-bg: var(--vp-c-bg-soft);
 7411:  4760:  2127: 32:     --custom-tree-highlight: var(--vp-c-brand-dark);
 7412:  4761:  2128: 33:   }
 7413:  4762:  2129: 34:   
 7414:  4763:  2130: 35:   /* Custom Component Base Styles */
 7415:  4764:  2131: 36:   .custom-block {
 7416:  4765:  2132: 37:     border-radius: 8px;
 7417:  4766:  2133: 38:     padding: 16px 20px;
 7418:  4767:  2134: 39:     margin: 16px 0;
 7419:  4768:  2135: 40:     font-size: 14px;
 7420:  4769:  2136: 41:     line-height: 1.6;
 7421:  4770:  2137: 42:   }
 7422:  4771:  2138: 43:   
 7423:  4772:  2139: 44:   /* Responsive Design */
 7424:  4773:  2140: 45:   @media (max-width: 768px) {
 7425:  4774:  2141: 46:     .custom-block {
 7426:  4775:  2142: 47:       padding: 12px 16px;
 7427:  4776:  2143: 48:     }
 7428:  4777:  2144: 49:   }
 7429:  4778:  2145: 50:   
 7430:  4779:  2146: 51:   /* Print Styles */
 7431:  4780:  2147: 52:   @media print {
 7432:  4781:  2148: 53:     .VPNav,
 7433:  4782:  2149: 54:     .VPSidebar,
 7434:  4783:  2150: 55:     .VPDocAside {
 7435:  4784:  2151: 56:       display: none;
 7436:  4785:  2152: 57:     }
 7437:  4786:  2153: 58:   
 7438:  4787:  2154: 59:     .VPDoc {
 7439:  4788:  2155: 60:       padding: 0;
 7440:  4789:  2156: 61:       margin: 0;
 7441:  4790:  2157: 62:     }
 7442:  4791:  2158: 63:   }
 7443:  4792:  2159: 64:   
 7444:  4793:  2160: 65:   /* Transitions */
 7445:  4794:  2161: 66:   .fade-enter-active,
 7446:  4795:  2162: 67:   .fade-leave-active {
 7447:  4796:  2163: 68:     transition: opacity 0.3s ease;
 7448:  4797:  2164: 69:   }
 7449:  4798:  2165: 70:   
 7450:  4799:  2166: 71:   .fade-enter-from,
 7451:  4800:  2167: 72:   .fade-leave-to {
 7452:  4801:  2168: 73:     opacity: 0;
 7453:  4802:  2169: 74:   }
 7454:  4803:  2170: </file>
 7455:  4804:  2171: 
 7456:  4805:  2172: <file path=".vitepress/theme/FirebaseAuth.vue">
 7457:  4806:  2173:  1: <template>
 7458:  4807:  2174:  2:   <div v-if="!isAuthenticated" class="auth-wrapper">
 7459:  4808:  2175:  3:     <div class="auth-container">
 7460:  4809:  2176:  4:       <h2>FFTCG Sync Service Documentation</h2>
 7461:  4810:  2177:  5:       <p>Authentication required to access documentation.</p>
 7462:  4811:  2178:  6:       <button @click="signIn" class="signin-button">
 7463:  4812:  2179:  7:         Sign in with Google
 7464:  4813:  2180:  8:       </button>
 7465:  4814:  2181:  9:     </div>
 7466:  4815:  2182: 10:   </div>
 7467:  4816:  2183: 11:   <slot v-else></slot>
 7468:  4817:  2184: 12: </template>
 7469:  4818:  2185: 13: 
 7470:  4819:  2186: 14: <script setup>
 7471:  4820:  2187: 15: import { ref, onMounted } from 'vue'
 7472:  4821:  2188: 16: import { initializeApp } from 'firebase/app'
 7473:  4822:  2189: 17: import { getAuth, signInWithPopup, GoogleAuthProvider, onAuthStateChanged } from 'firebase/auth'
 7474:  4823:  2190: 18: 
 7475:  4824:  2191: 19: const isAuthenticated = ref(false)
 7476:  4825:  2192: 20: const allowedEmails = ['mrw1986@gmail.com']
 7477:  4826:  2193: 21: 
 7478:  4827:  2194: 22: const firebaseConfig = {
 7479:  4828:  2195: 23:   apiKey: "AIzaSyDJGSxSVXWEmTs9HMzSGu175vpABHuEez0",
 7480:  4829:  2196: 24:   authDomain: "fftcg-sync-service.firebaseapp.com",
 7481:  4830:  2197: 25:   projectId: "fftcg-sync-service",
 7482:  4831:  2198: 26:   storageBucket: "fftcg-sync-service.firebasestorage.app",
 7483:  4832:  2199: 27:   messagingSenderId: "161248420888",
 7484:  4833:  2200: 28:   appId: "1:161248420888:web:61f524b0fa0287017d4f6d"
 7485:  4834:  2201: 29: }
 7486:  4835:  2202: 30: 
 7487:  4836:  2203: 31: const app = initializeApp(firebaseConfig)
 7488:  4837:  2204: 32: const auth = getAuth(app)
 7489:  4838:  2205: 33: const provider = new GoogleAuthProvider()
 7490:  4839:  2206: 34: 
 7491:  4840:  2207: 35: onMounted(() => {
 7492:  4841:  2208: 36:   onAuthStateChanged(auth, (user) => {
 7493:  4842:  2209: 37:     isAuthenticated.value = user && allowedEmails.includes(user.email)
 7494:  4843:  2210: 38:     if (user && !allowedEmails.includes(user.email)) {
 7495:  4844:  2211: 39:       auth.signOut()
 7496:  4845:  2212: 40:       alert('Access denied. Unauthorized email.')
 7497:  4846:  2213: 41:     }
 7498:  4847:  2214: 42:   })
 7499:  4848:  2215: 43: })
 7500:  4849:  2216: 44: 
 7501:  4850:  2217: 45: const signIn = async () => {
 7502:  4851:  2218: 46:   try {
 7503:  4852:  2219: 47:     await signInWithPopup(auth, provider)
 7504:  4853:  2220: 48:   } catch (error) {
 7505:  4854:  2221: 49:     console.error('Authentication error:', error)
 7506:  4855:  2222: 50:     alert('Authentication failed. Please try again.')
 7507:  4856:  2223: 51:   }
 7508:  4857:  2224: 52: }
 7509:  4858:  2225: 53: </script>
 7510:  4859:  2226: 54: 
 7511:  4860:  2227: 55: <style>
 7512:  4861:  2228: 56: .auth-wrapper {
 7513:  4862:  2229: 57:   display: flex;
 7514:  4863:  2230: 58:   justify-content: center;
 7515:  4864:  2231: 59:   align-items: center;
 7516:  4865:  2232: 60:   min-height: 100vh;
 7517:  4866:  2233: 61:   background: var(--vp-c-bg);
 7518:  4867:  2234: 62: }
 7519:  4868:  2235: 63: 
 7520:  4869:  2236: 64: .auth-container {
 7521:  4870:  2237: 65:   text-align: center;
 7522:  4871:  2238: 66:   padding: 2rem;
 7523:  4872:  2239: 67:   border-radius: 8px;
 7524:  4873:  2240: 68:   background: var(--vp-c-bg-soft);
 7525:  4874:  2241: 69:   box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
 7526:  4875:  2242: 70:   max-width: 400px;
 7527:  4876:  2243: 71:   width: 90%;
 7528:  4877:  2244: 72: }
 7529:  4878:  2245: 73: 
 7530:  4879:  2246: 74: .signin-button {
 7531:  4880:  2247: 75:   margin-top: 1.5rem;
 7532:  4881:  2248: 76:   padding: 0.75rem 1.5rem;
 7533:  4882:  2249: 77:   border-radius: 4px;
 7534:  4883:  2250: 78:   background: var(--vp-c-brand);
 7535:  4884:  2251: 79:   color: white;
 7536:  4885:  2252: 80:   border: none;
 7537:  4886:  2253: 81:   cursor: pointer;
 7538:  4887:  2254: 82:   font-size: 1rem;
 7539:  4888:  2255: 83:   transition: background-color 0.2s;
 7540:  4889:  2256: 84: }
 7541:  4890:  2257: 85: 
 7542:  4891:  2258: 86: .signin-button:hover {
 7543:  4892:  2259: 87:   background: var(--vp-c-brand-dark);
 7544:  4893:  2260: 88: }
 7545:  4894:  2261: 89: 
 7546:  4895:  2262: 90: h2 {
 7547:  4896:  2263: 91:   color: var(--vp-c-text-1);
 7548:  4897:  2264: 92:   margin-bottom: 1rem;
 7549:  4898:  2265: 93: }
 7550:  4899:  2266: 94: 
 7551:  4900:  2267: 95: p {
 7552:  4901:  2268: 96:   color: var(--vp-c-text-2);
 7553:  4902:  2269: 97:   margin-bottom: 1rem;
 7554:  4903:  2270: 98: }
 7555:  4904:  2271: 99: </style>
 7556:  4905:  2272: </file>
 7557:  4906:  2273: 
 7558:  4907:  2274: <file path=".vitepress/theme/index.ts">
 7559:  4908:  2275:  1: // .vitepress/theme/index.ts
 7560:  4909:  2276:  2: 
 7561:  4910:  2277:  3: import { h } from 'vue'
 7562:  4911:  2278:  4: import type { Theme } from 'vitepress'
 7563:  4912:  2279:  5: import DefaultTheme from 'vitepress/theme'
 7564:  4913:  2280:  6: import FileTree from '../../components/FileTree.vue'
 7565:  4914:  2281:  7: import ArchitectureDiagram from '../../components/ArchitectureDiagram.vue'
 7566:  4915:  2282:  8: import ApiExplorer from '../../components/ApiExplorer.vue'
 7567:  4916:  2283:  9: import './custom.css'
 7568:  4917:  2284: 10: 
 7569:  4918:  2285: 11: export default {
 7570:  4919:  2286: 12:   extends: DefaultTheme,
 7571:  4920:  2287: 13:   
 7572:  4921:  2288: 14:   enhanceApp({ app }) {
 7573:  4922:  2289: 15:     // Register global components
 7574:  4923:  2290: 16:     app.component('FileTree', FileTree)
 7575:  4924:  2291: 17:     app.component('ArchitectureDiagram', ArchitectureDiagram)
 7576:  4925:  2292: 18:     app.component('ApiExplorer', ApiExplorer)
 7577:  4926:  2293: 19:   },
 7578:  4927:  2294: 20: 
 7579:  4928:  2295: 21:   Layout: () => {
 7580:  4929:  2296: 22:     return h(DefaultTheme.Layout, null, {
 7581:  4930:  2297: 23:       // Optional: Add custom slots here if needed
 7582:  4931:  2298: 24:     })
 7583:  4932:  2299: 25:   }
 7584:  4933:  2300: 26: } satisfies Theme
 7585:  4934:  2301: </file>
 7586:  4935:  2302: 
 7587:  4936:  2303: <file path="architecture.md">
 7588:  4937:  2304:   1: # System Architecture
 7589:  4938:  2305:   2: 
 7590:  4939:  2306:   3: ## Overview
 7591:  4940:  2307:   4: 
 7592:  4941:  2308:   5: FFTCG Sync Service is built on Firebase Cloud Functions with a microservices architecture, designed to synchronize card data, prices, and images from TCGplayer while maintaining high performance and reliability.
 7593:  4942:  2309:   6: 
 7594:  4943:  2310:   7: ## Core Components
 7595:  4944:  2311:   8: 
 7596:  4945:  2312:   9: ### 1. Cloud Functions
 7597:  4946:  2313:  10: 
 7598:  4947:  2314:  11: ```mermaid
 7599:  4948:  2315:  12: graph TD
 7600:  4949:  2316:  13:     A[Scheduled Triggers] -->|Daily| B[Sync Functions]
 7601:  4950:  2317:  14:     C[HTTP Triggers] -->|Manual| B
 7602:  4951:  2318:  15:     B --> D[Card Sync]
 7603:  4952:  2319:  16:     B --> E[Price Sync]
 7604:  4953:  2320:  17:     B --> F[Image Processing]
 7605:  4954:  2321:  18: ```
 7606:  4955:  2322:  19: 
 7607:  4956:  2323:  20: #### Functions Structure
 7608:  4957:  2324:  21: 
 7609:  4958:  2325:  22: - `scheduledCardSync` - Daily card data synchronization
 7610:  4959:  2326:  23: - `scheduledPriceSync` - Daily price updates
 7611:  4960:  2327:  24: - `testCardSync` - Test endpoint for card sync
 7612:  4961:  2328:  25: - `testPriceSync` - Test endpoint for price sync
 7613:  4962:  2329:  26: - `manualCardSync` - Manual trigger for full sync
 7614:  4963:  2330:  27: - `manualPriceSync` - Manual trigger for price sync
 7615:  4964:  2331:  28: - `healthCheck` - System health monitoring
 7616:  4965:  2332:  29: 
 7617:  4966:  2333:  30: ### 2. Storage Systems
 7618:  4967:  2334:  31: 
 7619:  4968:  2335:  32: ```mermaid
 7620:  4969:  2336:  33: graph LR
 7621:  4970:  2337:  34:     A[Cloud Functions] --> B[Firestore]
 7622:  4971:  2338:  35:     A --> C[Cloud Storage]
 7623:  4972:  2339:  36:     B --> D[(Cards Collection)]
 7624:  4973:  2340:  37:     B --> E[(Prices Collection)]
 7625:  4974:  2341:  38:     B --> F[(Sync Metadata)]
 7626:  4975:  2342:  39:     C --> G[Card Images]
 7627:  4976:  2343:  40: ```
 7628:  4977:  2344:  41: 
 7629:  4978:  2345:  42: #### Database Collections
 7630:  4979:  2346:  43: 
 7631:  4980:  2347:  44: - `cards` - Card information and metadata
 7632:  4981:  2348:  45: - `prices` - Current and historical price data
 7633:  4982:  2349:  46: - `syncMetadata` - Sync operation logs and status
 7634:  4983:  2350:  47: - `logs` - System logs and operations history
 7635:  4984:  2351:  48: - `cardHashes` - Change detection hashes
 7636:  4985:  2352:  49: - `priceHashes` - Price update tracking
 7637:  4986:  2353:  50: - `imageMetadata` - Image processing metadata
 7638:  4987:  2354:  51: 
 7639:  4988:  2355:  52: ### 3. Processing Pipeline
 7640:  4989:  2356:  53: 
 7641:  4990:  2357:  54: ```mermaid
 7642:  4991:  2358:  55: graph TD
 7643:  4992:  2359:  56:     A[Data Source] -->|Fetch| B[Raw Data]
 7644:  4993:  2360:  57:     B -->|Validate| C[Validation Layer]
 7645:  4994:  2361:  58:     C -->|Process| D[Processing Layer]
 7646:  4995:  2362:  59:     D -->|Store| E[Storage Layer]
 7647:  4996:  2363:  60:     D -->|Cache| F[Cache Layer]
 7648:  4997:  2364:  61: ```
 7649:  4998:  2365:  62: 
 7650:  4999:  2366:  63: #### Pipeline Components
 7651:  5000:  2367:  64: 
 7652:  5001:  2368:  65: - Data Fetching
 7653:  5002:  2369:  66: - Validation & Sanitization
 7654:  5003:  2370:  67: - Processing & Transformation
 7655:  5004:  2371:  68: - Storage Management
 7656:  5005:  2372:  69: - Cache Management
 7657:  5006:  2373:  70: 
 7658:  5007:  2374:  71: ## Service Integration
 7659:  5008:  2375:  72: 
 7660:  5009:  2376:  73: ### External Services
 7661:  5010:  2377:  74: 
 7662:  5011:  2378:  75: ```mermaid
 7663:  5012:  2379:  76: graph LR
 7664:  5013:  2380:  77:     A[FFTCG Sync Service] -->|Cards Data| B[TCGplayer API]
 7665:  5014:  2381:  78:     A -->|Prices| B
 7666:  5015:  2382:  79:     A -->|Images| C[TCGplayer CDN]
 7667:  5016:  2383:  80:     A --> D[Firebase Services]
 7668:  5017:  2384:  81: ```
 7669:  5018:  2385:  82: 
 7670:  5019:  2386:  83: ### Internal Services Communication
 7671:  5020:  2387:  84: 
 7672:  5021:  2388:  85: ```mermaid
 7673:  5022:  2389:  86: graph TD
 7674:  5023:  2390:  87:     A[Sync Controller] --> B[Card Service]
 7675:  5024:  2391:  88:     A --> C[Price Service]
 7676:  5025:  2392:  89:     A --> D[Image Service]
 7677:  5026:  2393:  90:     B --> E[Storage Service]
 7678:  5027:  2394:  91:     C --> E
 7679:  5028:  2395:  92:     D --> E
 7680:  5029:  2396:  93: ```
 7681:  5030:  2397:  94: 
 7682:  5031:  2398:  95: ## Data Flow
 7683:  5032:  2399:  96: 
 7684:  5033:  2400:  97: ### Synchronization Flow
 7685:  5034:  2401:  98: 
 7686:  5035:  2402:  99: ```mermaid
 7687:  5036:  2403: 100: sequenceDiagram
 7688:  5037:  2404: 101:     participant T as Trigger
 7689:  5038:  2405: 102:     participant S as Sync Service
 7690:  5039:  2406: 103:     participant E as External API
 7691:  5040:  2407: 104:     participant D as Database
 7692:  5041:  2408: 105:     participant C as Cache
 7693:  5042:  2409: 106:    
 7694:  5043:  2410: 107:     T->>S: Initiate Sync
 7695:  5044:  2411: 108:     S->>C: Check Cache
 7696:  5045:  2412: 109:     S->>E: Fetch Updates
 7697:  5046:  2413: 110:     E->>S: Return Data
 7698:  5047:  2414: 111:     S->>D: Store Updates
 7699:  5048:  2415: 112:     S->>C: Update Cache
 7700:  5049:  2416: 113: ```
 7701:  5050:  2417: 114: 
 7702:  5051:  2418: 115: ## Error Handling
 7703:  5052:  2419: 116: 
 7704:  5053:  2420: 117: ### Recovery System
 7705:  5054:  2421: 118: 
 7706:  5055:  2422: 119: ```mermaid
 7707:  5056:  2423: 120: graph TD
 7708:  5057:  2424: 121:     A[Error Detection] -->|Classify| B[Error Types]
 7709:  5058:  2425: 122:     B -->|Transient| C[Retry Logic]
 7710:  5059:  2426: 123:     B -->|Permanent| D[Failure Handling]
 7711:  5060:  2427: 124:     C -->|Success| E[Continue Processing]
 7712:  5061:  2428: 125:     C -->|Max Retries| D
 7713:  5062:  2429: 126:     D --> F[Error Logging]
 7714:  5063:  2430: 127:     D --> G[Fallback Mechanism]
 7715:  5064:  2431: 128: ```
 7716:  5065:  2432: 129: 
 7717:  5066:  2433: 130: ## Performance Optimization
 7718:  5067:  2434: 131: 
 7719:  5068:  2435: 132: ### Caching Strategy
 7720:  5069:  2436: 133: 
 7721:  5070:  2437: 134: ```mermaid
 7722:  5071:  2438: 135: graph LR
 7723:  5072:  2439: 136:     A[Request] --> B{Cache Check}
 7724:  5073:  2440: 137:     B -->|Hit| C[Return Cached]
 7725:  5074:  2441: 138:     B -->|Miss| D[Fetch Fresh]
 7726:  5075:  2442: 139:     D --> E[Process]
 7727:  5076:  2443: 140:     E --> F[Update Cache]
 7728:  5077:  2444: 141:     F --> G[Return Fresh]
 7729:  5078:  2445: 142: ```
 7730:  5079:  2446: 143: 
 7731:  5080:  2447: 144: ## Security Architecture
 7732:  5081:  2448: 145: 
 7733:  5082:  2449: 146: ### Access Control
 7734:  5083:  2450: 147: 
 7735:  5084:  2451: 148: ```mermaid
 7736:  5085:  2452: 149: graph TD
 7737:  5086:  2453: 150:     A[Request] --> B{Authentication}
 7738:  5087:  2454: 151:     B -->|Valid| C{Authorization}
 7739:  5088:  2455: 152:     B -->|Invalid| D[Reject]
 7740:  5089:  2456: 153:     C -->|Allowed| E[Process]
 7741:  5090:  2457: 154:     C -->|Denied| D
 7742:  5091:  2458: 155: ```
 7743:  5092:  2459: 156: 
 7744:  5093:  2460: 157: ## Monitoring System
 7745:  5094:  2461: 158: 
 7746:  5095:  2462: 159: ### Observability
 7747:  5096:  2463: 160: 
 7748:  5097:  2464: 161: ```mermaid
 7749:  5098:  2465: 162: graph TD
 7750:  5099:  2466: 163:     A[Operations] --> B[Logging]
 7751:  5100:  2467: 164:     A --> C[Metrics]
 7752:  5101:  2468: 165:     A --> D[Traces]
 7753:  5102:  2469: 166:     B --> E[Analysis]
 7754:  5103:  2470: 167:     C --> E
 7755:  5104:  2471: 168:     D --> E
 7756:  5105:  2472: 169: ```
 7757:  5106:  2473: 170: 
 7758:  5107:  2474: 171: ## Resource Management
 7759:  5108:  2475: 172: 
 7760:  5109:  2476: 173: ### Scaling Strategy
 7761:  5110:  2477: 174: 
 7762:  5111:  2478: 175: ```mermaid
 7763:  5112:  2479: 176: graph TD
 7764:  5113:  2480: 177:     A[Load Monitor] -->|Triggers| B[Scaling Decision]
 7765:  5114:  2481: 178:     B -->|Up| C[Increase Resources]
 7766:  5115:  2482: 179:     B -->|Down| D[Decrease Resources]
 7767:  5116:  2483: 180:     C --> E[Update Configuration]
 7768:  5117:  2484: 181:     D --> E
 7769:  5118:  2485: 182: ```
 7770:  5119:  2486: 183: 
 7771:  5120:  2487: 184: ## Configuration Management
 7772:  5121:  2488: 185: 
 7773:  5122:  2489: 186: ### Environment Setup
 7774:  5123:  2490: 187: 
 7775:  5124:  2491: 188: ```mermaid
 7776:  5125:  2492: 189: graph LR
 7777:  5126:  2493: 190:     A[Configuration] --> B[Development]
 7778:  5127:  2494: 191:     A --> C[Staging]
 7779:  5128:  2495: 192:     A --> D[Production]
 7780:  5129:  2496: 193:     B --> E[Firebase Project]
 7781:  5130:  2497: 194:     C --> E
 7782:  5131:  2498: 195:     D --> E
 7783:  5132:  2499: 196: ```
 7784:  5133:  2500: 197: 
 7785:  5134:  2501: 198: ## Best Practices
 7786:  5135:  2502: 199: 
 7787:  5136:  2503: 200: ### Development Workflow
 7788:  5137:  2504: 201: 
 7789:  5138:  2505: 202: ```mermaid
 7790:  5139:  2506: 203: graph LR
 7791:  5140:  2507: 204:     A[Development] -->|Test| B[Staging]
 7792:  5141:  2508: 205:     B -->|Validate| C[Production]
 7793:  5142:  2509: 206:     C -->|Monitor| D[Maintenance]
 7794:  5143:  2510: 207:     D -->|Update| A
 7795:  5144:  2511: 208: ```
 7796:  5145:  2512: 209: 
 7797:  5146:  2513: 210: ## System Requirements
 7798:  5147:  2514: 211: 
 7799:  5148:  2515: 212: ### Infrastructure
 7800:  5149:  2516: 213: 
 7801:  5150:  2517: 214: - Node.js 18+
 7802:  5151:  2518: 215: - Firebase Admin SDK
 7803:  5152:  2519: 216: - Cloud Functions
 7804:  5153:  2520: 217: - Firestore
 7805:  5154:  2521: 218: - Cloud Storage
 7806:  5155:  2522: 219: - Memory: 1GB minimum
 7807:  5156:  2523: 220: - Timeout: 540s maximum
 7808:  5157:  2524: 221: 
 7809:  5158:  2525: 222: ### Dependencies
 7810:  5159:  2526: 223: 
 7811:  5160:  2527: 224: - Firebase Functions
 7812:  5161:  2528: 225: - Firebase Admin
 7813:  5162:  2529: 226: - Axios for HTTP requests
 7814:  5163:  2530: 227: - Sharp for image processing
 7815:  5164:  2531: 228: - LRU Cache for caching
 7816:  5165:  2532: 229: - TypeScript for development
 7817:  5166:  2533: 230: 
 7818:  5167:  2534: 231: ## Deployment Architecture
 7819:  5168:  2535: 232: 
 7820:  5169:  2536: 233: ### CI/CD Pipeline
 7821:  5170:  2537: 234: 
 7822:  5171:  2538: 235: ```mermaid
 7823:  5172:  2539: 236: graph LR
 7824:  5173:  2540: 237:     A[Code Push] -->|Build| B[Tests]
 7825:  5174:  2541: 238:     B -->|Pass| C[Deploy]
 7826:  5175:  2542: 239:     C -->|Success| D[Monitor]
 7827:  5176:  2543: 240:     D -->|Issues| E[Rollback]
 7828:  5177:  2544: 241: ```
 7829:  5178:  2545: </file>
 7830:  5179:  2546: 
 7831:  5180:  2547: <file path="codebase.xml">
 7832:  5181:  2548:    1: This file is a merged representation of the entire codebase, combining all repository files into a single document.
 7833:  5182:  2549:    2: Generated by Repomix on: 2024-11-22T06:50:48.278Z
 7834:  5183:  2550:    3: 
 7835:  5184:  2551:    4: <file_summary>
 7836:  5185:  2552:    5: This section contains a summary of this file.
 7837:  5186:  2553:    6: 
 7838:  5187:  2554:    7: <purpose>
 7839:  5188:  2555:    8: This file contains a packed representation of the entire repository's contents.
 7840:  5189:  2556:    9: It is designed to be easily consumable by AI systems for analysis, code review,
 7841:  5190:  2557:   10: or other automated processes.
 7842:  5191:  2558:   11: </purpose>
 7843:  5192:  2559:   12: 
 7844:  5193:  2560:   13: <file_format>
 7845:  5194:  2561:   14: The content is organized as follows:
 7846:  5195:  2562:   15: 1. This summary section
 7847:  5196:  2563:   16: 2. Repository information
 7848:  5197:  2564:   17: 3. Repository structure
 7849:  5198:  2565:   18: 4. Repository files, each consisting of:
 7850:  5199:  2566:   19:   - File path as an attribute
 7851:  5200:  2567:   20:   - Full contents of the file
 7852:  5201:  2568:   21: </file_format>
 7853:  5202:  2569:   22: 
 7854:  5203:  2570:   23: <usage_guidelines>
 7855:  5204:  2571:   24: - This file should be treated as read-only. Any changes should be made to the
 7856:  5205:  2572:   25:   original repository files, not this packed version.
 7857:  5206:  2573:   26: - When processing this file, use the file path to distinguish
 7858:  5207:  2574:   27:   between different files in the repository.
 7859:  5208:  2575:   28: - Be aware that this file may contain sensitive information. Handle it with
 7860:  5209:  2576:   29:   the same level of security as you would the original repository.
 7861:  5210:  2577:   30: </usage_guidelines>
 7862:  5211:  2578:   31: 
 7863:  5212:  2579:   32: <notes>
 7864:  5213:  2580:   33: - Some files may have been excluded based on .gitignore rules and Repomix's
 7865:  5214:  2581:   34:   configuration.
 7866:  5215:  2582:   35: - Binary files are not included in this packed representation. Please refer to
 7867:  5216:  2583:   36:   the Repository Structure section for a complete list of file paths, including
 7868:  5217:  2584:   37:   binary files.
 7869:  5218:  2585:   38: 
 7870:  5219:  2586:   39: - Line numbers have been added to the beginning of each line.
 7871:  5220:  2587:   40: </notes>
 7872:  5221:  2588:   41: 
 7873:  5222:  2589:   42: <additional_info>
 7874:  5223:  2590:   43: 
 7875:  5224:  2591:   44: For more information about Repomix, visit: https://github.com/yamadashy/repomix
 7876:  5225:  2592:   45: </additional_info>
 7877:  5226:  2593:   46: 
 7878:  5227:  2594:   47: </file_summary>
 7879:  5228:  2595:   48: 
 7880:  5229:  2596:   49: <repository_structure>
 7881:  5230:  2597:   50: .vitepress/components/ApiExplorer.vue
 7882:  5231:  2598:   51: .vitepress/components/ArchitectureDiagram.vue
 7883:  5232:  2599:   52: .vitepress/components/FileTree.vue
 7884:  5233:  2600:   53: .vitepress/config.mts
 7885:  5234:  2601:   54: .vitepress/shims-vue.d.ts
 7886:  5235:  2602:   55: .vitepress/theme/custom.css
 7887:  5236:  2603:   56: .vitepress/theme/FirebaseAuth.vue
 7888:  5237:  2604:   57: .vitepress/theme/index.ts
 7889:  5238:  2605:   58: architecture.md
 7890:  5239:  2606:   59: faq.md
 7891:  5240:  2607:   60: index.md
 7892:  5241:  2608:   61: introduction.md
 7893:  5242:  2609:   62: package.json
 7894:  5243:  2610:   63: performance.md
 7895:  5244:  2611:   64: security.md
 7896:  5245:  2612:   65: services/card-sync.md
 7897:  5246:  2613:   66: services/price-sync.md
 7898:  5247:  2614:   67: setup/configuration.md
 7899:  5248:  2615:   68: setup/installation.md
 7900:  5249:  2616:   69: troubleshooting.md
 7901:  5250:  2617:   70: usage-guide.md
 7902:  5251:  2618:   71: utils/batch.md
 7903:  5252:  2619:   72: utils/cache.md
 7904:  5253:  2620:   73: utils/error-handling.md
 7905:  5254:  2621:   74: utils/image-compressor.md
 7906:  5255:  2622:   75: utils/image-handler.md
 7907:  5256:  2623:   76: utils/image-validator.md
 7908:  5257:  2624:   77: utils/logging.md
 7909:  5258:  2625:   78: utils/progress.md
 7910:  5259:  2626:   79: utils/request.md
 7911:  5260:  2627:   80: utils/sync-logger.md
 7912:  5261:  2628:   81: </repository_structure>
 7913:  5262:  2629:   82: 
 7914:  5263:  2630:   83: <repository_files>
 7915:  5264:  2631:   84: This section contains the contents of the repository's files.
 7916:  5265:  2632:   85: 
 7917:  5266:  2633:   86: <file path=".vitepress/components/ApiExplorer.vue">
 7918:  5267:  2634:   87:   1: <script setup lang="ts">
 7919:  5268:  2635:   88:   2: import { ref, computed, watch, onMounted } from 'vue'
 7920:  5269:  2636:   89:   3: import { useDateFormat } from '@vueuse/core'
 7921:  5270:  2637:   90:   4: 
 7922:  5271:  2638:   91:   5: interface ApiEndpoint {
 7923:  5272:  2639:   92:   6:   name: string
 7924:  5273:  2640:   93:   7:   method: 'GET' | 'POST' | 'PUT' | 'DELETE'
 7925:  5274:  2641:   94:   8:   path: string
 7926:  5275:  2642:   95:   9:   description: string
 7927:  5276:  2643:   96:  10:   params?: Parameter[]
 7928:  5277:  2644:   97:  11:   responses: ApiResponse[]
 7929:  5278:  2645:   98:  12:   example?: {
 7930:  5279:  2646:   99:  13:     request?: string
 7931:  5280:  2647:  100:  14:     response?: string
 7932:  5281:  2648:  101:  15:   }
 7933:  5282:  2649:  102:  16: }
 7934:  5283:  2650:  103:  17: 
 7935:  5284:  2651:  104:  18: interface Parameter {
 7936:  5285:  2652:  105:  19:   name: string
 7937:  5286:  2653:  106:  20:   type: string
 7938:  5287:  2654:  107:  21:   required: boolean
 7939:  5288:  2655:  108:  22:   description: string
 7940:  5289:  2656:  109:  23:   default?: string
 7941:  5290:  2657:  110:  24: }
 7942:  5291:  2658:  111:  25: 
 7943:  5292:  2659:  112:  26: interface ApiResponse {
 7944:  5293:  2660:  113:  27:   status: number
 7945:  5294:  2661:  114:  28:   description: string
 7946:  5295:  2662:  115:  29:   schema: string
 7947:  5296:  2663:  116:  30: }
 7948:  5297:  2664:  117:  31: 
 7949:  5298:  2665:  118:  32: interface ResponseState {
 7950:  5299:  2666:  119:  33:   loading: boolean
 7951:  5300:  2667:  120:  34:   data: any
 7952:  5301:  2668:  121:  35:   error: string | null
 7953:  5302:  2669:  122:  36:   headers: Record<string, string>
 7954:  5303:  2670:  123:  37:   status: number
 7955:  5304:  2671:  124:  38:   timestamp: number
 7956:  5305:  2672:  125:  39: }
 7957:  5306:  2673:  126:  40: 
 7958:  5307:  2674:  127:  41: interface RequestHeader {
 7959:  5308:  2675:  128:  42:   key: string
 7960:  5309:  2676:  129:  43:   value: string
 7961:  5310:  2677:  130:  44:   enabled: boolean
 7962:  5311:  2678:  131:  45: }
 7963:  5312:  2679:  132:  46: 
 7964:  5313:  2680:  133:  47: interface HistoryEntry {
 7965:  5314:  2681:  134:  48:   id: string
 7966:  5315:  2682:  135:  49:   endpoint: string
 7967:  5316:  2683:  136:  50:   method: string
 7968:  5317:  2684:  137:  51:   params: Record<string, any>
 7969:  5318:  2685:  138:  52:   headers: RequestHeader[]
 7970:  5319:  2686:  139:  53:   timestamp: number
 7971:  5320:  2687:  140:  54:   status: number
 7972:  5321:  2688:  141:  55:   success: boolean
 7973:  5322:  2689:  142:  56: }
 7974:  5323:  2690:  143:  57: 
 7975:  5324:  2691:  144:  58: // Define API endpoints (same as before)
 7976:  5325:  2692:  145:  59: const endpoints: ApiEndpoint[] = [/* ... your endpoints ... */]
 7977:  5326:  2693:  146:  60: 
 7978:  5327:  2694:  147:  61: const BASE_URL = 'https://us-central1-fftcg-sync-service.cloudfunctions.net'
 7979:  5328:  2695:  148:  62: const selectedEndpoint = ref<ApiEndpoint>(endpoints[0])
 7980:  5329:  2696:  149:  63: const showResponse = ref(true)
 7981:  5330:  2697:  150:  64: const showHeaders = ref(false)
 7982:  5331:  2698:  151:  65: const showHistory = ref(false)
 7983:  5332:  2699:  152:  66: const customHeaders = ref<RequestHeader[]>([
 7984:  5333:  2700:  153:  67:   { key: 'Accept', value: 'application/json', enabled: true }
 7985:  5334:  2701:  154:  68: ])
 7986:  5335:  2702:  155:  69: const history = ref<HistoryEntry[]>([])
 7987:  5336:  2703:  156:  70: 
 7988:  5337:  2704:  157:  71: // Load history from localStorage
 7989:  5338:  2705:  158:  72: onMounted(() => {
 7990:  5339:  2706:  159:  73:   const savedHistory = localStorage.getItem('api-explorer-history')
 7991:  5340:  2707:  160:  74:   if (savedHistory) {
 7992:  5341:  2708:  161:  75:     history.value = JSON.parse(savedHistory)
 7993:  5342:  2709:  162:  76:   }
 7994:  5343:  2710:  163:  77:  
 7995:  5344:  2711:  164:  78:   initParamValues(selectedEndpoint.value)
 7996:  5345:  2712:  165:  79: })
 7997:  5346:  2713:  166:  80: 
 7998:  5347:  2714:  167:  81: const responseState = ref<ResponseState>({
 7999:  5348:  2715:  168:  82:   loading: false,
 8000:  5349:  2716:  169:  83:   data: null,
 8001:  5350:  2717:  170:  84:   error: null,
 8002:  5351:  2718:  171:  85:   headers: {},
 8003:  5352:  2719:  172:  86:   status: 0,
 8004:  5353:  2720:  173:  87:   timestamp: 0
 8005:  5354:  2721:  174:  88: })
 8006:  5355:  2722:  175:  89: 
 8007:  5356:  2723:  176:  90: const paramValues = ref<Record<string, any>>({})
 8008:  5357:  2724:  177:  91: 
 8009:  5358:  2725:  178:  92: // Computed properties
 8010:  5359:  2726:  179:  93: const methodColor = computed(() => {
 8011:  5360:  2727:  180:  94:   switch (selectedEndpoint.value.method) {
 8012:  5361:  2728:  181:  95:     case 'GET': return 'var(--vp-c-green)'
 8013:  5362:  2729:  182:  96:     case 'POST': return 'var(--vp-c-brand)'
 8014:  5363:  2730:  183:  97:     case 'PUT': return 'var(--vp-c-yellow)'
 8015:  5364:  2731:  184:  98:     case 'DELETE': return 'var(--vp-c-red)'
 8016:  5365:  2732:  185:  99:     default: return 'var(--vp-c-text-1)'
 8017:  5366:  2733:  186: 100:   }
 8018:  5367:  2734:  187: 101: })
 8019:  5368:  2735:  188: 102: 
 8020:  5369:  2736:  189: 103: const formattedDate = computed(() => {
 8021:  5370:  2737:  190: 104:   return (timestamp: number) => {
 8022:  5371:  2738:  191: 105:     return new Date(timestamp).toLocaleString()
 8023:  5372:  2739:  192: 106:   }
 8024:  5373:  2740:  193: 107: })
 8025:  5374:  2741:  194: 108: 
 8026:  5375:  2742:  195: 109: // Methods
 8027:  5376:  2743:  196: 110: function initParamValues(endpoint: ApiEndpoint) {
 8028:  5377:  2744:  197: 111:   const values: Record<string, any> = {}
 8029:  5378:  2745:  198: 112:   endpoint.params?.forEach(param => {
 8030:  5379:  2746:  199: 113:     values[param.name] = param.default || ''
 8031:  5380:  2747:  200: 114:   })
 8032:  5381:  2748:  201: 115:   paramValues.value = values
 8033:  5382:  2749:  202: 116: }
 8034:  5383:  2750:  203: 117: 
 8035:  5384:  2751:  204: 118: function addHeader() {
 8036:  5385:  2752:  205: 119:   customHeaders.value.push({ key: '', value: '', enabled: true })
 8037:  5386:  2753:  206: 120: }
 8038:  5387:  2754:  207: 121: 
 8039:  5388:  2755:  208: 122: function removeHeader(index: number) {
 8040:  5389:  2756:  209: 123:   customHeaders.value.splice(index, 1)
 8041:  5390:  2757:  210: 124: }
 8042:  5391:  2758:  211: 125: 
 8043:  5392:  2759:  212: 126: function getEnabledHeaders(): Record<string, string> {
 8044:  5393:  2760:  213: 127:   return customHeaders.value
 8045:  5394:  2761:  214: 128:     .filter(h => h.enabled && h.key.trim() !== '')
 8046:  5395:  2762:  215: 129:     .reduce((acc, h) => ({ ...acc, [h.key]: h.value }), {})
 8047:  5396:  2763:  216: 130: }
 8048:  5397:  2764:  217: 131: 
 8049:  5398:  2765:  218: 132: async function copyToClipboard(text: string) {
 8050:  5399:  2766:  219: 133:   try {
 8051:  5400:  2767:  220: 134:     await navigator.clipboard.writeText(text)
 8052:  5401:  2768:  221: 135:     // Show success message (you can implement a toast notification here)
 8053:  5402:  2769:  222: 136:   } catch (err) {
 8054:  5403:  2770:  223: 137:     // Show error message
 8055:  5404:  2771:  224: 138:   }
 8056:  5405:  2772:  225: 139: }
 8057:  5406:  2773:  226: 140: 
 8058:  5407:  2774:  227: 141: function saveAsJson(data: any, filename: string) {
 8059:  5408:  2775:  228: 142:   const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' })
 8060:  5409:  2776:  229: 143:   const url = URL.createObjectURL(blob)
 8061:  5410:  2777:  230: 144:   const link = document.createElement('a')
 8062:  5411:  2778:  231: 145:   link.href = url
 8063:  5412:  2779:  232: 146:   link.download = filename
 8064:  5413:  2780:  233: 147:   document.body.appendChild(link)
 8065:  5414:  2781:  234: 148:   link.click()
 8066:  5415:  2782:  235: 149:   document.body.removeChild(link)
 8067:  5416:  2783:  236: 150:   URL.revokeObjectURL(url)
 8068:  5417:  2784:  237: 151: }
 8069:  5418:  2785:  238: 152: 
 8070:  5419:  2786:  239: 153: function addToHistory(entry: Omit<HistoryEntry, 'id'>) {
 8071:  5420:  2787:  240: 154:   const newEntry: HistoryEntry = {
 8072:  5421:  2788:  241: 155:     ...entry,
 8073:  5422:  2789:  242: 156:     id: crypto.randomUUID()
 8074:  5423:  2790:  243: 157:   }
 8075:  5424:  2791:  244: 158:   history.value.unshift(newEntry)
 8076:  5425:  2792:  245: 159:   if (history.value.length > 50) { // Keep last 50 entries
 8077:  5426:  2793:  246: 160:     history.value.pop()
 8078:  5427:  2794:  247: 161:   }
 8079:  5428:  2795:  248: 162:   localStorage.setItem('api-explorer-history', JSON.stringify(history.value))
 8080:  5429:  2796:  249: 163: }
 8081:  5430:  2797:  250: 164: 
 8082:  5431:  2798:  251: 165: async function replayRequest(historyEntry: HistoryEntry) {
 8083:  5432:  2799:  252: 166:   paramValues.value = { ...historyEntry.params }
 8084:  5433:  2800:  253: 167:   customHeaders.value = [...historyEntry.headers]
 8085:  5434:  2801:  254: 168:   const endpoint = endpoints.find(e => e.path === historyEntry.endpoint)
 8086:  5435:  2802:  255: 169:   if (endpoint) {
 8087:  5436:  2803:  256: 170:     selectedEndpoint.value = endpoint
 8088:  5437:  2804:  257: 171:     await tryEndpoint(endpoint)
 8089:  5438:  2805:  258: 172:   }
 8090:  5439:  2806:  259: 173: }
 8091:  5440:  2807:  260: 174: 
 8092:  5441:  2808:  261: 175: async function tryEndpoint(endpoint: ApiEndpoint) {
 8093:  5442:  2809:  262: 176:   responseState.value = {
 8094:  5443:  2810:  263: 177:     loading: true,
 8095:  5444:  2811:  264: 178:     data: null,
 8096:  5445:  2812:  265: 179:     error: null,
 8097:  5446:  2813:  266: 180:     headers: {},
 8098:  5447:  2814:  267: 181:     status: 0,
 8099:  5448:  2815:  268: 182:     timestamp: Date.now()
 8100:  5449:  2816:  269: 183:   }
 8101:  5450:  2817:  270: 184: 
 8102:  5451:  2818:  271: 185:   try {
 8103:  5452:  2819:  272: 186:     const url = new URL(`${BASE_URL}${endpoint.path}`)
 8104:  5453:  2820:  273: 187:     if (endpoint.params) {
 8105:  5454:  2821:  274: 188:       Object.entries(paramValues.value).forEach(([key, value]) => {
 8106:  5455:  2822:  275: 189:         if (value !== '') {
 8107:  5456:  2823:  276: 190:           url.searchParams.append(key, value.toString())
 8108:  5457:  2824:  277: 191:         }
 8109:  5458:  2825:  278: 192:       })
 8110:  5459:  2826:  279: 193:     }
 8111:  5460:  2827:  280: 194: 
 8112:  5461:  2828:  281: 195:     const headers = getEnabledHeaders()
 8113:  5462:  2829:  282: 196:     const response = await fetch(url.toString(), {
 8114:  5463:  2830:  283: 197:       method: endpoint.method,
 8115:  5464:  2831:  284: 198:       headers
 8116:  5465:  2832:  285: 199:     })
 8117:  5466:  2833:  286: 200: 
 8118:  5467:  2834:  287: 201:     const responseHeaders: Record<string, string> = {}
 8119:  5468:  2835:  288: 202:     response.headers.forEach((value, key) => {
 8120:  5469:  2836:  289: 203:       responseHeaders[key] = value
 8121:  5470:  2837:  290: 204:     })
 8122:  5471:  2838:  291: 205: 
 8123:  5472:  2839:  292: 206:     const data = await response.json()
 8124:  5473:  2840:  293: 207: 
 8125:  5474:  2841:  294: 208:     if (!response.ok) {
 8126:  5475:  2842:  295: 209:       throw new Error(data.error || 'An error occurred')
 8127:  5476:  2843:  296: 210:     }
 8128:  5477:  2844:  297: 211: 
 8129:  5478:  2845:  298: 212:     responseState.value = {
 8130:  5479:  2846:  299: 213:       loading: false,
 8131:  5480:  2847:  300: 214:       data,
 8132:  5481:  2848:  301: 215:       error: null,
 8133:  5482:  2849:  302: 216:       headers: responseHeaders,
 8134:  5483:  2850:  303: 217:       status: response.status,
 8135:  5484:  2851:  304: 218:       timestamp: Date.now()
 8136:  5485:  2852:  305: 219:     }
 8137:  5486:  2853:  306: 220: 
 8138:  5487:  2854:  307: 221:     addToHistory({
 8139:  5488:  2855:  308: 222:       endpoint: endpoint.path,
 8140:  5489:  2856:  309: 223:       method: endpoint.method,
 8141:  5490:  2857:  310: 224:       params: { ...paramValues.value },
 8142:  5491:  2858:  311: 225:       headers: [...customHeaders.value],
 8143:  5492:  2859:  312: 226:       timestamp: Date.now(),
 8144:  5493:  2860:  313: 227:       status: response.status,
 8145:  5494:  2861:  314: 228:       success: true
 8146:  5495:  2862:  315: 229:     })
 8147:  5496:  2863:  316: 230: 
 8148:  5497:  2864:  317: 231:   } catch (error) {
 8149:  5498:  2865:  318: 232:     responseState.value = {
 8150:  5499:  2866:  319: 233:       ...responseState.value,
 8151:  5500:  2867:  320: 234:       loading: false,
 8152:  5501:  2868:  321: 235:       error: error instanceof Error ? error.message : 'An error occurred'
 8153:  5502:  2869:  322: 236:     }
 8154:  5503:  2870:  323: 237: 
 8155:  5504:  2871:  324: 238:     addToHistory({
 8156:  5505:  2872:  325: 239:       endpoint: endpoint.path,
 8157:  5506:  2873:  326: 240:       method: endpoint.method,
 8158:  5507:  2874:  327: 241:       params: { ...paramValues.value },
 8159:  5508:  2875:  328: 242:       headers: [...customHeaders.value],
 8160:  5509:  2876:  329: 243:       timestamp: Date.now(),
 8161:  5510:  2877:  330: 244:       status: responseState.value.status,
 8162:  5511:  2878:  331: 245:       success: false
 8163:  5512:  2879:  332: 246:     })
 8164:  5513:  2880:  333: 247:   }
 8165:  5514:  2881:  334: 248: }
 8166:  5515:  2882:  335: 249: 
 8167:  5516:  2883:  336: 250: // Watch for endpoint changes
 8168:  5517:  2884:  337: 251: watch(selectedEndpoint, (newEndpoint) => {
 8169:  5518:  2885:  338: 252:   initParamValues(newEndpoint)
 8170:  5519:  2886:  339: 253:   responseState.value = {
 8171:  5520:  2887:  340: 254:     loading: false,
 8172:  5521:  2888:  341: 255:     data: null,
 8173:  5522:  2889:  342: 256:     error: null,
 8174:  5523:  2890:  343: 257:     headers: {},
 8175:  5524:  2891:  344: 258:     status: 0,
 8176:  5525:  2892:  345: 259:     timestamp: 0
 8177:  5526:  2893:  346: 260:   }
 8178:  5527:  2894:  347: 261: })
 8179:  5528:  2895:  348: 262: </script>
 8180:  5529:  2896:  349: 263: 
 8181:  5530:  2897:  350: 264: <template>
 8182:  5531:  2898:  351: 265:   <div class="api-explorer">
 8183:  5532:  2899:  352: 266:     <div class="sidebar">
 8184:  5533:  2900:  353: 267:       <div
 8185:  5534:  2901:  354: 268:         v-for="endpoint in endpoints"
 8186:  5535:  2902:  355: 269:         :key="endpoint.path"
 8187:  5536:  2903:  356: 270:         class="endpoint-item"
 8188:  5537:  2904:  357: 271:         :class="{ active: endpoint === selectedEndpoint }"
 8189:  5538:  2905:  358: 272:         @click="selectedEndpoint = endpoint"
 8190:  5539:  2906:  359: 273:       >
 8191:  5540:  2907:  360: 274:         <span class="method" :style="{ color: methodColor }">
 8192:  5541:  2908:  361: 275:           {{ endpoint.method }}
 8193:  5542:  2909:  362: 276:         </span>
 8194:  5543:  2910:  363: 277:         <span class="name">{{ endpoint.name }}</span>
 8195:  5544:  2911:  364: 278:       </div>
 8196:  5545:  2912:  365: 279: 
 8197:  5546:  2913:  366: 280:       <!-- History Toggle -->
 8198:  5547:  2914:  367: 281:       <div class="history-toggle" @click="showHistory = !showHistory">
 8199:  5548:  2915:  368: 282:         <span>History</span>
 8200:  5549:  2916:  369: 283:         <span class="toggle-icon">{{ showHistory ? '▼' : '▶' }}</span>
 8201:  5550:  2917:  370: 284:       </div>
 8202:  5551:  2918:  371: 285: 
 8203:  5552:  2919:  372: 286:       <!-- History Panel -->
 8204:  5553:  2920:  373: 287:       <div v-if="showHistory" class="history-panel">
 8205:  5554:  2921:  374: 288:         <div
 8206:  5555:  2922:  375: 289:           v-for="entry in history"
 8207:  5556:  2923:  376: 290:           :key="entry.id"
 8208:  5557:  2924:  377: 291:           class="history-entry"
 8209:  5558:  2925:  378: 292:           :class="{ 'history-success': entry.success }"
 8210:  5559:  2926:  379: 293:           @click="replayRequest(entry)"
 8211:  5560:  2927:  380: 294:         >
 8212:  5561:  2928:  381: 295:           <div class="history-entry-header">
 8213:  5562:  2929:  382: 296:             <span class="history-method">{{ entry.method }}</span>
 8214:  5563:  2930:  383: 297:             <span class="history-status">{{ entry.status }}</span>
 8215:  5564:  2931:  384: 298:           </div>
 8216:  5565:  2932:  385: 299:           <div class="history-endpoint">{{ entry.endpoint }}</div>
 8217:  5566:  2933:  386: 300:           <div class="history-timestamp">
 8218:  5567:  2934:  387: 301:             {{ formattedDate(entry.timestamp) }}
 8219:  5568:  2935:  388: 302:           </div>
 8220:  5569:  2936:  389: 303:         </div>
 8221:  5570:  2937:  390: 304:       </div>
 8222:  5571:  2938:  391: 305:     </div>
 8223:  5572:  2939:  392: 306: 
 8224:  5573:  2940:  393: 307:     <div class="content">
 8225:  5574:  2941:  394: 308:       <div class="endpoint-header">
 8226:  5575:  2942:  395: 309:         <h3>{{ selectedEndpoint.name }}</h3>
 8227:  5576:  2943:  396: 310:         <div class="endpoint-path">
 8228:  5577:  2944:  397: 311:           <span class="method" :style="{ color: methodColor }">
 8229:  5578:  2945:  398: 312:             {{ selectedEndpoint.method }}
 8230:  5579:  2946:  399: 313:           </span>
 8231:  5580:  2947:  400: 314:           <code>{{ selectedEndpoint.path }}</code>
 8232:  5581:  2948:  401: 315:         </div>
 8233:  5582:  2949:  402: 316:       </div>
 8234:  5583:  2950:  403: 317: 
 8235:  5584:  2951:  404: 318:       <div class="description">
 8236:  5585:  2952:  405: 319:         {{ selectedEndpoint.description }}
 8237:  5586:  2953:  406: 320:       </div>
 8238:  5587:  2954:  407: 321: 
 8239:  5588:  2955:  408: 322:       <!-- Headers Section -->
 8240:  5589:  2956:  409: 323:       <div class="headers-section">
 8241:  5590:  2957:  410: 324:         <div class="section-header" @click="showHeaders = !showHeaders">
 8242:  5591:  2958:  411: 325:           <h4>Headers</h4>
 8243:  5592:  2959:  412: 326:           <span class="toggle-icon">{{ showHeaders ? '▼' : '▶' }}</span>
 8244:  5593:  2960:  413: 327:         </div>
 8245:  5594:  2961:  414: 328:         <div v-if="showHeaders" class="headers-content">
 8246:  5595:  2962:  415: 329:           <div
 8247:  5596:  2963:  416: 330:             v-for="(header, index) in customHeaders"
 8248:  5597:  2964:  417: 331:             :key="index"
 8249:  5598:  2965:  418: 332:             class="header-input"
 8250:  5599:  2966:  419: 333:           >
 8251:  5600:  2967:  420: 334:             <input
 8252:  5601:  2968:  421: 335:               v-model="header.key"
 8253:  5602:  2969:  422: 336:               placeholder="Header name"
 8254:  5603:  2970:  423: 337:               class="header-key"
 8255:  5604:  2971:  424: 338:             />
 8256:  5605:  2972:  425: 339:             <input
 8257:  5606:  2973:  426: 340:               v-model="header.value"
 8258:  5607:  2974:  427: 341:               placeholder="Header value"
 8259:  5608:  2975:  428: 342:               class="header-value"
 8260:  5609:  2976:  429: 343:             />
 8261:  5610:  2977:  430: 344:             <label class="header-enabled">
 8262:  5611:  2978:  431: 345:               <input type="checkbox" v-model="header.enabled" />
 8263:  5612:  2979:  432: 346:               Enable
 8264:  5613:  2980:  433: 347:             </label>
 8265:  5614:  2981:  434: 348:             <button
 8266:  5615:  2982:  435: 349:               class="remove-header"
 8267:  5616:  2983:  436: 350:               @click="removeHeader(index)"
 8268:  5617:  2984:  437: 351:             >
 8269:  5618:  2985:  438: 352:               ✕
 8270:  5619:  2986:  439: 353:             </button>
 8271:  5620:  2987:  440: 354:           </div>
 8272:  5621:  2988:  441: 355:           <button class="add-header" @click="addHeader">
 8273:  5622:  2989:  442: 356:             Add Header
 8274:  5623:  2990:  443: 357:           </button>
 8275:  5624:  2991:  444: 358:         </div>
 8276:  5625:  2992:  445: 359:       </div>
 8277:  5626:  2993:  446: 360: 
 8278:  5627:  2994:  447: 361:       <!-- Parameters Section -->
 8279:  5628:  2995:  448: 362:       <template v-if="selectedEndpoint.params?.length">
 8280:  5629:  2996:  449: 363:         <h4>Parameters</h4>
 8281:  5630:  2997:  450: 364:         <div class="params-form">
 8282:  5631:  2998:  451: 365:           <div
 8283:  5632:  2999:  452: 366:             v-for="param in selectedEndpoint.params"
 8284:  5633:  3000:  453: 367:             :key="param.name"
 8285:  5634:  3001:  454: 368:             class="param-input"
 8286:  5635:  3002:  455: 369:           >
 8287:  5636:  3003:  456: 370:             <label :for="param.name">
 8288:  5637:  3004:  457: 371:               {{ param.name }}
 8289:  5638:  3005:  458: 372:               <span v-if="param.required" class="required">*</span>
 8290:  5639:  3006:  459: 373:             </label>
 8291:  5640:  3007:  460: 374:             <input
 8292:  5641:  3008:  461: 375:               :id="param.name"
 8293:  5642:  3009:  462: 376:               v-model="paramValues[param.name]"
 8294:  5643:  3010:  463: 377:               :type="param.type === 'number' ? 'number' : 'text'"
 8295:  5644:  3011:  464: 378:               :placeholder="param.description"
 8296:  5645:  3012:  465: 379:               :required="param.required"
 8297:  5646:  3013:  466: 380:             />
 8298:  5647:  3014:  467: 381:           </div>
 8299:  5648:  3015:  468: 382:           <button
 8300:  5649:  3016:  469: 383:             class="try-button"
 8301:  5650:  3017:  470: 384:             @click="tryEndpoint(selectedEndpoint)"
 8302:  5651:  3018:  471: 385:             :disabled="responseState.loading"
 8303:  5652:  3019:  472: 386:           >
 8304:  5653:  3020:  473: 387:             {{ responseState.loading ? 'Loading...' : 'Try it' }}
 8305:  5654:  3021:  474: 388:           </button>
 8306:  5655:  3022:  475: 389:         </div>
 8307:  5656:  3023:  476: 390:       </template>
 8308:  5657:  3024:  477: 391: 
 8309:  5658:  3025:  478: 392:       <!-- Live Response Section -->
 8310:  5659:  3026:  479: 393:       <div v-if="responseState.data || responseState.error" class="live-response">
 8311:  5660:  3027:  480: 394:         <div class="response-header">
 8312:  5661:  3028:  481: 395:           <h4>Response</h4>
 8313:  5662:  3029:  482: 396:           <div class="response-actions">
 8314:  5663:  3030:  483: 397:             <button
 8315:  5664:  3031:  484: 398:               class="action-button"
 8316:  5665:  3032:  485: 399:               @click="copyToClipboard(JSON.stringify(responseState.data, null, 2))"
 8317:  5666:  3033:  486: 400:               v-if="responseState.data"
 8318:  5667:  3034:  487: 401:             >
 8319:  5668:  3035:  488: 402:               Copy
 8320:  5669:  3036:  489: 403:             </button>
 8321:  5670:  3037:  490: 404:             <button
 8322:  5671:  3038:  491: 405:               class="action-button"
 8323:  5672:  3039:  492: 406:               @click="saveAsJson(responseState.data, `response-${Date.now()}.json`)"
 8324:  5673:  3040:  493: 407:               v-if="responseState.data"
 8325:  5674:  3041:  494: 408:             >
 8326:  5675:  3042:  495: 409:               Save
 8327:  5676:  3043:  496: 410:             </button>
 8328:  5677:  3044:  497: 411:           </div>
 8329:  5678:  3045:  498: 412:         </div>
 8330:  5679:  3046:  499: 413: 
 8331:  5680:  3047:  500: 414:         <!-- Response Status and Headers -->
 8332:  5681:  3048:  501: 415:         <div v-if="responseState.status" class="response-status">
 8333:  5682:  3049:  502: 416:           Status: {{ responseState.status }}
 8334:  5683:  3050:  503: 417:         </div>
 8335:  5684:  3051:  504: 418:        
 8336:  5685:  3052:  505: 419:         <div v-if="Object.keys(responseState.headers).length" class="response-headers">
 8337:  5686:  3053:  506: 420:           <div class="section-header" @click="showResponseHeaders = !showResponseHeaders">
 8338:  5687:  3054:  507: 421:             <span>Response Headers</span>
 8339:  5688:  3055:  508: 422:             <span class="toggle-icon">{{ showResponseHeaders ? '▼' : '▶' }}</span>
 8340:  5689:  3056:  509: 423:           </div>
 8341:  5690:  3057:  510: 424:           <div v-if="showResponseHeaders" class="headers-list">
 8342:  5691:  3058:  511: 425:             <div
 8343:  5692:  3059:  512: 426:               v-for="(value, key) in responseState.headers"
 8344:  5693:  3060:  513: 427:               :key="key"
 8345:  5694:  3061:  514: 428:               class="header-item"
 8346:  5695:  3062:  515: 429:             >
 8347:  5696:  3063:  516: 430:               <span class="header-key">{{ key }}:</span>
 8348:  5697:  3064:  517: 431:               <span class="header-value">{{ value }}</span>
 8349:  5698:  3065:  518: 432:             </div>
 8350:  5699:  3066:  519: 433:           </div>
 8351:  5700:  3067:  520: 434:         </div>
 8352:  5701:  3068:  521: 435: 
 8353:  5702:  3069:  522: 436:         <div v-if="responseState.error" class="error-message">
 8354:  5703:  3070:  523: 437:           {{ responseState.error }}
 8355:  5704:  3071:  524: 438:         </div>
 8356:  5705:  3072:  525: 439:         <pre v-else class="response-data">
 8357:  5706:  3073:  526: 440:           <code>{{ JSON.stringify(responseState.data, null, 2) }}</code>
 8358:  5707:  3074:  527: 441:         </pre>
 8359:  5708:  3075:  528: 442:       </div>
 8360:  5709:  3076:  529: 443: 
 8361:  5710:  3077:  530: 444:       <!-- Response Schema Section -->
 8362:  5711:  3078:  531: 445:       <h4>Response Schema</h4>
 8363:  5712:  3079:  532: 446:       <div
 8364:  5713:  3080:  533: 447:         v-for="response in selectedEndpoint.responses"
 8365:  5714:  3081:  534: 448:         :key="response.status"
 8366:  5715:  3082:  535: 449:         class="response-section"
 8367:  5716:  3083:  536: 450:       >
 8368:  5717:  3084:  537: 451:         <div class="response-header">
 8369:  5718:  3085:  538: 452:           <span
 8370:  5719:  3086:  539: 453:             class="status"
 8371:  5720:  3087:  540: 454:             :class="response.status < 400 ? 'success' : 'error'"
 8372:  5721:  3088:  541: 455:           >
 8373:  5722:  3089:  542: 456:             {{ response.status }}
 8374:  5723:  3090:  543: 457:           </span>
 8375:  5724:  3091:  544: 458:           <span class="description">{{ response.description }}</span>
 8376:  5725:  3092:  545: 459:         </div>
 8377:  5726:  3093:  546: 460:         <pre class="schema"><code>{{ response.schema }}</code></pre>
 8378:  5727:  3094:  547: 461:       </div>
 8379:  5728:  3095:  548: 462:     </div>
 8380:  5729:  3096:  549: 463:   </div>
 8381:  5730:  3097:  550: 464: </template>
 8382:  5731:  3098:  551: 465: 
 8383:  5732:  3099:  552: 466: <style scoped>
 8384:  5733:  3100:  553: 467: .api-explorer {
 8385:  5734:  3101:  554: 468:   display: grid;
 8386:  5735:  3102:  555: 469:   grid-template-columns: 300px 1fr;
 8387:  5736:  3103:  556: 470:   gap: 20px;
 8388:  5737:  3104:  557: 471:   background: var(--custom-api-bg);
 8389:  5738:  3105:  558: 472:   border-radius: 8px;
 8390:  5739:  3106:  559: 473:   overflow: hidden;
 8391:  5740:  3107:  560: 474:   border: 1px solid var(--vp-c-divider);
 8392:  5741:  3108:  561: 475:   height: 800px;
 8393:  5742:  3109:  562: 476: }
 8394:  5743:  3110:  563: 477: 
 8395:  5744:  3111:  564: 478: .sidebar {
 8396:  5745:  3112:  565: 479:   background: var(--vp-c-bg-soft);
 8397:  5746:  3113:  566: 480:   padding: 1rem;
 8398:  5747:  3114:  567: 481:   border-right: 1px solid var(--vp-c-divider);
 8399:  5748:  3115:  568: 482:   overflow-y: auto;
 8400:  5749:  3116:  569: 483:   display: flex;
 8401:  5750:  3117:  570: 484:   flex-direction: column;
 8402:  5751:  3118:  571: 485: }
 8403:  5752:  3119:  572: 486: 
 8404:  5753:  3120:  573: 487: .history-toggle {
 8405:  5754:  3121:  574: 488:   margin-top: auto;
 8406:  5755:  3122:  575: 489:   padding: 0.75rem;
 8407:  5756:  3123:  576: 490:   cursor: pointer;
 8408:  5757:  3124:  577: 491:   display: flex;
 8409:  5758:  3125:  578: 492:   justify-content: space-between;
 8410:  5759:  3126:  579: 493:   align-items: center;
 8411:  5760:  3127:  580: 494:   background: var(--vp-c-bg-mute);
 8412:  5761:  3128:  581: 495:   border-radius: 6px;
 8413:  5762:  3129:  582: 496:   margin-top: 1rem;
 8414:  5763:  3130:  583: 497: }
 8415:  5764:  3131:  584: 498: 
 8416:  5765:  3132:  585: 499: .history-panel {
 8417:  5766:  3133:  586: 500:   margin-top: 0.5rem;
 8418:  5767:  3134:  587: 501:   border-top: 1px solid var(--vp-c-divider);
 8419:  5768:  3135:  588: 502:   padding-top: 0.5rem;
 8420:  5769:  3136:  589: 503: }
 8421:  5770:  3137:  590: 504: 
 8422:  5771:  3138:  591: 505: .history-entry {
 8423:  5772:  3139:  592: 506:   padding: 0.5rem;
 8424:  5773:  3140:  593: 507:   border-radius: 4px;
 8425:  5774:  3141:  594: 508:   margin-bottom: 0.5rem;
 8426:  5775:  3142:  595: 509:   cursor: pointer;
 8427:  5776:  3143:  596: 510:   background: var(--vp-c-bg-mute);
 8428:  5777:  3144:  597: 511:   border: 1px solid var(--vp-c-divider);
 8429:  5778:  3145:  598: 512: }
 8430:  5779:  3146:  599: 513: 
 8431:  5780:  3147:  600: 514: .history-entry:hover {
 8432:  5781:  3148:  601: 515:   background: var(--vp-c-bg);
 8433:  5782:  3149:  602: 516: }
 8434:  5783:  3150:  603: 517: 
 8435:  5784:  3151:  604: 518: .history-entry-header {
 8436:  5785:  3152:  605: 519:   display: flex;
 8437:  5786:  3153:  606: 520:   justify-content: space-between;
 8438:  5787:  3154:  607: 521:   margin-bottom: 0.25rem;
 8439:  5788:  3155:  608: 522: }
 8440:  5789:  3156:  609: 523: 
 8441:  5790:  3157:  610: 524: .history-method {
 8442:  5791:  3158:  611: 525:   font-weight: 600;
 8443:  5792:  3159:  612: 526: }
 8444:  5793:  3160:  613: 527: 
 8445:  5794:  3161:  614: 528: .history-status {
 8446:  5795:  3162:  615: 529:   font-size: 0.9em;
 8447:  5796:  3163:  616: 530: }
 8448:  5797:  3164:  617: 531: 
 8449:  5798:  3165:  618: 532: .history-endpoint {
 8450:  5799:  3166:  619: 533:   font-size: 0.9em;
 8451:  5800:  3167:  620: 534:   margin-bottom: 0.25rem;
 8452:  5801:  3168:  621: 535: }
 8453:  5802:  3169:  622: 536: 
 8454:  5803:  3170:  623: 537: .history-timestamp {
 8455:  5804:  3171:  624: 538:   font-size: 0.8em;
 8456:  5805:  3172:  625: 539:   color: var(--vp-c-text-2);
 8457:  5806:  3173:  626: 540: }
 8458:  5807:  3174:  627: 541: 
 8459:  5808:  3175:  628: 542: .headers-section {
 8460:  5809:  3176:  629: 543:   margin: 1rem 0;
 8461:  5810:  3177:  630: 544:   background: var(--vp-c-bg-soft);
 8462:  5811:  3178:  631: 545:   border-radius: 8px;
 8463:  5812:  3179:  632: 546:   overflow: hidden;
 8464:  5813:  3180:  633: 547: }
 8465:  5814:  3181:  634: 548: 
 8466:  5815:  3182:  635: 549: .section-header {
 8467:  5816:  3183:  636: 550:   padding: 0.75rem;
 8468:  5817:  3184:  637: 551:   cursor: pointer;
 8469:  5818:  3185:  638: 552:   display: flex;
 8470:  5819:  3186:  639: 553:   justify-content: space-between;
 8471:  5820:  3187:  640: 554:   align-items: center;
 8472:  5821:  3188:  641: 555:   background: var(--vp-c-bg-mute);
 8473:  5822:  3189:  642: 556: }
 8474:  5823:  3190:  643: 557: 
 8475:  5824:  3191:  644: 558: .headers-content {
 8476:  5825:  3192:  645: 559:   padding: 1rem;
 8477:  5826:  3193:  646: 560: }
 8478:  5827:  3194:  647: 561: 
 8479:  5828:  3195:  648: 562: .header-input {
 8480:  5829:  3196:  649: 563:   display: grid;
 8481:  5830:  3197:  650: 564:   grid-template-columns: 1fr 1fr auto auto;
 8482:  5831:  3198:  651: 565:   gap: 0.5rem;
 8483:  5832:  3199:  652: 566:   margin-bottom: 0.5rem;
 8484:  5833:  3200:  653: 567:   align-items: center;
 8485:  5834:  3201:  654: 568: }
 8486:  5835:  3202:  655: 569: 
 8487:  5836:  3203:  656: 570: .header-key,
 8488:  5837:  3204:  657: 571: .header-value {
 8489:  5838:  3205:  658: 572:   padding: 0.5rem;
 8490:  5839:  3206:  659: 573:   border: 1px solid var(--vp-c-divider);
 8491:  5840:  3207:  660: 574:   border-radius: 4px;
 8492:  5841:  3208:  661: 575:   font-size: 0.9em;
 8493:  5842:  3209:  662: 576: }
 8494:  5843:  3210:  663: 577: 
 8495:  5844:  3211:  664: 578: .header-enabled {
 8496:  5845:  3212:  665: 579:   display: flex;
 8497:  5846:  3213:  666: 580:   align-items: center;
 8498:  5847:  3214:  667: 581:   gap: 0.25rem;
 8499:  5848:  3215:  668: 582: }
 8500:  5849:  3216:  669: 583: 
 8501:  5850:  3217:  670: 584: .remove-header {
 8502:  5851:  3218:  671: 585:   padding: 0.25rem 0.5rem;
 8503:  5852:  3219:  672: 586:   background: var(--vp-c-red);
 8504:  5853:  3220:  673: 587:   color: white;
 8505:  5854:  3221:  674: 588:   border: none;
 8506:  5855:  3222:  675: 589:   border-radius: 4px;
 8507:  5856:  3223:  676: 590:   cursor: pointer;
 8508:  5857:  3224:  677: 591: }
 8509:  5858:  3225:  678: 592: 
 8510:  5859:  3226:  679: 593: .add-header {
 8511:  5860:  3227:  680: 594:   margin-top: 0.5rem;
 8512:  5861:  3228:  681: 595:   padding: 0.5rem;
 8513:  5862:  3229:  682: 596:   background: var(--vp-c-brand);
 8514:  5863:  3230:  683: 597:   color: white;
 8515:  5864:  3231:  684: 598:   border: none;
 8516:  5865:  3232:  685: 599:   border-radius: 4px;
 8517:  5866:  3233:  686: 600:   cursor: pointer;
 8518:  5867:  3234:  687: 601:   width: 100%;
 8519:  5868:  3235:  688: 602: }
 8520:  5869:  3236:  689: 603: 
 8521:  5870:  3237:  690: 604: .response-actions {
 8522:  5871:  3238:  691: 605:   display: flex;
 8523:  5872:  3239:  692: 606:   gap: 0.5rem;
 8524:  5873:  3240:  693: 607: }
 8525:  5874:  3241:  694: 608: 
 8526:  5875:  3242:  695: 609: .action-button {
 8527:  5876:  3243:  696: 610:   padding: 0.25rem 0.75rem;
 8528:  5877:  3244:  697: 611:   background: var(--vp-c-brand);
 8529:  5878:  3245:  698: 612:   color: white;
 8530:  5879:  3246:  699: 613:   border: none;
 8531:  5880:  3247:  700: 614:   border-radius: 4px;
 8532:  5881:  3248:  701: 615:   cursor: pointer;
 8533:  5882:  3249:  702: 616:   font-size: 0.9em;
 8534:  5883:  3250:  703: 617: }
 8535:  5884:  3251:  704: 618: 
 8536:  5885:  3252:  705: 619: .response-headers {
 8537:  5886:  3253:  706: 620:   margin: 1rem 0;
 8538:  5887:  3254:  707: 621:   background: var(--vp-c-bg-soft);
 8539:  5888:  3255:  708: 622:   border-radius: 4px;
 8540:  5889:  3256:  709: 623: }
 8541:  5890:  3257:  710: 624: 
 8542:  5891:  3258:  711: 625: .headers-list {
 8543:  5892:  3259:  712: 626:   padding: 0.75rem;
 8544:  5893:  3260:  713: 627: }
 8545:  5894:  3261:  714: 628: 
 8546:  5895:  3262:  715: 629: .header-item {
 8547:  5896:  3263:  716: 630:   display: flex;
 8548:  5897:  3264:  717: 631:   gap: 0.5rem;
 8549:  5898:  3265:  718: 632:   margin-bottom: 0.25rem;
 8550:  5899:  3266:  719: 633:   font-size: 0.9em;
 8551:  5900:  3267:  720: 634: }
 8552:  5901:  3268:  721: 635: 
 8553:  5902:  3269:  722: 636: .header-key {
 8554:  5903:  3270:  723: 637:   font-weight: 600;
 8555:  5904:  3271:  724: 638: }
 8556:  5905:  3272:  725: 639: 
 8557:  5906:  3273:  726: 640: /* Preserve existing styles and add responsive design */
 8558:  5907:  3274:  727: 641: @media (max-width: 768px) {
 8559:  5908:  3275:  728: 642:   .api-explorer {
 8560:  5909:  3276:  729: 643:     grid-template-columns: 1fr;
 8561:  5910:  3277:  730: 644:   }
 8562:  5911:  3278:  731: 645: 
 8563:  5912:  3279:  732: 646:   .sidebar {
 8564:  5913:  3280:  733: 647:     border-right: none;
 8565:  5914:  3281:  734: 648:     border-bottom: 1px solid var(--vp-c-divider);
 8566:  5915:  3282:  735: 649:   }
 8567:  5916:  3283:  736: 650: 
 8568:  5917:  3284:  737: 651:   .header-input {
 8569:  5918:  3285:  738: 652:     grid-template-columns: 1fr;
 8570:  5919:  3286:  739: 653:   }
 8571:  5920:  3287:  740: 654: }
 8572:  5921:  3288:  741: 655: </style>
 8573:  5922:  3289:  742: </file>
 8574:  5923:  3290:  743: 
 8575:  5924:  3291:  744: <file path=".vitepress/components/ArchitectureDiagram.vue">
 8576:  5925:  3292:  745:   1: <script setup lang="ts">
 8577:  5926:  3293:  746:   2: import { ref, onMounted, watch } from 'vue'
 8578:  5927:  3294:  747:   3: 
 8579:  5928:  3295:  748:   4: interface DiagramNode {
 8580:  5929:  3296:  749:   5:   id: string
 8581:  5930:  3297:  750:   6:   type: 'service' | 'database' | 'function' | 'external'
 8582:  5931:  3298:  751:   7:   label: string
 8583:  5932:  3299:  752:   8:   x: number
 8584:  5933:  3300:  753:   9:   y: number
 8585:  5934:  3301:  754:  10:   width: number
 8586:  5935:  3302:  755:  11:   height: number
 8587:  5936:  3303:  756:  12: }
 8588:  5937:  3304:  757:  13: 
 8589:  5938:  3305:  758:  14: interface DiagramConnection {
 8590:  5939:  3306:  759:  15:   from: string
 8591:  5940:  3307:  760:  16:   to: string
 8592:  5941:  3308:  761:  17:   label?: string
 8593:  5942:  3309:  762:  18:   type: 'sync' | 'async' | 'storage'
 8594:  5943:  3310:  763:  19: }
 8595:  5944:  3311:  764:  20: 
 8596:  5945:  3312:  765:  21: const props = defineProps<{
 8597:  5946:  3313:  766:  22:   zoom?: number
 8598:  5947:  3314:  767:  23:   showLabels?: boolean
 8599:  5948:  3315:  768:  24: }>()
 8600:  5949:  3316:  769:  25: 
 8601:  5950:  3317:  770:  26: const canvas = ref<HTMLCanvasElement | null>(null)
 8602:  5951:  3318:  771:  27: const wrapper = ref<HTMLDivElement | null>(null)
 8603:  5952:  3319:  772:  28: const scale = ref(props.zoom || 1)
 8604:  5953:  3320:  773:  29: 
 8605:  5954:  3321:  774:  30: // Define system components
 8606:  5955:  3322:  775:  31: const nodes: DiagramNode[] = [
 8607:  5956:  3323:  776:  32:   // External Services
 8608:  5957:  3324:  777:  33:   {
 8609:  5958:  3325:  778:  34:     id: 'tcgplayer',
 8610:  5959:  3326:  779:  35:     type: 'external',
 8611:  5960:  3327:  780:  36:     label: 'TCGPlayer API',
 8612:  5961:  3328:  781:  37:     x: 50,
 8613:  5962:  3329:  782:  38:     y: 50,
 8614:  5963:  3330:  783:  39:     width: 120,
 8615:  5964:  3331:  784:  40:     height: 60
 8616:  5965:  3332:  785:  41:   },
 8617:  5966:  3333:  786:  42:   // Firebase Services
 8618:  5967:  3334:  787:  43:   {
 8619:  5968:  3335:  788:  44:     id: 'functions',
 8620:  5969:  3336:  789:  45:     type: 'service',
 8621:  5970:  3337:  790:  46:     label: 'Firebase Functions',
 8622:  5971:  3338:  791:  47:     x: 250,
 8623:  5972:  3339:  792:  48:     y: 150,
 8624:  5973:  3340:  793:  49:     width: 150,
 8625:  5974:  3341:  794:  50:     height: 70
 8626:  5975:  3342:  795:  51:   },
 8627:  5976:  3343:  796:  52:   {
 8628:  5977:  3344:  797:  53:     id: 'firestore',
 8629:  5978:  3345:  798:  54:     type: 'database',
 8630:  5979:  3346:  799:  55:     label: 'Firestore',
 8631:  5980:  3347:  800:  56:     x: 500,
 8632:  5981:  3348:  801:  57:     y: 50,
 8633:  5982:  3349:  802:  58:     width: 120,
 8634:  5983:  3350:  803:  59:     height: 60
 8635:  5984:  3351:  804:  60:   },
 8636:  5985:  3352:  805:  61:   {
 8637:  5986:  3353:  806:  62:     id: 'storage',
 8638:  5987:  3354:  807:  63:     type: 'database',
 8639:  5988:  3355:  808:  64:     label: 'Firebase Storage',
 8640:  5989:  3356:  809:  65:     x: 500,
 8641:  5990:  3357:  810:  66:     y: 250,
 8642:  5991:  3358:  811:  67:     width: 120,
 8643:  5992:  3359:  812:  68:     height: 60
 8644:  5993:  3360:  813:  69:   },
 8645:  5994:  3361:  814:  70:   // Core Functions
 8646:  5995:  3362:  815:  71:   {
 8647:  5996:  3363:  816:  72:     id: 'cardSync',
 8648:  5997:  3364:  817:  73:     type: 'function',
 8649:  5998:  3365:  818:  74:     label: 'Card Sync',
 8650:  5999:  3366:  819:  75:     x: 250,
 8651:  6000:  3367:  820:  76:     y: 50,
 8652:  6001:  3368:  821:  77:     width: 100,
 8653:  6002:  3369:  822:  78:     height: 50
 8654:  6003:  3370:  823:  79:   },
 8655:  6004:  3371:  824:  80:   {
 8656:  6005:  3372:  825:  81:     id: 'priceSync',
 8657:  6006:  3373:  826:  82:     type: 'function',
 8658:  6007:  3374:  827:  83:     label: 'Price Sync',
 8659:  6008:  3375:  828:  84:     x: 250,
 8660:  6009:  3376:  829:  85:     y: 250,
 8661:  6010:  3377:  830:  86:     width: 100,
 8662:  6011:  3378:  831:  87:     height: 50
 8663:  6012:  3379:  832:  88:   },
 8664:  6013:  3380:  833:  89:   {
 8665:  6014:  3381:  834:  90:     id: 'imageProcessor',
 8666:  6015:  3382:  835:  91:     type: 'function',
 8667:  6016:  3383:  836:  92:     label: 'Image Processor',
 8668:  6017:  3384:  837:  93:     x: 250,
 8669:  6018:  3385:  838:  94:     y: 350,
 8670:  6019:  3386:  839:  95:     width: 100,
 8671:  6020:  3387:  840:  96:     height: 50
 8672:  6021:  3388:  841:  97:   }
 8673:  6022:  3389:  842:  98: ]
 8674:  6023:  3390:  843:  99: 
 8675:  6024:  3391:  844: 100: const connections: DiagramConnection[] = [
 8676:  6025:  3392:  845: 101:   // TCGPlayer connections
 8677:  6026:  3393:  846: 102:   {
 8678:  6027:  3394:  847: 103:     from: 'tcgplayer',
 8679:  6028:  3395:  848: 104:     to: 'cardSync',
 8680:  6029:  3396:  849: 105:     label: 'Card Data',
 8681:  6030:  3397:  850: 106:     type: 'sync'
 8682:  6031:  3398:  851: 107:   },
 8683:  6032:  3399:  852: 108:   {
 8684:  6033:  3400:  853: 109:     from: 'tcgplayer',
 8685:  6034:  3401:  854: 110:     to: 'priceSync',
 8686:  6035:  3402:  855: 111:     label: 'Price Data',
 8687:  6036:  3403:  856: 112:     type: 'sync'
 8688:  6037:  3404:  857: 113:   },
 8689:  6038:  3405:  858: 114:   // Function connections
 8690:  6039:  3406:  859: 115:   {
 8691:  6040:  3407:  860: 116:     from: 'cardSync',
 8692:  6041:  3408:  861: 117:     to: 'firestore',
 8693:  6042:  3409:  862: 118:     label: 'Store Cards',
 8694:  6043:  3410:  863: 119:     type: 'storage'
 8695:  6044:  3411:  864: 120:   },
 8696:  6045:  3412:  865: 121:   {
 8697:  6046:  3413:  866: 122:     from: 'priceSync',
 8698:  6047:  3414:  867: 123:     to: 'firestore',
 8699:  6048:  3415:  868: 124:     label: 'Store Prices',
 8700:  6049:  3416:  869: 125:     type: 'storage'
 8701:  6050:  3417:  870: 126:   },
 8702:  6051:  3418:  871: 127:   {
 8703:  6052:  3419:  872: 128:     from: 'imageProcessor',
 8704:  6053:  3420:  873: 129:     to: 'storage',
 8705:  6054:  3421:  874: 130:     label: 'Store Images',
 8706:  6055:  3422:  875: 131:     type: 'storage'
 8707:  6056:  3423:  876: 132:   },
 8708:  6057:  3424:  877: 133:   {
 8709:  6058:  3425:  878: 134:     from: 'cardSync',
 8710:  6059:  3426:  879: 135:     to: 'imageProcessor',
 8711:  6060:  3427:  880: 136:     label: 'Process Images',
 8712:  6061:  3428:  881: 137:     type: 'async'
 8713:  6062:  3429:  882: 138:   }
 8714:  6063:  3430:  883: 139: ]
 8715:  6064:  3431:  884: 140: 
 8716:  6065:  3432:  885: 141: function drawNode(
 8717:  6066:  3433:  886: 142:   ctx: CanvasRenderingContext2D,
 8718:  6067:  3434:  887: 143:   node: DiagramNode
 8719:  6068:  3435:  888: 144: ) {
 8720:  6069:  3436:  889: 145:   const x = node.x * scale.value
 8721:  6070:  3437:  890: 146:   const y = node.y * scale.value
 8722:  6071:  3438:  891: 147:   const width = node.width * scale.value
 8723:  6072:  3439:  892: 148:   const height = node.height * scale.value
 8724:  6073:  3440:  893: 149: 
 8725:  6074:  3441:  894: 150:   ctx.beginPath()
 8726:  6075:  3442:  895: 151:   
 8727:  6076:  3443:  896: 152:   switch (node.type) {
 8728:  6077:  3444:  897: 153:     case 'service':
 8729:  6078:  3445:  898: 154:       ctx.roundRect(x, y, width, height, 10)
 8730:  6079:  3446:  899: 155:       ctx.fillStyle = '#646cff'
 8731:  6080:  3447:  900: 156:       break
 8732:  6081:  3448:  901: 157:     case 'database':
 8733:  6082:  3449:  902: 158:       ctx.ellipse(
 8734:  6083:  3450:  903: 159:         x + width/2,
 8735:  6084:  3451:  904: 160:         y + height/2,
 8736:  6085:  3452:  905: 161:         width/2,
 8737:  6086:  3453:  906: 162:         height/2,
 8738:  6087:  3454:  907: 163:         0,
 8739:  6088:  3455:  908: 164:         0,
 8740:  6089:  3456:  909: 165:         2 * Math.PI
 8741:  6090:  3457:  910: 166:       )
 8742:  6091:  3458:  911: 167:       ctx.fillStyle = '#42b883'
 8743:  6092:  3459:  912: 168:       break
 8744:  6093:  3460:  913: 169:     case 'function':
 8745:  6094:  3461:  914: 170:       ctx.roundRect(x, y, width, height, 5)
 8746:  6095:  3462:  915: 171:       ctx.fillStyle = '#fb923c'
 8747:  6096:  3463:  916: 172:       break
 8748:  6097:  3464:  917: 173:     case 'external':
 8749:  6098:  3465:  918: 174:       ctx.rect(x, y, width, height)
 8750:  6099:  3466:  919: 175:       ctx.fillStyle = '#94a3b8'
 8751:  6100:  3467:  920: 176:       break
 8752:  6101:  3468:  921: 177:   }
 8753:  6102:  3469:  922: 178:   
 8754:  6103:  3470:  923: 179:   ctx.fill()
 8755:  6104:  3471:  924: 180:   ctx.stroke()
 8756:  6105:  3472:  925: 181: 
 8757:  6106:  3473:  926: 182:   // Draw label
 8758:  6107:  3474:  927: 183:   if (props.showLabels !== false) {
 8759:  6108:  3475:  928: 184:     ctx.fillStyle = '#ffffff'
 8760:  6109:  3476:  929: 185:     ctx.font = `${12 * scale.value}px sans-serif`
 8761:  6110:  3477:  930: 186:     ctx.textAlign = 'center'
 8762:  6111:  3478:  931: 187:     ctx.textBaseline = 'middle'
 8763:  6112:  3479:  932: 188:     ctx.fillText(
 8764:  6113:  3480:  933: 189:       node.label,
 8765:  6114:  3481:  934: 190:       x + width/2,
 8766:  6115:  3482:  935: 191:       y + height/2
 8767:  6116:  3483:  936: 192:     )
 8768:  6117:  3484:  937: 193:   }
 8769:  6118:  3485:  938: 194: }
 8770:  6119:  3486:  939: 195: 
 8771:  6120:  3487:  940: 196: function drawConnection(
 8772:  6121:  3488:  941: 197:   ctx: CanvasRenderingContext2D,
 8773:  6122:  3489:  942: 198:   conn: DiagramConnection
 8774:  6123:  3490:  943: 199: ) {
 8775:  6124:  3491:  944: 200:   const fromNode = nodes.find(n => n.id === conn.from)
 8776:  6125:  3492:  945: 201:   const toNode = nodes.find(n => n.id === conn.to)
 8777:  6126:  3493:  946: 202:   
 8778:  6127:  3494:  947: 203:   if (!fromNode || !toNode) return
 8779:  6128:  3495:  948: 204: 
 8780:  6129:  3496:  949: 205:   const start = {
 8781:  6130:  3497:  950: 206:     x: (fromNode.x + fromNode.width/2) * scale.value,
 8782:  6131:  3498:  951: 207:     y: (fromNode.y + fromNode.height/2) * scale.value
 8783:  6132:  3499:  952: 208:   }
 8784:  6133:  3500:  953: 209:   
 8785:  6134:  3501:  954: 210:   const end = {
 8786:  6135:  3502:  955: 211:     x: (toNode.x + toNode.width/2) * scale.value,
 8787:  6136:  3503:  956: 212:     y: (toNode.y + toNode.height/2) * scale.value
 8788:  6137:  3504:  957: 213:   }
 8789:  6138:  3505:  958: 214: 
 8790:  6139:  3506:  959: 215:   ctx.beginPath()
 8791:  6140:  3507:  960: 216:   ctx.moveTo(start.x, start.y)
 8792:  6141:  3508:  961: 217: 
 8793:  6142:  3509:  962: 218:   // Draw different line styles based on connection type
 8794:  6143:  3510:  963: 219:   switch (conn.type) {
 8795:  6144:  3511:  964: 220:     case 'sync':
 8796:  6145:  3512:  965: 221:       ctx.setLineDash([])
 8797:  6146:  3513:  966: 222:       ctx.strokeStyle = '#646cff'
 8798:  6147:  3514:  967: 223:       break
 8799:  6148:  3515:  968: 224:     case 'async':
 8800:  6149:  3516:  969: 225:       ctx.setLineDash([5, 5])
 8801:  6150:  3517:  970: 226:       ctx.strokeStyle = '#fb923c'
 8802:  6151:  3518:  971: 227:       break
 8803:  6152:  3519:  972: 228:     case 'storage':
 8804:  6153:  3520:  973: 229:       ctx.setLineDash([])
 8805:  6154:  3521:  974: 230:       ctx.strokeStyle = '#42b883'
 8806:  6155:  3522:  975: 231:       break
 8807:  6156:  3523:  976: 232:   }
 8808:  6157:  3524:  977: 233: 
 8809:  6158:  3525:  978: 234:   // Draw curved line
 8810:  6159:  3526:  979: 235:   const cp1x = start.x + (end.x - start.x) / 2
 8811:  6160:  3527:  980: 236:   const cp1y = start.y
 8812:  6161:  3528:  981: 237:   const cp2x = cp1x
 8813:  6162:  3529:  982: 238:   const cp2y = end.y
 8814:  6163:  3530:  983: 239:   
 8815:  6164:  3531:  984: 240:   ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, end.x, end.y)
 8816:  6165:  3532:  985: 241:   ctx.stroke()
 8817:  6166:  3533:  986: 242: 
 8818:  6167:  3534:  987: 243:   // Draw arrow
 8819:  6168:  3535:  988: 244:   const angle = Math.atan2(end.y - cp2y, end.x - cp2x)
 8820:  6169:  3536:  989: 245:   const arrowLength = 10 * scale.value
 8821:  6170:  3537:  990: 246:   
 8822:  6171:  3538:  991: 247:   ctx.beginPath()
 8823:  6172:  3539:  992: 248:   ctx.moveTo(end.x, end.y)
 8824:  6173:  3540:  993: 249:   ctx.lineTo(
 8825:  6174:  3541:  994: 250:     end.x - arrowLength * Math.cos(angle - Math.PI/6),
 8826:  6175:  3542:  995: 251:     end.y - arrowLength * Math.sin(angle - Math.PI/6)
 8827:  6176:  3543:  996: 252:   )
 8828:  6177:  3544:  997: 253:   ctx.moveTo(end.x, end.y)
 8829:  6178:  3545:  998: 254:   ctx.lineTo(
 8830:  6179:  3546:  999: 255:     end.x - arrowLength * Math.cos(angle + Math.PI/6),
 8831:  6180:  3547: 1000: 256:     end.y - arrowLength * Math.sin(angle + Math.PI/6)
 8832:  6181:  3548: 1001: 257:   )
 8833:  6182:  3549: 1002: 258:   ctx.stroke()
 8834:  6183:  3550: 1003: 259: 
 8835:  6184:  3551: 1004: 260:   // Draw label if exists
 8836:  6185:  3552: 1005: 261:   if (conn.label && props.showLabels !== false) {
 8837:  6186:  3553: 1006: 262:     const midX = (start.x + end.x) / 2
 8838:  6187:  3554: 1007: 263:     const midY = (start.y + end.y) / 2 - 10 * scale.value
 8839:  6188:  3555: 1008: 264:     
 8840:  6189:  3556: 1009: 265:     ctx.font = `${11 * scale.value}px sans-serif`
 8841:  6190:  3557: 1010: 266:     ctx.fillStyle = '#64748b'
 8842:  6191:  3558: 1011: 267:     ctx.textAlign = 'center'
 8843:  6192:  3559: 1012: 268:     ctx.textBaseline = 'bottom'
 8844:  6193:  3560: 1013: 269:     ctx.fillText(conn.label, midX, midY)
 8845:  6194:  3561: 1014: 270:   }
 8846:  6195:  3562: 1015: 271: }
 8847:  6196:  3563: 1016: 272: 
 8848:  6197:  3564: 1017: 273: function draw() {
 8849:  6198:  3565: 1018: 274:   if (!canvas.value) return
 8850:  6199:  3566: 1019: 275:   
 8851:  6200:  3567: 1020: 276:   const ctx = canvas.value.getContext('2d')
 8852:  6201:  3568: 1021: 277:   if (!ctx) return
 8853:  6202:  3569: 1022: 278: 
 8854:  6203:  3570: 1023: 279:   // Clear canvas
 8855:  6204:  3571: 1024: 280:   ctx.clearRect(0, 0, canvas.value.width, canvas.value.height)
 8856:  6205:  3572: 1025: 281: 
 8857:  6206:  3573: 1026: 282:   // Set line styles
 8858:  6207:  3574: 1027: 283:   ctx.lineWidth = 2 * scale.value
 8859:  6208:  3575: 1028: 284:   ctx.strokeStyle = '#64748b'
 8860:  6209:  3576: 1029: 285: 
 8861:  6210:  3577: 1030: 286:   // Draw connections first (behind nodes)
 8862:  6211:  3578: 1031: 287:   connections.forEach(conn => drawConnection(ctx, conn))
 8863:  6212:  3579: 1032: 288: 
 8864:  6213:  3580: 1033: 289:   // Draw nodes
 8865:  6214:  3581: 1034: 290:   nodes.forEach(node => drawNode(ctx, node))
 8866:  6215:  3582: 1035: 291: }
 8867:  6216:  3583: 1036: 292: 
 8868:  6217:  3584: 1037: 293: function updateCanvasSize() {
 8869:  6218:  3585: 1038: 294:   if (!canvas.value || !wrapper.value) return
 8870:  6219:  3586: 1039: 295:   
 8871:  6220:  3587: 1040: 296:   const rect = wrapper.value.getBoundingClientRect()
 8872:  6221:  3588: 1041: 297:   canvas.value.width = rect.width
 8873:  6222:  3589: 1042: 298:   canvas.value.height = rect.height
 8874:  6223:  3590: 1043: 299:   draw()
 8875:  6224:  3591: 1044: 300: }
 8876:  6225:  3592: 1045: 301: 
 8877:  6226:  3593: 1046: 302: // Resize handling
 8878:  6227:  3594: 1047: 303: let resizeObserver: ResizeObserver
 8879:  6228:  3595: 1048: 304: onMounted(() => {
 8880:  6229:  3596: 1049: 305:   if (wrapper.value) {
 8881:  6230:  3597: 1050: 306:     resizeObserver = new ResizeObserver(updateCanvasSize)
 8882:  6231:  3598: 1051: 307:     resizeObserver.observe(wrapper.value)
 8883:  6232:  3599: 1052: 308:   }
 8884:  6233:  3600: 1053: 309:   updateCanvasSize()
 8885:  6234:  3601: 1054: 310: })
 8886:  6235:  3602: 1055: 311: 
 8887:  6236:  3603: 1056: 312: // Watch for prop changes
 8888:  6237:  3604: 1057: 313: watch(() => props.zoom, () => {
 8889:  6238:  3605: 1058: 314:   scale.value = props.zoom || 1
 8890:  6239:  3606: 1059: 315:   draw()
 8891:  6240:  3607: 1060: 316: })
 8892:  6241:  3608: 1061: 317: </script>
 8893:  6242:  3609: 1062: 318: 
 8894:  6243:  3610: 1063: 319: <template>
 8895:  6244:  3611: 1064: 320:   <div ref="wrapper" class="architecture-diagram">
 8896:  6245:  3612: 1065: 321:     <canvas ref="canvas"></canvas>
 8897:  6246:  3613: 1066: 322:     <div class="legend">
 8898:  6247:  3614: 1067: 323:       <div class="legend-item">
 8899:  6248:  3615: 1068: 324:         <div class="color-box service"></div>
 8900:  6249:  3616: 1069: 325:         <span>Firebase Services</span>
 8901:  6250:  3617: 1070: 326:       </div>
 8902:  6251:  3618: 1071: 327:       <div class="legend-item">
 8903:  6252:  3619: 1072: 328:         <div class="color-box database"></div>
 8904:  6253:  3620: 1073: 329:         <span>Databases</span>
 8905:  6254:  3621: 1074: 330:       </div>
 8906:  6255:  3622: 1075: 331:       <div class="legend-item">
 8907:  6256:  3623: 1076: 332:         <div class="color-box function"></div>
 8908:  6257:  3624: 1077: 333:         <span>Functions</span>
 8909:  6258:  3625: 1078: 334:       </div>
 8910:  6259:  3626: 1079: 335:       <div class="legend-item">
 8911:  6260:  3627: 1080: 336:         <div class="color-box external"></div>
 8912:  6261:  3628: 1081: 337:         <span>External Services</span>
 8913:  6262:  3629: 1082: 338:       </div>
 8914:  6263:  3630: 1083: 339:     </div>
 8915:  6264:  3631: 1084: 340:   </div>
 8916:  6265:  3632: 1085: 341: </template>
 8917:  6266:  3633: 1086: 342: 
 8918:  6267:  3634: 1087: 343: <style scoped>
 8919:  6268:  3635: 1088: 344: .architecture-diagram {
 8920:  6269:  3636: 1089: 345:   position: relative;
 8921:  6270:  3637: 1090: 346:   width: 100%;
 8922:  6271:  3638: 1091: 347:   height: 500px;
 8923:  6272:  3639: 1092: 348:   background: var(--custom-diagram-bg);
 8924:  6273:  3640: 1093: 349:   border-radius: 8px;
 8925:  6274:  3641: 1094: 350:   overflow: hidden;
 8926:  6275:  3642: 1095: 351: }
 8927:  6276:  3643: 1096: 352: 
 8928:  6277:  3644: 1097: 353: canvas {
 8929:  6278:  3645: 1098: 354:   width: 100%;
 8930:  6279:  3646: 1099: 355:   height: 100%;
 8931:  6280:  3647: 1100: 356: }
 8932:  6281:  3648: 1101: 357: 
 8933:  6282:  3649: 1102: 358: .legend {
 8934:  6283:  3650: 1103: 359:   position: absolute;
 8935:  6284:  3651: 1104: 360:   bottom: 20px;
 8936:  6285:  3652: 1105: 361:   right: 20px;
 8937:  6286:  3653: 1106: 362:   background: rgba(255, 255, 255, 0.9);
 8938:  6287:  3654: 1107: 363:   padding: 10px;
 8939:  6288:  3655: 1108: 364:   border-radius: 6px;
 8940:  6289:  3656: 1109: 365:   box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
 8941:  6290:  3657: 1110: 366: }
 8942:  6291:  3658: 1111: 367: 
 8943:  6292:  3659: 1112: 368: .legend-item {
 8944:  6293:  3660: 1113: 369:   display: flex;
 8945:  6294:  3661: 1114: 370:   align-items: center;
 8946:  6295:  3662: 1115: 371:   margin: 5px 0;
 8947:  6296:  3663: 1116: 372: }
 8948:  6297:  3664: 1117: 373: 
 8949:  6298:  3665: 1118: 374: .color-box {
 8950:  6299:  3666: 1119: 375:   width: 16px;
 8951:  6300:  3667: 1120: 376:   height: 16px;
 8952:  6301:  3668: 1121: 377:   margin-right: 8px;
 8953:  6302:  3669: 1122: 378:   border-radius: 3px;
 8954:  6303:  3670: 1123: 379: }
 8955:  6304:  3671: 1124: 380: 
 8956:  6305:  3672: 1125: 381: .color-box.service {
 8957:  6306:  3673: 1126: 382:   background: #646cff;
 8958:  6307:  3674: 1127: 383: }
 8959:  6308:  3675: 1128: 384: 
 8960:  6309:  3676: 1129: 385: .color-box.database {
 8961:  6310:  3677: 1130: 386:   background: #42b883;
 8962:  6311:  3678: 1131: 387: }
 8963:  6312:  3679: 1132: 388: 
 8964:  6313:  3680: 1133: 389: .color-box.function {
 8965:  6314:  3681: 1134: 390:   background: #fb923c;
 8966:  6315:  3682: 1135: 391: }
 8967:  6316:  3683: 1136: 392: 
 8968:  6317:  3684: 1137: 393: .color-box.external {
 8969:  6318:  3685: 1138: 394:   background: #94a3b8;
 8970:  6319:  3686: 1139: 395: }
 8971:  6320:  3687: 1140: 396: 
 8972:  6321:  3688: 1141: 397: /* Dark mode adjustments */
 8973:  6322:  3689: 1142: 398: :deep(.dark) .legend {
 8974:  6323:  3690: 1143: 399:   background: rgba(0, 0, 0, 0.8);
 8975:  6324:  3691: 1144: 400: }
 8976:  6325:  3692: 1145: 401: </style>
 8977:  6326:  3693: 1146: </file>
 8978:  6327:  3694: 1147: 
 8979:  6328:  3695: 1148: <file path=".vitepress/components/FileTree.vue">
 8980:  6329:  3696: 1149:   1: <script setup lang="ts">
 8981:  6330:  3697: 1150:   2: import { ref, computed, onMounted } from 'vue'
 8982:  6331:  3698: 1151:   3: 
 8983:  6332:  3699: 1152:   4: interface TreeNode {
 8984:  6333:  3700: 1153:   5:   name: string
 8985:  6334:  3701: 1154:   6:   path: string
 8986:  6335:  3702: 1155:   7:   type: 'file' | 'directory'
 8987:  6336:  3703: 1156:   8:   children?: TreeNode[]
 8988:  6337:  3704: 1157:   9: }
 8989:  6338:  3705: 1158:  10: 
 8990:  6339:  3706: 1159:  11: const props = defineProps<{
 8991:  6340:  3707: 1160:  12:   root?: string
 8992:  6341:  3708: 1161:  13:   initialExpanded?: boolean
 8993:  6342:  3709: 1162:  14: }>()
 8994:  6343:  3710: 1163:  15: 
 8995:  6344:  3711: 1164:  16: const expandedNodes = ref<Set<string>>(new Set())
 8996:  6345:  3712: 1165:  17: const treeData = ref<TreeNode[]>([])
 8997:  6346:  3713: 1166:  18: 
 8998:  6347:  3714: 1167:  19: // Process the file structure into a tree
 8999:  6348:  3715: 1168:  20: onMounted(async () => {
 9000:  6349:  3716: 1169:  21:   // Initial structure based on your codebase
 9001:  6350:  3717: 1170:  22:   treeData.value = [
 9002:  6351:  3718: 1171:  23:     {
 9003:  6352:  3719: 1172:  24:       name: 'functions',
 9004:  6353:  3720: 1173:  25:       path: 'functions',
 9005:  6354:  3721: 1174:  26:       type: 'directory',
 9006:  6355:  3722: 1175:  27:       children: [
 9007:  6356:  3723: 1176:  28:         {
 9008:  6357:  3724: 1177:  29:           name: 'src',
 9009:  6358:  3725: 1178:  30:           path: 'functions/src',
 9010:  6359:  3726: 1179:  31:           type: 'directory',
 9011:  6360:  3727: 1180:  32:           children: [
 9012:  6361:  3728: 1181:  33:             {
 9013:  6362:  3729: 1182:  34:               name: 'config',
 9014:  6363:  3730: 1183:  35:               path: 'functions/src/config',
 9015:  6364:  3731: 1184:  36:               type: 'directory',
 9016:  6365:  3732: 1185:  37:               children: [
 9017:  6366:  3733: 1186:  38:                 {
 9018:  6367:  3734: 1187:  39:                   name: 'firebase.ts',
 9019:  6368:  3735: 1188:  40:                   path: 'functions/src/config/firebase.ts',
 9020:  6369:  3736: 1189:  41:                   type: 'file'
 9021:  6370:  3737: 1190:  42:                 }
 9022:  6371:  3738: 1191:  43:               ]
 9023:  6372:  3739: 1192:  44:             },
 9024:  6373:  3740: 1193:  45:             {
 9025:  6374:  3741: 1194:  46:               name: 'services',
 9026:  6375:  3742: 1195:  47:               path: 'functions/src/services',
 9027:  6376:  3743: 1196:  48:               type: 'directory',
 9028:  6377:  3744: 1197:  49:               children: [
 9029:  6378:  3745: 1198:  50:                 {
 9030:  6379:  3746: 1199:  51:                   name: 'cardSync.ts',
 9031:  6380:  3747: 1200:  52:                   path: 'functions/src/services/cardSync.ts',
 9032:  6381:  3748: 1201:  53:                   type: 'file'
 9033:  6382:  3749: 1202:  54:                 },
 9034:  6383:  3750: 1203:  55:                 {
 9035:  6384:  3751: 1204:  56:                   name: 'priceSync.ts',
 9036:  6385:  3752: 1205:  57:                   path: 'functions/src/services/priceSync.ts',
 9037:  6386:  3753: 1206:  58:                   type: 'file'
 9038:  6387:  3754: 1207:  59:                 }
 9039:  6388:  3755: 1208:  60:               ]
 9040:  6389:  3756: 1209:  61:             },
 9041:  6390:  3757: 1210:  62:             // Add other directories and files based on your structure
 9042:  6391:  3758: 1211:  63:           ]
 9043:  6392:  3759: 1212:  64:         }
 9044:  6393:  3760: 1213:  65:       ]
 9045:  6394:  3761: 1214:  66:     }
 9046:  6395:  3762: 1215:  67:   ]
 9047:  6396:  3763: 1216:  68: 
 9048:  6397:  3764: 1217:  69:   // If initialExpanded is true, expand all nodes
 9049:  6398:  3765: 1218:  70:   if (props.initialExpanded) {
 9050:  6399:  3766: 1219:  71:     const expandAll = (nodes: TreeNode[]) => {
 9051:  6400:  3767: 1220:  72:       nodes.forEach(node => {
 9052:  6401:  3768: 1221:  73:         if (node.type === 'directory') {
 9053:  6402:  3769: 1222:  74:           expandedNodes.value.add(node.path)
 9054:  6403:  3770: 1223:  75:           if (node.children) {
 9055:  6404:  3771: 1224:  76:             expandAll(node.children)
 9056:  6405:  3772: 1225:  77:           }
 9057:  6406:  3773: 1226:  78:         }
 9058:  6407:  3774: 1227:  79:       })
 9059:  6408:  3775: 1228:  80:     }
 9060:  6409:  3776: 1229:  81:     expandAll(treeData.value)
 9061:  6410:  3777: 1230:  82:   }
 9062:  6411:  3778: 1231:  83: })
 9063:  6412:  3779: 1232:  84: 
 9064:  6413:  3780: 1233:  85: function toggleNode(path: string) {
 9065:  6414:  3781: 1234:  86:   if (expandedNodes.value.has(path)) {
 9066:  6415:  3782: 1235:  87:     expandedNodes.value.delete(path)
 9067:  6416:  3783: 1236:  88:   } else {
 9068:  6417:  3784: 1237:  89:     expandedNodes.value.add(path)
 9069:  6418:  3785: 1238:  90:   }
 9070:  6419:  3786: 1239:  91: }
 9071:  6420:  3787: 1240:  92: 
 9072:  6421:  3788: 1241:  93: const toggleAllNodes = () => {
 9073:  6422:  3789: 1242:  94:   if (expandedNodes.value.size > 0) {
 9074:  6423:  3790: 1243:  95:     expandedNodes.value.clear()
 9075:  6424:  3791: 1244:  96:   } else {
 9076:  6425:  3792: 1245:  97:     const expandAll = (nodes: TreeNode[]) => {
 9077:  6426:  3793: 1246:  98:       nodes.forEach(node => {
 9078:  6427:  3794: 1247:  99:         if (node.type === 'directory') {
 9079:  6428:  3795: 1248: 100:           expandedNodes.value.add(node.path)
 9080:  6429:  3796: 1249: 101:           if (node.children) {
 9081:  6430:  3797: 1250: 102:             expandAll(node.children)
 9082:  6431:  3798: 1251: 103:           }
 9083:  6432:  3799: 1252: 104:         }
 9084:  6433:  3800: 1253: 105:       })
 9085:  6434:  3801: 1254: 106:     }
 9086:  6435:  3802: 1255: 107:     expandAll(treeData.value)
 9087:  6436:  3803: 1256: 108:   }
 9088:  6437:  3804: 1257: 109: }
 9089:  6438:  3805: 1258: 110: 
 9090:  6439:  3806: 1259: 111: // Recursive component for rendering tree nodes
 9091:  6440:  3807: 1260: 112: const TreeNode = (node: TreeNode, level: number = 0) => {
 9092:  6441:  3808: 1261: 113:   const isExpanded = expandedNodes.value.has(node.path)
 9093:  6442:  3809: 1262: 114:   const hasChildren = node.children && node.children.length > 0
 9094:  6443:  3810: 1263: 115:   
 9095:  6444:  3811: 1264: 116:   return (
 9096:  6445:  3812: 1265: 117:     <div class={`tree-node level-${level}`}>
 9097:  6446:  3813: 1266: 118:       <div
 9098:  6447:  3814: 1267: 119:         class={`node-content ${node.type}`}
 9099:  6448:  3815: 1268: 120:         onClick={() => hasChildren && toggleNode(node.path)}
 9100:  6449:  3816: 1269: 121:       >
 9101:  6450:  3817: 1270: 122:         {hasChildren && (
 9102:  6451:  3818: 1271: 123:           <span class={`expand-icon ${isExpanded ? 'expanded' : ''}`}>
 9103:  6452:  3819: 1272: 124:             {isExpanded ? '▼' : '▶'}
 9104:  6453:  3820: 1273: 125:           </span>
 9105:  6454:  3821: 1274: 126:         )}
 9106:  6455:  3822: 1275: 127:         <span class="node-name">{node.name}</span>
 9107:  6456:  3823: 1276: 128:       </div>
 9108:  6457:  3824: 1277: 129:       {isExpanded && hasChildren && (
 9109:  6458:  3825: 1278: 130:         <div class="children">
 9110:  6459:  3826: 1279: 131:           {node.children!.map(child => TreeNode(child, level + 1))}
 9111:  6460:  3827: 1280: 132:         </div>
 9112:  6461:  3828: 1281: 133:       )}
 9113:  6462:  3829: 1282: 134:     </div>
 9114:  6463:  3830: 1283: 135:   )
 9115:  6464:  3831: 1284: 136: }
 9116:  6465:  3832: 1285: 137: </script>
 9117:  6466:  3833: 1286: 138: 
 9118:  6467:  3834: 1287: 139: <template>
 9119:  6468:  3835: 1288: 140:   <div class="file-tree">
 9120:  6469:  3836: 1289: 141:     <div class="tree-controls">
 9121:  6470:  3837: 1290: 142:       <button @click="toggleAllNodes">
 9122:  6471:  3838: 1291: 143:         {{ expandedNodes.size > 0 ? 'Collapse All' : 'Expand All' }}
 9123:  6472:  3839: 1292: 144:       </button>
 9124:  6473:  3840: 1293: 145:     </div>
 9125:  6474:  3841: 1294: 146:     <div class="tree-content">
 9126:  6475:  3842: 1295: 147:       <template v-for="node in treeData" :key="node.path">
 9127:  6476:  3843: 1296: 148:         <TreeNode :node="node" />
 9128:  6477:  3844: 1297: 149:       </template>
 9129:  6478:  3845: 1298: 150:     </div>
 9130:  6479:  3846: 1299: 151:   </div>
 9131:  6480:  3847: 1300: 152: </template>
 9132:  6481:  3848: 1301: 153: 
 9133:  6482:  3849: 1302: 154: <style scoped>
 9134:  6483:  3850: 1303: 155: .file-tree {
 9135:  6484:  3851: 1304: 156:   background: var(--custom-tree-bg);
 9136:  6485:  3852: 1305: 157:   border-radius: 8px;
 9137:  6486:  3853: 1306: 158:   padding: 1rem;
 9138:  6487:  3854: 1307: 159:   margin: 1rem 0;
 9139:  6488:  3855: 1308: 160: }
 9140:  6489:  3856: 1309: 161: 
 9141:  6490:  3857: 1310: 162: .tree-controls {
 9142:  6491:  3858: 1311: 163:   margin-bottom: 1rem;
 9143:  6492:  3859: 1312: 164: }
 9144:  6493:  3860: 1313: 165: 
 9145:  6494:  3861: 1314: 166: .tree-controls button {
 9146:  6495:  3862: 1315: 167:   background: var(--vp-c-brand);
 9147:  6496:  3863: 1316: 168:   color: white;
 9148:  6497:  3864: 1317: 169:   border: none;
 9149:  6498:  3865: 1318: 170:   padding: 0.5rem 1rem;
 9150:  6499:  3866: 1319: 171:   border-radius: 4px;
 9151:  6500:  3867: 1320: 172:   cursor: pointer;
 9152:  6501:  3868: 1321: 173:   font-size: 0.9rem;
 9153:  6502:  3869: 1322: 174: }
 9154:  6503:  3870: 1323: 175: 
 9155:  6504:  3871: 1324: 176: .tree-controls button:hover {
 9156:  6505:  3872: 1325: 177:   background: var(--vp-c-brand-dark);
 9157:  6506:  3873: 1326: 178: }
 9158:  6507:  3874: 1327: 179: 
 9159:  6508:  3875: 1328: 180: .tree-node {
 9160:  6509:  3876: 1329: 181:   margin: 0.25rem 0;
 9161:  6510:  3877: 1330: 182: }
 9162:  6511:  3878: 1331: 183: 
 9163:  6512:  3879: 1332: 184: .node-content {
 9164:  6513:  3880: 1333: 185:   display: flex;
 9165:  6514:  3881: 1334: 186:   align-items: center;
 9166:  6515:  3882: 1335: 187:   padding: 0.25rem;
 9167:  6516:  3883: 1336: 188:   cursor: pointer;
 9168:  6517:  3884: 1337: 189:   border-radius: 4px;
 9169:  6518:  3885: 1338: 190: }
 9170:  6519:  3886: 1339: 191: 
 9171:  6520:  3887: 1340: 192: .node-content:hover {
 9172:  6521:  3888: 1341: 193:   background: var(--custom-tree-highlight);
 9173:  6522:  3889: 1342: 194: }
 9174:  6523:  3890: 1343: 195: 
 9175:  6524:  3891: 1344: 196: .expand-icon {
 9176:  6525:  3892: 1345: 197:   margin-right: 0.5rem;
 9177:  6526:  3893: 1346: 198:   font-size: 0.8rem;
 9178:  6527:  3894: 1347: 199:   transition: transform 0.2s ease;
 9179:  6528:  3895: 1348: 200: }
 9180:  6529:  3896: 1349: 201: 
 9181:  6530:  3897: 1350: 202: .expand-icon.expanded {
 9182:  6531:  3898: 1351: 203:   transform: rotate(0deg);
 9183:  6532:  3899: 1352: 204: }
 9184:  6533:  3900: 1353: 205: 
 9185:  6534:  3901: 1354: 206: .children {
 9186:  6535:  3902: 1355: 207:   margin-left: 1.5rem;
 9187:  6536:  3903: 1356: 208:   border-left: 1px dashed var(--vp-c-divider);
 9188:  6537:  3904: 1357: 209:   padding-left: 0.5rem;
 9189:  6538:  3905: 1358: 210: }
 9190:  6539:  3906: 1359: 211: 
 9191:  6540:  3907: 1360: 212: .directory .node-name {
 9192:  6541:  3908: 1361: 213:   font-weight: 500;
 9193:  6542:  3909: 1362: 214: }
 9194:  6543:  3910: 1363: 215: 
 9195:  6544:  3911: 1364: 216: .file .node-name {
 9196:  6545:  3912: 1365: 217:   font-weight: normal;
 9197:  6546:  3913: 1366: 218: }
 9198:  6547:  3914: 1367: 219: 
 9199:  6548:  3915: 1368: 220: .level-0 {
 9200:  6549:  3916: 1369: 221:   margin-top: 0;
 9201:  6550:  3917: 1370: 222: }
 9202:  6551:  3918: 1371: 223: </style>
 9203:  6552:  3919: 1372: </file>
 9204:  6553:  3920: 1373: 
 9205:  6554:  3921: 1374: <file path=".vitepress/config.mts">
 9206:  6555:  3922: 1375:   1: import { defineConfig } from 'vitepress/dist/node/index.js'
 9207:  6556:  3923: 1376:   2: 
 9208:  6557:  3924: 1377:   3: export default defineConfig({
 9209:  6558:  3925: 1378:   4:   title: 'FFTCG Sync Service',
 9210:  6559:  3926: 1379:   5:   description: 'Documentation for the FFTCG Card and Price Sync Service',
 9211:  6560:  3927: 1380:   6:   
 9212:  6561:  3928: 1381:   7:   // Head tags
 9213:  6562:  3929: 1382:   8:   head: [
 9214:  6563:  3930: 1383:   9:     ['link', { rel: 'icon', type: 'image/svg+xml', href: '/logo.svg' }],
 9215:  6564:  3931: 1384:  10:     ['meta', { name: 'theme-color', content: '#646cff' }]
 9216:  6565:  3932: 1385:  11:   ],
 9217:  6566:  3933: 1386:  12: 
 9218:  6567:  3934: 1387:  13:   // Markdown configuration
 9219:  6568:  3935: 1388:  14:   markdown: {
 9220:  6569:  3936: 1389:  15:     lineNumbers: true,
 9221:  6570:  3937: 1390:  16:     theme: 'github-dark'
 9222:  6571:  3938: 1391:  17:   },
 9223:  6572:  3939: 1392:  18: 
 9224:  6573:  3940: 1393:  19:   themeConfig: {
 9225:  6574:  3941: 1394:  20:     nav: [
 9226:  6575:  3942: 1395:  21:       { text: 'Home', link: '/' },
 9227:  6576:  3943: 1396:  22:       { text: 'Guide', link: '/docs/usage-guide' },
 9228:  6577:  3944: 1397:  23:       { text: 'Architecture', link: '/docs/architecture' },
 9229:  6578:  3945: 1398:  24:       { text: 'API', link: '/api/' },
 9230:  6579:  3946: 1399:  25:       { text: 'FAQ', link: '/docs/faq' }
 9231:  6580:  3947: 1400:  26:     ],
 9232:  6581:  3948: 1401:  27: 
 9233:  6582:  3949: 1402:  28:     sidebar: [
 9234:  6583:  3950: 1403:  29:       {
 9235:  6584:  3951: 1404:  30:         text: 'Introduction',
 9236:  6585:  3952: 1405:  31:         items: [
 9237:  6586:  3953: 1406:  32:           { text: 'Getting Started', link: '/introduction' },
 9238:  6587:  3954: 1407:  33:           { text: 'Architecture Overview', link: '/docs/architecture' },
 9239:  6588:  3955: 1408:  34:           { text: 'Usage Guide', link: '/docs/usage-guide' }
 9240:  6589:  3956: 1409:  35:         ]
 9241:  6590:  3957: 1410:  36:       },
 9242:  6591:  3958: 1411:  37:       {
 9243:  6592:  3959: 1412:  38:         text: 'Core Documentation',
 9244:  6593:  3960: 1413:  39:         items: [
 9245:  6594:  3961: 1414:  40:           { text: 'FAQ', link: '/docs/faq' },
 9246:  6595:  3962: 1415:  41:           { text: 'Troubleshooting', link: '/docs/troubleshooting' },
 9247:  6596:  3963: 1416:  42:           { text: 'Performance', link: '/docs/performance' },
 9248:  6597:  3964: 1417:  43:           { text: 'Security', link: '/docs/security' }
 9249:  6598:  3965: 1418:  44:         ]
 9250:  6599:  3966: 1419:  45:       },
 9251:  6600:  3967: 1420:  46:       {
 9252:  6601:  3968: 1421:  47:         text: 'Setup & Configuration',
 9253:  6602:  3969: 1422:  48:         items: [
 9254:  6603:  3970: 1423:  49:           { text: 'Installation', link: '/setup/installation' },
 9255:  6604:  3971: 1424:  50:           { text: 'Firebase Setup', link: '/setup/firebase' },
 9256:  6605:  3972: 1425:  51:           { text: 'Environment Config', link: '/setup/environment' }
 9257:  6606:  3973: 1426:  52:         ]
 9258:  6607:  3974: 1427:  53:       },
 9259:  6608:  3975: 1428:  54:       {
 9260:  6609:  3976: 1429:  55:         text: 'Core Services',
 9261:  6610:  3977: 1430:  56:         items: [
 9262:  6611:  3978: 1431:  57:           { text: 'Card Sync', link: '/services/card-sync' },
 9263:  6612:  3979: 1432:  58:           { text: 'Price Sync', link: '/services/price-sync' },
 9264:  6613:  3980: 1433:  59:           { text: 'Image Processing', link: '/services/image-processing' }
 9265:  6614:  3981: 1434:  60:         ]
 9266:  6615:  3982: 1435:  61:       },
 9267:  6616:  3983: 1436:  62:       {
 9268:  6617:  3984: 1437:  63:         text: 'Utilities',
 9269:  6618:  3985: 1438:  64:         items: [
 9270:  6619:  3986: 1439:  65:           { text: 'Image Handler', link: '/utils/image-handler' },
 9271:  6620:  3987: 1440:  66:           { text: 'Cache System', link: '/utils/cache' },
 9272:  6621:  3988: 1441:  67:           { text: 'Logging', link: '/utils/logging' },
 9273:  6622:  3989: 1442:  68:           { text: 'Error Handling', link: '/utils/error-handling' },
 9274:  6623:  3990: 1443:  69:           { text: 'Batch Processing', link: '/utils/batch-processing' }
 9275:  6624:  3991: 1444:  70:         ]
 9276:  6625:  3992: 1445:  71:       },
 9277:  6626:  3993: 1446:  72:       {
 9278:  6627:  3994: 1447:  73:         text: 'Testing & Monitoring',
 9279:  6628:  3995: 1448:  74:         items: [
 9280:  6629:  3996: 1449:  75:           { text: 'Test Suite', link: '/testing/overview' },
 9281:  6630:  3997: 1450:  76:           { text: 'Image Testing', link: '/testing/image-testing' },
 9282:  6631:  3998: 1451:  77:           { text: 'Sync Testing', link: '/testing/sync-testing' },
 9283:  6632:  3999: 1452:  78:           { text: 'Performance Monitoring', link: '/testing/monitoring' }
 9284:  6633:  4000: 1453:  79:         ]
 9285:  6634:  4001: 1454:  80:       }
 9286:  6635:  4002: 1455:  81:     ],
 9287:  6636:  4003: 1456:  82: 
 9288:  6637:  4004: 1457:  83:     search: {
 9289:  6638:  4005: 1458:  84:       provider: 'local',
 9290:  6639:  4006: 1459:  85:       options: {
 9291:  6640:  4007: 1460:  86:         detailedView: true
 9292:  6641:  4008: 1461:  87:       }
 9293:  6642:  4009: 1462:  88:     },
 9294:  6643:  4010: 1463:  89: 
 9295:  6644:  4011: 1464:  90:     socialLinks: [
 9296:  6645:  4012: 1465:  91:       { icon: 'github', link: 'https://github.com/yourusername/fftcg-sync-service' }
 9297:  6646:  4013: 1466:  92:     ],
 9298:  6647:  4014: 1467:  93: 
 9299:  6648:  4015: 1468:  94:     footer: {
 9300:  6649:  4016: 1469:  95:       message: 'Released under the MIT License.',
 9301:  6650:  4017: 1470:  96:       copyright: `Copyright © ${new Date().getFullYear()}`
 9302:  6651:  4018: 1471:  97:     },
 9303:  6652:  4019: 1472:  98: 
 9304:  6653:  4020: 1473:  99:     outline: {
 9305:  6654:  4021: 1474: 100:       level: [2, 3],
 9306:  6655:  4022: 1475: 101:       label: 'On this page'
 9307:  6656:  4023: 1476: 102:     },
 9308:  6657:  4024: 1477: 103: 
 9309:  6658:  4025: 1478: 104:     lastUpdated: {
 9310:  6659:  4026: 1479: 105:       text: 'Last updated',
 9311:  6660:  4027: 1480: 106:       formatOptions: {
 9312:  6661:  4028: 1481: 107:         dateStyle: 'full',
 9313:  6662:  4029: 1482: 108:         timeStyle: 'medium'
 9314:  6663:  4030: 1483: 109:       }
 9315:  6664:  4031: 1484: 110:     }
 9316:  6665:  4032: 1485: 111:   }
 9317:  6666:  4033: 1486: 112: })
 9318:  6667:  4034: 1487: </file>
 9319:  6668:  4035: 1488: 
 9320:  6669:  4036: 1489: <file path=".vitepress/shims-vue.d.ts">
 9321:  6670:  4037: 1490: 1: declare module '*.vue' {
 9322:  6671:  4038: 1491: 2:     import type { DefineComponent } from 'vue'
 9323:  6672:  4039: 1492: 3:     const component: DefineComponent<{}, {}, any>
 9324:  6673:  4040: 1493: 4:     export default component
 9325:  6674:  4041: 1494: 5:   }
 9326:  6675:  4042: 1495: </file>
 9327:  6676:  4043: 1496: 
 9328:  6677:  4044: 1497: <file path=".vitepress/theme/custom.css">
 9329:  6678:  4045: 1498:  1: :root {
 9330:  6679:  4046: 1499:  2:     /* Brand Colors */
 9331:  6680:  4047: 1500:  3:     --vp-c-brand: #646cff;
 9332:  6681:  4048: 1501:  4:     --vp-c-brand-light: #747bff;
 9333:  6682:  4049: 1502:  5:     --vp-c-brand-lighter: #9499ff;
 9334:  6683:  4050: 1503:  6:     --vp-c-brand-dark: #535bf2;
 9335:  6684:  4051: 1504:  7:     --vp-c-brand-darker: #454ce1;
 9336:  6685:  4052: 1505:  8:   
 9337:  6686:  4053: 1506:  9:     /* Typography */
 9338:  6687:  4054: 1507: 10:     --vp-font-family-base: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI',
 9339:  6688:  4055: 1508: 11:       Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
 9340:  6689:  4056: 1509: 12:       sans-serif;
 9341:  6690:  4057: 1510: 13:     --vp-font-family-mono: 'Fira Code', Menlo, Monaco, Consolas, 'Courier New',
 9342:  6691:  4058: 1511: 14:       monospace;
 9343:  6692:  4059: 1512: 15:   
 9344:  6693:  4060: 1513: 16:     /* Code Blocks */
 9345:  6694:  4061: 1514: 17:     --vp-code-block-bg: #1e1e1e;
 9346:  6695:  4062: 1515: 18:     --vp-code-block-color: #e5e7eb;
 9347:  6696:  4063: 1516: 19:     --vp-code-line-highlight-color: rgba(255, 255, 255, 0.1);
 9348:  6697:  4064: 1517: 20:     --vp-code-line-number-color: #636363;
 9349:  6698:  4065: 1518: 21:   
 9350:  6699:  4066: 1519: 22:     /* Custom Component Colors */
 9351:  6700:  4067: 1520: 23:     --custom-tree-bg: var(--vp-c-bg-soft);
 9352:  6701:  4068: 1521: 24:     --custom-tree-highlight: var(--vp-c-brand-light);
 9353:  6702:  4069: 1522: 25:     --custom-diagram-bg: var(--vp-c-bg-soft);
 9354:  6703:  4070: 1523: 26:     --custom-api-bg: var(--vp-c-bg-soft);
 9355:  6704:  4071: 1524: 27:   }
 9356:  6705:  4072: 1525: 28:   
 9357:  6706:  4073: 1526: 29:   /* Dark Mode Overrides */
 9358:  6707:  4074: 1527: 30:   .dark {
 9359:  6708:  4075: 1528: 31:     --custom-tree-bg: var(--vp-c-bg-soft);
 9360:  6709:  4076: 1529: 32:     --custom-tree-highlight: var(--vp-c-brand-dark);
 9361:  6710:  4077: 1530: 33:   }
 9362:  6711:  4078: 1531: 34:   
 9363:  6712:  4079: 1532: 35:   /* Custom Component Base Styles */
 9364:  6713:  4080: 1533: 36:   .custom-block {
 9365:  6714:  4081: 1534: 37:     border-radius: 8px;
 9366:  6715:  4082: 1535: 38:     padding: 16px 20px;
 9367:  6716:  4083: 1536: 39:     margin: 16px 0;
 9368:  6717:  4084: 1537: 40:     font-size: 14px;
 9369:  6718:  4085: 1538: 41:     line-height: 1.6;
 9370:  6719:  4086: 1539: 42:   }
 9371:  6720:  4087: 1540: 43:   
 9372:  6721:  4088: 1541: 44:   /* Responsive Design */
 9373:  6722:  4089: 1542: 45:   @media (max-width: 768px) {
 9374:  6723:  4090: 1543: 46:     .custom-block {
 9375:  6724:  4091: 1544: 47:       padding: 12px 16px;
 9376:  6725:  4092: 1545: 48:     }
 9377:  6726:  4093: 1546: 49:   }
 9378:  6727:  4094: 1547: 50:   
 9379:  6728:  4095: 1548: 51:   /* Print Styles */
 9380:  6729:  4096: 1549: 52:   @media print {
 9381:  6730:  4097: 1550: 53:     .VPNav,
 9382:  6731:  4098: 1551: 54:     .VPSidebar,
 9383:  6732:  4099: 1552: 55:     .VPDocAside {
 9384:  6733:  4100: 1553: 56:       display: none;
 9385:  6734:  4101: 1554: 57:     }
 9386:  6735:  4102: 1555: 58:   
 9387:  6736:  4103: 1556: 59:     .VPDoc {
 9388:  6737:  4104: 1557: 60:       padding: 0;
 9389:  6738:  4105: 1558: 61:       margin: 0;
 9390:  6739:  4106: 1559: 62:     }
 9391:  6740:  4107: 1560: 63:   }
 9392:  6741:  4108: 1561: 64:   
 9393:  6742:  4109: 1562: 65:   /* Transitions */
 9394:  6743:  4110: 1563: 66:   .fade-enter-active,
 9395:  6744:  4111: 1564: 67:   .fade-leave-active {
 9396:  6745:  4112: 1565: 68:     transition: opacity 0.3s ease;
 9397:  6746:  4113: 1566: 69:   }
 9398:  6747:  4114: 1567: 70:   
 9399:  6748:  4115: 1568: 71:   .fade-enter-from,
 9400:  6749:  4116: 1569: 72:   .fade-leave-to {
 9401:  6750:  4117: 1570: 73:     opacity: 0;
 9402:  6751:  4118: 1571: 74:   }
 9403:  6752:  4119: 1572: </file>
 9404:  6753:  4120: 1573: 
 9405:  6754:  4121: 1574: <file path=".vitepress/theme/FirebaseAuth.vue">
 9406:  6755:  4122: 1575:  1: <template>
 9407:  6756:  4123: 1576:  2:   <div v-if="!isAuthenticated" class="auth-wrapper">
 9408:  6757:  4124: 1577:  3:     <div class="auth-container">
 9409:  6758:  4125: 1578:  4:       <h2>FFTCG Sync Service Documentation</h2>
 9410:  6759:  4126: 1579:  5:       <p>Authentication required to access documentation.</p>
 9411:  6760:  4127: 1580:  6:       <button @click="signIn" class="signin-button">
 9412:  6761:  4128: 1581:  7:         Sign in with Google
 9413:  6762:  4129: 1582:  8:       </button>
 9414:  6763:  4130: 1583:  9:     </div>
 9415:  6764:  4131: 1584: 10:   </div>
 9416:  6765:  4132: 1585: 11:   <slot v-else></slot>
 9417:  6766:  4133: 1586: 12: </template>
 9418:  6767:  4134: 1587: 13: 
 9419:  6768:  4135: 1588: 14: <script setup>
 9420:  6769:  4136: 1589: 15: import { ref, onMounted } from 'vue'
 9421:  6770:  4137: 1590: 16: import { initializeApp } from 'firebase/app'
 9422:  6771:  4138: 1591: 17: import { getAuth, signInWithPopup, GoogleAuthProvider, onAuthStateChanged } from 'firebase/auth'
 9423:  6772:  4139: 1592: 18: 
 9424:  6773:  4140: 1593: 19: const isAuthenticated = ref(false)
 9425:  6774:  4141: 1594: 20: const allowedEmails = ['mrw1986@gmail.com']
 9426:  6775:  4142: 1595: 21: 
 9427:  6776:  4143: 1596: 22: const firebaseConfig = {
 9428:  6777:  4144: 1597: 23:   apiKey: "AIzaSyDJGSxSVXWEmTs9HMzSGu175vpABHuEez0",
 9429:  6778:  4145: 1598: 24:   authDomain: "fftcg-sync-service.firebaseapp.com",
 9430:  6779:  4146: 1599: 25:   projectId: "fftcg-sync-service",
 9431:  6780:  4147: 1600: 26:   storageBucket: "fftcg-sync-service.firebasestorage.app",
 9432:  6781:  4148: 1601: 27:   messagingSenderId: "161248420888",
 9433:  6782:  4149: 1602: 28:   appId: "1:161248420888:web:61f524b0fa0287017d4f6d"
 9434:  6783:  4150: 1603: 29: }
 9435:  6784:  4151: 1604: 30: 
 9436:  6785:  4152: 1605: 31: const app = initializeApp(firebaseConfig)
 9437:  6786:  4153: 1606: 32: const auth = getAuth(app)
 9438:  6787:  4154: 1607: 33: const provider = new GoogleAuthProvider()
 9439:  6788:  4155: 1608: 34: 
 9440:  6789:  4156: 1609: 35: onMounted(() => {
 9441:  6790:  4157: 1610: 36:   onAuthStateChanged(auth, (user) => {
 9442:  6791:  4158: 1611: 37:     isAuthenticated.value = user && allowedEmails.includes(user.email)
 9443:  6792:  4159: 1612: 38:     if (user && !allowedEmails.includes(user.email)) {
 9444:  6793:  4160: 1613: 39:       auth.signOut()
 9445:  6794:  4161: 1614: 40:       alert('Access denied. Unauthorized email.')
 9446:  6795:  4162: 1615: 41:     }
 9447:  6796:  4163: 1616: 42:   })
 9448:  6797:  4164: 1617: 43: })
 9449:  6798:  4165: 1618: 44: 
 9450:  6799:  4166: 1619: 45: const signIn = async () => {
 9451:  6800:  4167: 1620: 46:   try {
 9452:  6801:  4168: 1621: 47:     await signInWithPopup(auth, provider)
 9453:  6802:  4169: 1622: 48:   } catch (error) {
 9454:  6803:  4170: 1623: 49:     console.error('Authentication error:', error)
 9455:  6804:  4171: 1624: 50:     alert('Authentication failed. Please try again.')
 9456:  6805:  4172: 1625: 51:   }
 9457:  6806:  4173: 1626: 52: }
 9458:  6807:  4174: 1627: 53: </script>
 9459:  6808:  4175: 1628: 54: 
 9460:  6809:  4176: 1629: 55: <style>
 9461:  6810:  4177: 1630: 56: .auth-wrapper {
 9462:  6811:  4178: 1631: 57:   display: flex;
 9463:  6812:  4179: 1632: 58:   justify-content: center;
 9464:  6813:  4180: 1633: 59:   align-items: center;
 9465:  6814:  4181: 1634: 60:   min-height: 100vh;
 9466:  6815:  4182: 1635: 61:   background: var(--vp-c-bg);
 9467:  6816:  4183: 1636: 62: }
 9468:  6817:  4184: 1637: 63: 
 9469:  6818:  4185: 1638: 64: .auth-container {
 9470:  6819:  4186: 1639: 65:   text-align: center;
 9471:  6820:  4187: 1640: 66:   padding: 2rem;
 9472:  6821:  4188: 1641: 67:   border-radius: 8px;
 9473:  6822:  4189: 1642: 68:   background: var(--vp-c-bg-soft);
 9474:  6823:  4190: 1643: 69:   box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
 9475:  6824:  4191: 1644: 70:   max-width: 400px;
 9476:  6825:  4192: 1645: 71:   width: 90%;
 9477:  6826:  4193: 1646: 72: }
 9478:  6827:  4194: 1647: 73: 
 9479:  6828:  4195: 1648: 74: .signin-button {
 9480:  6829:  4196: 1649: 75:   margin-top: 1.5rem;
 9481:  6830:  4197: 1650: 76:   padding: 0.75rem 1.5rem;
 9482:  6831:  4198: 1651: 77:   border-radius: 4px;
 9483:  6832:  4199: 1652: 78:   background: var(--vp-c-brand);
 9484:  6833:  4200: 1653: 79:   color: white;
 9485:  6834:  4201: 1654: 80:   border: none;
 9486:  6835:  4202: 1655: 81:   cursor: pointer;
 9487:  6836:  4203: 1656: 82:   font-size: 1rem;
 9488:  6837:  4204: 1657: 83:   transition: background-color 0.2s;
 9489:  6838:  4205: 1658: 84: }
 9490:  6839:  4206: 1659: 85: 
 9491:  6840:  4207: 1660: 86: .signin-button:hover {
 9492:  6841:  4208: 1661: 87:   background: var(--vp-c-brand-dark);
 9493:  6842:  4209: 1662: 88: }
 9494:  6843:  4210: 1663: 89: 
 9495:  6844:  4211: 1664: 90: h2 {
 9496:  6845:  4212: 1665: 91:   color: var(--vp-c-text-1);
 9497:  6846:  4213: 1666: 92:   margin-bottom: 1rem;
 9498:  6847:  4214: 1667: 93: }
 9499:  6848:  4215: 1668: 94: 
 9500:  6849:  4216: 1669: 95: p {
 9501:  6850:  4217: 1670: 96:   color: var(--vp-c-text-2);
 9502:  6851:  4218: 1671: 97:   margin-bottom: 1rem;
 9503:  6852:  4219: 1672: 98: }
 9504:  6853:  4220: 1673: 99: </style>
 9505:  6854:  4221: 1674: </file>
 9506:  6855:  4222: 1675: 
 9507:  6856:  4223: 1676: <file path=".vitepress/theme/index.ts">
 9508:  6857:  4224: 1677:  1: // .vitepress/theme/index.ts
 9509:  6858:  4225: 1678:  2: 
 9510:  6859:  4226: 1679:  3: import { h } from 'vue'
 9511:  6860:  4227: 1680:  4: import type { Theme } from 'vitepress'
 9512:  6861:  4228: 1681:  5: import DefaultTheme from 'vitepress/theme'
 9513:  6862:  4229: 1682:  6: import FileTree from '../../components/FileTree.vue'
 9514:  6863:  4230: 1683:  7: import ArchitectureDiagram from '../../components/ArchitectureDiagram.vue'
 9515:  6864:  4231: 1684:  8: import ApiExplorer from '../../components/ApiExplorer.vue'
 9516:  6865:  4232: 1685:  9: import './custom.css'
 9517:  6866:  4233: 1686: 10: 
 9518:  6867:  4234: 1687: 11: export default {
 9519:  6868:  4235: 1688: 12:   extends: DefaultTheme,
 9520:  6869:  4236: 1689: 13:   
 9521:  6870:  4237: 1690: 14:   enhanceApp({ app }) {
 9522:  6871:  4238: 1691: 15:     // Register global components
 9523:  6872:  4239: 1692: 16:     app.component('FileTree', FileTree)
 9524:  6873:  4240: 1693: 17:     app.component('ArchitectureDiagram', ArchitectureDiagram)
 9525:  6874:  4241: 1694: 18:     app.component('ApiExplorer', ApiExplorer)
 9526:  6875:  4242: 1695: 19:   },
 9527:  6876:  4243: 1696: 20: 
 9528:  6877:  4244: 1697: 21:   Layout: () => {
 9529:  6878:  4245: 1698: 22:     return h(DefaultTheme.Layout, null, {
 9530:  6879:  4246: 1699: 23:       // Optional: Add custom slots here if needed
 9531:  6880:  4247: 1700: 24:     })
 9532:  6881:  4248: 1701: 25:   }
 9533:  6882:  4249: 1702: 26: } satisfies Theme
 9534:  6883:  4250: 1703: </file>
 9535:  6884:  4251: 1704: 
 9536:  6885:  4252: 1705: <file path="architecture.md">
 9537:  6886:  4253: 1706:   1: # System Architecture
 9538:  6887:  4254: 1707:   2: 
 9539:  6888:  4255: 1708:   3: ## Overview
 9540:  6889:  4256: 1709:   4: 
 9541:  6890:  4257: 1710:   5: FFTCG Sync Service is built on Firebase Cloud Functions with a microservices architecture, designed to synchronize card data, prices, and images from TCGplayer while maintaining high performance and reliability.
 9542:  6891:  4258: 1711:   6: 
 9543:  6892:  4259: 1712:   7: ## Core Components
 9544:  6893:  4260: 1713:   8: 
 9545:  6894:  4261: 1714:   9: ### 1. Cloud Functions
 9546:  6895:  4262: 1715:  10: 
 9547:  6896:  4263: 1716:  11: ```mermaid
 9548:  6897:  4264: 1717:  12: graph TD
 9549:  6898:  4265: 1718:  13:     A[Scheduled Triggers] -->|Daily| B[Sync Functions]
 9550:  6899:  4266: 1719:  14:     C[HTTP Triggers] -->|Manual| B
 9551:  6900:  4267: 1720:  15:     B --> D[Card Sync]
 9552:  6901:  4268: 1721:  16:     B --> E[Price Sync]
 9553:  6902:  4269: 1722:  17:     B --> F[Image Processing]
 9554:  6903:  4270: 1723:  18: ```
 9555:  6904:  4271: 1724:  19: 
 9556:  6905:  4272: 1725:  20: #### Functions Structure
 9557:  6906:  4273: 1726:  21: 
 9558:  6907:  4274: 1727:  22: - `scheduledCardSync` - Daily card data synchronization
 9559:  6908:  4275: 1728:  23: - `scheduledPriceSync` - Daily price updates
 9560:  6909:  4276: 1729:  24: - `testCardSync` - Test endpoint for card sync
 9561:  6910:  4277: 1730:  25: - `testPriceSync` - Test endpoint for price sync
 9562:  6911:  4278: 1731:  26: - `manualCardSync` - Manual trigger for full sync
 9563:  6912:  4279: 1732:  27: - `manualPriceSync` - Manual trigger for price sync
 9564:  6913:  4280: 1733:  28: - `healthCheck` - System health monitoring
 9565:  6914:  4281: 1734:  29: 
 9566:  6915:  4282: 1735:  30: ### 2. Storage Systems
 9567:  6916:  4283: 1736:  31: 
 9568:  6917:  4284: 1737:  32: ```mermaid
 9569:  6918:  4285: 1738:  33: graph LR
 9570:  6919:  4286: 1739:  34:     A[Cloud Functions] --> B[Firestore]
 9571:  6920:  4287: 1740:  35:     A --> C[Cloud Storage]
 9572:  6921:  4288: 1741:  36:     B --> D[(Cards Collection)]
 9573:  6922:  4289: 1742:  37:     B --> E[(Prices Collection)]
 9574:  6923:  4290: 1743:  38:     B --> F[(Sync Metadata)]
 9575:  6924:  4291: 1744:  39:     C --> G[Card Images]
 9576:  6925:  4292: 1745:  40: ```
 9577:  6926:  4293: 1746:  41: 
 9578:  6927:  4294: 1747:  42: #### Database Collections
 9579:  6928:  4295: 1748:  43: 
 9580:  6929:  4296: 1749:  44: - `cards` - Card information and metadata
 9581:  6930:  4297: 1750:  45: - `prices` - Current and historical price data
 9582:  6931:  4298: 1751:  46: - `syncMetadata` - Sync operation logs and status
 9583:  6932:  4299: 1752:  47: - `logs` - System logs and operations history
 9584:  6933:  4300: 1753:  48: - `cardHashes` - Change detection hashes
 9585:  6934:  4301: 1754:  49: - `priceHashes` - Price update tracking
 9586:  6935:  4302: 1755:  50: - `imageMetadata` - Image processing metadata
 9587:  6936:  4303: 1756:  51: 
 9588:  6937:  4304: 1757:  52: ### 3. Processing Pipeline
 9589:  6938:  4305: 1758:  53: 
 9590:  6939:  4306: 1759:  54: ```mermaid
 9591:  6940:  4307: 1760:  55: graph TD
 9592:  6941:  4308: 1761:  56:     A[Data Source] -->|Fetch| B[Raw Data]
 9593:  6942:  4309: 1762:  57:     B -->|Validate| C[Validation Layer]
 9594:  6943:  4310: 1763:  58:     C -->|Process| D[Processing Layer]
 9595:  6944:  4311: 1764:  59:     D -->|Store| E[Storage Layer]
 9596:  6945:  4312: 1765:  60:     D -->|Cache| F[Cache Layer]
 9597:  6946:  4313: 1766:  61: ```
 9598:  6947:  4314: 1767:  62: 
 9599:  6948:  4315: 1768:  63: #### Pipeline Components
 9600:  6949:  4316: 1769:  64: 
 9601:  6950:  4317: 1770:  65: - Data Fetching
 9602:  6951:  4318: 1771:  66: - Validation & Sanitization
 9603:  6952:  4319: 1772:  67: - Processing & Transformation
 9604:  6953:  4320: 1773:  68: - Storage Management
 9605:  6954:  4321: 1774:  69: - Cache Management
 9606:  6955:  4322: 1775:  70: 
 9607:  6956:  4323: 1776:  71: ## Service Integration
 9608:  6957:  4324: 1777:  72: 
 9609:  6958:  4325: 1778:  73: ### External Services
 9610:  6959:  4326: 1779:  74: 
 9611:  6960:  4327: 1780:  75: ```mermaid
 9612:  6961:  4328: 1781:  76: graph LR
 9613:  6962:  4329: 1782:  77:     A[FFTCG Sync Service] -->|Cards Data| B[TCGplayer API]
 9614:  6963:  4330: 1783:  78:     A -->|Prices| B
 9615:  6964:  4331: 1784:  79:     A -->|Images| C[TCGplayer CDN]
 9616:  6965:  4332: 1785:  80:     A --> D[Firebase Services]
 9617:  6966:  4333: 1786:  81: ```
 9618:  6967:  4334: 1787:  82: 
 9619:  6968:  4335: 1788:  83: ### Internal Services Communication
 9620:  6969:  4336: 1789:  84: 
 9621:  6970:  4337: 1790:  85: ```mermaid
 9622:  6971:  4338: 1791:  86: graph TD
 9623:  6972:  4339: 1792:  87:     A[Sync Controller] --> B[Card Service]
 9624:  6973:  4340: 1793:  88:     A --> C[Price Service]
 9625:  6974:  4341: 1794:  89:     A --> D[Image Service]
 9626:  6975:  4342: 1795:  90:     B --> E[Storage Service]
 9627:  6976:  4343: 1796:  91:     C --> E
 9628:  6977:  4344: 1797:  92:     D --> E
 9629:  6978:  4345: 1798:  93: ```
 9630:  6979:  4346: 1799:  94: 
 9631:  6980:  4347: 1800:  95: ## Data Flow
 9632:  6981:  4348: 1801:  96: 
 9633:  6982:  4349: 1802:  97: ### Synchronization Flow
 9634:  6983:  4350: 1803:  98: 
 9635:  6984:  4351: 1804:  99: ```mermaid
 9636:  6985:  4352: 1805: 100: sequenceDiagram
 9637:  6986:  4353: 1806: 101:     participant T as Trigger
 9638:  6987:  4354: 1807: 102:     participant S as Sync Service
 9639:  6988:  4355: 1808: 103:     participant E as External API
 9640:  6989:  4356: 1809: 104:     participant D as Database
 9641:  6990:  4357: 1810: 105:     participant C as Cache
 9642:  6991:  4358: 1811: 106:    
 9643:  6992:  4359: 1812: 107:     T->>S: Initiate Sync
 9644:  6993:  4360: 1813: 108:     S->>C: Check Cache
 9645:  6994:  4361: 1814: 109:     S->>E: Fetch Updates
 9646:  6995:  4362: 1815: 110:     E->>S: Return Data
 9647:  6996:  4363: 1816: 111:     S->>D: Store Updates
 9648:  6997:  4364: 1817: 112:     S->>C: Update Cache
 9649:  6998:  4365: 1818: 113: ```
 9650:  6999:  4366: 1819: 114: 
 9651:  7000:  4367: 1820: 115: ## Error Handling
 9652:  7001:  4368: 1821: 116: 
 9653:  7002:  4369: 1822: 117: ### Recovery System
 9654:  7003:  4370: 1823: 118: 
 9655:  7004:  4371: 1824: 119: ```mermaid
 9656:  7005:  4372: 1825: 120: graph TD
 9657:  7006:  4373: 1826: 121:     A[Error Detection] -->|Classify| B[Error Types]
 9658:  7007:  4374: 1827: 122:     B -->|Transient| C[Retry Logic]
 9659:  7008:  4375: 1828: 123:     B -->|Permanent| D[Failure Handling]
 9660:  7009:  4376: 1829: 124:     C -->|Success| E[Continue Processing]
 9661:  7010:  4377: 1830: 125:     C -->|Max Retries| D
 9662:  7011:  4378: 1831: 126:     D --> F[Error Logging]
 9663:  7012:  4379: 1832: 127:     D --> G[Fallback Mechanism]
 9664:  7013:  4380: 1833: 128: ```
 9665:  7014:  4381: 1834: 129: 
 9666:  7015:  4382: 1835: 130: ## Performance Optimization
 9667:  7016:  4383: 1836: 131: 
 9668:  7017:  4384: 1837: 132: ### Caching Strategy
 9669:  7018:  4385: 1838: 133: 
 9670:  7019:  4386: 1839: 134: ```mermaid
 9671:  7020:  4387: 1840: 135: graph LR
 9672:  7021:  4388: 1841: 136:     A[Request] --> B{Cache Check}
 9673:  7022:  4389: 1842: 137:     B -->|Hit| C[Return Cached]
 9674:  7023:  4390: 1843: 138:     B -->|Miss| D[Fetch Fresh]
 9675:  7024:  4391: 1844: 139:     D --> E[Process]
 9676:  7025:  4392: 1845: 140:     E --> F[Update Cache]
 9677:  7026:  4393: 1846: 141:     F --> G[Return Fresh]
 9678:  7027:  4394: 1847: 142: ```
 9679:  7028:  4395: 1848: 143: 
 9680:  7029:  4396: 1849: 144: ## Security Architecture
 9681:  7030:  4397: 1850: 145: 
 9682:  7031:  4398: 1851: 146: ### Access Control
 9683:  7032:  4399: 1852: 147: 
 9684:  7033:  4400: 1853: 148: ```mermaid
 9685:  7034:  4401: 1854: 149: graph TD
 9686:  7035:  4402: 1855: 150:     A[Request] --> B{Authentication}
 9687:  7036:  4403: 1856: 151:     B -->|Valid| C{Authorization}
 9688:  7037:  4404: 1857: 152:     B -->|Invalid| D[Reject]
 9689:  7038:  4405: 1858: 153:     C -->|Allowed| E[Process]
 9690:  7039:  4406: 1859: 154:     C -->|Denied| D
 9691:  7040:  4407: 1860: 155: ```
 9692:  7041:  4408: 1861: 156: 
 9693:  7042:  4409: 1862: 157: ## Monitoring System
 9694:  7043:  4410: 1863: 158: 
 9695:  7044:  4411: 1864: 159: ### Observability
 9696:  7045:  4412: 1865: 160: 
 9697:  7046:  4413: 1866: 161: ```mermaid
 9698:  7047:  4414: 1867: 162: graph TD
 9699:  7048:  4415: 1868: 163:     A[Operations] --> B[Logging]
 9700:  7049:  4416: 1869: 164:     A --> C[Metrics]
 9701:  7050:  4417: 1870: 165:     A --> D[Traces]
 9702:  7051:  4418: 1871: 166:     B --> E[Analysis]
 9703:  7052:  4419: 1872: 167:     C --> E
 9704:  7053:  4420: 1873: 168:     D --> E
 9705:  7054:  4421: 1874: 169: ```
 9706:  7055:  4422: 1875: 170: 
 9707:  7056:  4423: 1876: 171: ## Resource Management
 9708:  7057:  4424: 1877: 172: 
 9709:  7058:  4425: 1878: 173: ### Scaling Strategy
 9710:  7059:  4426: 1879: 174: 
 9711:  7060:  4427: 1880: 175: ```mermaid
 9712:  7061:  4428: 1881: 176: graph TD
 9713:  7062:  4429: 1882: 177:     A[Load Monitor] -->|Triggers| B[Scaling Decision]
 9714:  7063:  4430: 1883: 178:     B -->|Up| C[Increase Resources]
 9715:  7064:  4431: 1884: 179:     B -->|Down| D[Decrease Resources]
 9716:  7065:  4432: 1885: 180:     C --> E[Update Configuration]
 9717:  7066:  4433: 1886: 181:     D --> E
 9718:  7067:  4434: 1887: 182: ```
 9719:  7068:  4435: 1888: 183: 
 9720:  7069:  4436: 1889: 184: ## Configuration Management
 9721:  7070:  4437: 1890: 185: 
 9722:  7071:  4438: 1891: 186: ### Environment Setup
 9723:  7072:  4439: 1892: 187: 
 9724:  7073:  4440: 1893: 188: ```mermaid
 9725:  7074:  4441: 1894: 189: graph LR
 9726:  7075:  4442: 1895: 190:     A[Configuration] --> B[Development]
 9727:  7076:  4443: 1896: 191:     A --> C[Staging]
 9728:  7077:  4444: 1897: 192:     A --> D[Production]
 9729:  7078:  4445: 1898: 193:     B --> E[Firebase Project]
 9730:  7079:  4446: 1899: 194:     C --> E
 9731:  7080:  4447: 1900: 195:     D --> E
 9732:  7081:  4448: 1901: 196: ```
 9733:  7082:  4449: 1902: 197: 
 9734:  7083:  4450: 1903: 198: ## Best Practices
 9735:  7084:  4451: 1904: 199: 
 9736:  7085:  4452: 1905: 200: ### Development Workflow
 9737:  7086:  4453: 1906: 201: 
 9738:  7087:  4454: 1907: 202: ```mermaid
 9739:  7088:  4455: 1908: 203: graph LR
 9740:  7089:  4456: 1909: 204:     A[Development] -->|Test| B[Staging]
 9741:  7090:  4457: 1910: 205:     B -->|Validate| C[Production]
 9742:  7091:  4458: 1911: 206:     C -->|Monitor| D[Maintenance]
 9743:  7092:  4459: 1912: 207:     D -->|Update| A
 9744:  7093:  4460: 1913: 208: ```
 9745:  7094:  4461: 1914: 209: 
 9746:  7095:  4462: 1915: 210: ## System Requirements
 9747:  7096:  4463: 1916: 211: 
 9748:  7097:  4464: 1917: 212: ### Infrastructure
 9749:  7098:  4465: 1918: 213: 
 9750:  7099:  4466: 1919: 214: - Node.js 18+
 9751:  7100:  4467: 1920: 215: - Firebase Admin SDK
 9752:  7101:  4468: 1921: 216: - Cloud Functions
 9753:  7102:  4469: 1922: 217: - Firestore
 9754:  7103:  4470: 1923: 218: - Cloud Storage
 9755:  7104:  4471: 1924: 219: - Memory: 1GB minimum
 9756:  7105:  4472: 1925: 220: - Timeout: 540s maximum
 9757:  7106:  4473: 1926: 221: 
 9758:  7107:  4474: 1927: 222: ### Dependencies
 9759:  7108:  4475: 1928: 223: 
 9760:  7109:  4476: 1929: 224: - Firebase Functions
 9761:  7110:  4477: 1930: 225: - Firebase Admin
 9762:  7111:  4478: 1931: 226: - Axios for HTTP requests
 9763:  7112:  4479: 1932: 227: - Sharp for image processing
 9764:  7113:  4480: 1933: 228: - LRU Cache for caching
 9765:  7114:  4481: 1934: 229: - TypeScript for development
 9766:  7115:  4482: 1935: 230: 
 9767:  7116:  4483: 1936: 231: ## Deployment Architecture
 9768:  7117:  4484: 1937: 232: 
 9769:  7118:  4485: 1938: 233: ### CI/CD Pipeline
 9770:  7119:  4486: 1939: 234: 
 9771:  7120:  4487: 1940: 235: ```mermaid
 9772:  7121:  4488: 1941: 236: graph LR
 9773:  7122:  4489: 1942: 237:     A[Code Push] -->|Build| B[Tests]
 9774:  7123:  4490: 1943: 238:     B -->|Pass| C[Deploy]
 9775:  7124:  4491: 1944: 239:     C -->|Success| D[Monitor]
 9776:  7125:  4492: 1945: 240:     D -->|Issues| E[Rollback]
 9777:  7126:  4493: 1946: 241: ```
 9778:  7127:  4494: 1947: </file>
 9779:  7128:  4495: 1948: 
 9780:  7129:  4496: 1949: <file path="faq.md">
 9781:  7130:  4497: 1950:   1: # Frequently Asked Questions
 9782:  7131:  4498: 1951:   2: 
 9783:  7132:  4499: 1952:   3: ## General
 9784:  7133:  4500: 1953:   4: 
 9785:  7134:  4501: 1954:   5: ### What is FFTCG Sync Service?
 9786:  7135:  4502: 1955:   6: 
 9787:  7136:  4503: 1956:   7: A Firebase-based service that synchronizes Final Fantasy Trading Card Game data from TCGplayer, including card information, prices, and images.
 9788:  7137:  4504: 1957:   8: 
 9789:  7138:  4505: 1958:   9: ### What are the system requirements?
 9790:  7139:  4506: 1959:  10: 
 9791:  7140:  4507: 1960:  11: - Node.js 18 or higher
 9792:  7141:  4508: 1961:  12: - Firebase CLI
 9793:  7142:  4509: 1962:  13: - Firebase project with Firestore and Storage enabled
 9794:  7143:  4510: 1963:  14: - 1GB minimum memory allocation
 9795:  7144:  4511: 1964:  15: - Sufficient storage quota for card images
 9796:  7145:  4512: 1965:  16: 
 9797:  7146:  4513: 1966:  17: ### How often does the service sync data?
 9798:  7147:  4514: 1967:  18: 
 9799:  7148:  4515: 1968:  19: - Cards: Daily at 21:00 UTC
 9800:  7149:  4516: 1969:  20: - Prices: Daily at 21:30 UTC
 9801:  7150:  4517: 1970:  21: - Images: During card synchronization
 9802:  7151:  4518: 1971:  22: 
 9803:  7152:  4519: 1972:  23: ## Synchronization
 9804:  7153:  4520: 1973:  24: 
 9805:  7154:  4521: 1974:  25: ### How do I manually trigger a sync?
 9806:  7155:  4522: 1975:  26: 
 9807:  7156:  4523: 1976:  27: ```typescript
 9808:  7157:  4524: 1977:  28: // For cards
 9809:  7158:  4525: 1978:  29: await syncCards({
 9810:  7159:  4526: 1979:  30:   dryRun: false,
 9811:  7160:  4527: 1980:  31:   limit: undefined,
 9812:  7161:  4528: 1981:  32:   groupId: undefined
 9813:  7162:  4529: 1982:  33: });
 9814:  7163:  4530: 1983:  34: 
 9815:  7164:  4531: 1984:  35: // For prices
 9816:  7165:  4532: 1985:  36: await syncPrices({
 9817:  7166:  4533: 1986:  37:   dryRun: false,
 9818:  7167:  4534: 1987:  38:   limit: undefined,
 9819:  7168:  4535: 1988:  39:   groupId: undefined
 9820:  7169:  4536: 1989:  40: });
 9821:  7170:  4537: 1990:  41: ```
 9822:  7171:  4538: 1991:  42: 
 9823:  7172:  4539: 1992:  43: ### What is dry run mode?
 9824:  7173:  4540: 1993:  44: 
 9825:  7174:  4541: 1994:  45: Dry run mode (`dryRun: true`) allows you to test synchronization without making any changes to the database. It's useful for:
 9826:  7175:  4542: 1995:  46: 
 9827:  7176:  4543: 1996:  47: - Validating data before actual sync
 9828:  7177:  4544: 1997:  48: - Testing configuration changes
 9829:  7178:  4545: 1998:  49: - Debugging sync issues
 9830:  7179:  4546: 1999:  50: 
 9831:  7180:  4547: 2000:  51: ### How do I sync specific card groups?
 9832:  7181:  4548: 2001:  52: 
 9833:  7182:  4549: 2002:  53: ```typescript
 9834:  7183:  4550: 2003:  54: const options = {
 9835:  7184:  4551: 2004:  55:   groupId: "23783",  // Specific group ID
 9836:  7185:  4552: 2005:  56:   dryRun: false
 9837:  7186:  4553: 2006:  57: };
 9838:  7187:  4554: 2007:  58: await syncCards(options);
 9839:  7188:  4555: 2008:  59: ```
 9840:  7189:  4556: 2009:  60: 
 9841:  7190:  4557: 2010:  61: ### Why are some syncs skipped?
 9842:  7191:  4558: 2011:  62: 
 9843:  7192:  4559: 2012:  63: Syncs may be skipped when:
 9844:  7193:  4560: 2013:  64: 
 9845:  7194:  4561: 2014:  65: - Data hasn't changed (verified via hash comparison)
 9846:  7195:  4562: 2015:  66: - Rate limits are reached
 9847:  7196:  4563: 2016:  67: - Previous sync is still in progress
 9848:  7197:  4564: 2017:  68: - Network issues occur
 9849:  7198:  4565: 2018:  69: 
 9850:  7199:  4566: 2019:  70: ## Image Processing
 9851:  7200:  4567: 2020:  71: 
 9852:  7201:  4568: 2021:  72: ### What image formats are supported?
 9853:  7202:  4569: 2022:  73: 
 9854:  7203:  4570: 2023:  74: Currently, only JPEG images are supported. The service:
 9855:  7204:  4571: 2024:  75: 
 9856:  7205:  4572: 2025:  76: - Validates JPEG format
 9857:  7206:  4573: 2026:  77: - Checks file signatures
 9858:  7207:  4574: 2027:  78: - Enforces size limits (5MB max)
 9859:  7208:  4575: 2028:  79: 
 9860:  7209:  4576: 2029:  80: ### How are images optimized?
 9861:  7210:  4577: 2030:  81: 
 9862:  7211:  4578: 2031:  82: Images are processed in two ways:
 9863:  7212:  4579: 2032:  83: 
 9864:  7213:  4580: 2033:  84: - Standard resolution (200px width)
 9865:  7214:  4581: 2034:  85: - High resolution (400px width)
 9866:  7215:  4582: 2035:  86: 
 9867:  7216:  4583: 2036:  87: Both versions are:
 9868:  7217:  4584: 2037:  88: 
 9869:  7218:  4585: 2038:  89: - Compressed using mozjpeg
 9870:  7219:  4586: 2039:  90: - Progressive loading enabled
 9871:  7220:  4587: 2040:  91: - Quality optimized (85-90%)
 9872:  7221:  4588: 2041:  92: 
 9873:  7222:  4589: 2042:  93: ### Why are some images not updating?
 9874:  7223:  4590: 2043:  94: 
 9875:  7224:  4591: 2044:  95: Images might not update if:
 9876:  7225:  4592: 2045:  96: 
 9877:  7226:  4593: 2046:  97: - Hash matches existing image
 9878:  7227:  4594: 2047:  98: - Validation fails
 9879:  7228:  4595: 2048:  99: - Storage quota is exceeded
 9880:  7229:  4596: 2049: 100: - Network errors occur
 9881:  7230:  4597: 2050: 101: 
 9882:  7231:  4598: 2051: 102: ## Firebase Integration
 9883:  7232:  4599: 2052: 103: 
 9884:  7233:  4600: 2053: 104: ### How is data stored in Firestore?
 9885:  7234:  4601: 2054: 105: 
 9886:  7235:  4602: 2055: 106: Data is organized in collections:
 9887:  7236:  4603: 2056: 107: 
 9888:  7237:  4604: 2057: 108: - `cards`: Card information
 9889:  7238:  4605: 2058: 109: - `prices`: Price history
 9890:  7239:  4606: 2059: 110: - `cardHashes`: Change detection
 9891:  7240:  4607: 2060: 111: - `priceHashes`: Price updates
 9892:  7241:  4608: 2061: 112: - `imageMetadata`: Image information
 9893:  7242:  4609: 2062: 113: - `syncMetadata`: Sync status
 9894:  7243:  4610: 2063: 114: - `logs`: System logs
 9895:  7244:  4611: 2064: 115: 
 9896:  7245:  4612: 2065: 116: ### How are images stored?
 9897:  7246:  4613: 2066: 117: 
 9898:  7247:  4614: 2067: 118: Images are stored in Firebase Storage:
 9899:  7248:  4615: 2068: 119: 
 9900:  7249:  4616: 2069: 120: - Path format: `card-images/{groupId}/{productId}_{resolution}.jpg`
 9901:  7250:  4617: 2070: 121: - Metadata includes hash and timestamp
 9902:  7251:  4618: 2071: 122: - URLs are signed for long-term access
 9903:  7252:  4619: 2072: 123: 
 9904:  7253:  4620: 2073: 124: ### What happens if Firebase quotas are exceeded?
 9905:  7254:  4621: 2074: 125: 
 9906:  7255:  4622: 2075: 126: The service will:
 9907:  7256:  4623: 2076: 127: 
 9908:  7257:  4624: 2077: 128: 1. Log the quota error
 9909:  7258:  4625: 2078: 129: 2. Pause operations
 9910:  7259:  4626: 2079: 130: 3. Retry with exponential backoff
 9911:  7260:  4627: 2080: 131: 4. Skip non-critical updates
 9912:  7261:  4628: 2081: 132: 
 9913:  7262:  4629: 2082: 133: ## Rate Limiting
 9914:  7263:  4630: 2083: 134: 
 9915:  7264:  4631: 2084: 135: ### How does rate limiting work?
 9916:  7265:  4632: 2085: 136: 
 9917:  7266:  4633: 2086: 137: ```typescript
 9918:  7267:  4634: 2087: 138: const rateLimiter = {
 9919:  7268:  4635: 2088: 139:   tokens: 100,
 9920:  7269:  4636: 2089: 140:   refillRate: 10,
 9921:  7270:  4637: 2090: 141:   interval: 1000
 9922:  7271:  4638: 2091: 142: };
 9923:  7272:  4639: 2092: 143: ```
 9924:  7273:  4640: 2093: 144: 
 9925:  7274:  4641: 2094: 145: - Token bucket algorithm
 9926:  7275:  4642: 2095: 146: - Configurable limits
 9927:  7276:  4643: 2096: 147: - Automatic retry handling
 9928:  7277:  4644: 2097: 148: 
 9929:  7278:  4645: 2098: 149: ### What are the default rate limits?
 9930:  7279:  4646: 2099: 150: 
 9931:  7280:  4647: 2100: 151: - API requests: 100 per minute
 9932:  7281:  4648: 2101: 152: - Image processing: 25 concurrent operations
 9933:  7282:  4649: 2102: 153: - Database writes: Batch size of 500
 9934:  7283:  4650: 2103: 154: - Storage operations: 10 concurrent uploads
 9935:  7284:  4651: 2104: 155: 
 9936:  7285:  4652: 2105: 156: ### How do I adjust rate limits?
 9937:  7286:  4653: 2106: 157: 
 9938:  7287:  4654: 2107: 158: Modify the configuration in your environment:
 9939:  7288:  4655: 2108: 159: 
 9940:  7289:  4656: 2109: 160: ```typescript
 9941:  7290:  4657: 2110: 161: const runtimeOpts = {
 9942:  7291:  4658: 2111: 162:   timeoutSeconds: 540,
 9943:  7292:  4659: 2112: 163:   memory: "1GiB",
 9944:  7293:  4660: 2113: 164: } as const;
 9945:  7294:  4661: 2114: 165: ```
 9946:  7295:  4662: 2115: 166: 
 9947:  7296:  4663: 2116: 167: ## Caching
 9948:  7297:  4664: 2117: 168: 
 9949:  7298:  4665: 2118: 169: ### What is cached?
 9950:  7299:  4666: 2119: 170: 
 9951:  7300:  4667: 2120: 171: - Card data: 1 hour TTL
 9952:  7301:  4668: 2121: 172: - Image metadata: 1 hour TTL
 9953:  7302:  4669: 2122: 173: - Image buffers: 5 minutes TTL
 9954:  7303:  4670: 2123: 174: - API responses: Request-specific TTL
 9955:  7304:  4671: 2124: 175: 
 9956:  7305:  4672: 2125: 176: ### How does the cache hierarchy work?
 9957:  7306:  4673: 2126: 177: 
 9958:  7307:  4674: 2127: 178: 1. Memory cache (L1)
 9959:  7308:  4675: 2128: 179: 2. LRU cache (L2)
 9960:  7309:  4676: 2129: 180: 3. Firestore (persistent)
 9961:  7310:  4677: 2130: 181: 
 9962:  7311:  4678: 2131: 182: ### How do I clear the cache?
 9963:  7312:  4679: 2132: 183: 
 9964:  7313:  4680: 2133: 184: ```typescript
 9965:  7314:  4681: 2134: 185: // Clear specific cache
 9966:  7315:  4682: 2135: 186: imageCache.clear();
 9967:  7316:  4683: 2136: 187: cardCache.clear();
 9968:  7317:  4684: 2137: 188: 
 9969:  7318:  4685: 2138: 189: // Clear all caches
 9970:  7319:  4686: 2139: 190: await clearAllCaches();
 9971:  7320:  4687: 2140: 191: ```
 9972:  7321:  4688: 2141: 192: 
 9973:  7322:  4689: 2142: 193: ## Error Handling
 9974:  7323:  4690: 2143: 194: 
 9975:  7324:  4691: 2144: 195: ### How are errors logged?
 9976:  7325:  4692: 2145: 196: 
 9977:  7326:  4693: 2146: 197: ```typescript
 9978:  7327:  4694: 2147: 198: // Error logging with context
 9979:  7328:  4695: 2148: 199: await logDetailedError(
 9980:  7329:  4696: 2149: 200:   error,
 9981:  7330:  4697: 2150: 201:   "operationContext",
 9982:  7331:  4698: 2151: 202:   { metadata: "details" },
 9983:  7332:  4699: 2152: 203:   "ERROR"
 9984:  7333:  4700: 2153: 204: );
 9985:  7334:  4701: 2154: 205: ```
 9986:  7335:  4702: 2155: 206: 
 9987:  7336:  4703: 2156: 207: ### What retry mechanisms are in place?
 9988:  7337:  4704: 2157: 208: 
 9989:  7338:  4705: 2158: 209: - Maximum 3 retries
 9990:  7339:  4706: 2159: 210: - Exponential backoff
 9991:  7340:  4707: 2160: 211: - Configurable delay
 9992:  7341:  4708: 2161: 212: - Operation-specific handling
 9993:  7342:  4709: 2162: 213: 
 9994:  7343:  4710: 2163: 214: ### How do I debug sync failures?
 9995:  7344:  4711: 2164: 215: 
 9996:  7345:  4712: 2165: 216: 1. Check sync metadata collection
 9997:  7346:  4713: 2166: 217: 2. Review error logs
 9998:  7347:  4714: 2167: 218: 3. Use dry run mode
 9999:  7348:  4715: 2168: 219: 4. Monitor rate limits
10000:  7349:  4716: 2169: 220: 
10001:  7350:  4717: 2170: 221: ## Deployment
10002:  7351:  4718: 2171: 222: 
10003:  7352:  4719: 2172: 223: ### How do I deploy updates?
10004:  7353:  4720: 2173: 224: 
10005:  7354:  4721: 2174: 225: ```bash
10006:  7355:  4722: 2175: 226: # Deploy all functions
10007:  7356:  4723: 2176: 227: npm run deploy
10008:  7357:  4724: 2177: 228: 
10009:  7358:  4725: 2178: 229: # Deploy specific function
10010:  7359:  4726: 2179: 230: firebase deploy --only functions:functionName
10011:  7360:  4727: 2180: 231: ```
10012:  7361:  4728: 2181: 232: 
10013:  7362:  4729: 2182: 233: ### How do I test before deployment?
10014:  7363:  4730: 2183: 234: 
10015:  7364:  4731: 2184: 235: ```bash
10016:  7365:  4732: 2185: 236: # Run tests
10017:  7366:  4733: 2186: 237: npm run test:images
10018:  7367:  4734: 2187: 238: 
10019:  7368:  4735: 2188: 239: # Validate sync
10020:  7369:  4736: 2189: 240: npm run validate-sync
10021:  7370:  4737: 2190: 241: 
10022:  7371:  4738: 2191: 242: # Local emulation
10023:  7372:  4739: 2192: 243: npm run serve
10024:  7373:  4740: 2193: 244: ```
10025:  7374:  4741: 2194: 245: 
10026:  7375:  4742: 2195: 246: ### What's the deployment rollback process?
10027:  7376:  4743: 2196: 247: 
10028:  7377:  4744: 2197: 248: 1. Use Firebase Console
10029:  7378:  4745: 2198: 249: 2. Select previous version
10030:  7379:  4746: 2199: 250: 3. Click "Rollback"
10031:  7380:  4747: 2200: 251: 4. Verify functionality
10032:  7381:  4748: 2201: 252: 
10033:  7382:  4749: 2202: 253: ## Monitoring
10034:  7383:  4750: 2203: 254: 
10035:  7384:  4751: 2204: 255: ### How do I monitor sync status?
10036:  7385:  4752: 2205: 256: 
10037:  7386:  4753: 2206: 257: 1. Check sync metadata collection
10038:  7387:  4754: 2207: 258: 2. Review logging dashboard
10039:  7388:  4755: 2208: 259: 3. Use health check endpoint
10040:  7389:  4756: 2209: 260: 4. Monitor performance metrics
10041:  7390:  4757: 2210: 261: 
10042:  7391:  4758: 2211: 262: ### What metrics are available?
10043:  7392:  4759: 2212: 263: 
10044:  7393:  4760: 2213: 264: - Sync completion rates
10045:  7394:  4761: 2214: 265: - Processing times
10046:  7395:  4762: 2215: 266: - Error rates
10047:  7396:  4763: 2216: 267: - Cache hit rates
10048:  7397:  4764: 2217: 268: - Storage usage
10049:  7398:  4765: 2218: 269: - API response times
10050:  7399:  4766: 2219: 270: 
10051:  7400:  4767: 2220: 271: ### How do I set up alerts?
10052:  7401:  4768: 2221: 272: 
10053:  7402:  4769: 2222: 273: Configure Firebase Alert conditions for:
10054:  7403:  4770: 2223: 274: 
10055:  7404:  4771: 2224: 275: - Function failures
10056:  7405:  4772: 2225: 276: - High error rates
10057:  7406:  4773: 2226: 277: - Quota approaching limits
10058:  7407:  4774: 2227: 278: - Sync failures
10059:  7408:  4775: 2228: 279: - Performance degradation
10060:  7409:  4776: 2229: </file>
10061:  7410:  4777: 2230: 
10062:  7411:  4778: 2231: <file path="index.md">
10063:  7412:  4779: 2232:  1: ---
10064:  7413:  4780: 2233:  2: layout: home
10065:  7414:  4781: 2234:  3: hero:
10066:  7415:  4782: 2235:  4:   name: FFTCG Sync Service
10067:  7416:  4783: 2236:  5:   text: Card and Price Synchronization Service
10068:  7417:  4784: 2237:  6:   tagline: Automated synchronization and management of FFTCG card data and prices
10069:  7418:  4785: 2238:  7:   actions:
10070:  7419:  4786: 2239:  8:     - theme: brand
10071:  7420:  4787: 2240:  9:       text: Get Started
10072:  7421:  4788: 2241: 10:       link: /introduction
10073:  7422:  4789: 2242: 11:     - theme: alt
10074:  7423:  4790: 2243: 12:       text: View API
10075:  7424:  4791: 2244: 13:       link: /api/
10076:  7425:  4792: 2245: 14: features:
10077:  7426:  4793: 2246: 15:   - title: Card Synchronization
10078:  7427:  4794: 2247: 16:     details: Automatically sync card information from external sources
10079:  7428:  4795: 2248: 17:   - title: Price Tracking
10080:  7429:  4796: 2249: 18:     details: Monitor and update card prices in real-time
10081:  7430:  4797: 2250: 19:   - title: Image Processing
10082:  7431:  4798: 2251: 20:     details: Automated image downloading, optimization, and storage
10083:  7432:  4799: 2252: 21:   - title: Caching System
10084:  7433:  4800: 2253: 22:     details: Efficient caching mechanism for improved performance
10085:  7434:  4801: 2254: 23: ---
10086:  7435:  4802: 2255: </file>
10087:  7436:  4803: 2256: 
10088:  7437:  4804: 2257: <file path="introduction.md">
10089:  7438:  4805: 2258:  1: # FFTCG Sync Service Documentation
10090:  7439:  4806: 2259:  2: 
10091:  7440:  4807: 2260:  3: ## Overview
10092:  7441:  4808: 2261:  4: 
10093:  7442:  4809: 2262:  5: FFTCG Sync Service is a specialized Firebase application designed to synchronize Final Fantasy Trading Card Game (FFTCG) card data, prices, and images. The service provides automated synchronization of card information, price tracking, and image optimization through Firebase Functions.
10094:  7443:  4810: 2263:  6: 
10095:  7444:  4811: 2264:  7: ## Core Features
10096:  7445:  4812: 2265:  8: 
10097:  7446:  4813: 2266:  9: ### Card Synchronization
10098:  7447:  4814: 2267: 10: 
10099:  7448:  4815: 2268: 11: - Automated card data synchronization from TCGPlayer
10100:  7449:  4816: 2269: 12: - Batch processing for efficient data handling
10101:  7450:  4817: 2270: 13: - Data validation and error handling
10102:  7451:  4818: 2271: 14: - Support for dry-run operations
10103:  7452:  4819: 2272: 15: 
10104:  7453:  4820: 2273: 16: ### Price Tracking
10105:  7454:  4821: 2274: 17: 
10106:  7455:  4822: 2275: 18: - Real-time price monitoring
10107:  7456:  4823: 2276: 19: - Support for both normal and foil card prices
10108:  7457:  4824: 2277: 20: - Price history tracking
10109:  7458:  4825: 2278: 21: - Configurable sync intervals
10110:  7459:  4826: 2279: 22: 
10111:  7460:  4827: 2280: 23: ### Image Processing
10112:  7461:  4828: 2281: 24: 
10113:  7462:  4829: 2282: 25: - Automatic image downloading and optimization
10114:  7463:  4830: 2283: 26: - Multiple resolution support (200w and 400w)
10115:  7464:  4831: 2284: 27: - Image compression with quality preservation
10116:  7465:  4832: 2285: 28: - Efficient caching system
10117:  7466:  4833: 2286: 29: - Firebase Storage integration
10118:  7467:  4834: 2287: 30: 
10119:  7468:  4835: 2288: 31: ### System Architecture
10120:  7469:  4836: 2289: 32: 
10121:  7470:  4837: 2290: 33: - Firebase Functions for serverless operation
10122:  7471:  4838: 2291: 34: - Firestore for data storage
10123:  7472:  4839: 2292: 35: - Firebase Storage for image management
10124:  7473:  4840: 2293: 36: - LRU caching for performance optimization
10125:  7474:  4841: 2294: 37: 
10126:  7475:  4842: 2295: 38: ## Technical Stack
10127:  7476:  4843: 2296: 39: 
10128:  7477:  4844: 2297: 40: - **Runtime**: Node.js 18
10129:  7478:  4845: 2298: 41: - **Framework**: Firebase Functions v6
10130:  7479:  4846: 2299: 42: - **Database**: Firestore
10131:  7480:  4847: 2300: 43: - **Storage**: Firebase Storage
10132:  7481:  4848: 2301: 44: - **Image Processing**: Sharp
10133:  7482:  4849: 2302: 45: - **HTTP Client**: Axios
10134:  7483:  4850: 2303: 46: - **Caching**: LRU Cache
10135:  7484:  4851: 2304: 47: - **Language**: TypeScript
10136:  7485:  4852: 2305: 48: 
10137:  7486:  4853: 2306: 49: ## Key Components
10138:  7487:  4854: 2307: 50: 
10139:  7488:  4855: 2308: 51: ### Services
10140:  7489:  4856: 2309: 52: 
10141:  7490:  4857: 2310: 53: - `cardSync`: Manages card data synchronization
10142:  7491:  4858: 2311: 54: - `priceSync`: Handles price updates and tracking
10143:  7492:  4859: 2312: 55: 
10144:  7493:  4860: 2313: 56: ### Utilities
10145:  7494:  4861: 2314: 57: 
10146:  7495:  4862: 2315: 58: - `ImageHandler`: Manages image processing and storage
10147:  7496:  4863: 2316: 59: - `ImageCompressor`: Handles image optimization
10148:  7497:  4864: 2317: 60: - `ImageCache`: Provides caching functionality
10149:  7498:  4865: 2318: 61: - `Logger`: Manages application logging
10150:  7499:  4866: 2319: 62: - `BatchProcessor`: Handles batch operations
10151:  7500:  4867: 2320: 63: 
10152:  7501:  4868: 2321: 64: ## Getting Started
10153:  7502:  4869: 2322: 65: 
10154:  7503:  4870: 2323: 66: To get started with the FFTCG Sync Service, see:
10155:  7504:  4871: 2324: 67: 
10156:  7505:  4872: 2325: 68: - [Installation Guide](./setup/installation)
10157:  7506:  4873: 2326: 69: - [Configuration Guide](./setup/configuration)
10158:  7507:  4874: 2327: 70: - [API Documentation](./api/)
10159:  7508:  4875: 2328: </file>
10160:  7509:  4876: 2329: 
10161:  7510:  4877: 2330: <file path="package.json">
10162:  7511:  4878: 2331:  1: {
10163:  7512:  4879: 2332:  2:   "name": "fftcg-sync-docs",
10164:  7513:  4880: 2333:  3:   "version": "1.0.0",
10165:  7514:  4881: 2334:  4:   "description": "Documentation for FFTCG Sync Service",
10166:  7515:  4882: 2335:  5:   "type": "module",
10167:  7516:  4883: 2336:  6:   "scripts": {
10168:  7517:  4884: 2337:  7:     "docs:dev": "vitepress dev",
10169:  7518:  4885: 2338:  8:     "docs:build": "vitepress build",
10170:  7519:  4886: 2339:  9:     "docs:preview": "vitepress preview"
10171:  7520:  4887: 2340: 10:   },
10172:  7521:  4888: 2341: 11:   "keywords": [],
10173:  7522:  4889: 2342: 12:   "author": "",
10174:  7523:  4890: 2343: 13:   "license": "ISC",
10175:  7524:  4891: 2344: 14:   "devDependencies": {
10176:  7525:  4892: 2345: 15:     "firebase": "^10.7.0",
10177:  7526:  4893: 2346: 16:     "vitepress": "^1.0.0-rc.31",
10178:  7527:  4894: 2347: 17:     "vue": "^3.3.8"
10179:  7528:  4895: 2348: 18:   }
10180:  7529:  4896: 2349: 19: }
10181:  7530:  4897: 2350: </file>
10182:  7531:  4898: 2351: 
10183:  7532:  4899: 2352: <file path="performance.md">
10184:  7533:  4900: 2353:   1: # Performance Guide
10185:  7534:  4901: 2354:   2: 
10186:  7535:  4902: 2355:   3: ## Optimization Overview
10187:  7536:  4903: 2356:   4: 
10188:  7537:  4904: 2357:   5: This guide covers performance optimization strategies implemented in the FFTCG Sync Service, including caching, batch processing, memory management, and monitoring.
10189:  7538:  4905: 2358:   6: 
10190:  7539:  4906: 2359:   7: ## Resource Management
10191:  7540:  4907: 2360:   8: 
10192:  7541:  4908: 2361:   9: ### Memory Allocation
10193:  7542:  4909: 2362:  10: 
10194:  7543:  4910: 2363:  11: ```typescript
10195:  7544:  4911: 2364:  12: // Default runtime options
10196:  7545:  4912: 2365:  13: const runtimeOpts = {
10197:  7546:  4913: 2366:  14:   timeoutSeconds: 540,
10198:  7547:  4914: 2367:  15:   memory: "1GiB"
10199:  7548:  4915: 2368:  16: } as const;
10200:  7549:  4916: 2369:  17: ```
10201:  7550:  4917: 2370:  18: 
10202:  7551:  4918: 2371:  19: Memory optimization techniques:
10203:  7552:  4919: 2372:  20: 
10204:  7553:  4920: 2373:  21: - Batch processing to control memory usage
10205:  7554:  4921: 2374:  22: - Automatic garbage collection
10206:  7555:  4922: 2375:  23: - Resource cleanup after operations
10207:  7556:  4923: 2376:  24: - Stream processing for large datasets
10208:  7557:  4924: 2377:  25: 
10209:  7558:  4925: 2378:  26: ### Resource Cleanup
10210:  7559:  4926: 2379:  27: 
10211:  7560:  4927: 2380:  28: ```typescript
10212:  7561:  4928: 2381:  29: async function cleanupResources(): Promise<void> {
10213:  7562:  4929: 2382:  30:   // Clear image cache
10214:  7563:  4930: 2383:  31:   await imageCache.clear();
10215:  7564:  4931: 2384:  32:  
10216:  7565:  4932: 2385:  33:   // Force garbage collection if available
10217:  7566:  4933: 2386:  34:   global.gc && global.gc();
10218:  7567:  4934: 2387:  35:  
10219:  7568:  4935: 2388:  36:   // Clear other caches
10220:  7569:  4936: 2389:  37:   cardCache.clear();
10221:  7570:  4937: 2390:  38: }
10222:  7571:  4938: 2391:  39: ```
10223:  7572:  4939: 2392:  40: 
10224:  7573:  4940: 2393:  41: ## Caching Strategy
10225:  7574:  4941: 2394:  42: 
10226:  7575:  4942: 2395:  43: ### Multi-Level Caching
10227:  7576:  4943: 2396:  44: 
10228:  7577:  4944: 2397:  45: ```typescript
10229:  7578:  4945: 2398:  46: // L1 Cache (Memory)
10230:  7579:  4946: 2399:  47: private l1Cache = new Map<string, T>();
10231:  7580:  4947: 2400:  48: 
10232:  7581:  4948: 2401:  49: // L2 Cache (LRU)
10233:  7582:  4949: 2402:  50: private l2Cache: LRUCache<string, T> = new LRUCache<string, T>({
10234:  7583:  4950: 2403:  51:   max: options.maxSize,
10235:  7584:  4951: 2404:  52:   ttl: options.ttl
10236:  7585:  4952: 2405:  53: });
10237:  7586:  4953: 2406:  54: ```
10238:  7587:  4954: 2407:  55: 
10239:  7588:  4955: 2408:  56: Cache hierarchy:
10240:  7589:  4956: 2409:  57: 
10241:  7590:  4957: 2410:  58: 1. In-memory cache for frequent access
10242:  7591:  4958: 2411:  59: 2. LRU cache for larger datasets
10243:  7592:  4959: 2412:  60: 3. Persistent storage for backups
10244:  7593:  4960: 2413:  61: 
10245:  7594:  4961: 2414:  62: ### Cache Configuration
10246:  7595:  4962: 2415:  63: 
10247:  7596:  4963: 2416:  64: ```typescript
10248:  7597:  4964: 2417:  65: const cacheOptions = {
10249:  7598:  4965: 2418:  66:   // Card cache settings
10250:  7599:  4966: 2419:  67:   cardCache: {
10251:  7600:  4967: 2420:  68:     max: 500,
10252:  7601:  4968: 2421:  69:     ttl: 1000 * 60 * 60 // 1 hour
10253:  7602:  4969: 2422:  70:   },
10254:  7603:  4970: 2423:  71:  
10255:  7604:  4971: 2424:  72:   // Image cache settings
10256:  7605:  4972: 2425:  73:   imageCache: {
10257:  7606:  4973: 2426:  74:     metadata: {
10258:  7607:  4974: 2427:  75:       max: 1000,
10259:  7608:  4975: 2428:  76:       ttl: 1000 * 60 * 60 // 1 hour
10260:  7609:  4976: 2429:  77:     },
10261:  7610:  4977: 2430:  78:     buffer: {
10262:  7611:  4978: 2431:  79:       max: 100,
10263:  7612:  4979: 2432:  80:       ttl: 1000 * 60 * 5, // 5 minutes
10264:  7613:  4980: 2433:  81:       maxSize: 50 * 1024 * 1024 // 50MB
10265:  7614:  4981: 2434:  82:     }
10266:  7615:  4982: 2435:  83:   }
10267:  7616:  4983: 2436:  84: };
10268:  7617:  4984: 2437:  85: ```
10269:  7618:  4985: 2438:  86: 
10270:  7619:  4986: 2439:  87: ## Batch Processing
10271:  7620:  4987: 2440:  88: 
10272:  7621:  4988: 2441:  89: ### Adaptive Batch Processing
10273:  7622:  4989: 2442:  90: 
10274:  7623:  4990: 2443:  91: ```typescript
10275:  7624:  4991: 2444:  92: class AdaptiveBatchProcessor {
10276:  7625:  4992: 2445:  93:   private optimalBatchSize: number = 100;
10277:  7626:  4993: 2446:  94:   private processingTimes: number[] = [];
10278:  7627:  4994: 2447:  95: 
10279:  7628:  4995: 2448:  96:   async processBatch<T>(
10280:  7629:  4996: 2449:  97:     items: T[],
10281:  7630:  4997: 2450:  98:     processor: (batch: T[]) => Promise<void>
10282:  7631:  4998: 2451:  99:   ): Promise<void> {
10283:  7632:  4999: 2452: 100:     for (let i = 0; i < items.length; i += this.optimalBatchSize) {
10284:  7633:  5000: 2453: 101:       const start = Date.now();
10285:  7634:  5001: 2454: 102:       const batch = items.slice(i, i + this.optimalBatchSize);
10286:  7635:  5002: 2455: 103:      
10287:  7636:  5003: 2456: 104:       await processor(batch);
10288:  7637:  5004: 2457: 105:      
10289:  7638:  5005: 2458: 106:       this.adjustBatchSize(Date.now() - start);
10290:  7639:  5006: 2459: 107:     }
10291:  7640:  5007: 2460: 108:   }
10292:  7641:  5008: 2461: 109: 
10293:  7642:  5009: 2462: 110:   private adjustBatchSize(lastProcessingTime: number): void {
10294:  7643:  5010: 2463: 111:     // Dynamically adjust batch size based on processing time
10295:  7644:  5011: 2464: 112:     if (lastProcessingTime > 1000) {
10296:  7645:  5012: 2465: 113:       this.optimalBatchSize = Math.max(10, this.optimalBatchSize * 0.8);
10297:  7646:  5013: 2466: 114:     } else if (lastProcessingTime < 500) {
10298:  7647:  5014: 2467: 115:       this.optimalBatchSize = Math.min(1000, this.optimalBatchSize * 1.2);
10299:  7648:  5015: 2468: 116:     }
10300:  7649:  5016: 2469: 117:   }
10301:  7650:  5017: 2470: 118: }
10302:  7651:  5018: 2471: 119: ```
10303:  7652:  5019: 2472: 120: 
10304:  7653:  5020: 2473: 121: ### Batch Size Optimization
10305:  7654:  5021: 2474: 122: 
10306:  7655:  5022: 2475: 123: ```typescript
10307:  7656:  5023: 2476: 124: const batchOptions = {
10308:  7657:  5024: 2477: 125:   batchSize: 100,
10309:  7658:  5025: 2478: 126:   delayBetweenBatches: 1000,
10310:  7659:  5026: 2479: 127:   onBatchComplete: async (stats) => {
10311:  7660:  5027: 2480: 128:     console.log(`Processed: ${stats.processed}/${stats.total}`);
10312:  7661:  5028: 2481: 129:   }
10313:  7662:  5029: 2482: 130: };
10314:  7663:  5030: 2483: 131: ```
10315:  7664:  5031: 2484: 132: 
10316:  7665:  5032: 2485: 133: ## Image Processing Optimization
10317:  7666:  5033: 2486: 134: 
10318:  7667:  5034: 2487: 135: ### Compression Settings
10319:  7668:  5035: 2488: 136: 
10320:  7669:  5036: 2489: 137: ```typescript
10321:  7670:  5037: 2490: 138: const compressionOptions = {
10322:  7671:  5038: 2491: 139:   quality: {
10323:  7672:  5039: 2492: 140:     HIGH_RES: 90,
10324:  7673:  5040: 2493: 141:     LOW_RES: 85
10325:  7674:  5041: 2494: 142:   },
10326:  7675:  5042: 2495: 143:   dimensions: {
10327:  7676:  5043: 2496: 144:     HIGH_RES: 400,
10328:  7677:  5044: 2497: 145:     LOW_RES: 200
10329:  7678:  5045: 2498: 146:   }
10330:  7679:  5046: 2499: 147: };
10331:  7680:  5047: 2500: 148: ```
10332:  7681:  5048: 2501: 149: 
10333:  7682:  5049: 2502: 150: ### Progressive Loading
10334:  7683:  5050: 2503: 151: 
10335:  7684:  5051: 2504: 152: ```typescript
10336:  7685:  5052: 2505: 153: const imageProcessingOptions = {
10337:  7686:  5053: 2506: 154:   progressive: true,
10338:  7687:  5054: 2507: 155:   mozjpeg: true,
10339:  7688:  5055: 2508: 156:   optimizationLevel: 3
10340:  7689:  5056: 2509: 157: };
10341:  7690:  5057: 2510: 158: ```
10342:  7691:  5058: 2511: 159: 
10343:  7692:  5059: 2512: 160: ## Database Optimization
10344:  7693:  5060: 2513: 161: 
10345:  7694:  5061: 2514: 162: ### Batch Operations
10346:  7695:  5062: 2515: 163: 
10347:  7696:  5063: 2516: 164: ```typescript
10348:  7697:  5064: 2517: 165: async function batchWrite(updates: any[]): Promise<void> {
10349:  7698:  5065: 2518: 166:   const batch = db.batch();
10350:  7699:  5066: 2519: 167:   updates.forEach(update => {
10351:  7700:  5067: 2520: 168:     const ref = db.collection('cards').doc(update.id);
10352:  7701:  5068: 2521: 169:     batch.update(ref, update.data);
10353:  7702:  5069: 2522: 170:   });
10354:  7703:  5070: 2523: 171:   await batch.commit();
10355:  7704:  5071: 2524: 172: }
10356:  7705:  5072: 2525: 173: ```
10357:  7706:  5073: 2526: 174: 
10358:  7707:  5074: 2527: 175: ### Index Optimization
10359:  7708:  5075: 2528: 176: 
10360:  7709:  5076: 2529: 177: ```json
10361:  7710:  5077: 2530: 178: {
10362:  7711:  5078: 2531: 179:   "indexes": [
10363:  7712:  5079: 2532: 180:     {
10364:  7713:  5080: 2533: 181:       "collectionGroup": "cards",
10365:  7714:  5081: 2534: 182:       "queryScope": "COLLECTION",
10366:  7715:  5082: 2535: 183:       "fields": [
10367:  7716:  5083: 2536: 184:         { "fieldPath": "groupId", "order": "ASCENDING" },
10368:  7717:  5084: 2537: 185:         { "fieldPath": "lastUpdated", "order": "DESCENDING" }
10369:  7718:  5085: 2538: 186:       ]
10370:  7719:  5086: 2539: 187:     }
10371:  7720:  5087: 2540: 188:   ]
10372:  7721:  5088: 2541: 189: }
10373:  7722:  5089: 2542: 190: ```
10374:  7723:  5090: 2543: 191: 
10375:  7724:  5091: 2544: 192: ## Rate Limiting
10376:  7725:  5092: 2545: 193: 
10377:  7726:  5093: 2546: 194: ### Token Bucket Implementation
10378:  7727:  5094: 2547: 195: 
10379:  7728:  5095: 2548: 196: ```typescript
10380:  7729:  5096: 2549: 197: const rateLimiter = {
10381:  7730:  5097: 2550: 198:   tokens: 100,
10382:  7731:  5098: 2551: 199:   refillRate: 10,
10383:  7732:  5099: 2552: 200:   interval: 1000,
10384:  7733:  5100: 2553: 201: 
10385:  7734:  5101: 2554: 202:   async acquire(): Promise<boolean> {
10386:  7735:  5102: 2555: 203:     if (this.tokens > 0) {
10387:  7736:  5103: 2556: 204:       this.tokens--;
10388:  7737:  5104: 2557: 205:       return true;
10389:  7738:  5105: 2558: 206:     }
10390:  7739:  5106: 2559: 207:     return false;
10391:  7740:  5107: 2560: 208:   }
10392:  7741:  5108: 2561: 209: };
10393:  7742:  5109: 2562: 210: ```
10394:  7743:  5110: 2563: 211: 
10395:  7744:  5111: 2564: 212: ### Request Throttling
10396:  7745:  5112: 2565: 213: 
10397:  7746:  5113: 2566: 214: ```typescript
10398:  7747:  5114: 2567: 215: async function makeThrottledRequest<T>(
10399:  7748:  5115: 2568: 216:   endpoint: string,
10400:  7749:  5116: 2569: 217:   options: RequestOptions = {}
10401:  7750:  5117: 2570: 218: ): Promise<T> {
10402:  7751:  5118: 2571: 219:   if (!await rateLimiter.acquire()) {
10403:  7752:  5119: 2572: 220:     throw new Error("Rate limit exceeded");
10404:  7753:  5120: 2573: 221:   }
10405:  7754:  5121: 2574: 222:   return makeRequest<T>(endpoint, options);
10406:  7755:  5122: 2575: 223: }
10407:  7756:  5123: 2576: 224: ```
10408:  7757:  5124: 2577: 225: 
10409:  7758:  5125: 2578: 226: ## Performance Monitoring
10410:  7759:  5126: 2579: 227: 
10411:  7760:  5127: 2580: 228: ### Progress Tracking
10412:  7761:  5128: 2581: 229: 
10413:  7762:  5129: 2582: 230: ```typescript
10414:  7763:  5130: 2583: 231: export class EnhancedProgressTracker {
10415:  7764:  5131: 2584: 232:   private calculateStats(): ProgressStats {
10416:  7765:  5132: 2585: 233:     const now = Date.now();
10417:  7766:  5133: 2586: 234:     const elapsed = (now - this.startTime) / 1000;
10418:  7767:  5134: 2587: 235:     const percent = (this.current / this.total) * 100;
10419:  7768:  5135: 2588: 236:     const rate = this.current / elapsed;
10420:  7769:  5136: 2589: 237:    
10421:  7770:  5137: 2590: 238:     return {
10422:  7771:  5138: 2591: 239:       current: this.current,
10423:  7772:  5139: 2592: 240:       total: this.total,
10424:  7773:  5140: 2593: 241:       percent,
10425:  7774:  5141: 2594: 242:       elapsed,
10426:  7775:  5142: 2595: 243:       rate,
10427:  7776:  5143: 2596: 244:       remaining: this.total - this.current,
10428:  7777:  5144: 2597: 245:       eta: (this.total - this.current) / rate
10429:  7778:  5145: 2598: 246:     };
10430:  7779:  5146: 2599: 247:   }
10431:  7780:  5147: 2600: 248: }
10432:  7781:  5148: 2601: 249: ```
10433:  7782:  5149: 2602: 250: 
10434:  7783:  5150: 2603: 251: ### Performance Metrics
10435:  7784:  5151: 2604: 252: 
10436:  7785:  5152: 2605: 253: ```typescript
10437:  7786:  5153: 2606: 254: interface PerformanceMetrics {
10438:  7787:  5154: 2607: 255:   timestamp: Date;
10439:  7788:  5155: 2608: 256:   operation: string;
10440:  7789:  5156: 2609: 257:   duration: number;
10441:  7790:  5157: 2610: 258:   memory: {
10442:  7791:  5158: 2611: 259:     heapUsed: number;
10443:  7792:  5159: 2612: 260:     heapTotal: number;
10444:  7793:  5160: 2613: 261:   };
10445:  7794:  5161: 2614: 262:   success: boolean;
10446:  7795:  5162: 2615: 263: }
10447:  7796:  5163: 2616: 264: 
10448:  7797:  5164: 2617: 265: async function trackPerformance(
10449:  7798:  5165: 2618: 266:   operation: string,
10450:  7799:  5166: 2619: 267:   task: () => Promise<void>
10451:  7800:  5167: 2620: 268: ): Promise<void> {
10452:  7801:  5168: 2621: 269:   const start = Date.now();
10453:  7802:  5169: 2622: 270:   const startMemory = process.memoryUsage();
10454:  7803:  5170: 2623: 271:  
10455:  7804:  5171: 2624: 272:   try {
10456:  7805:  5172: 2625: 273:     await task();
10457:  7806:  5173: 2626: 274:     const endMemory = process.memoryUsage();
10458:  7807:  5174: 2627: 275:    
10459:  7808:  5175: 2628: 276:     await logInfo("Performance metrics", {
10460:  7809:  5176: 2629: 277:       operation,
10461:  7810:  5177: 2630: 278:       duration: Date.now() - start,
10462:  7811:  5178: 2631: 279:       memoryDelta: {
10463:  7812:  5179: 2632: 280:         heapUsed: endMemory.heapUsed - startMemory.heapUsed,
10464:  7813:  5180: 2633: 281:         heapTotal: endMemory.heapTotal - startMemory.heapTotal
10465:  7814:  5181: 2634: 282:       }
10466:  7815:  5182: 2635: 283:     });
10467:  7816:  5183: 2636: 284:   } catch (error) {
10468:  7817:  5184: 2637: 285:     await logError(error, "performanceTracking");
10469:  7818:  5185: 2638: 286:     throw error;
10470:  7819:  5186: 2639: 287:   }
10471:  7820:  5187: 2640: 288: }
10472:  7821:  5188: 2641: 289: ```
10473:  7822:  5189: 2642: 290: 
10474:  7823:  5190: 2643: 291: ## Best Practices
10475:  7824:  5191: 2644: 292: 
10476:  7825:  5192: 2645: 293: ### Memory Management
10477:  7826:  5193: 2646: 294: 
10478:  7827:  5194: 2647: 295: 1. Use streams for large file operations
10479:  7828:  5195: 2648: 296: 2. Implement cleanup routines
10480:  7829:  5196: 2649: 297: 3. Monitor memory usage
10481:  7830:  5197: 2650: 298: 4. Set appropriate cache limits
10482:  7831:  5198: 2651: 299: 5. Use batch processing
10483:  7832:  5199: 2652: 300: 
10484:  7833:  5200: 2653: 301: ### Network Optimization
10485:  7834:  5201: 2654: 302: 
10486:  7835:  5202: 2655: 303: 1. Implement request caching
10487:  7836:  5203: 2656: 304: 2. Use compression
10488:  7837:  5204: 2657: 305: 3. Batch API requests
10489:  7838:  5205: 2658: 306: 4. Handle rate limits
10490:  7839:  5206: 2659: 307: 5. Implement retry strategies
10491:  7840:  5207: 2660: 308: 
10492:  7841:  5208: 2661: 309: ### Database Efficiency
10493:  7842:  5209: 2662: 310: 
10494:  7843:  5210: 2663: 311: 1. Use batch operations
10495:  7844:  5211: 2664: 312: 2. Optimize indexes
10496:  7845:  5212: 2665: 313: 3. Implement caching
10497:  7846:  5213: 2666: 314: 4. Monitor query performance
10498:  7847:  5214: 2667: 315: 5. Use appropriate batch sizes
10499:  7848:  5215: 2668: 316: 
10500:  7849:  5216: 2669: 317: ### Image Processing
10501:  7850:  5217: 2670: 318: 
10502:  7851:  5218: 2671: 319: 1. Use progressive loading
10503:  7852:  5219: 2672: 320: 2. Implement size limits
10504:  7853:  5220: 2673: 321: 3. Optimize compression
10505:  7854:  5221: 2674: 322: 4. Cache processed images
10506:  7855:  5222: 2675: 323: 5. Use appropriate quality settings
10507:  7856:  5223: 2676: 324: 
10508:  7857:  5224: 2677: 325: ## Monitoring and Alerts
10509:  7858:  5225: 2678: 326: 
10510:  7859:  5226: 2679: 327: ### Key Metrics
10511:  7860:  5227: 2680: 328: 
10512:  7861:  5228: 2681: 329: ```typescript
10513:  7862:  5229: 2682: 330: interface SystemMetrics {
10514:  7863:  5230: 2683: 331:   syncDuration: number;
10515:  7864:  5231: 2684: 332:   memoryUsage: number;
10516:  7865:  5232: 2685: 333:   processedItems: number;
10517:  7866:  5233: 2686: 334:   errorRate: number;
10518:  7867:  5234: 2687: 335:   cacheHitRate: number;
10519:  7868:  5235: 2688: 336: }
10520:  7869:  5236: 2689: 337: 
10521:  7870:  5237: 2690: 338: async function monitorSystem(): Promise<SystemMetrics> {
10522:  7871:  5238: 2691: 339:   return {
10523:  7872:  5239: 2692: 340:     syncDuration: calculateSyncDuration(),
10524:  7873:  5240: 2693: 341:     memoryUsage: process.memoryUsage().heapUsed,
10525:  7874:  5241: 2694: 342:     processedItems: getProcessedCount(),
10526:  7875:  5242: 2695: 343:     errorRate: calculateErrorRate(),
10527:  7876:  5243: 2696: 344:     cacheHitRate: calculateCacheHitRate()
10528:  7877:  5244: 2697: 345:   };
10529:  7878:  5245: 2698: 346: }
10530:  7879:  5246: 2699: 347: ```
10531:  7880:  5247: 2700: 348: 
10532:  7881:  5248: 2701: 349: ### Alert Thresholds
10533:  7882:  5249: 2702: 350: 
10534:  7883:  5250: 2703: 351: ```typescript
10535:  7884:  5251: 2704: 352: const alertThresholds = {
10536:  7885:  5252: 2705: 353:   syncDuration: 1000 * 60 * 30, // 30 minutes
10537:  7886:  5253: 2706: 354:   memoryUsage: 900 * 1024 * 1024, // 900MB
10538:  7887:  5254: 2707: 355:   errorRate: 0.05, // 5%
10539:  7888:  5255: 2708: 356:   cacheHitRate: 0.7 // 70%
10540:  7889:  5256: 2709: 357: };
10541:  7890:  5257: 2710: 358: ```
10542:  7891:  5258: 2711: </file>
10543:  7892:  5259: 2712: 
10544:  7893:  5260: 2713: <file path="security.md">
10545:  7894:  5261: 2714:   1: # Security Guidelines
10546:  7895:  5262: 2715:   2: 
10547:  7896:  5263: 2716:   3: ## Overview
10548:  7897:  5264: 2717:   4: 
10549:  7898:  5265: 2718:   5: This guide outlines security best practices and implementations for the FFTCG Sync Service, covering authentication, data validation, rate limiting, and other security considerations.
10550:  7899:  5266: 2719:   6: 
10551:  7900:  5267: 2720:   7: ## Authentication
10552:  7901:  5268: 2721:   8: 
10553:  7902:  5269: 2722:   9: ### Firebase Authentication
10554:  7903:  5270: 2723:  10: 
10555:  7904:  5271: 2724:  11: ```typescript
10556:  7905:  5272: 2725:  12: // Verify Firebase authentication token
10557:  7906:  5273: 2726:  13: async function verifyAuth(req: Request): Promise<void> {
10558:  7907:  5274: 2727:  14:   const token = req.headers.authorization?.split("Bearer ")[1];
10559:  7908:  5275: 2728:  15:   if (!token) {
10560:  7909:  5276: 2729:  16:     throw new Error("No authentication token provided");
10561:  7910:  5277: 2730:  17:   }
10562:  7911:  5278: 2731:  18: 
10563:  7912:  5279: 2732:  19:   try {
10564:  7913:  5280: 2733:  20:     await admin.auth().verifyIdToken(token);
10565:  7914:  5281: 2734:  21:   } catch (error) {
10566:  7915:  5282: 2735:  22:     throw new Error("Invalid authentication token");
10567:  7916:  5283: 2736:  23:   }
10568:  7917:  5284: 2737:  24: }
10569:  7918:  5285: 2738:  25: ```
10570:  7919:  5286: 2739:  26: 
10571:  7920:  5287: 2740:  27: ### Service Account Security
10572:  7921:  5288: 2741:  28: 
10573:  7922:  5289: 2742:  29: ```typescript
10574:  7923:  5290: 2743:  30: // Service account initialization
10575:  7924:  5291: 2744:  31: async function initializeFirebase(): Promise<FirebaseFirestore.Firestore> {
10576:  7925:  5292: 2745:  32:   try {
10577:  7926:  5293: 2746:  33:     const serviceAccountPath = path.resolve(__dirname, "../../../service_account_key.json");
10578:  7927:  5294: 2747:  34:     const serviceAccount = JSON.parse(await fs.readFile(serviceAccountPath, "utf8"));
10579:  7928:  5295: 2748:  35: 
10580:  7929:  5296: 2749:  36:     if (!admin.apps.length) {
10581:  7930:  5297: 2750:  37:       admin.initializeApp({
10582:  7931:  5298: 2751:  38:         credential: admin.credential.cert(serviceAccount)
10583:  7932:  5299: 2752:  39:       });
10584:  7933:  5300: 2753:  40:     }
10585:  7934:  5301: 2754:  41: 
10586:  7935:  5302: 2755:  42:     return admin.firestore();
10587:  7936:  5303: 2756:  43:   } catch (error) {
10588:  7937:  5304: 2757:  44:     throw new Error("Failed to initialize Firebase: " + error);
10589:  7938:  5305: 2758:  45:   }
10590:  7939:  5306: 2759:  46: }
10591:  7940:  5307: 2760:  47: ```
10592:  7941:  5308: 2761:  48: 
10593:  7942:  5309: 2762:  49: ## Input Validation
10594:  7943:  5310: 2763:  50: 
10595:  7944:  5311: 2764:  51: ### Request Validation
10596:  7945:  5312: 2765:  52: 
10597:  7946:  5313: 2766:  53: ```typescript
10598:  7947:  5314: 2767:  54: // Validate sync options
10599:  7948:  5315: 2768:  55: function validateSyncOptions(options: unknown): asserts options is SyncOptions {
10600:  7949:  5316: 2769:  56:   if (!options || typeof options !== "object") {
10601:  7950:  5317: 2770:  57:     throw new Error("Invalid options object");
10602:  7951:  5318: 2771:  58:   }
10603:  7952:  5319: 2772:  59: 
10604:  7953:  5320: 2773:  60:   const opts = options as Record<string, unknown>;
10605:  7954:  5321: 2774:  61:  
10606:  7955:  5322: 2775:  62:   if (opts.limit && typeof opts.limit !== "number") {
10607:  7956:  5323: 2776:  63:     throw new Error("Limit must be a number");
10608:  7957:  5324: 2777:  64:   }
10609:  7958:  5325: 2778:  65: 
10610:  7959:  5326: 2779:  66:   if (opts.groupId && typeof opts.groupId !== "string") {
10611:  7960:  5327: 2780:  67:     throw new Error("GroupId must be a string");
10612:  7961:  5328: 2781:  68:   }
10613:  7962:  5329: 2782:  69: }
10614:  7963:  5330: 2783:  70: ```
10615:  7964:  5331: 2784:  71: 
10616:  7965:  5332: 2785:  72: ### Image Validation
10617:  7966:  5333: 2786:  73: 
10618:  7967:  5334: 2787:  74: ```typescript
10619:  7968:  5335: 2788:  75: class ImageValidator {
10620:  7969:  5336: 2789:  76:   private static readonly MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
10621:  7970:  5337: 2790:  77: 
10622:  7971:  5338: 2791:  78:   static async validateImage(buffer: Buffer): Promise<ImageValidationError | null> {
10623:  7972:  5339: 2792:  79:     // Check file size
10624:  7973:  5340: 2793:  80:     if (buffer.length > this.MAX_FILE_SIZE) {
10625:  7974:  5341: 2794:  81:       return {
10626:  7975:  5342: 2795:  82:         code: "FILE_TOO_LARGE",
10627:  7976:  5343: 2796:  83:         message: `Image exceeds maximum size of ${this.MAX_FILE_SIZE / 1024 / 1024}MB`
10628:  7977:  5344: 2797:  84:       };
10629:  7978:  5345: 2798:  85:     }
10630:  7979:  5346: 2799:  86: 
10631:  7980:  5347: 2800:  87:     // Verify file signature
10632:  7981:  5348: 2801:  88:     if (!this.isJpeg(buffer)) {
10633:  7982:  5349: 2802:  89:       return {
10634:  7983:  5350: 2803:  90:         code: "INVALID_FORMAT",
10635:  7984:  5351: 2804:  91:         message: "Image must be in JPEG format"
10636:  7985:  5352: 2805:  92:       };
10637:  7986:  5353: 2806:  93:     }
10638:  7987:  5354: 2807:  94: 
10639:  7988:  5355: 2808:  95:     return null;
10640:  7989:  5356: 2809:  96:   }
10641:  7990:  5357: 2810:  97: }
10642:  7991:  5358: 2811:  98: ```
10643:  7992:  5359: 2812:  99: 
10644:  7993:  5360: 2813: 100: ## Rate Limiting
10645:  7994:  5361: 2814: 101: 
10646:  7995:  5362: 2815: 102: ### API Rate Limiting
10647:  7996:  5363: 2816: 103: 
10648:  7997:  5364: 2817: 104: ```typescript
10649:  7998:  5365: 2818: 105: const rateLimiter = {
10650:  7999:  5366: 2819: 106:   tokens: 100,
10651:  8000:  5367: 2820: 107:   refillRate: 10,
10652:  8001:  5368: 2821: 108:   interval: 1000,
10653:  8002:  5369: 2822: 109: 
10654:  8003:  5370: 2823: 110:   async acquire(): Promise<boolean> {
10655:  8004:  5371: 2824: 111:     if (this.tokens > 0) {
10656:  8005:  5372: 2825: 112:       this.tokens--;
10657:  8006:  5373: 2826: 113:       return true;
10658:  8007:  5374: 2827: 114:     }
10659:  8008:  5375: 2828: 115:     return false;
10660:  8009:  5376: 2829: 116:   }
10661:  8010:  5377: 2830: 117: };
10662:  8011:  5378: 2831: 118: ```
10663:  8012:  5379: 2832: 119: 
10664:  8013:  5380: 2833: 120: ### Function Concurrency Control
10665:  8014:  5381: 2834: 121: 
10666:  8015:  5382: 2835: 122: ```typescript
10667:  8016:  5383: 2836: 123: // Configure function instance limits
10668:  8017:  5384: 2837: 124: exports.syncCards = onRequest({
10669:  8018:  5385: 2838: 125:   timeoutSeconds: runtimeOpts.timeoutSeconds,
10670:  8019:  5386: 2839: 126:   memory: runtimeOpts.memory,
10671:  8020:  5387: 2840: 127:   maxInstances: 1
10672:  8021:  5388: 2841: 128: }, async (req: Request, res: Response) => {
10673:  8022:  5389: 2842: 129:   // Function implementation
10674:  8023:  5390: 2843: 130: });
10675:  8024:  5391: 2844: 131: ```
10676:  8025:  5392: 2845: 132: 
10677:  8026:  5393: 2846: 133: ## Data Protection
10678:  8027:  5394: 2847: 134: 
10679:  8028:  5395: 2848: 135: ### Data Encryption
10680:  8029:  5396: 2849: 136: 
10681:  8030:  5397: 2850: 137: ```typescript
10682:  8031:  5398: 2851: 138: // Hash sensitive data
10683:  8032:  5399: 2852: 139: function getDataHash(data: any): string {
10684:  8033:  5400: 2853: 140:   return crypto.createHash("md5")
10685:  8034:  5401: 2854: 141:     .update(JSON.stringify(data, Object.keys(data).sort()))
10686:  8035:  5402: 2855: 142:     .digest("hex");
10687:  8036:  5403: 2856: 143: }
10688:  8037:  5404: 2857: 144: ```
10689:  8038:  5405: 2858: 145: 
10690:  8039:  5406: 2859: 146: ### Secure Storage Access
10691:  8040:  5407: 2860: 147: 
10692:  8041:  5408: 2861: 148: ```typescript
10693:  8042:  5409: 2862: 149: // Secure URL generation
10694:  8043:  5410: 2863: 150: async function getSecureImageUrl(path: string): Promise<string> {
10695:  8044:  5411: 2864: 151:   const [url] = await storage
10696:  8045:  5412: 2865: 152:     .bucket(STORAGE.BUCKETS.CARD_IMAGES)
10697:  8046:  5413: 2866: 153:     .file(path)
10698:  8047:  5414: 2867: 154:     .getSignedUrl({
10699:  8048:  5415: 2868: 155:       action: "read",
10700:  8049:  5416: 2869: 156:       expires: "03-01-2500"
10701:  8050:  5417: 2870: 157:     });
10702:  8051:  5418: 2871: 158:   return url;
10703:  8052:  5419: 2872: 159: }
10704:  8053:  5420: 2873: 160: ```
10705:  8054:  5421: 2874: 161: 
10706:  8055:  5422: 2875: 162: ## Error Handling
10707:  8056:  5423: 2876: 163: 
10708:  8057:  5424: 2877: 164: ### Secure Error Logging
10709:  8058:  5425: 2878: 165: 
10710:  8059:  5426: 2879: 166: ```typescript
10711:  8060:  5427: 2880: 167: export async function logDetailedError(
10712:  8061:  5428: 2881: 168:   error: Error,
10713:  8062:  5429: 2882: 169:   context: string,
10714:  8063:  5430: 2883: 170:   metadata?: Record<string, unknown>,
10715:  8064:  5431: 2884: 171:   severity: "ERROR" | "WARNING" | "CRITICAL" = "ERROR"
10716:  8065:  5432: 2885: 172: ): Promise<void> {
10717:  8066:  5433: 2886: 173:   const report: ErrorReport = {
10718:  8067:  5434: 2887: 174:     timestamp: new Date(),
10719:  8068:  5435: 2888: 175:     context,
10720:  8069:  5436: 2889: 176:     error: error.message,
10721:  8070:  5437: 2890: 177:     stackTrace: error.stack,
10722:  8071:  5438: 2891: 178:     metadata,
10723:  8072:  5439: 2892: 179:     severity
10724:  8073:  5440: 2893: 180:   };
10725:  8074:  5441: 2894: 181: 
10726:  8075:  5442: 2895: 182:   // Sanitize sensitive information before logging
10727:  8076:  5443: 2896: 183:   const sanitizedReport = sanitizeErrorReport(report);
10728:  8077:  5444: 2897: 184:   await db.collection(COLLECTION.LOGS).add(sanitizedReport);
10729:  8078:  5445: 2898: 185: }
10730:  8079:  5446: 2899: 186: ```
10731:  8080:  5447: 2900: 187: 
10732:  8081:  5448: 2901: 188: ### Error Response Sanitization
10733:  8082:  5449: 2902: 189: 
10734:  8083:  5450: 2903: 190: ```typescript
10735:  8084:  5451: 2904: 191: function sanitizeErrorMessage(error: Error): string {
10736:  8085:  5452: 2905: 192:   // Remove sensitive information from error messages
10737:  8086:  5453: 2906: 193:   return error.message.replace(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)/gi, '[EMAIL]')
10738:  8087:  5454: 2907: 194:     .replace(/\b\d{4}\b/g, '[ID]');
10739:  8088:  5455: 2908: 195: }
10740:  8089:  5456: 2909: 196: ```
10741:  8090:  5457: 2910: 197: 
10742:  8091:  5458: 2911: 198: ## Network Security
10743:  8092:  5459: 2912: 199: 
10744:  8093:  5460: 2913: 200: ### Request Configuration
10745:  8094:  5461: 2914: 201: 
10746:  8095:  5462: 2915: 202: ```typescript
10747:  8096:  5463: 2916: 203: const secureRequestConfig = {
10748:  8097:  5464: 2917: 204:   timeout: 30000,
10749:  8098:  5465: 2918: 205:   headers: {
10750:  8099:  5466: 2919: 206:     "Accept": "application/json",
10751:  8100:  5467: 2920: 207:     "User-Agent": "FFTCG-Sync-Service/1.0"
10752:  8101:  5468: 2921: 208:   },
10753:  8102:  5469: 2922: 209:   validateStatus: (status: number) => status < 400
10754:  8103:  5470: 2923: 210: };
10755:  8104:  5471: 2924: 211: ```
10756:  8105:  5472: 2925: 212: 
10757:  8106:  5473: 2926: 213: ### HTTPS Enforcement
10758:  8107:  5474: 2927: 214: 
10759:  8108:  5475: 2928: 215: ```typescript
10760:  8109:  5476: 2929: 216: // Ensure HTTPS usage
10761:  8110:  5477: 2930: 217: const BASE_URL = "https://tcgcsv.com";
10762:  8111:  5478: 2931: 218: const SECURE_STORAGE_URL = "https://storage.googleapis.com";
10763:  8112:  5479: 2932: 219: ```
10764:  8113:  5480: 2933: 220: 
10765:  8114:  5481: 2934: 221: ## Firestore Security Rules
10766:  8115:  5482: 2935: 222: 
10767:  8116:  5483: 2936: 223: ```typescript
10768:  8117:  5484: 2937: 224: // firestore.rules
10769:  8118:  5485: 2938: 225: rules_version = '2';
10770:  8119:  5486: 2939: 226: service cloud.firestore {
10771:  8120:  5487: 2940: 227:   match /databases/{database}/documents {
10772:  8121:  5488: 2941: 228:     // Card collection rules
10773:  8122:  5489: 2942: 229:     match /cards/{cardId} {
10774:  8123:  5490: 2943: 230:       allow read: if true;
10775:  8124:  5491: 2944: 231:       allow write: if request.auth != null 
10776:  8125:  5492: 2945: 232:         && request.auth.token.admin == true;
10777:  8126:  5493: 2946: 233:     }
10778:  8127:  5494: 2947: 234: 
10779:  8128:  5495: 2948: 235:     // Price collection rules
10780:  8129:  5496: 2949: 236:     match /prices/{priceId} {
10781:  8130:  5497: 2950: 237:       allow read: if true;
10782:  8131:  5498: 2951: 238:       allow write: if request.auth != null 
10783:  8132:  5499: 2952: 239:         && request.auth.token.admin == true;
10784:  8133:  5500: 2953: 240:     }
10785:  8134:  5501: 2954: 241: 
10786:  8135:  5502: 2955: 242:     // Sync metadata rules
10787:  8136:  5503: 2956: 243:     match /syncMetadata/{docId} {
10788:  8137:  5504: 2957: 244:       allow read: if request.auth != null;
10789:  8138:  5505: 2958: 245:       allow write: if request.auth != null 
10790:  8139:  5506: 2959: 246:         && request.auth.token.admin == true;
10791:  8140:  5507: 2960: 247:     }
10792:  8141:  5508: 2961: 248:   }
10793:  8142:  5509: 2962: 249: }
10794:  8143:  5510: 2963: 250: ```
10795:  8144:  5511: 2964: 251: 
10796:  8145:  5512: 2965: 252: ## Storage Security Rules
10797:  8146:  5513: 2966: 253: 
10798:  8147:  5514: 2967: 254: ```typescript
10799:  8148:  5515: 2968: 255: // storage.rules
10800:  8149:  5516: 2969: 256: rules_version = '2';
10801:  8150:  5517: 2970: 257: service firebase.storage {
10802:  8151:  5518: 2971: 258:   match /b/{bucket}/o {
10803:  8152:  5519: 2972: 259:     match /card-images/{groupId}/{imageId} {
10804:  8153:  5520: 2973: 260:       allow read: if true;
10805:  8154:  5521: 2974: 261:       allow write: if request.auth != null 
10806:  8155:  5522: 2975: 262:         && request.auth.token.admin == true
10807:  8156:  5523: 2976: 263:         && request.resource.size < 5 * 1024 * 1024
10808:  8157:  5524: 2977: 264:         && request.resource.contentType.matches('image/jpeg');
10809:  8158:  5525: 2978: 265:     }
10810:  8159:  5526: 2979: 266:   }
10811:  8160:  5527: 2980: 267: }
10812:  8161:  5528: 2981: 268: ```
10813:  8162:  5529: 2982: 269: 
10814:  8163:  5530: 2983: 270: ## Best Practices
10815:  8164:  5531: 2984: 271: 
10816:  8165:  5532: 2985: 272: ### API Security
10817:  8166:  5533: 2986: 273: 
10818:  8167:  5534: 2987: 274: 1. Use HTTPS for all requests
10819:  8168:  5535: 2988: 275: 2. Implement proper authentication
10820:  8169:  5536: 2989: 276: 3. Validate all inputs
10821:  8170:  5537: 2990: 277: 4. Rate limit requests
10822:  8171:  5538: 2991: 278: 5. Monitor for suspicious activity
10823:  8172:  5539: 2992: 279: 
10824:  8173:  5540: 2993: 280: ### Data Security
10825:  8174:  5541: 2994: 281: 
10826:  8175:  5542: 2995: 282: 1. Minimize sensitive data storage
10827:  8176:  5543: 2996: 283: 2. Encrypt sensitive information
10828:  8177:  5544: 2997: 284: 3. Implement proper access controls
10829:  8178:  5545: 2998: 285: 4. Regular security audits
10830:  8179:  5546: 2999: 286: 5. Secure backup procedures
10831:  8180:  5547: 3000: 287: 
10832:  8181:  5548: 3001: 288: ### Error Management
10833:  8182:  5549: 3002: 289: 
10834:  8183:  5550: 3003: 290: 1. Sanitize error messages
10835:  8184:  5551: 3004: 291: 2. Avoid exposing internal details
10836:  8185:  5552: 3005: 292: 3. Log security events
10837:  8186:  5553: 3006: 293: 4. Monitor error patterns
10838:  8187:  5554: 3007: 294: 5. Implement proper error recovery
10839:  8188:  5555: 3008: 295: 
10840:  8189:  5556: 3009: 296: ### Function Security
10841:  8190:  5557: 3010: 297: 
10842:  8191:  5558: 3011: 298: 1. Use minimal permissions
10843:  8192:  5559: 3012: 299: 2. Implement request validation
10844:  8193:  5560: 3013: 300: 3. Control function concurrency
10845:  8194:  5561: 3014: 301: 4. Monitor function execution
10846:  8195:  5562: 3015: 302: 5. Regular security updates
10847:  8196:  5563: 3016: 303: 
10848:  8197:  5564: 3017: 304: ## Security Monitoring
10849:  8198:  5565: 3018: 305: 
10850:  8199:  5566: 3019: 306: ### Logging Security Events
10851:  8200:  5567: 3020: 307: 
10852:  8201:  5568: 3021: 308: ```typescript
10853:  8202:  5569: 3022: 309: interface SecurityEvent {
10854:  8203:  5570: 3023: 310:   timestamp: Date;
10855:  8204:  5571: 3024: 311:   eventType: "AUTH" | "ACCESS" | "ERROR" | "MODIFICATION";
10856:  8205:  5572: 3025: 312:   severity: "LOW" | "MEDIUM" | "HIGH" | "CRITICAL";
10857:  8206:  5573: 3026: 313:   details: Record<string, unknown>;
10858:  8207:  5574: 3027: 314: }
10859:  8208:  5575: 3028: 315: 
10860:  8209:  5576: 3029: 316: async function logSecurityEvent(event: SecurityEvent): Promise<void> {
10861:  8210:  5577: 3030: 317:   await db.collection("securityLogs").add({
10862:  8211:  5578: 3031: 318:     ...event,
10863:  8212:  5579: 3032: 319:     timestamp: new Date()
10864:  8213:  5580: 3033: 320:   });
10865:  8214:  5581: 3034: 321: }
10866:  8215:  5582: 3035: 322: ```
10867:  8216:  5583: 3036: 323: 
10868:  8217:  5584: 3037: 324: ### Audit Trail
10869:  8218:  5585: 3038: 325: 
10870:  8219:  5586: 3039: 326: ```typescript
10871:  8220:  5587: 3040: 327: interface AuditLog {
10872:  8221:  5588: 3041: 328:   timestamp: Date;
10873:  8222:  5589: 3042: 329:   userId: string;
10874:  8223:  5590: 3043: 330:   action: string;
10875:  8224:  5591: 3044: 331:   resource: string;
10876:  8225:  5592: 3045: 332:   changes: Record<string, unknown>;
10877:  8226:  5593: 3046: 333: }
10878:  8227:  5594: 3047: 334: 
10879:  8228:  5595: 3048: 335: async function createAuditLog(
10880:  8229:  5596: 3049: 336:   action: string,
10881:  8230:  5597: 3050: 337:   resource: string,
10882:  8231:  5598: 3051: 338:   changes: Record<string, unknown>
10883:  8232:  5599: 3052: 339: ): Promise<void> {
10884:  8233:  5600: 3053: 340:   await db.collection("auditLogs").add({
10885:  8234:  5601: 3054: 341:     timestamp: new Date(),
10886:  8235:  5602: 3055: 342:     action,
10887:  8236:  5603: 3056: 343:     resource,
10888:  8237:  5604: 3057: 344:     changes
10889:  8238:  5605: 3058: 345:   });
10890:  8239:  5606: 3059: 346: }
10891:  8240:  5607: 3060: 347: ```
10892:  8241:  5608: 3061: 348: 
10893:  8242:  5609: 3062: 349: ### Security Metrics
10894:  8243:  5610: 3063: 350: 
10895:  8244:  5611: 3064: 351: ```typescript
10896:  8245:  5612: 3065: 352: interface SecurityMetrics {
10897:  8246:  5613: 3066: 353:   failedAuthAttempts: number;
10898:  8247:  5614: 3067: 354:   rateLimitExceeded: number;
10899:  8248:  5615: 3068: 355:   suspiciousRequests: number;
10900:  8249:  5616: 3069: 356:   securityEvents: number;
10901:  8250:  5617: 3070: 357: }
10902:  8251:  5618: 3071: 358: 
10903:  8252:  5619: 3072: 359: async function trackSecurityMetrics(): Promise<SecurityMetrics> {
10904:  8253:  5620: 3073: 360:   // Implementation of security metrics tracking
10905:  8254:  5621: 3074: 361:   return {
10906:  8255:  5622: 3075: 362:     failedAuthAttempts: 0,
10907:  8256:  5623: 3076: 363:     rateLimitExceeded: 0,
10908:  8257:  5624: 3077: 364:     suspiciousRequests: 0,
10909:  8258:  5625: 3078: 365:     securityEvents: 0
10910:  8259:  5626: 3079: 366:   };
10911:  8260:  5627: 3080: 367: }
10912:  8261:  5628: 3081: 368: ```
10913:  8262:  5629: 3082: </file>
10914:  8263:  5630: 3083: 
10915:  8264:  5631: 3084: <file path="services/card-sync.md">
10916:  8265:  5632: 3085:   1: # Card Synchronization Service
10917:  8266:  5633: 3086:   2: 
10918:  8267:  5634: 3087:   3: ## Overview
10919:  8268:  5635: 3088:   4: 
10920:  8269:  5636: 3089:   5: The Card Synchronization service (`cardSync.ts`) manages the automated synchronization of FFTCG card data from TCGPlayer's API. It handles card information updates, image processing, and maintains data consistency through hash-based versioning.
10921:  8270:  5637: 3090:   6: 
10922:  8271:  5638: 3091:   7: ## Core Features
10923:  8272:  5639: 3092:   8: 
10924:  8273:  5640: 3093:   9: - Automated card data synchronization
10925:  8274:  5641: 3094:  10: - Image processing and storage
10926:  8275:  5642: 3095:  11: - Batch processing
10927:  8276:  5643: 3096:  12: - Error handling and retry logic
10928:  8277:  5644: 3097:  13: - Dry run capability for testing
10929:  8278:  5645: 3098:  14: - Progress tracking and logging
10930:  8279:  5646: 3099:  15: 
10931:  8280:  5647: 3100:  16: ## API Reference
10932:  8281:  5648: 3101:  17: 
10933:  8282:  5649: 3102:  18: ### Main Function
10934:  8283:  5650: 3103:  19: 
10935:  8284:  5651: 3104:  20: ```typescript
10936:  8285:  5652: 3105:  21: async function syncCards(options: SyncOptions = {}): Promise<SyncMetadata>
10937:  8286:  5653: 3106:  22: ```
10938:  8287:  5654: 3107:  23: 
10939:  8288:  5655: 3108:  24: #### Options
10940:  8289:  5656: 3109:  25: 
10941:  8290:  5657: 3110:  26: ```typescript
10942:  8291:  5658: 3111:  27: interface SyncOptions {
10943:  8292:  5659: 3112:  28:   dryRun?: boolean;      // Run without making changes
10944:  8293:  5660: 3113:  29:   limit?: number;        // Limit number of cards processed
10945:  8294:  5661: 3114:  30:   groupId?: string;      // Process specific group only
10946:  8295:  5662: 3115:  31:   skipImages?: boolean;  // Skip image processing
10947:  8296:  5663: 3116:  32: }
10948:  8297:  5664: 3117:  33: ```
10949:  8298:  5665: 3118:  34: 
10950:  8299:  5666: 3119:  35: #### Response
10951:  8300:  5667: 3120:  36: 
10952:  8301:  5668: 3121:  37: ```typescript
10953:  8302:  5669: 3122:  38: interface SyncMetadata {
10954:  8303:  5670: 3123:  39:   lastSync: Date;
10955:  8304:  5671: 3124:  40:   status: "in_progress" | "success" | "failed" | "completed_with_errors";
10956:  8305:  5672: 3125:  41:   cardCount: number;
10957:  8306:  5673: 3126:  42:   type: "manual" | "scheduled";
10958:  8307:  5674: 3127:  43:   groupsProcessed: number;
10959:  8308:  5675: 3128:  44:   groupsUpdated: number;
10960:  8309:  5676: 3129:  45:   errors: string[];
10961:  8310:  5677: 3130:  46:   duration?: number;
10962:  8311:  5678: 3131:  47:   imagesProcessed?: number;
10963:  8312:  5679: 3132:  48:   imagesUpdated?: number;
10964:  8313:  5680: 3133:  49: }
10965:  8314:  5681: 3134:  50: ```
10966:  8315:  5682: 3135:  51: 
10967:  8316:  5683: 3136:  52: ## Usage Examples
10968:  8317:  5684: 3137:  53: 
10969:  8318:  5685: 3138:  54: ### Scheduled Sync
10970:  8319:  5686: 3139:  55: 
10971:  8320:  5687: 3140:  56: The service runs automatically on a daily schedule:
10972:  8321:  5688: 3141:  57: 
10973:  8322:  5689: 3142:  58: ```typescript
10974:  8323:  5690: 3143:  59: exports.scheduledCardSync = onSchedule({
10975:  8324:  5691: 3144:  60:   schedule: "0 21 * * *", // Daily at 21:00 UTC
10976:  8325:  5692: 3145:  61:   timeZone: "UTC",
10977:  8326:  5693: 3146:  62:   memory: runtimeOpts.memory,
10978:  8327:  5694: 3147:  63:   timeoutSeconds: runtimeOpts.timeoutSeconds,
10979:  8328:  5695: 3148:  64:   retryCount: 3,
10980:  8329:  5696: 3149:  65: });
10981:  8330:  5697: 3150:  66: ```
10982:  8331:  5698: 3151:  67: 
10983:  8332:  5699: 3152:  68: ### Manual Sync
10984:  8333:  5700: 3153:  69: 
10985:  8334:  5701: 3154:  70: Test specific groups or cards:
10986:  8335:  5702: 3155:  71: 
10987:  8336:  5703: 3156:  72: ```typescript
10988:  8337:  5704: 3157:  73: // Test sync with limits
10989:  8338:  5705: 3158:  74: await syncCards({
10990:  8339:  5706: 3159:  75:   dryRun: true,
10991:  8340:  5707: 3160:  76:   limit: 5,
10992:  8341:  5708: 3161:  77:   groupId: "23783"
10993:  8342:  5709: 3162:  78: });
10994:  8343:  5710: 3163:  79: 
10995:  8344:  5711: 3164:  80: // Full manual sync
10996:  8345:  5712: 3165:  81: await syncCards({
10997:  8346:  5713: 3166:  82:   dryRun: false
10998:  8347:  5714: 3167:  83: });
10999:  8348:  5715: 3168:  84: ```
11000:  8349:  5716: 3169:  85: 
11001:  8350:  5717: 3170:  86: ## Error Handling
11002:  8351:  5718: 3171:  87: 
11003:  8352:  5719: 3172:  88: The service implements comprehensive error handling:
11004:  8353:  5720: 3173:  89: 
11005:  8354:  5721: 3174:  90: ```typescript
11006:  8355:  5722: 3175:  91: class SyncError extends Error implements GenericError {
11007:  8356:  5723: 3176:  92:   constructor(
11008:  8357:  5724: 3177:  93:     message: string,
11009:  8358:  5725: 3178:  94:     code?: string,
11010:  8359:  5726: 3179:  95:     public details?: Record<string, unknown>
11011:  8360:  5727: 3180:  96:   ) {
11012:  8361:  5728: 3181:  97:     super(message);
11013:  8362:  5729: 3182:  98:     this.name = "SyncError";
11014:  8363:  5730: 3183:  99:     this.code = code;
11015:  8364:  5731: 3184: 100:   }
11016:  8365:  5732: 3185: 101: }
11017:  8366:  5733: 3186: 102: ```
11018:  8367:  5734: 3187: 103: 
11019:  8368:  5735: 3188: 104: ### Retry Logic
11020:  8369:  5736: 3189: 105: 
11021:  8370:  5737: 3190: 106: ```typescript
11022:  8371:  5738: 3191: 107: const MAX_RETRIES = 3;
11023:  8372:  5739: 3192: 108: const BASE_DELAY = 1000; // 1 second
11024:  8373:  5740: 3193: 109: 
11025:  8374:  5741: 3194: 110: // Exponential backoff
11026:  8375:  5742: 3195: 111: const delay = Math.pow(2, retryCount) * BASE_DELAY;
11027:  8376:  5743: 3196: 112: ```
11028:  8377:  5744: 3197: 113: 
11029:  8378:  5745: 3198: 114: ## Data Processing
11030:  8379:  5746: 3199: 115: 
11031:  8380:  5747: 3200: 116: ### Batch Processing
11032:  8381:  5748: 3201: 117: 
11033:  8382:  5749: 3202: 118: ```typescript
11034:  8383:  5750: 3203: 119: async function processBatch<T>(
11035:  8384:  5751: 3204: 120:   items: T[],
11036:  8385:  5752: 3205: 121:   processor: (batch: T[]) => Promise<void>,
11037:  8386:  5753: 3206: 122:   options: BatchOptions = {}
11038:  8387:  5754: 3207: 123: ): Promise<void>
11039:  8388:  5755: 3208: 124: ```
11040:  8389:  5756: 3209: 125: 
11041:  8390:  5757: 3210: 126: ### Hash Generation
11042:  8391:  5758: 3211: 127: 
11043:  8392:  5759: 3212: 128: ```typescript
11044:  8393:  5760: 3213: 129: function getDataHash(data: any): string {
11045:  8394:  5761: 3214: 130:   return crypto.createHash("md5")
11046:  8395:  5762: 3215: 131:     .update(JSON.stringify(data, Object.keys(data).sort()))
11047:  8396:  5763: 3216: 132:     .digest("hex");
11048:  8397:  5764: 3217: 133: }
11049:  8398:  5765: 3218: 134: ```
11050:  8399:  5766: 3219: 135: 
11051:  8400:  5767: 3220: 136: ## Monitoring
11052:  8401:  5768: 3221: 137: 
11053:  8402:  5769: 3222: 138: ### Progress Tracking
11054:  8403:  5770: 3223: 139: 
11055:  8404:  5771: 3224: 140: The service logs detailed progress information:
11056:  8405:  5772: 3225: 141: 
11057:  8406:  5773: 3226: 142: - Groups processed
11058:  8407:  5774: 3227: 143: - Cards updated
11059:  8408:  5775: 3228: 144: - Images processed
11060:  8409:  5776: 3229: 145: - Processing duration
11061:  8410:  5777: 3230: 146: - Error counts
11062:  8411:  5778: 3231: 147: 
11063:  8412:  5779: 3232: 148: ### Success Metrics
11064:  8413:  5780: 3233: 149: 
11065:  8414:  5781: 3234: 150: - Number of groups updated
11066:  8415:  5782: 3235: 151: - Number of cards processed
11067:  8416:  5783: 3236: 152: - Number of images updated
11068:  8417:  5784: 3237: 153: - Processing duration
11069:  8418:  5785: 3238: 154: - Error rate
11070:  8419:  5786: 3239: 155: 
11071:  8420:  5787: 3240: 156: ## Best Practices
11072:  8421:  5788: 3241: 157: 
11073:  8422:  5789: 3242: 158: 1. Testing Changes:
11074:  8423:  5790: 3243: 159: 
11075:  8424:  5791: 3244: 160: ```typescript
11076:  8425:  5792: 3245: 161: // Always test with dry run first
11077:  8426:  5793: 3246: 162: await syncCards({
11078:  8427:  5794: 3247: 163:   dryRun: true,
11079:  8428:  5795: 3248: 164:   limit: 5
11080:  8429:  5796: 3249: 165: });
11081:  8430:  5797: 3250: 166: ```
11082:  8431:  5798: 3251: 167: 
11083:  8432:  5799: 3252: 168: 1. Error Monitoring:
11084:  8433:  5800: 3253: 169: 
11085:  8434:  5801: 3254: 170: ```typescript
11086:  8435:  5802: 3255: 171: // Check sync metadata for errors
11087:  8436:  5803: 3256: 172: const metadata = await syncCards();
11088:  8437:  5804: 3257: 173: if (metadata.errors.length > 0) {
11089:  8438:  5805: 3258: 174:   console.error("Sync completed with errors:", metadata.errors);
11090:  8439:  5806: 3259: 175: }
11091:  8440:  5807: 3260: 176: ```
11092:  8441:  5808: 3261: 177: 
11093:  8442:  5809: 3262: 178: 1. Resource Management:
11094:  8443:  5810: 3263: 179: 
11095:  8444:  5811: 3264: 180: ```typescript
11096:  8445:  5812: 3265: 181: // Use limits when testing
11097:  8446:  5813: 3266: 182: const options: SyncOptions = {
11098:  8447:  5814: 3267: 183:   limit: 10,
11099:  8448:  5815: 3268: 184:   dryRun: true
11100:  8449:  5816: 3269: 185: };
11101:  8450:  5817: 3270: 186: ```
11102:  8451:  5818: 3271: 187: 
11103:  8452:  5819: 3272: 188: ## Troubleshooting
11104:  8453:  5820: 3273: 189: 
11105:  8454:  5821: 3274: 190: ### Common Issues
11106:  8455:  5822: 3275: 191: 
11107:  8456:  5823: 3276: 192: 1. Rate Limiting:
11108:  8457:  5824: 3277: 193:    - Implement proper delays between requests
11109:  8458:  5825: 3278: 194:    - Use batch processing
11110:  8459:  5826: 3279: 195:    - Follow exponential backoff
11111:  8460:  5827: 3280: 196: 
11112:  8461:  5828: 3281: 197: 2. Image Processing:
11113:  8462:  5829: 3282: 198:    - Verify storage permissions
11114:  8463:  5830: 3283: 199:    - Check image URLs
11115:  8464:  5831: 3284: 200:    - Monitor storage quotas
11116:  8465:  5832: 3285: 201: 
11117:  8466:  5833: 3286: 202: 3. Data Consistency:
11118:  8467:  5834: 3287: 203:    - Use hash verification
11119:  8468:  5835: 3288: 204:    - Implement proper error handling
11120:  8469:  5836: 3289: 205:    - Monitor sync metadata
11121:  8470:  5837: 3290: 206: 
11122:  8471:  5838: 3291: 207: ### Debug Mode
11123:  8472:  5839: 3292: 208: 
11124:  8473:  5840: 3293: 209: Enable detailed logging:
11125:  8474:  5841: 3294: 210: 
11126:  8475:  5842: 3295: 211: ```typescript
11127:  8476:  5843: 3296: 212: // Enable debug logging
11128:  8477:  5844: 3297: 213: await syncCards({
11129:  8478:  5845: 3298: 214:   dryRun: true,
11130:  8479:  5846: 3299: 215:   debug: true
11131:  8480:  5847: 3300: 216: });
11132:  8481:  5848: 3301: 217: ```
11133:  8482:  5849: 3302: 218: 
11134:  8483:  5850: 3303: 219: ## Related Components
11135:  8484:  5851: 3304: 220: 
11136:  8485:  5852: 3305: 221: - [Price Sync Service](./price-sync)
11137:  8486:  5853: 3306: 222: - [Image Handler](../utils/image-handler)
11138:  8487:  5854: 3307: 223: - [Cache System](../utils/cache)
11139:  8488:  5855: 3308: 224: - [Error Handling](../utils/error-handling)
11140:  8489:  5856: 3309: </file>
11141:  8490:  5857: 3310: 
11142:  8491:  5858: 3311: <file path="services/price-sync.md">
11143:  8492:  5859: 3312:   1: # Price Synchronization Service
11144:  8493:  5860: 3313:   2: 
11145:  8494:  5861: 3314:   3: ## Overview
11146:  8495:  5862: 3315:   4: 
11147:  8496:  5863: 3316:   5: The Price Synchronization service (`priceSync.ts`) manages automated price updates for FFTCG cards. It handles both normal and foil price variants, implements version control through hashing, and provides detailed logging of price changes.
11148:  8497:  5864: 3317:   6: 
11149:  8498:  5865: 3318:   7: ## Core Features
11150:  8499:  5866: 3319:   8: 
11151:  8500:  5867: 3320:   9: - Real-time price synchronization
11152:  8501:  5868: 3321:  10: - Support for multiple price variants (Normal/Foil)
11153:  8502:  5869: 3322:  11: - Hash-based version control
11154:  8503:  5870: 3323:  12: - Batch processing
11155:  8504:  5871: 3324:  13: - Detailed price change logging
11156:  8505:  5872: 3325:  14: - Configurable sync intervals
11157:  8506:  5873: 3326:  15: 
11158:  8507:  5874: 3327:  16: ## API Reference
11159:  8508:  5875: 3328:  17: 
11160:  8509:  5876: 3329:  18: ### Main Function
11161:  8510:  5877: 3330:  19: 
11162:  8511:  5878: 3331:  20: ```typescript
11163:  8512:  5879: 3332:  21: async function syncPrices(options: SyncOptions = {}): Promise<SyncMetadata>
11164:  8513:  5880: 3333:  22: ```
11165:  8514:  5881: 3334:  23: 
11166:  8515:  5882: 3335:  24: #### Options
11167:  8516:  5883: 3336:  25: 
11168:  8517:  5884: 3337:  26: ```typescript
11169:  8518:  5885: 3338:  27: interface SyncOptions {
11170:  8519:  5886: 3339:  28:   dryRun?: boolean;      // Run without making changes
11171:  8520:  5887: 3340:  29:   limit?: number;        // Limit number of prices processed
11172:  8521:  5888: 3341:  30:   groupId?: string;      // Process specific group only
11173:  8522:  5889: 3342:  31:   productId?: number;    // Process specific product only
11174:  8523:  5890: 3343:  32:   showAll?: boolean;     // Show all prices, including unchanged
11175:  8524:  5891: 3344:  33: }
11176:  8525:  5892: 3345:  34: ```
11177:  8526:  5893: 3346:  35: 
11178:  8527:  5894: 3347:  36: #### Price Data Structure
11179:  8528:  5895: 3348:  37: 
11180:  8529:  5896: 3349:  38: ```typescript
11181:  8530:  5897: 3350:  39: interface CardPrice {
11182:  8531:  5898: 3351:  40:   productId: number;
11183:  8532:  5899: 3352:  41:   lowPrice: number;
11184:  8533:  5900: 3353:  42:   midPrice: number;
11185:  8534:  5901: 3354:  43:   highPrice: number;
11186:  8535:  5902: 3355:  44:   marketPrice: number | null;
11187:  8536:  5903: 3356:  45:   directLowPrice: number | null;
11188:  8537:  5904: 3357:  46:   subTypeName: "Normal" | "Foil";
11189:  8538:  5905: 3358:  47: }
11190:  8539:  5906: 3359:  48: 
11191:  8540:  5907: 3360:  49: interface PriceData {
11192:  8541:  5908: 3361:  50:   normal?: CardPrice;
11193:  8542:  5909: 3362:  51:   foil?: CardPrice;
11194:  8543:  5910: 3363:  52:   lastUpdated: Date;
11195:  8544:  5911: 3364:  53: }
11196:  8545:  5912: 3365:  54: ```
11197:  8546:  5913: 3366:  55: 
11198:  8547:  5914: 3367:  56: ## Usage Examples
11199:  8548:  5915: 3368:  57: 
11200:  8549:  5916: 3369:  58: ### Scheduled Sync
11201:  8550:  5917: 3370:  59: 
11202:  8551:  5918: 3371:  60: Automated daily price updates:
11203:  8552:  5919: 3372:  61: 
11204:  8553:  5920: 3373:  62: ```typescript
11205:  8554:  5921: 3374:  63: exports.scheduledPriceSync = onSchedule({
11206:  8555:  5922: 3375:  64:   schedule: "30 21 * * *", // Daily at 21:30 UTC
11207:  8556:  5923: 3376:  65:   timeZone: "UTC",
11208:  8557:  5924: 3377:  66:   memory: runtimeOpts.memory,
11209:  8558:  5925: 3378:  67:   timeoutSeconds: runtimeOpts.timeoutSeconds,
11210:  8559:  5926: 3379:  68:   retryCount: 3,
11211:  8560:  5927: 3380:  69: });
11212:  8561:  5928: 3381:  70: ```
11213:  8562:  5929: 3382:  71: 
11214:  8563:  5930: 3383:  72: ### Manual Price Checks
11215:  8564:  5931: 3384:  73: 
11216:  8565:  5932: 3385:  74: ```typescript
11217:  8566:  5933: 3386:  75: // Test specific product
11218:  8567:  5934: 3387:  76: await syncPrices({
11219:  8568:  5935: 3388:  77:   dryRun: true,
11220:  8569:  5936: 3389:  78:   productId: 477236,
11221:  8570:  5937: 3390:  79:   showAll: true
11222:  8571:  5938: 3391:  80: });
11223:  8572:  5939: 3392:  81: 
11224:  8573:  5940: 3393:  82: // Check specific group
11225:  8574:  5941: 3394:  83: await syncPrices({
11226:  8575:  5942: 3395:  84:   dryRun: true,
11227:  8576:  5943: 3396:  85:   groupId: "23783",
11228:  8577:  5944: 3397:  86:   limit: 10
11229:  8578:  5945: 3398:  87: });
11230:  8579:  5946: 3399:  88: ```
11231:  8580:  5947: 3400:  89: 
11232:  8581:  5948: 3401:  90: ## Price Processing
11233:  8582:  5949: 3402:  91: 
11234:  8583:  5950: 3403:  92: ### Price Data Processing
11235:  8584:  5951: 3404:  93: 
11236:  8585:  5952: 3405:  94: ```typescript
11237:  8586:  5953: 3406:  95: function processPrices(prices: CardPrice[]): Record<number, PriceData> {
11238:  8587:  5954: 3407:  96:   const priceMap: Record<number, PriceData> = {};
11239:  8588:  5955: 3408:  97: 
11240:  8589:  5956: 3409:  98:   prices.forEach((price) => {
11241:  8590:  5957: 3410:  99:     if (!priceMap[price.productId]) {
11242:  8591:  5958: 3411: 100:       priceMap[price.productId] = {
11243:  8592:  5959: 3412: 101:         lastUpdated: new Date(),
11244:  8593:  5960: 3413: 102:       };
11245:  8594:  5961: 3414: 103:     }
11246:  8595:  5962: 3415: 104: 
11247:  8596:  5963: 3416: 105:     if (price.subTypeName === "Normal") {
11248:  8597:  5964: 3417: 106:       priceMap[price.productId].normal = price;
11249:  8598:  5965: 3418: 107:     } else {
11250:  8599:  5966: 3419: 108:       priceMap[price.productId].foil = price;
11251:  8600:  5967: 3420: 109:     }
11252:  8601:  5968: 3421: 110:   });
11253:  8602:  5969: 3422: 111: 
11254:  8603:  5970: 3423: 112:   return priceMap;
11255:  8604:  5971: 3424: 113: }
11256:  8605:  5972: 3425: 114: ```
11257:  8606:  5973: 3426: 115: 
11258:  8607:  5974: 3427: 116: ### Batch Processing
11259:  8608:  5975: 3428: 117: 
11260:  8609:  5976: 3429: 118: ```typescript
11261:  8610:  5977: 3430: 119: async function processBatch<T>(
11262:  8611:  5978: 3431: 120:   items: T[],
11263:  8612:  5979: 3432: 121:   processor: (batch: T[]) => Promise<void>,
11264:  8613:  5980: 3433: 122:   batchSize: number = 500
11265:  8614:  5981: 3434: 123: ): Promise<void>
11266:  8615:  5982: 3435: 124: ```
11267:  8616:  5983: 3436: 125: 
11268:  8617:  5984: 3437: 126: ## Error Handling
11269:  8618:  5985: 3438: 127: 
11270:  8619:  5986: 3439: 128: ### Error Types
11271:  8620:  5987: 3440: 129: 
11272:  8621:  5988: 3441: 130: ```typescript
11273:  8622:  5989: 3442: 131: class SyncError extends Error implements GenericError {
11274:  8623:  5990: 3443: 132:   code?: string;
11275:  8624:  5991: 3444: 133: 
11276:  8625:  5992: 3445: 134:   constructor(
11277:  8626:  5993: 3446: 135:     message: string,
11278:  8627:  5994: 3447: 136:     code?: string,
11279:  8628:  5995: 3448: 137:     public details?: Record<string, unknown>
11280:  8629:  5996: 3449: 138:   ) {
11281:  8630:  5997: 3450: 139:     super(message);
11282:  8631:  5998: 3451: 140:     this.name = "SyncError";
11283:  8632:  5999: 3452: 141:     this.code = code;
11284:  8633:  6000: 3453: 142:   }
11285:  8634:  6001: 3454: 143: }
11286:  8635:  6002: 3455: 144: ```
11287:  8636:  6003: 3456: 145: 
11288:  8637:  6004: 3457: 146: ### Request Retry Logic
11289:  8638:  6005: 3458: 147: 
11290:  8639:  6006: 3459: 148: ```typescript
11291:  8640:  6007: 3460: 149: const MAX_RETRIES = 3;
11292:  8641:  6008: 3461: 150: const BASE_DELAY = 1000; // 1 second base delay
11293:  8642:  6009: 3462: 151: 
11294:  8643:  6010: 3463: 152: // Exponential backoff implementation
11295:  8644:  6011: 3464: 153: if (retryCount < MAX_RETRIES - 1) {
11296:  8645:  6012: 3465: 154:   const delay = Math.pow(2, retryCount) * BASE_DELAY;
11297:  8646:  6013: 3466: 155:   await logWarning(`Request failed, retrying in ${delay}ms...`);
11298:  8647:  6014: 3467: 156: }
11299:  8648:  6015: 3468: 157: ```
11300:  8649:  6016: 3469: 158: 
11301:  8650:  6017: 3470: 159: ## Monitoring
11302:  8651:  6018: 3471: 160: 
11303:  8652:  6019: 3472: 161: ### Price Change Tracking
11304:  8653:  6020: 3473: 162: 
11305:  8654:  6021: 3474: 163: The service tracks:
11306:  8655:  6022: 3475: 164: 
11307:  8656:  6023: 3476: 165: - Price updates per group
11308:  8657:  6024: 3477: 166: - Number of cards processed
11309:  8658:  6025: 3478: 167: - Processing duration
11310:  8659:  6026: 3479: 168: - Error rates
11311:  8660:  6027: 3480: 169: - Price change percentages
11312:  8661:  6028: 3481: 170: 
11313:  8662:  6029: 3482: 171: ### Success Metrics
11314:  8663:  6030: 3483: 172: 
11315:  8664:  6031: 3484: 173: ```typescript
11316:  8665:  6032: 3485: 174: interface SyncMetadata {
11317:  8666:  6033: 3486: 175:   lastSync: Date;
11318:  8667:  6034: 3487: 176:   status: "in_progress" | "success" | "failed" | "completed_with_errors";
11319:  8668:  6035: 3488: 177:   cardCount: number;
11320:  8669:  6036: 3489: 178:   type: "manual" | "scheduled";
11321:  8670:  6037: 3490: 179:   groupsProcessed: number;
11322:  8671:  6038: 3491: 180:   groupsUpdated: number;
11323:  8672:  6039: 3492: 181:   errors: string[];
11324:  8673:  6040: 3493: 182:   duration?: number;
11325:  8674:  6041: 3494: 183: }
11326:  8675:  6042: 3495: 184: 
11327:  8676:  6043: 3496: 185: 
11328:  8677:  6044: 3497: 186: ## Best Practices
11329:  8678:  6045: 3498: 187: 
11330:  8679:  6046: 3499: 188: 1. Regular Monitoring:
11331:  8680:  6047: 3500: 189:    - Check sync metadata regularly
11332:  8681:  6048: 3501: 190:    - Monitor price change patterns
11333:  8682:  6049: 3502: 191:    - Track error rates
11334:  8683:  6050: 3503: 192: 
11335:  8684:  6051: 3504: 193: 1. Testing Changes:
11336:  8685:  6052: 3505: 194: 
11337:  8686:  6053: 3506: 195: ```typescript
11338:  8687:  6054: 3507: 196: // Always test with dry run
11339:  8688:  6055: 3508: 197: const testSync = await syncPrices({
11340:  8689:  6056: 3509: 198:   dryRun: true,
11341:  8690:  6057: 3510: 199:   limit: 5,
11342:  8691:  6058: 3511: 200:   showAll: true
11343:  8692:  6059: 3512: 201: });
11344:  8693:  6060: 3513: 202: ```
11345:  8694:  6061: 3514: 203: 
11346:  8695:  6062: 3515: 204: 1. Error Handling:
11347:  8696:  6063: 3516: 205: 
11348:  8697:  6064: 3517: 206: ```typescript
11349:  8698:  6065: 3518: 207: // Implement proper error checking
11350:  8699:  6066: 3519: 208: const sync = await syncPrices(options);
11351:  8700:  6067: 3520: 209: if (sync.status === "completed_with_errors") {
11352:  8701:  6068: 3521: 210:   console.error("Sync errors:", sync.errors);
11353:  8702:  6069: 3522: 211: }
11354:  8703:  6070: 3523: 212: ```
11355:  8704:  6071: 3524: 213: 
11356:  8705:  6072: 3525: 214: ## Troubleshooting
11357:  8706:  6073: 3526: 215: 
11358:  8707:  6074: 3527: 216: ### Common Issues
11359:  8708:  6075: 3528: 217: 
11360:  8709:  6076: 3529: 218: 1. Price Discrepancies:
11361:  8710:  6077: 3530: 219:    - Verify data source connection
11362:  8711:  6078: 3531: 220:    - Check price format consistency
11363:  8712:  6079: 3532: 221:    - Monitor exchange rate impacts
11364:  8713:  6080: 3533: 222: 
11365:  8714:  6081: 3534: 223: 2. Sync Failures:
11366:  8715:  6082: 3535: 224:    - Check network connectivity
11367:  8716:  6083: 3536: 225:    - Verify API rate limits
11368:  8717:  6084: 3537: 226:    - Monitor service quotas
11369:  8718:  6085: 3538: 227: 
11370:  8719:  6086: 3539: 228: 3. Performance Issues:
11371:  8720:  6087: 3540: 229:    - Use appropriate batch sizes
11372:  8721:  6088: 3541: 230:    - Implement proper delays
11373:  8722:  6089: 3542: 231:    - Monitor memory usage
11374:  8723:  6090: 3543: 232: 
11375:  8724:  6091: 3544: 233: ### Validation
11376:  8725:  6092: 3545: 234: 
11377:  8726:  6093: 3546: 235: ```typescript
11378:  8727:  6094: 3547: 236: // Validate price data
11379:  8728:  6095: 3548: 237: if (price.midPrice < 0 || price.lowPrice < 0) {
11380:  8729:  6096: 3549: 238:   throw new Error("Invalid price values detected");
11381:  8730:  6097: 3550: 239: }
11382:  8731:  6098: 3551: 240: ```
11383:  8732:  6099: 3552: 241: 
11384:  8733:  6100: 3553: 242: ## Related Components
11385:  8734:  6101: 3554: 243: 
11386:  8735:  6102: 3555: 244: - [Card Sync Service](./card-sync)
11387:  8736:  6103: 3556: 245: - [Cache System](../utils/cache)
11388:  8737:  6104: 3557: 246: - [Error Handling](../utils/error-handling)
11389:  8738:  6105: 3558: 247: - [Logger](../utils/logging)
11390:  8739:  6106: 3559: </file>
11391:  8740:  6107: 3560: 
11392:  8741:  6108: 3561: <file path="setup/configuration.md">
11393:  8742:  6109: 3562:   1: # Configuration Guide
11394:  8743:  6110: 3563:   2: 
11395:  8744:  6111: 3564:   3: ## Firebase Configuration
11396:  8745:  6112: 3565:   4: 
11397:  8746:  6113: 3566:   5: ### Environment Variables
11398:  8747:  6114: 3567:   6: 
11399:  8748:  6115: 3568:   7: Create a `.env.local` file in your project root:
11400:  8749:  6116: 3569:   8: 
11401:  8750:  6117: 3570:   9: ```env
11402:  8751:  6118: 3571:  10: FIREBASE_PROJECT_ID=your-project-id
11403:  8752:  6119: 3572:  11: FIREBASE_STORAGE_BUCKET=your-storage-bucket
11404:  8753:  6120: 3573:  12: ```
11405:  8754:  6121: 3574:  13: 
11406:  8755:  6122: 3575:  14: ### Firebase Console Settings
11407:  8756:  6123: 3576:  15: 
11408:  8757:  6124: 3577:  16: 1. Firestore Database:
11409:  8758:  6125: 3578:  17: 
11410:  8759:  6126: 3579:  18: - Collection structure:
11411:  8760:  6127: 3580:  19:   - `cards`: Stores card information
11412:  8761:  6128: 3581:  20:   - `prices`: Stores price data
11413:  8762:  6129: 3582:  21:   - `syncMetadata`: Stores sync operation logs
11414:  8763:  6130: 3583:  22:   - `logs`: System logs
11415:  8764:  6131: 3584:  23:   - `cardHashes`: Card data version control
11416:  8765:  6132: 3585:  24:   - `priceHashes`: Price data version control
11417:  8766:  6133: 3586:  25:   - `imageMetadata`: Image processing metadata
11418:  8767:  6134: 3587:  26: 
11419:  8768:  6135: 3588:  27: 1. Storage:
11420:  8769:  6136: 3589:  28: 
11421:  8770:  6137: 3590:  29: - Bucket structure:
11422:  8771:  6138: 3591:  30:   - `/card-images/{groupId}/{productId}_200w.jpg`
11423:  8772:  6139: 3592:  31:   - `/card-images/{groupId}/{productId}_400w.jpg`
11424:  8773:  6140: 3593:  32: 
11425:  8774:  6141: 3594:  33: ## Application Configuration
11426:  8775:  6142: 3595:  34: 
11427:  8776:  6143: 3596:  35: ### Runtime Options
11428:  8777:  6144: 3597:  36: 
11429:  8778:  6145: 3598:  37: Located in `src/config/firebase.ts`:
11430:  8779:  6146: 3599:  38: 
11431:  8780:  6147: 3600:  39: ```typescript
11432:  8781:  6148: 3601:  40: export const runtimeOpts = {
11433:  8782:  6149: 3602:  41:   timeoutSeconds: 540,
11434:  8783:  6150: 3603:  42:   memory: "1GiB",
11435:  8784:  6151: 3604:  43: } as const;
11436:  8785:  6152: 3605:  44: ```
11437:  8786:  6153: 3606:  45: 
11438:  8787:  6154: 3607:  46: ### API Configuration
11439:  8788:  6155: 3608:  47: 
11440:  8789:  6156: 3609:  48: Base URL and category settings:
11441:  8790:  6157: 3610:  49: 
11442:  8791:  6158: 3611:  50: ```typescript
11443:  8792:  6159: 3612:  51: export const BASE_URL = "https://tcgcsv.com";
11444:  8793:  6160: 3613:  52: export const FFTCG_CATEGORY_ID = "24";
11445:  8794:  6161: 3614:  53: ```
11446:  8795:  6162: 3615:  54: 
11447:  8796:  6163: 3616:  55: ### Collection Names
11448:  8797:  6164: 3617:  56: 
11449:  8798:  6165: 3618:  57: ```typescript
11450:  8799:  6166: 3619:  58: export const COLLECTION = {
11451:  8800:  6167: 3620:  59:   CARDS: "cards",
11452:  8801:  6168: 3621:  60:   PRICES: "prices",
11453:  8802:  6169: 3622:  61:   SYNC_METADATA: "syncMetadata",
11454:  8803:  6170: 3623:  62:   LOGS: "logs",
11455:  8804:  6171: 3624:  63:   CARD_HASHES: "cardHashes",
11456:  8805:  6172: 3625:  64:   PRICE_HASHES: "priceHashes",
11457:  8806:  6173: 3626:  65:   IMAGE_METADATA: "imageMetadata",
11458:  8807:  6174: 3627:  66: };
11459:  8808:  6175: 3628:  67: ```
11460:  8809:  6176: 3629:  68: 
11461:  8810:  6177: 3630:  69: ## Sync Configuration
11462:  8811:  6178: 3631:  70: 
11463:  8812:  6179: 3632:  71: ### Card Sync Schedule
11464:  8813:  6180: 3633:  72: 
11465:  8814:  6181: 3634:  73: ```typescript
11466:  8815:  6182: 3635:  74: exports.scheduledCardSync = onSchedule({
11467:  8816:  6183: 3636:  75:   schedule: "0 21 * * *", // Daily at 21:00 UTC
11468:  8817:  6184: 3637:  76:   timeZone: "UTC",
11469:  8818:  6185: 3638:  77:   memory: runtimeOpts.memory,
11470:  8819:  6186: 3639:  78:   timeoutSeconds: runtimeOpts.timeoutSeconds,
11471:  8820:  6187: 3640:  79:   retryCount: 3,
11472:  8821:  6188: 3641:  80: });
11473:  8822:  6189: 3642:  81: ```
11474:  8823:  6190: 3643:  82: 
11475:  8824:  6191: 3644:  83: ### Price Sync Schedule
11476:  8825:  6192: 3645:  84: 
11477:  8826:  6193: 3646:  85: ```typescript
11478:  8827:  6194: 3647:  86: exports.scheduledPriceSync = onSchedule({
11479:  8828:  6195: 3648:  87:   schedule: "30 21 * * *", // Daily at 21:30 UTC
11480:  8829:  6196: 3649:  88:   timeZone: "UTC",
11481:  8830:  6197: 3650:  89:   memory: runtimeOpts.memory,
11482:  8831:  6198: 3651:  90:   timeoutSeconds: runtimeOpts.timeoutSeconds,
11483:  8832:  6199: 3652:  91:   retryCount: 3,
11484:  8833:  6200: 3653:  92: });
11485:  8834:  6201: 3654:  93: ```
11486:  8835:  6202: 3655:  94: 
11487:  8836:  6203: 3656:  95: ## Image Processing Configuration
11488:  8837:  6204: 3657:  96: 
11489:  8838:  6205: 3658:  97: ### Compression Settings
11490:  8839:  6206: 3659:  98: 
11491:  8840:  6207: 3660:  99: ```typescript
11492:  8841:  6208: 3661: 100: private static readonly QUALITY = {
11493:  8842:  6209: 3662: 101:   HIGH_RES: 90,
11494:  8843:  6210: 3663: 102:   LOW_RES: 85,
11495:  8844:  6211: 3664: 103: };
11496:  8845:  6212: 3665: 104: 
11497:  8846:  6213: 3666: 105: private static readonly DIMENSIONS = {
11498:  8847:  6214: 3667: 106:   HIGH_RES: 400,
11499:  8848:  6215: 3668: 107:   LOW_RES: 200,
11500:  8849:  6216: 3669: 108: };
11501:  8850:  6217: 3670: 109: ```
11502:  8851:  6218: 3671: 110: 
11503:  8852:  6219: 3672: 111: ### Cache Settings
11504:  8853:  6220: 3673: 112: 
11505:  8854:  6221: 3674: 113: ```typescript
11506:  8855:  6222: 3675: 114: const options = {
11507:  8856:  6223: 3676: 115:   max: 500,
11508:  8857:  6224: 3677: 116:   ttl: 1000 * 60 * 60, // 1 hour
11509:  8858:  6225: 3678: 117: };
11510:  8859:  6226: 3679: 118: ```
11511:  8860:  6227: 3680: 119: 
11512:  8861:  6228: 3681: 120: ## Testing Configuration
11513:  8862:  6229: 3682: 121: 
11514:  8863:  6230: 3683: 122: ### Test Cases
11515:  8864:  6231: 3684: 123: 
11516:  8865:  6232: 3685: 124: ```typescript
11517:  8866:  6233: 3686: 125: const TEST_CASES = [
11518:  8867:  6234: 3687: 126:   {
11519:  8868:  6235: 3688: 127:     imageUrl: "https://tcgplayer-cdn.tcgplayer.com/product/477236_200w.jpg",
11520:  8869:  6236: 3689: 128:     groupId: "23783",
11521:  8870:  6237: 3690: 129:     productId: 477236,
11522:  8871:  6238: 3691: 130:     description: "FFVII Boss Deck",
11523:  8872:  6239: 3692: 131:   },
11524:  8873:  6240: 3693: 132: ];
11525:  8874:  6241: 3694: 133: ```
11526:  8875:  6242: 3695: 134: 
11527:  8876:  6243: 3696: 135: ## Error Handling Configuration
11528:  8877:  6244: 3697: 136: 
11529:  8878:  6245: 3698: 137: ### Log Levels
11530:  8879:  6246: 3699: 138: 
11531:  8880:  6247: 3700: 139: ```typescript
11532:  8881:  6248: 3701: 140: export interface ErrorReport {
11533:  8882:  6249: 3702: 141:   timestamp: Date;
11534:  8883:  6250: 3703: 142:   context: string;
11535:  8884:  6251: 3704: 143:   error: string;
11536:  8885:  6252: 3705: 144:   stackTrace?: string;
11537:  8886:  6253: 3706: 145:   metadata?: Record<string, unknown>;
11538:  8887:  6254: 3707: 146:   severity: "ERROR" | "WARNING" | "CRITICAL";
11539:  8888:  6255: 3708: 147: }
11540:  8889:  6256: 3709: 148: ```
11541:  8890:  6257: 3710: </file>
11542:  8891:  6258: 3711: 
11543:  8892:  6259: 3712: <file path="setup/installation.md">
11544:  8893:  6260: 3713:  1: # Installation Guide
11545:  8894:  6261: 3714:  2: 
11546:  8895:  6262: 3715:  3: ## Prerequisites
11547:  8896:  6263: 3716:  4: 
11548:  8897:  6264: 3717:  5: - Node.js 18 or higher
11549:  8898:  6265: 3718:  6: - Firebase CLI
11550:  8899:  6266: 3719:  7: - Git (for version control)
11551:  8900:  6267: 3720:  8: - A Firebase project with Firestore and Storage enabled
11552:  8901:  6268: 3721:  9: 
11553:  8902:  6269: 3722: 10: ## Firebase Project Setup
11554:  8903:  6270: 3723: 11: 
11555:  8904:  6271: 3724: 12: 1. Create or select a Firebase project:
11556:  8905:  6272: 3725: 13: 
11557:  8906:  6273: 3726: 14: - Visit the [Firebase Console](https://console.firebase.google.com/)
11558:  8907:  6274: 3727: 15: - Create a new project or select an existing one
11559:  8908:  6275: 3728: 16: - Note your project ID for later use
11560:  8909:  6276: 3729: 17: 
11561:  8910:  6277: 3730: 18: 1. Enable required services:
11562:  8911:  6278: 3731: 19: 
11563:  8912:  6279: 3732: 20: - Firestore Database
11564:  8913:  6280: 3733: 21: - Cloud Storage
11565:  8914:  6281: 3734: 22: - Cloud Functions
11566:  8915:  6282: 3735: 23: 
11567:  8916:  6283: 3736: 24: 1. Configure Firebase Authentication:
11568:  8917:  6284: 3737: 25: 
11569:  8918:  6285: 3738: 26: - Enable Google Authentication
11570:  8919:  6286: 3739: 27: - Add authorized domains if needed
11571:  8920:  6287: 3740: 28: - Set up authorized email addresses for admin access
11572:  8921:  6288: 3741: 29: 
11573:  8922:  6289: 3742: 30: ## Local Development Setup
11574:  8923:  6290: 3743: 31: 
11575:  8924:  6291: 3744: 32: 1. Clone the repository:
11576:  8925:  6292: 3745: 33: 
11577:  8926:  6293: 3746: 34: ```bash
11578:  8927:  6294: 3747: 35: git clone <repository-url>
11579:  8928:  6295: 3748: 36: cd fftcg-sync-service
11580:  8929:  6296: 3749: </file>
11581:  8930:  6297: 3750: 
11582:  8931:  6298: 3751: <file path="troubleshooting.md">
11583:  8932:  6299: 3752:   1: # Troubleshooting Guide
11584:  8933:  6300: 3753:   2: 
11585:  8934:  6301: 3754:   3: ## Quick Diagnosis
11586:  8935:  6302: 3755:   4: 
11587:  8936:  6303: 3756:   5: ### System Status Check
11588:  8937:  6304: 3757:   6: 
11589:  8938:  6305: 3758:   7: ```bash
11590:  8939:  6306: 3759:   8: # Check service health
11591:  8940:  6307: 3760:   9: curl https://${REGION}-${PROJECT_ID}.cloudfunctions.net/healthCheck
11592:  8941:  6308: 3761:  10: 
11593:  8942:  6309: 3762:  11: # Expected Response
11594:  8943:  6310: 3763:  12: {
11595:  8944:  6311: 3764:  13:   "status": "healthy",
11596:  8945:  6312: 3765:  14:   "timestamp": "2024-11-22T01:47:16.617Z",
11597:  8946:  6313: 3766:  15:   "version": "1.0.0"
11598:  8947:  6314: 3767:  16: }
11599:  8948:  6315: 3768:  17: ```
11600:  8949:  6316: 3769:  18: 
11601:  8950:  6317: 3770:  19: ### Log Analysis
11602:  8951:  6318: 3771:  20: 
11603:  8952:  6319: 3772:  21: ```typescript
11604:  8953:  6320: 3773:  22: // View recent logs
11605:  8954:  6321: 3774:  23: firebase functions:log
11606:  8955:  6322: 3775:  24: 
11607:  8956:  6323: 3776:  25: // Filter for errors
11608:  8957:  6324: 3777:  26: firebase functions:log --only errors
11609:  8958:  6325: 3778:  27: 
11610:  8959:  6326: 3779:  28: // View specific function logs
11611:  8960:  6327: 3780:  29: firebase functions:log --only syncCards
11612:  8961:  6328: 3781:  30: ```
11613:  8962:  6329: 3782:  31: 
11614:  8963:  6330: 3783:  32: ## Common Issues
11615:  8964:  6331: 3784:  33: 
11616:  8965:  6332: 3785:  34: ### Synchronization Failures
11617:  8966:  6333: 3786:  35: 
11618:  8967:  6334: 3787:  36: #### Cards Not Syncing
11619:  8968:  6335: 3788:  37: 
11620:  8969:  6336: 3789:  38: **Symptoms:**
11621:  8970:  6337: 3790:  39: 
11622:  8971:  6338: 3791:  40: - Missing card data
11623:  8972:  6339: 3792:  41: - Outdated information
11624:  8973:  6340: 3793:  42: - Sync operation completes without updates
11625:  8974:  6341: 3794:  43: 
11626:  8975:  6342: 3795:  44: **Solutions:**
11627:  8976:  6343: 3796:  45: 
11628:  8977:  6344: 3797:  46: 1. Check API access:
11629:  8978:  6345: 3798:  47: 
11630:  8979:  6346: 3799:  48: ```typescript
11631:  8980:  6347: 3800:  49: // Test API connection
11632:  8981:  6348: 3801:  50: const response = await makeRequest<{ results: any[] }>(
11633:  8982:  6349: 3802:  51:   `${FFTCG_CATEGORY_ID}/groups`,
11634:  8983:  6350: 3803:  52:   {metadata: {operation: "fetchGroups"}}
11635:  8984:  6351: 3804:  53: );
11636:  8985:  6352: 3805:  54: ```
11637:  8986:  6353: 3806:  55: 
11638:  8987:  6354: 3807:  56: 1. Verify hash comparison:
11639:  8988:  6355: 3808:  57: 
11640:  8989:  6356: 3809:  58: ```typescript
11641:  8990:  6357: 3810:  59: // Force sync by clearing hashes
11642:  8991:  6358: 3811:  60: await db.collection(COLLECTION.CARD_HASHES).doc(groupId).delete();
11643:  8992:  6359: 3812:  61: ```
11644:  8993:  6360: 3813:  62: 
11645:  8994:  6361: 3814:  63: 1. Check rate limits:
11646:  8995:  6362: 3815:  64: 
11647:  8996:  6363: 3816:  65: ```typescript
11648:  8997:  6364: 3817:  66: // Monitor rate limit logs
11649:  8998:  6365: 3818:  67: await logInfo("Rate limit status", {
11650:  8999:  6366: 3819:  68:   remaining: rateLimiter.tokens,
11651:  9000:  6367: 3820:  69:   nextRefill: rateLimiter.nextRefillTime
11652:  9001:  6368: 3821:  70: });
11653:  9002:  6369: 3822:  71: ```
11654:  9003:  6370: 3823:  72: 
11655:  9004:  6371: 3824:  73: #### Price Updates Failed
11656:  9005:  6372: 3825:  74: 
11657:  9006:  6373: 3826:  75: **Symptoms:**
11658:  9007:  6374: 3827:  76: 
11659:  9008:  6375: 3828:  77: - Outdated prices
11660:  9009:  6376: 3829:  78: - Partial updates
11661:  9010:  6377: 3830:  79: - Sync metadata shows errors
11662:  9011:  6378: 3831:  80: 
11663:  9012:  6379: 3832:  81: **Solutions:**
11664:  9013:  6380: 3833:  82: 
11665:  9014:  6381: 3834:  83: 1. Validate price data:
11666:  9015:  6382: 3835:  84: 
11667:  9016:  6383: 3836:  85: ```typescript
11668:  9017:  6384: 3837:  86: const priceResult = await validateCollection(
11669:  9018:  6385: 3838:  87:   db,
11670:  9019:  6386: 3839:  88:   COLLECTION.PRICES,
11671:  9020:  6387: 3840:  89:   (data) => {
11672:  9021:  6388: 3841:  90:     return (
11673:  9022:  6389: 3842:  91:       data.lastUpdated instanceof Timestamp &&
11674:  9023:  6390: 3843:  92:       (!data.normal || typeof data.normal.midPrice === "number") &&
11675:  9024:  6391: 3844:  93:       (!data.foil || typeof data.foil.midPrice === "number")
11676:  9025:  6392: 3845:  94:     );
11677:  9026:  6393: 3846:  95:   }
11678:  9027:  6394: 3847:  96: );
11679:  9028:  6395: 3848:  97: ```
11680:  9029:  6396: 3849:  98: 
11681:  9030:  6397: 3850:  99: 1. Force price sync:
11682:  9031:  6398: 3851: 100: 
11683:  9032:  6399: 3852: 101: ```typescript
11684:  9033:  6400: 3853: 102: await syncPrices({
11685:  9034:  6401: 3854: 103:   dryRun: false,
11686:  9035:  6402: 3855: 104:   groupId: specificGroupId,
11687:  9036:  6403: 3856: 105:   forceUpdate: true
11688:  9037:  6404: 3857: 106: });
11689:  9038:  6405: 3858: 107: ```
11690:  9039:  6406: 3859: 108: 
11691:  9040:  6407: 3860: 109: ### Image Processing Issues
11692:  9041:  6408: 3861: 110: 
11693:  9042:  6409: 3862: 111: #### Image Upload Failures
11694:  9043:  6410: 3863: 112: 
11695:  9044:  6411: 3864: 113: **Symptoms:**
11696:  9045:  6412: 3865: 114: 
11697:  9046:  6413: 3866: 115: - Missing images in storage
11698:  9047:  6414: 3867: 116: - Failed compression attempts
11699:  9048:  6415: 3868: 117: - Storage quota errors
11700:  9049:  6416: 3869: 118: 
11701:  9050:  6417: 3870: 119: **Solutions:**
11702:  9051:  6418: 3871: 120: 
11703:  9052:  6419: 3872: 121: 1. Check image validation:
11704:  9053:  6420: 3873: 122: 
11705:  9054:  6421: 3874: 123: ```typescript
11706:  9055:  6422: 3875: 124: const validationResult = await ImageValidator.validateImage(buffer);
11707:  9056:  6423: 3876: 125: if (validationResult) {
11708:  9057:  6424: 3877: 126:   console.error("Validation failed:", validationResult.message);
11709:  9058:  6425: 3878: 127: }
11710:  9059:  6426: 3879: 128: ```
11711:  9060:  6427: 3880: 129: 
11712:  9061:  6428: 3881: 130: 1. Verify storage permissions:
11713:  9062:  6429: 3882: 131: 
11714:  9063:  6430: 3883: 132: ```typescript
11715:  9064:  6431: 3884: 133: try {
11716:  9065:  6432: 3885: 134:   await storage.bucket(STORAGE.BUCKETS.CARD_IMAGES).file(path).save(buffer);
11717:  9066:  6433: 3886: 135: } catch (error) {
11718:  9067:  6434: 3887: 136:   console.error("Storage access error:", error);
11719:  9068:  6435: 3888: 137: }
11720:  9069:  6436: 3889: 138: ```
11721:  9070:  6437: 3890: 139: 
11722:  9071:  6438: 3891: 140: 1. Monitor storage quota:
11723:  9072:  6439: 3892: 141: 
11724:  9073:  6440: 3893: 142: ```typescript
11725:  9074:  6441: 3894: 143: const [usage] = await storage.bucket().getMetadata();
11726:  9075:  6442: 3895: 144: console.log("Storage usage:", usage.size);
11727:  9076:  6443: 3896: 145: ```
11728:  9077:  6444: 3897: 146: 
11729:  9078:  6445: 3898: 147: #### Image Compression Problems
11730:  9079:  6446: 3899: 148: 
11731:  9080:  6447: 3900: 149: **Symptoms:**
11732:  9081:  6448: 3901: 150: 
11733:  9082:  6449: 3902: 151: - Large file sizes
11734:  9083:  6450: 3903: 152: - Poor image quality
11735:  9084:  6451: 3904: 153: - Processing timeouts
11736:  9085:  6452: 3905: 154: 
11737:  9086:  6453: 3906: 155: **Solutions:**
11738:  9087:  6454: 3907: 156: 
11739:  9088:  6455: 3908: 157: 1. Adjust compression settings:
11740:  9089:  6456: 3909: 158: 
11741:  9090:  6457: 3910: 159: ```typescript
11742:  9091:  6458: 3911: 160: const compressionOptions = {
11743:  9092:  6459: 3912: 161:   quality: ImageCompressor.QUALITY.HIGH_RES,
11744:  9093:  6460: 3913: 162:   progressive: true,
11745:  9094:  6461: 3914: 163:   mozjpeg: true
11746:  9095:  6462: 3915: 164: };
11747:  9096:  6463: 3916: 165: ```
11748:  9097:  6464: 3917: 166: 
11749:  9098:  6465: 3918: 167: 1. Debug compression process:
11750:  9099:  6466: 3919: 168: 
11751:  9100:  6467: 3920: 169: ```typescript
11752:  9101:  6468: 3921: 170: const result = await ImageCompressor.compress(buffer, false);
11753:  9102:  6469: 3922: 171: console.log("Compression results:", {
11754:  9103:  6470: 3923: 172:   originalSize: buffer.length,
11755:  9104:  6471: 3924: 173:   compressedSize: result.buffer.length,
11756:  9105:  6472: 3925: 174:   ratio: result.buffer.length / buffer.length
11757:  9106:  6473: 3926: 175: });
11758:  9107:  6474: 3927: 176: ```
11759:  9108:  6475: 3928: 177: 
11760:  9109:  6476: 3929: 178: ### Database Issues
11761:  9110:  6477: 3930: 179: 
11762:  9111:  6478: 3931: 180: #### Write Operations Failed
11763:  9112:  6479: 3932: 181: 
11764:  9113:  6480: 3933: 182: **Symptoms:**
11765:  9114:  6481: 3934: 183: 
11766:  9115:  6482: 3935: 184: - Timeout errors
11767:  9116:  6483: 3936: 185: - Batch operation failures
11768:  9117:  6484: 3937: 186: - Inconsistent data state
11769:  9118:  6485: 3938: 187: 
11770:  9119:  6486: 3939: 188: **Solutions:**
11771:  9120:  6487: 3940: 189: 
11772:  9121:  6488: 3941: 190: 1. Check batch size:
11773:  9122:  6489: 3942: 191: 
11774:  9123:  6490: 3943: 192: ```typescript
11775:  9124:  6491: 3944: 193: // Reduce batch size
11776:  9125:  6492: 3945: 194: const batchOptions = {
11777:  9126:  6493: 3946: 195:   batchSize: 100,  // Decrease from default 500
11778:  9127:  6494: 3947: 196:   delayBetweenBatches: 1000
11779:  9128:  6495: 3948: 197: };
11780:  9129:  6496: 3949: 198: ```
11781:  9130:  6497: 3950: 199: 
11782:  9131:  6498: 3951: 200: 1. Monitor write operations:
11783:  9132:  6499: 3952: 201: 
11784:  9133:  6500: 3953: 202: ```typescript
11785:  9134:  6501: 3954: 203: const stats = {
11786:  9135:  6502: 3955: 204:   attempted: 0,
11787:  9136:  6503: 3956: 205:   successful: 0,
11788:  9137:  6504: 3957: 206:   failed: 0
11789:  9138:  6505: 3958: 207: };
11790:  9139:  6506: 3959: 208: 
11791:  9140:  6507: 3960: 209: await processBatch(items, async (batch) => {
11792:  9141:  6508: 3961: 210:   try {
11793:  9142:  6509: 3962: 211:     await writeBatch.commit();
11794:  9143:  6510: 3963: 212:     stats.successful += batch.length;
11795:  9144:  6511: 3964: 213:   } catch (error) {
11796:  9145:  6512: 3965: 214:     stats.failed += batch.length;
11797:  9146:  6513: 3966: 215:     await logError(error, "writeBatch");
11798:  9147:  6514: 3967: 216:   }
11799:  9148:  6515: 3968: 217:   stats.attempted += batch.length;
11800:  9149:  6516: 3969: 218: });
11801:  9150:  6517: 3970: 219: ```
11802:  9151:  6518: 3971: 220: 
11803:  9152:  6519: 3972: 221: #### Cache Inconsistency
11804:  9153:  6520: 3973: 222: 
11805:  9154:  6521: 3974: 223: **Symptoms:**
11806:  9155:  6522: 3975: 224: 
11807:  9156:  6523: 3976: 225: - Stale data
11808:  9157:  6524: 3977: 226: - Memory usage spikes
11809:  9158:  6525: 3978: 227: - Inconsistent results
11810:  9159:  6526: 3979: 228: 
11811:  9160:  6527: 3980: 229: **Solutions:**
11812:  9161:  6528: 3981: 230: 
11813:  9162:  6529: 3982: 231: 1. Clear caches:
11814:  9163:  6530: 3983: 232: 
11815:  9164:  6531: 3984: 233: ```typescript
11816:  9165:  6532: 3985: 234: // Clear specific cache
11817:  9166:  6533: 3986: 235: imageCache.clear();
11818:  9167:  6534: 3987: 236: cardCache.clear();
11819:  9168:  6535: 3988: 237: 
11820:  9169:  6536: 3989: 238: // Clear all caches
11821:  9170:  6537: 3990: 239: await Promise.all([
11822:  9171:  6538: 3991: 240:   imageCache.clear(),
11823:  9172:  6539: 3992: 241:   cardCache.clear(),
11824:  9173:  6540: 3993: 242:   db.clearPersistence()
11825:  9174:  6541: 3994: 243: ]);
11826:  9175:  6542: 3995: 244: ```
11827:  9176:  6543: 3996: 245: 
11828:  9177:  6544: 3997: 246: 1. Verify cache settings:
11829:  9178:  6545: 3998: 247: 
11830:  9179:  6546: 3999: 248: ```typescript
11831:  9180:  6547: 4000: 249: const cacheOptions = {
11832:  9181:  6548: 4001: 250:   max: 500,
11833:  9182:  6549: 4002: 251:   ttl: 1000 * 60 * 60, // 1 hour
11834:  9183:  6550: 4003: 252:   updateAgeOnGet: true
11835:  9184:  6551: 4004: 253: };
11836:  9185:  6552: 4005: 254: ```
11837:  9186:  6553: 4006: 255: 
11838:  9187:  6554: 4007: 256: ### Performance Issues
11839:  9188:  6555: 4008: 257: 
11840:  9189:  6556: 4009: 258: #### High Memory Usage
11841:  9190:  6557: 4010: 259: 
11842:  9191:  6558: 4011: 260: **Symptoms:**
11843:  9192:  6559: 4012: 261: 
11844:  9193:  6560: 4013: 262: - Function timeouts
11845:  9194:  6561: 4014: 263: - Out of memory errors
11846:  9195:  6562: 4015: 264: - Slow processing
11847:  9196:  6563: 4016: 265: 
11848:  9197:  6564: 4017: 266: **Solutions:**
11849:  9198:  6565: 4018: 267: 
11850:  9199:  6566: 4019: 268: 1. Monitor memory usage:
11851:  9200:  6567: 4020: 269: 
11852:  9201:  6568: 4021: 270: ```typescript
11853:  9202:  6569: 4022: 271: const used = process.memoryUsage();
11854:  9203:  6570: 4023: 272: await logInfo("Memory usage", {
11855:  9204:  6571: 4024: 273:   heapUsed: `${Math.round(used.heapUsed / 1024 / 1024 * 100) / 100} MB`,
11856:  9205:  6572: 4025: 274:   heapTotal: `${Math.round(used.heapTotal / 1024 / 1024 * 100) / 100} MB`,
11857:  9206:  6573: 4026: 275: });
11858:  9207:  6574: 4027: 276: ```
11859:  9208:  6575: 4028: 277: 
11860:  9209:  6576: 4029: 278: 1. Implement cleanup:
11861:  9210:  6577: 4030: 279: 
11862:  9211:  6578: 4031: 280: ```typescript
11863:  9212:  6579: 4032: 281: async function cleanupResources(): Promise<void> {
11864:  9213:  6580: 4033: 282:   await imageCache.clear();
11865:  9214:  6581: 4034: 283:   global.gc && global.gc();
11866:  9215:  6582: 4035: 284: }
11867:  9216:  6583: 4036: 285: ```
11868:  9217:  6584: 4037: 286: 
11869:  9218:  6585: 4038: 287: #### Slow Synchronization
11870:  9219:  6586: 4039: 288: 
11871:  9220:  6587: 4040: 289: **Symptoms:**
11872:  9221:  6588: 4041: 290: 
11873:  9222:  6589: 4042: 291: - Long sync duration
11874:  9223:  6590: 4043: 292: - Timeout errors
11875:  9224:  6591: 4044: 293: - Queue buildup
11876:  9225:  6592: 4045: 294: 
11877:  9226:  6593: 4046: 295: **Solutions:**
11878:  9227:  6594: 4047: 296: 
11879:  9228:  6595: 4048: 297: 1. Enable progress tracking:
11880:  9229:  6596: 4049: 298: 
11881:  9230:  6597: 4050: 299: ```typescript
11882:  9231:  6598: 4051: 300: const progress = new EnhancedProgressTracker(
11883:  9232:  6599: 4052: 301:   totalItems,
11884:  9233:  6600: 4053: 302:   "Processing Cards",
11885:  9234:  6601: 4054: 303:   { updateInterval: 1000 }
11886:  9235:  6602: 4055: 304: );
11887:  9236:  6603: 4056: 305: 
11888:  9237:  6604: 4057: 306: // Monitor progress
11889:  9238:  6605: 4058: 307: progress.update(1);
11890:  9239:  6606: 4059: 308: const stats = progress.getProgress();
11891:  9240:  6607: 4060: 309: ```
11892:  9241:  6608: 4061: 310: 
11893:  9242:  6609: 4062: 311: 1. Optimize batch processing:
11894:  9243:  6610: 4063: 312: 
11895:  9244:  6611: 4064: 313: ```typescript
11896:  9245:  6612: 4065: 314: const optimizedBatch = new AdaptiveBatchProcessor();
11897:  9246:  6613: 4066: 315: await optimizedBatch.processBatch(items, processor);
11898:  9247:  6614: 4067: 316: ```
11899:  9248:  6615: 4068: 317: 
11900:  9249:  6616: 4069: 318: ### Network Issues
11901:  9250:  6617: 4070: 319: 
11902:  9251:  6618: 4071: 320: #### API Connection Failures
11903:  9252:  6619: 4072: 321: 
11904:  9253:  6620: 4073: 322: **Symptoms:**
11905:  9254:  6621: 4074: 323: 
11906:  9255:  6622: 4075: 324: - Request timeouts
11907:  9256:  6623: 4076: 325: - Connection refused
11908:  9257:  6624: 4077: 326: - DNS resolution failed
11909:  9258:  6625: 4078: 327: 
11910:  9259:  6626: 4079: 328: **Solutions:**
11911:  9260:  6627: 4080: 329: 
11912:  9261:  6628: 4081: 330: 1. Implement retry logic:
11913:  9262:  6629: 4082: 331: 
11914:  9263:  6630: 4083: 332: ```typescript
11915:  9264:  6631: 4084: 333: const requestWithRetry = async () => {
11916:  9265:  6632: 4085: 334:   const retryStrategy = new RetryStrategy();
11917:  9266:  6633: 4086: 335:   return retryStrategy.executeWithRetry(
11918:  9267:  6634: 4087: 336:     operation,
11919:  9268:  6635: 4088: 337:     "API_REQUEST"
11920:  9269:  6636: 4089: 338:   );
11921:  9270:  6637: 4090: 339: };
11922:  9271:  6638: 4091: 340: ```
11923:  9272:  6639: 4092: 341: 
11924:  9273:  6640: 4093: 342: 1. Check network status:
11925:  9274:  6641: 4094: 343: 
11926:  9275:  6642: 4095: 344: ```typescript
11927:  9276:  6643: 4096: 345: async function checkConnectivity(): Promise<boolean> {
11928:  9277:  6644: 4097: 346:   try {
11929:  9278:  6645: 4098: 347:     await axios.get(BASE_URL, { timeout: 5000 });
11930:  9279:  6646: 4099: 348:     return true;
11931:  9280:  6647: 4100: 349:   } catch (error) {
11932:  9281:  6648: 4101: 350:     await logError(error, "connectivityCheck");
11933:  9282:  6649: 4102: 351:     return false;
11934:  9283:  6650: 4103: 352:   }
11935:  9284:  6651: 4104: 353: }
11936:  9285:  6652: 4105: 354: ```
11937:  9286:  6653: 4106: 355: 
11938:  9287:  6654: 4107: 356: ## Debugging Tools
11939:  9288:  6655: 4108: 357: 
11940:  9289:  6656: 4109: 358: ### Logging and Diagnostics
11941:  9290:  6657: 4110: 359: 
11942:  9291:  6658: 4111: 360: ```typescript
11943:  9292:  6659: 4112: 361: // Enable detailed logging
11944:  9293:  6660: 4113: 362: const logger = new SyncLogger({
11945:  9294:  6661: 4114: 363:   type: "manual",
11946:  9295:  6662: 4115: 364:   limit: 10,
11947:  9296:  6663: 4116: 365:   dryRun: true,
11948:  9297:  6664: 4117: 366:   verbose: true
11949:  9298:  6665: 4118: 367: });
11950:  9299:  6666: 4119: 368: 
11951:  9300:  6667: 4120: 369: // Track specific operations
11952:  9301:  6668: 4121: 370: await logger.logGroupDetails(groupId, products.length, prices.length);
11953:  9302:  6669: 4122: 371: ```
11954:  9303:  6670: 4123: 372: 
11955:  9304:  6671: 4124: 373: ### Validation Tools
11956:  9305:  6672: 4125: 374: 
11957:  9306:  6673: 4126: 375: ```typescript
11958:  9307:  6674: 4127: 376: // Validate sync state
11959:  9308:  6675: 4128: 377: await validateSync({
11960:  9309:  6676: 4129: 378:   limit: 100,
11961:  9310:  6677: 4130: 379:   verbose: true,
11962:  9311:  6678: 4131: 380:   groupId: "test_group"
11963:  9312:  6679: 4132: 381: });
11964:  9313:  6680: 4133: 382: 
11965:  9314:  6681: 4134: 383: // Check data integrity
11966:  9315:  6682: 4135: 384: const integrityCheck = await validateCollection(db, COLLECTION.CARDS);
11967:  9316:  6683: 4136: 385: console.log("Integrity check results:", integrityCheck);
11968:  9317:  6684: 4137: 386: ```
11969:  9318:  6685: 4138: 387: 
11970:  9319:  6686: 4139: 388: ### Performance Monitoring
11971:  9320:  6687: 4140: 389: 
11972:  9321:  6688: 4141: 390: ```typescript
11973:  9322:  6689: 4142: 391: // Track operation timing
11974:  9323:  6690: 4143: 392: const timer = {
11975:  9324:  6691: 4144: 393:   start: Date.now(),
11976:  9325:  6692: 4145: 394:   checkPoint(operation: string) {
11977:  9326:  6693: 4146: 395:     const duration = Date.now() - this.start;
11978:  9327:  6694: 4147: 396:     console.log(`${operation}: ${duration}ms`);
11979:  9328:  6695: 4148: 397:   }
11980:  9329:  6696: 4149: 398: };
11981:  9330:  6697: 4150: 399: 
11982:  9331:  6698: 4151: 400: // Monitor async operations
11983:  9332:  6699: 4152: 401: async function trackAsyncOperation<T>(
11984:  9333:  6700: 4153: 402:   operation: () => Promise<T>,
11985:  9334:  6701: 4154: 403:   name: string
11986:  9335:  6702: 4155: 404: ): Promise<T> {
11987:  9336:  6703: 4156: 405:   const start = Date.now();
11988:  9337:  6704: 4157: 406:   try {
11989:  9338:  6705: 4158: 407:     const result = await operation();
11990:  9339:  6706: 4159: 408:     const duration = Date.now() - start;
11991:  9340:  6707: 4160: 409:     await logInfo(`${name} completed`, { duration });
11992:  9341:  6708: 4161: 410:     return result;
11993:  9342:  6709: 4162: 411:   } catch (error) {
11994:  9343:  6710: 4163: 412:     await logError(error, name);
11995:  9344:  6711: 4164: 413:     throw error;
11996:  9345:  6712: 4165: 414:   }
11997:  9346:  6713: 4166: 415: }
11998:  9347:  6714: 4167: 416: ```
11999:  9348:  6715: 4168: 417: 
12000:  9349:  6716: 4169: 418: ## Recovery Procedures
12001:  9350:  6717: 4170: 419: 
12002:  9351:  6718: 4171: 420: ### Data Recovery
12003:  9352:  6719: 4172: 421: 
12004:  9353:  6720: 4173: 422: 1. Backup verification:
12005:  9354:  6721: 4174: 423: 
12006:  9355:  6722: 4175: 424: ```typescript
12007:  9356:  6723: 4176: 425: async function verifyBackups(): Promise<boolean> {
12008:  9357:  6724: 4177: 426:   const backups = await db.collection('backups').get();
12009:  9358:  6725: 4178: 427:   return backups.size > 0;
12010:  9359:  6726: 4179: 428: }
12011:  9360:  6727: 4180: 429: ```
12012:  9361:  6728: 4181: 430: 
12013:  9362:  6729: 4182: 431: 1. Restore procedure:
12014:  9363:  6730: 4183: 432: 
12015:  9364:  6731: 4184: 433: ```typescript
12016:  9365:  6732: 4185: 434: async function restoreData(timestamp: Date): Promise<void> {
12017:  9366:  6733: 4186: 435:   const backup = await db.collection('backups')
12018:  9367:  6734: 4187: 436:     .where('timestamp', '<=', timestamp)
12019:  9368:  6735: 4188: 437:     .orderBy('timestamp', 'desc')
12020:  9369:  6736: 4189: 438:     .limit(1)
12021:  9370:  6737: 4190: 439:     .get();
12022:  9371:  6738: 4191: 440:    
12023:  9372:  6739: 4192: 441:   if (!backup.empty) {
12024:  9373:  6740: 4193: 442:     await restoreFromBackup(backup.docs[0]);
12025:  9374:  6741: 4194: 443:   }
12026:  9375:  6742: 4195: 444: }
12027:  9376:  6743: 4196: 445: ```
12028:  9377:  6744: 4197: 446: 
12029:  9378:  6745: 4198: 447: ### Error Recovery
12030:  9379:  6746: 4199: 448: 
12031:  9380:  6747: 4200: 449: 1. Clear error state:
12032:  9381:  6748: 4201: 450: 
12033:  9382:  6749: 4202: 451: ```typescript
12034:  9383:  6750: 4203: 452: async function clearErrorState(): Promise<void> {
12035:  9384:  6751: 4204: 453:   await db.collection(COLLECTION.SYNC_METADATA)
12036:  9385:  6752: 4205: 454:     .where('status', '==', 'failed')
12037:  9386:  6753: 4206: 455:     .get()
12038:  9387:  6754: 4207: 456:     .then(snapshot => {
12039:  9388:  6755: 4208: 457:       const batch = db.batch();
12040:  9389:  6756: 4209: 458:       snapshot.forEach(doc => {
12041:  9390:  6757: 4210: 459:         batch.update(doc.ref, { status: 'ready' });
12042:  9391:  6758: 4211: 460:       });
12043:  9392:  6759: 4212: 461:       return batch.commit();
12044:  9393:  6760: 4213: 462:     });
12045:  9394:  6761: 4214: 463: }
12046:  9395:  6762: 4215: 464: ```
12047:  9396:  6763: 4216: 465: 
12048:  9397:  6764: 4217: 466: 1. Reset sync state:
12049:  9398:  6765: 4218: 467: 
12050:  9399:  6766: 4219: 468: ```typescript
12051:  9400:  6767: 4220: 469: async function resetSyncState(): Promise<void> {
12052:  9401:  6768: 4221: 470:   await Promise.all([
12053:  9402:  6769: 4222: 471:     db.collection(COLLECTION.CARD_HASHES).get()
12054:  9403:  6770: 4223: 472:       .then(snapshot => {
12055:  9404:  6771: 4224: 473:         const batch = db.batch();
12056:  9405:  6772: 4225: 474:         snapshot.forEach(doc => batch.delete(doc.ref));
12057:  9406:  6773: 4226: 475:         return batch.commit();
12058:  9407:  6774: 4227: 476:       }),
12059:  9408:  6775: 4228: 477:     db.collection(COLLECTION.PRICE_HASHES).get()
12060:  9409:  6776: 4229: 478:       .then(snapshot => {
12061:  9410:  6777: 4230: 479:         const batch = db.batch();
12062:  9411:  6778: 4231: 480:         snapshot.forEach(doc => batch.delete(doc.ref));
12063:  9412:  6779: 4232: 481:         return batch.commit();
12064:  9413:  6780: 4233: 482:       })
12065:  9414:  6781: 4234: 483:   ]);
12066:  9415:  6782: 4235: 484: }
12067:  9416:  6783: 4236: 485: ```
12068:  9417:  6784: 4237: </file>
12069:  9418:  6785: 4238: 
12070:  9419:  6786: 4239: <file path="usage-guide.md">
12071:  9420:  6787: 4240:   1: # FFTCG Sync Service Usage Guide
12072:  9421:  6788: 4241:   2: 
12073:  9422:  6789: 4242:   3: ## Overview
12074:  9423:  6790: 4243:   4: 
12075:  9424:  6791: 4244:   5: This guide provides comprehensive instructions for using the FFTCG Sync Service, including setup, operations, and best practices.
12076:  9425:  6792: 4245:   6: 
12077:  9426:  6793: 4246:   7: ## Quick Start
12078:  9427:  6794: 4247:   8: 
12079:  9428:  6795: 4248:   9: ### Prerequisites
12080:  9429:  6796: 4249:  10: 
12081:  9430:  6797: 4250:  11: - Node.js 18 or higher
12082:  9431:  6798: 4251:  12: - Firebase CLI installed (`npm install -g firebase-tools`)
12083:  9432:  6799: 4252:  13: - Firebase project created
12084:  9433:  6800: 4253:  14: - Service account key configured
12085:  9434:  6801: 4254:  15: 
12086:  9435:  6802: 4255:  16: ### Initial Setup
12087:  9436:  6803: 4256:  17: 
12088:  9437:  6804: 4257:  18: 1. Clone the repository
12089:  9438:  6805: 4258:  19: 
12090:  9439:  6806: 4259:  20: ```bash
12091:  9440:  6807: 4260:  21: git clone https://github.com/yourusername/fftcg-sync-service.git
12092:  9441:  6808: 4261:  22: cd fftcg-sync-service
12093:  9442:  6809: 4262:  23: ```
12094:  9443:  6810: 4263:  24: 
12095:  9444:  6811: 4264:  25: 1. Install dependencies
12096:  9445:  6812: 4265:  26: 
12097:  9446:  6813: 4266:  27: ```bash
12098:  9447:  6814: 4267:  28: npm install
12099:  9448:  6815: 4268:  29: ```
12100:  9449:  6816: 4269:  30: 
12101:  9450:  6817: 4270:  31: 1. Initialize Firebase
12102:  9451:  6818: 4271:  32: 
12103:  9452:  6819: 4272:  33: ```bash
12104:  9453:  6820: 4273:  34: firebase login
12105:  9454:  6821: 4274:  35: firebase init
12106:  9455:  6822: 4275:  36: ```
12107:  9456:  6823: 4276:  37: 
12108:  9457:  6824: 4277:  38: ## API Reference
12109:  9458:  6825: 4278:  39: 
12110:  9459:  6826: 4279:  40: ### Card Management Endpoints
12111:  9460:  6827: 4280:  41: 
12112:  9461:  6828: 4281:  42: #### Test Card Sync
12113:  9462:  6829: 4282:  43: 
12114:  9463:  6830: 4283:  44: ```http
12115:  9464:  6831: 4284:  45: GET /testCardSync?limit=5&dryRun=true&groupId=23783
12116:  9465:  6832: 4285:  46: ```
12117:  9466:  6833: 4286:  47: 
12118:  9467:  6834: 4287:  48: #### Manual Card Sync
12119:  9468:  6835: 4288:  49: 
12120:  9469:  6836: 4289:  50: ```http
12121:  9470:  6837: 4290:  51: GET /manualCardSync
12122:  9471:  6838: 4291:  52: ```
12123:  9472:  6839: 4292:  53: 
12124:  9473:  6840: 4293:  54: ### Price Management Endpoints
12125:  9474:  6841: 4294:  55: 
12126:  9475:  6842: 4295:  56: #### Test Price Sync
12127:  9476:  6843: 4296:  57: 
12128:  9477:  6844: 4297:  58: ```http
12129:  9478:  6845: 4298:  59: GET /testPriceSync?limit=5&dryRun=true&groupId=23783
12130:  9479:  6846: 4299:  60: ```
12131:  9480:  6847: 4300:  61: 
12132:  9481:  6848: 4301:  62: #### Manual Price Sync
12133:  9482:  6849: 4302:  63: 
12134:  9483:  6850: 4303:  64: ```http
12135:  9484:  6851: 4304:  65: GET /manualPriceSync
12136:  9485:  6852: 4305:  66: ```
12137:  9486:  6853: 4306:  67: 
12138:  9487:  6854: 4307:  68: ## Synchronization Features
12139:  9488:  6855: 4308:  69: 
12140:  9489:  6856: 4309:  70: ### Card Data Synchronization
12141:  9490:  6857: 4310:  71: 
12142:  9491:  6858: 4311:  72: ```typescript
12143:  9492:  6859: 4312:  73: // Test sync with limited cards
12144:  9493:  6860: 4313:  74: const options = {
12145:  9494:  6861: 4314:  75:   dryRun: true,
12146:  9495:  6862: 4315:  76:   limit: 5,
12147:  9496:  6863: 4316:  77:   groupId: "23783" // Optional: specific group
12148:  9497:  6864: 4317:  78: };
12149:  9498:  6865: 4318:  79: 
12150:  9499:  6866: 4319:  80: await syncCards(options);
12151:  9500:  6867: 4320:  81: ```
12152:  9501:  6868: 4321:  82: 
12153:  9502:  6869: 4322:  83: ### Price Data Synchronization
12154:  9503:  6870: 4323:  84: 
12155:  9504:  6871: 4324:  85: ```typescript
12156:  9505:  6872: 4325:  86: // Test price sync for specific cards
12157:  9506:  6873: 4326:  87: const options = {
12158:  9507:  6874: 4327:  88:   dryRun: true,
12159:  9508:  6875: 4328:  89:   limit: 10,
12160:  9509:  6876: 4329:  90:   groupId: "23783",
12161:  9510:  6877: 4330:  91:   productId: 477236 // Optional: specific card
12162:  9511:  6878: 4331:  92: };
12163:  9512:  6879: 4332:  93: 
12164:  9513:  6880: 4333:  94: await syncPrices(options);
12165:  9514:  6881: 4334:  95: ```
12166:  9515:  6882: 4335:  96: 
12167:  9516:  6883: 4336:  97: ## Image Management
12168:  9517:  6884: 4337:  98: 
12169:  9518:  6885: 4338:  99: ### Basic Image Processing
12170:  9519:  6886: 4339: 100: 
12171:  9520:  6887: 4340: 101: ```typescript
12172:  9521:  6888: 4341: 102: const imageHandler = new ImageHandler();
12173:  9522:  6889: 4342: 103: 
12174:  9523:  6890: 4343: 104: const result = await imageHandler.processImage(
12175:  9524:  6891: 4344: 105:   imageUrl,
12176:  9525:  6892: 4345: 106:   groupId,
12177:  9526:  6893: 4346: 107:   productId
12178:  9527:  6894: 4347: 108: );
12179:  9528:  6895: 4348: 109: ```
12180:  9529:  6896: 4349: 110: 
12181:  9530:  6897: 4350: 111: ### Image Processing Options
12182:  9531:  6898: 4351: 112: 
12183:  9532:  6899: 4352: 113: ```typescript
12184:  9533:  6900: 4353: 114: const options = {
12185:  9534:  6901: 4354: 115:   skipImages: false,    // Skip image processing
12186:  9535:  6902: 4355: 116:   retryFailedImages: true,    // Retry failed images
12187:  9536:  6903: 4356: 117:   batchSize: 25        // Batch size for processing
12188:  9537:  6904: 4357: 118: };
12189:  9538:  6905: 4358: 119: ```
12190:  9539:  6906: 4359: 120: 
12191:  9540:  6907: 4360: 121: ## Batch Operations
12192:  9541:  6908: 4361: 122: 
12193:  9542:  6909: 4362: 123: ### Standard Batch Processing
12194:  9543:  6910: 4363: 124: 
12195:  9544:  6911: 4364: 125: ```typescript
12196:  9545:  6912: 4365: 126: const batchOptions = {
12197:  9546:  6913: 4366: 127:   batchSize: 100,
12198:  9547:  6914: 4367: 128:   delayBetweenBatches: 1000,
12199:  9548:  6915: 4368: 129:   onBatchComplete: async (stats) => {
12200:  9549:  6916: 4369: 130:     console.log(`Processed: ${stats.processed}/${stats.total}`);
12201:  9550:  6917: 4370: 131:   }
12202:  9551:  6918: 4371: 132: };
12203:  9552:  6919: 4372: 133: 
12204:  9553:  6920: 4373: 134: await processBatch(items, processor, batchOptions);
12205:  9554:  6921: 4374: 135: ```
12206:  9555:  6922: 4375: 136: 
12207:  9556:  6923: 4376: 137: ## Logging System
12208:  9557:  6924: 4377: 138: 
12209:  9558:  6925: 4378: 139: ### Core Logging Operations
12210:  9559:  6926: 4379: 140: 
12211:  9560:  6927: 4380: 141: ```typescript
12212:  9561:  6928: 4381: 142: // Info logging
12213:  9562:  6929: 4382: 143: await logInfo("Operation started", {
12214:  9563:  6930: 4383: 144:   context: "syncOperation",
12215:  9564:  6931: 4384: 145:   timestamp: new Date()
12216:  9565:  6932: 4385: 146: });
12217:  9566:  6933: 4386: 147: 
12218:  9567:  6934: 4387: 148: // Warning logging
12219:  9568:  6935: 4388: 149: await logWarning("Retry required", {
12220:  9569:  6936: 4389: 150:   attempt: 2,
12221:  9570:  6937: 4390: 151:   maxRetries: 3
12222:  9571:  6938: 4391: 152: });
12223:  9572:  6939: 4392: 153: 
12224:  9573:  6940: 4393: 154: // Error logging
12225:  9574:  6941: 4394: 155: await logError(error, "operationName");
12226:  9575:  6942: 4395: 156: ```
12227:  9576:  6943: 4396: 157: 
12228:  9577:  6944: 4397: 158: ### Sync Status Logging
12229:  9578:  6945: 4398: 159: 
12230:  9579:  6946: 4399: 160: ```typescript
12231:  9580:  6947: 4400: 161: const logger = new SyncLogger({
12232:  9581:  6948: 4401: 162:   type: "manual",
12233:  9582:  6949: 4402: 163:   limit: 10,
12234:  9583:  6950: 4403: 164:   dryRun: true
12235:  9584:  6951: 4404: 165: });
12236:  9585:  6952: 4405: 166: 
12237:  9586:  6953: 4406: 167: await logger.start();
12238:  9587:  6954: 4407: 168: await logger.logGroupDetails(groupId, products.length, prices.length);
12239:  9588:  6955: 4408: 169: await logger.finish();
12240:  9589:  6956: 4409: 170: ```
12241:  9590:  6957: 4410: 171: 
12242:  9591:  6958: 4411: 172: ## Testing Infrastructure
12243:  9592:  6959: 4412: 173: 
12244:  9593:  6960: 4413: 174: ### Image System Testing
12245:  9594:  6961: 4414: 175: 
12246:  9595:  6962: 4415: 176: ```typescript
12247:  9596:  6963: 4416: 177: // Run the image processing test suite
12248:  9597:  6964: 4417: 178: npm run test:images
12249:  9598:  6965: 4418: 179: 
12250:  9599:  6966: 4419: 180: // Test specific image handling
12251:  9600:  6967: 4420: 181: const testCase = {
12252:  9601:  6968: 4421: 182:   imageUrl: "https://example.com/card.jpg",
12253:  9602:  6969: 4422: 183:   groupId: "23783",
12254:  9603:  6970: 4423: 184:   productId: 477236
12255:  9604:  6971: 4424: 185: };
12256:  9605:  6972: 4425: 186: 
12257:  9606:  6973: 4426: 187: await testImageProcessing(testCase);
12258:  9607:  6974: 4427: 188: ```
12259:  9608:  6975: 4428: 189: 
12260:  9609:  6976: 4429: 190: ### Sync System Testing
12261:  9610:  6977: 4430: 191: 
12262:  9611:  6978: 4431: 192: ```bash
12263:  9612:  6979: 4432: 193: # Basic validation
12264:  9613:  6980: 4433: 194: npm run validate-sync
12265:  9614:  6981: 4434: 195: 
12266:  9615:  6982: 4435: 196: # Advanced validation with options
12267:  9616:  6983: 4436: 197: npm run validate-sync -- --limit 10 --verbose --groupId 23783
12268:  9617:  6984: 4437: 198: ```
12269:  9618:  6985: 4438: 199: 
12270:  9619:  6986: 4439: 200: ## System Observation
12271:  9620:  6987: 4440: 201: 
12272:  9621:  6988: 4441: 202: ### Health Monitoring
12273:  9622:  6989: 4442: 203: 
12274:  9623:  6990: 4443: 204: ```typescript
12275:  9624:  6991: 4444: 205: // Endpoint: GET /healthCheck
12276:  9625:  6992: 4445: 206: const healthResponse = {
12277:  9626:  6993: 4446: 207:   status: "healthy",
12278:  9627:  6994: 4447: 208:   timestamp: "2024-11-22T01:47:16.617Z",
12279:  9628:  6995: 4448: 209:   version: "1.0.0"
12280:  9629:  6996: 4449: 210: };
12281:  9630:  6997: 4450: 211: ```
12282:  9631:  6998: 4451: 212: 
12283:  9632:  6999: 4452: 213: ### Runtime Monitoring
12284:  9633:  7000: 4453: 214: 
12285:  9634:  7001: 4454: 215: ```typescript
12286:  9635:  7002: 4455: 216: // Monitor sync operations
12287:  9636:  7003: 4456: 217: const syncStats = {
12288:  9637:  7004: 4457: 218:   processedItems: 0,
12289:  9638:  7005: 4458: 219:   totalItems: 100,
12290:  9639:  7006: 4459: 220:   startTime: Date.now(),
12291:  9640:  7007: 4460: 221:   errors: []
12292:  9641:  7008: 4461: 222: };
12293:  9642:  7009: 4462: 223: 
12294:  9643:  7010: 4463: 224: // Update monitoring stats
12295:  9644:  7011: 4464: 225: function updateStats(processed: number): void {
12296:  9645:  7012: 4465: 226:   syncStats.processedItems = processed;
12297:  9646:  7013: 4466: 227:   const elapsed = Date.now() - syncStats.startTime;
12298:  9647:  7014: 4467: 228:   const rate = processed / (elapsed / 1000);
12299:  9648:  7015: 4468: 229:   console.log(`Processing rate: ${rate.toFixed(2)} items/second`);
12300:  9649:  7016: 4469: 230: }
12301:  9650:  7017: 4470: 231: ```
12302:  9651:  7018: 4471: 232: 
12303:  9652:  7019: 4472: 233: ## Operational Procedures
12304:  9653:  7020: 4473: 234: 
12305:  9654:  7021: 4474: 235: ### Sync Process Workflow
12306:  9655:  7022: 4475: 236: 
12307:  9656:  7023: 4476: 237: 1. Initialize sync operation
12308:  9657:  7024: 4477: 238: 
12309:  9658:  7025: 4478: 239: ```typescript
12310:  9659:  7026: 4479: 240: const syncOptions = {
12311:  9660:  7027: 4480: 241:   dryRun: false,
12312:  9661:  7028: 4481: 242:   limit: undefined,
12313:  9662:  7029: 4482: 243:   groupId: undefined
12314:  9663:  7030: 4483: 244: };
12315:  9664:  7031: 4484: 245: ```
12316:  9665:  7032: 4485: 246: 
12317:  9666:  7033: 4486: 247: 1. Fetch and validate data
12318:  9667:  7034: 4487: 248: 
12319:  9668:  7035: 4488: 249: ```typescript
12320:  9669:  7036: 4489: 250: const rawData = await fetchData();
12321:  9670:  7037: 4490: 251: const validatedData = await validateData(rawData);
12322:  9671:  7038: 4491: 252: ```
12323:  9672:  7039: 4492: 253: 
12324:  9673:  7040: 4493: 254: 1. Process updates
12325:  9674:  7041: 4494: 255: 
12326:  9675:  7042: 4495: 256: ```typescript
12327:  9676:  7043: 4496: 257: await processBatch(validatedData, async (batch) => {
12328:  9677:  7044: 4497: 258:   await updateDatabase(batch);
12329:  9678:  7045: 4498: 259: });
12330:  9679:  7046: 4499: 260: ```
12331:  9680:  7047: 4500: 261: 
12332:  9681:  7048: 4501: 262: 1. Handle image processing
12333:  9682:  7049: 4502: 263: 
12334:  9683:  7050: 4503: 264: ```typescript
12335:  9684:  7051: 4504: 265: await processImages(validatedData, {
12336:  9685:  7052: 4505: 266:   compression: true,
12337:  9686:  7053: 4506: 267:   validateMetadata: true
12338:  9687:  7054: 4507: 268: });
12339:  9688:  7055: 4508: 269: ```
12340:  9689:  7056: 4509: 270: 
12341:  9690:  7057: 4510: 271: 1. Update cache system
12342:  9691:  7058: 4511: 272: 
12343:  9692:  7059: 4512: 273: ```typescript
12344:  9693:  7060: 4513: 274: await updateCacheEntries(processedData);
12345:  9694:  7061: 4514: 275: ```
12346:  9695:  7062: 4515: 276: 
12347:  9696:  7063: 4516: 277: ### Image Pipeline Workflow
12348:  9697:  7064: 4517: 278: 
12349:  9698:  7065: 4518: 279: #### Image Acquisition and Validation
12350:  9699:  7066: 4519: 280: 
12351:  9700:  7067: 4520: 281: ```typescript
12352:  9701:  7068: 4521: 282: const imageHandler = new ImageHandler();
12353:  9702:  7069: 4522: 283: const validator = new ImageValidator();
12354:  9703:  7070: 4523: 284: 
12355:  9704:  7071: 4524: 285: const buffer = await imageHandler.downloadImage(url);
12356:  9705:  7072: 4525: 286: const validationResult = await validator.validateImage(buffer);
12357:  9706:  7073: 4526: 287: ```
12358:  9707:  7074: 4527: 288: 
12359:  9708:  7075: 4528: 289: #### Image Processing and Storage
12360:  9709:  7076: 4529: 290: 
12361:  9710:  7077: 4530: 291: ```typescript
12362:  9711:  7078: 4531: 292: const compressor = new ImageCompressor();
12363:  9712:  7079: 4532: 293: const result = await compressor.compress(buffer, {
12364:  9713:  7080: 4533: 294:   quality: 85,
12365:  9714:  7081: 4534: 295:   maxWidth: 800
12366:  9715:  7082: 4535: 296: });
12367:  9716:  7083: 4536: 297: 
12368:  9717:  7084: 4537: 298: await storageService.uploadImage(result.buffer, {
12369:  9718:  7085: 4538: 299:   metadata: result.info
12370:  9719:  7086: 4539: 300: });
12371:  9720:  7087: 4540: 301: ```
12372:  9721:  7088: 4541: 302: 
12373:  9722:  7089: 4542: 303: ## System Optimization
12374:  9723:  7090: 4543: 304: 
12375:  9724:  7091: 4544: 305: ### Database Performance
12376:  9725:  7092: 4545: 306: 
12377:  9726:  7093: 4546: 307: ```typescript
12378:  9727:  7094: 4547: 308: // Use batch operations for multiple updates
12379:  9728:  7095: 4548: 309: const batch = db.batch();
12380:  9729:  7096: 4549: 310: updates.forEach(update => {
12381:  9730:  7097: 4550: 311:   const ref = db.collection('cards').doc(update.id);
12382:  9731:  7098: 4551: 312:   batch.update(ref, update.data);
12383:  9732:  7099: 4552: 313: });
12384:  9733:  7100: 4553: 314: await batch.commit();
12385:  9734:  7101: 4554: 315: ```
12386:  9735:  7102: 4555: 316: 
12387:  9736:  7103: 4556: 317: ### Resource Management
12388:  9737:  7104: 4557: 318: 
12389:  9738:  7105: 4558: 319: ```typescript
12390:  9739:  7106: 4559: 320: // Implement cleanup for large operations
12391:  9740:  7107: 4560: 321: async function cleanupResources(): Promise<void> {
12392:  9741:  7108: 4561: 322:   await imageCache.clear();
12393:  9742:  7109: 4562: 323:   global.gc && global.gc();
12394:  9743:  7110: 4563: 324: }
12395:  9744:  7111: 4564: 325: ```
12396:  9745:  7112: 4565: 326: 
12397:  9746:  7113: 4566: 327: ### Request Rate Management
12398:  9747:  7114: 4567: 328: 
12399:  9748:  7115: 4568: 329: ```typescript
12400:  9749:  7116: 4569: 330: const rateLimiter = {
12401:  9750:  7117: 4570: 331:   tokens: 100,
12402:  9751:  7118: 4571: 332:   refillRate: 10,
12403:  9752:  7119: 4572: 333:   interval: 1000,
12404:  9753:  7120: 4573: 334: 
12405:  9754:  7121: 4574: 335:   async acquire(): Promise<boolean> {
12406:  9755:  7122: 4575: 336:     if (this.tokens > 0) {
12407:  9756:  7123: 4576: 337:       this.tokens--;
12408:  9757:  7124: 4577: 338:       return true;
12409:  9758:  7125: 4578: 339:     }
12410:  9759:  7126: 4579: 340:     return false;
12411:  9760:  7127: 4580: 341:   }
12412:  9761:  7128: 4581: 342: };
12413:  9762:  7129: 4582: 343: ```
12414:  9763:  7130: 4583: 344: 
12415:  9764:  7131: 4584: 345: ## Security Controls
12416:  9765:  7132: 4585: 346: 
12417:  9766:  7133: 4586: 347: ### Input Validation
12418:  9767:  7134: 4587: 348: 
12419:  9768:  7135: 4588: 349: ```typescript
12420:  9769:  7136: 4589: 350: // Implement strict type checking
12421:  9770:  7137: 4590: 351: function validateSyncOptions(options: unknown): asserts options is SyncOptions {
12422:  9771:  7138: 4591: 352:   if (!options || typeof options !== "object") {
12423:  9772:  7139: 4592: 353:     throw new Error("Invalid options object");
12424:  9773:  7140: 4593: 354:   }
12425:  9774:  7141: 4594: 355: 
12426:  9775:  7142: 4595: 356:   const opts = options as Record<string, unknown>;
12427:  9776:  7143: 4596: 357:  
12428:  9777:  7144: 4597: 358:   if (opts.limit && typeof opts.limit !== "number") {
12429:  9778:  7145: 4598: 359:     throw new Error("Limit must be a number");
12430:  9779:  7146: 4599: 360:   }
12431:  9780:  7147: 4600: 361: 
12432:  9781:  7148: 4601: 362:   if (opts.groupId && typeof opts.groupId !== "string") {
12433:  9782:  7149: 4602: 363:     throw new Error("GroupId must be a string");
12434:  9783:  7150: 4603: 364:   }
12435:  9784:  7151: 4604: 365: }
12436:  9785:  7152: 4605: 366: ```
12437:  9786:  7153: 4606: 367: 
12438:  9787:  7154: 4607: 368: ### Authentication
12439:  9788:  7155: 4608: 369: 
12440:  9789:  7156: 4609: 370: ```typescript
12441:  9790:  7157: 4610: 371: // Verify Firebase authentication
12442:  9791:  7158: 4611: 372: async function verifyAuth(req: Request): Promise<void> {
12443:  9792:  7159: 4612: 373:   const token = req.headers.authorization?.split("Bearer ")[1];
12444:  9793:  7160: 4613: 374:   if (!token) {
12445:  9794:  7161: 4614: 375:     throw new Error("No authentication token provided");
12446:  9795:  7162: 4615: 376:   }
12447:  9796:  7163: 4616: 377: 
12448:  9797:  7164: 4617: 378:   try {
12449:  9798:  7165: 4618: 379:     await admin.auth().verifyIdToken(token);
12450:  9799:  7166: 4619: 380:   } catch (error) {
12451:  9800:  7167: 4620: 381:     throw new Error("Invalid authentication token");
12452:  9801:  7168: 4621: 382:   }
12453:  9802:  7169: 4622: 383: }
12454:  9803:  7170: 4623: 384: ```
12455:  9804:  7171: 4624: 385: 
12456:  9805:  7172: 4625: 386: ## Advanced Patterns
12457:  9806:  7173: 4626: 387: 
12458:  9807:  7174: 4627: 388: ### Custom Synchronization
12459:  9808:  7175: 4628: 389: 
12460:  9809:  7176: 4629: 390: ```typescript
12461:  9810:  7177: 4630: 391: // Implement custom sync logic
12462:  9811:  7178: 4631: 392: async function customSync<T extends BaseEntity>(
12463:  9812:  7179: 4632: 393:   fetcher: DataFetcher<T>,
12464:  9813:  7180: 4633: 394:   processor: DataProcessor<T>,
12465:  9814:  7181: 4634: 395:   options: SyncOptions
12466:  9815:  7182: 4635: 396: ): Promise<SyncMetadata> {
12467:  9816:  7183: 4636: 397:   const logger = new SyncLogger({
12468:  9817:  7184: 4637: 398:     type: "custom",
12469:  9818:  7185: 4638: 399:     ...options
12470:  9819:  7186: 4639: 400:   });
12471:  9820:  7187: 4640: 401: 
12472:  9821:  7188: 4641: 402:   await logger.start();
12473:  9822:  7189: 4642: 403:  
12474:  9823:  7190: 4643: 404:   try {
12475:  9824:  7191: 4644: 405:     const data = await fetcher.fetch();
12476:  9825:  7192: 4645: 406:     const processed = await processor.process(data);
12477:  9826:  7193: 4646: 407:     return {
12478:  9827:  7194: 4647: 408:       status: "success",
12479:  9828:  7195: 4648: 409:       processed: processed.length,
12480:  9829:  7196: 4649: 410:       timestamp: new Date()
12481:  9830:  7197: 4650: 411:     };
12482:  9831:  7198: 4651: 412:   } catch (error) {
12483:  9832:  7199: 4652: 413:     await logger.logError(error);
12484:  9833:  7200: 4653: 414:     throw error;
12485:  9834:  7201: 4654: 415:   } finally {
12486:  9835:  7202: 4655: 416:     await logger.finish();
12487:  9836:  7203: 4656: 417:   }
12488:  9837:  7204: 4657: 418: }
12489:  9838:  7205: 4658: 419: ```
12490:  9839:  7206: 4659: 420: 
12491:  9840:  7207: 4660: 421: ### Advanced Caching
12492:  9841:  7208: 4661: 422: 
12493:  9842:  7209: 4662: 423: ```typescript
12494:  9843:  7210: 4663: 424: // Implement hierarchical caching
12495:  9844:  7211: 4664: 425: class HierarchicalCache<T> {
12496:  9845:  7212: 4665: 426:   private l1Cache = new Map<string, T>();
12497:  9846:  7213: 4666: 427:   private l2Cache: LRUCache<string, T>;
12498:  9847:  7214: 4667: 428: 
12499:  9848:  7215: 4668: 429:   constructor(options: CacheOptions) {
12500:  9849:  7216: 4669: 430:     this.l2Cache = new LRUCache<string, T>({
12501:  9850:  7217: 4670: 431:       max: options.maxSize,
12502:  9851:  7218: 4671: 432:       ttl: options.ttl
12503:  9852:  7219: 4672: 433:     });
12504:  9853:  7220: 4673: 434:   }
12505:  9854:  7221: 4674: 435: 
12506:  9855:  7222: 4675: 436:   async get(key: string): Promise<T | undefined> {
12507:  9856:  7223: 4676: 437:     // Check L1 cache first
12508:  9857:  7224: 4677: 438:     const l1Result = this.l1Cache.get(key);
12509:  9858:  7225: 4678: 439:     if (l1Result) return l1Result;
12510:  9859:  7226: 4679: 440: 
12511:  9860:  7227: 4680: 441:     // Check L2 cache
12512:  9861:  7228: 4681: 442:     const l2Result = this.l2Cache.get(key);
12513:  9862:  7229: 4682: 443:     if (l2Result) {
12514:  9863:  7230: 4683: 444:       this.l1Cache.set(key, l2Result);
12515:  9864:  7231: 4684: 445:       return l2Result;
12516:  9865:  7232: 4685: 446:     }
12517:  9866:  7233: 4686: 447: 
12518:  9867:  7234: 4687: 448:     return undefined;
12519:  9868:  7235: 4688: 449:   }
12520:  9869:  7236: 4689: 450: }
12521:  9870:  7237: 4690: 451: ```
12522:  9871:  7238: 4691: 452: 
12523:  9872:  7239: 4692: 453: ### Advanced Batch Processing
12524:  9873:  7240: 4693: 454: 
12525:  9874:  7241: 4694: 455: ```typescript
12526:  9875:  7242: 4695: 456: // Implement adaptive batch sizing
12527:  9876:  7243: 4696: 457: class AdaptiveBatchProcessor {
12528:  9877:  7244: 4697: 458:   private optimalBatchSize: number = 100;
12529:  9878:  7245: 4698: 459:   private processingTimes: number[] = [];
12530:  9879:  7246: 4699: 460: 
12531:  9880:  7247: 4700: 461:   async processBatch<T>(
12532:  9881:  7248: 4701: 462:     items: T[],
12533:  9882:  7249: 4702: 463:     processor: (batch: T[]) => Promise<void>
12534:  9883:  7250: 4703: 464:   ): Promise<void> {
12535:  9884:  7251: 4704: 465:     for (let i = 0; i < items.length; i += this.optimalBatchSize) {
12536:  9885:  7252: 4705: 466:       const start = Date.now();
12537:  9886:  7253: 4706: 467:       const batch = items.slice(i, i + this.optimalBatchSize);
12538:  9887:  7254: 4707: 468:      
12539:  9888:  7255: 4708: 469:       await processor(batch);
12540:  9889:  7256: 4709: 470:      
12541:  9890:  7257: 4710: 471:       const duration = Date.now() - start;
12542:  9891:  7258: 4711: 472:       this.adjustBatchSize(duration);
12543:  9892:  7259: 4712: 473:     }
12544:  9893:  7260: 4713: 474:   }
12545:  9894:  7261: 4714: 475: 
12546:  9895:  7262: 4715: 476:   private adjustBatchSize(lastProcessingTime: number): void {
12547:  9896:  7263: 4716: 477:     this.processingTimes.push(lastProcessingTime);
12548:  9897:  7264: 4717: 478:     if (this.processingTimes.length >= 5) {
12549:  9898:  7265: 4718: 479:       const avgTime = this.calculateAverage(this.processingTimes);
12550:  9899:  7266: 4719: 480:       if (avgTime > 1000) {
12551:  9900:  7267: 4720: 481:         this.optimalBatchSize = Math.max(10, this.optimalBatchSize * 0.8);
12552:  9901:  7268: 4721: 482:       } else if (avgTime < 500) {
12553:  9902:  7269: 4722: 483:         this.optimalBatchSize = Math.min(1000, this.optimalBatchSize * 1.2);
12554:  9903:  7270: 4723: 484:       }
12555:  9904:  7271: 4724: 485:       this.processingTimes = [];
12556:  9905:  7272: 4725: 486:     }
12557:  9906:  7273: 4726: 487:   }
12558:  9907:  7274: 4727: 488: }
12559:  9908:  7275: 4728: 489: ```
12560:  9909:  7276: 4729: 490: 
12561:  9910:  7277: 4730: 491: ### Recovery Strategies
12562:  9911:  7278: 4731: 492: 
12563:  9912:  7279: 4732: 493: ```typescript
12564:  9913:  7280: 4733: 494: // Implement progressive retry with backoff
12565:  9914:  7281: 4734: 495: class RetryStrategy {
12566:  9915:  7282: 4735: 496:   private static readonly MAX_RETRIES = 3;
12567:  9916:  7283: 4736: 497:   private static readonly BASE_DELAY = 1000;
12568:  9917:  7284: 4737: 498: 
12569:  9918:  7285: 4738: 499:   async executeWithRetry<T>(
12570:  9919:  7286: 4739: 500:     operation: () => Promise<T>,
12571:  9920:  7287: 4740: 501:     context: string
12572:  9921:  7288: 4741: 502:   ): Promise<T> {
12573:  9922:  7289: 4742: 503:     let lastError: Error;
12574:  9923:  7290: 4743: 504:    
12575:  9924:  7291: 4744: 505:     for (let attempt = 0; attempt < RetryStrategy.MAX_RETRIES; attempt++) {
12576:  9925:  7292: 4745: 506:       try {
12577:  9926:  7293: 4746: 507:         return await operation();
12578:  9927:  7294: 4747: 508:       } catch (error) {
12579:  9928:  7295: 4748: 509:         lastError = error instanceof Error ? error : new Error(String(error));
12580:  9929:  7296: 4749: 510:         const delay = Math.pow(2, attempt) * RetryStrategy.BASE_DELAY;
12581:  9930:  7297: 4750: 511:        
12582:  9931:  7298: 4751: 512:         await logWarning(
12583:  9932:  7299: 4752: 513:           `Operation failed, attempting retry ${attempt + 1}/${RetryStrategy.MAX_RETRIES}`,
12584:  9933:  7300: 4753: 514:           { context, error: lastError.message }
12585:  9934:  7301: 4754: 515:         );
12586:  9935:  7302: 4755: 516:        
12587:  9936:  7303: 4756: 517:         await new Promise(resolve => setTimeout(resolve, delay));
12588:  9937:  7304: 4757: 518:       }
12589:  9938:  7305: 4758: 519:     }
12590:  9939:  7306: 4759: 520:    
12591:  9940:  7307: 4760: 521:     throw lastError!;
12592:  9941:  7308: 4761: 522:   }
12593:  9942:  7309: 4762: 523: }
12594:  9943:  7310: 4763: 524: ```
12595:  9944:  7311: 4764: 525: 
12596:  9945:  7312: 4765: 526: ## Reference Materials
12597:  9946:  7313: 4766: 527: 
12598:  9947:  7314: 4767: 528: ### CLI Commands
12599:  9948:  7315: 4768: 529: 
12600:  9949:  7316: 4769: 530: ```bash
12601:  9950:  7317: 4770: 531: # Build the project
12602:  9951:  7318: 4771: 532: npm run build
12603:  9952:  7319: 4772: 533: 
12604:  9953:  7320: 4773: 534: # Run linting
12605:  9954:  7321: 4774: 535: npm run lint
12606:  9955:  7322: 4775: 536: 
12607:  9956:  7323: 4776: 537: # Fix linting issues
12608:  9957:  7324: 4777: 538: npm run lint:fix
12609:  9958:  7325: 4778: 539: 
12610:  9959:  7326: 4779: 540: # Run tests
12611:  9960:  7327: 4780: 541: npm run test:images
12612:  9961:  7328: 4781: 542: 
12613:  9962:  7329: 4782: 543: # Deploy functions
12614:  9963:  7330: 4783: 544: npm run deploy
12615:  9964:  7331: 4784: 545: ```
12616:  9965:  7332: 4785: 546: 
12617:  9966:  7333: 4786: 547: ### Documentation Links
12618:  9967:  7334: 4787: 548: 
12619:  9968:  7335: 4788: 549: - [Architecture Overview](./architecture.md)
12620:  9969:  7336: 4789: 550: - [API Documentation](./api/index.md)
12621:  9970:  7337: 4790: 551: - [Troubleshooting Guide](./troubleshooting.md)
12622:  9971:  7338: 4791: 552: - [Security Guidelines](./security.md)
12623:  9972:  7339: 4792: 553: - [Performance Guide](./performance.md)
12624:  9973:  7340: 4793: </file>
12625:  9974:  7341: 4794: 
12626:  9975:  7342: 4795: <file path="utils/batch.md">
12627:  9976:  7343: 4796:   1: # Batch Processing Utility
12628:  9977:  7344: 4797:   2: 
12629:  9978:  7345: 4798:   3: ## Overview
12630:  9979:  7346: 4799:   4: 
12631:  9980:  7347: 4800:   5: The Batch Processor (`batch.ts`) manages efficient processing of large data sets through controlled batching. It provides configurable batch sizes, concurrent processing, and progress tracking for synchronization operations.
12632:  9981:  7348: 4801:   6: 
12633:  9982:  7349: 4802:   7: ## Core Features
12634:  9983:  7350: 4803:   8: 
12635:  9984:  7351: 4804:   9: - Configurable batch sizes
12636:  9985:  7352: 4805:  10: - Concurrent processing
12637:  9986:  7353: 4806:  11: - Progress tracking
12638:  9987:  7354: 4807:  12: - Error handling
12639:  9988:  7355: 4808:  13: - Memory management
12640:  9989:  7356: 4809:  14: - Rate limiting
12641:  9990:  7357: 4810:  15: 
12642:  9991:  7358: 4811:  16: ## Main Interfaces
12643:  9992:  7359: 4812:  17: 
12644:  9993:  7360: 4813:  18: ### Batch Options
12645:  9994:  7361: 4814:  19: 
12646:  9995:  7362: 4815:  20: ```typescript
12647:  9996:  7363: 4816:  21: interface BatchOptions {
12648:  9997:  7364: 4817:  22:   batchSize?: number;
12649:  9998:  7365: 4818:  23:   concurrency?: number;
12650:  9999:  7366: 4819:  24:   retries?: number;
12651: 10000:  7367: 4820:  25:   backoff?: number;
12652: 10001:  7368: 4821:  26:   onProgress?: (progress: BatchProgress) => void;
12653: 10002:  7369: 4822:  27:   abortSignal?: AbortSignal;
12654: 10003:  7370: 4823:  28: }
12655: 10004:  7371: 4824:  29: ```
12656: 10005:  7372: 4825:  30: 
12657: 10006:  7373: 4826:  31: ### Progress Interface
12658: 10007:  7374: 4827:  32: 
12659: 10008:  7375: 4828:  33: ```typescript
12660: 10009:  7376: 4829:  34: interface BatchProgress {
12661: 10010:  7377: 4830:  35:   total: number;
12662: 10011:  7378: 4831:  36:   processed: number;
12663: 10012:  7379: 4832:  37:   failed: number;
12664: 10013:  7380: 4833:  38:   currentBatch: number;
12665: 10014:  7381: 4834:  39:   totalBatches: number;
12666: 10015:  7382: 4835:  40:   percentage: number;
12667: 10016:  7383: 4836:  41:   estimatedTimeRemaining?: number;
12668: 10017:  7384: 4837:  42: }
12669: 10018:  7385: 4838:  43: ```
12670: 10019:  7386: 4839:  44: 
12671: 10020:  7387: 4840:  45: ## Core Methods
12672: 10021:  7388: 4841:  46: 
12673: 10022:  7389: 4842:  47: ### Batch Processing
12674: 10023:  7390: 4843:  48: 
12675: 10024:  7391: 4844:  49: ```typescript
12676: 10025:  7392: 4845:  50: export async function processBatch<T>(
12677: 10026:  7393: 4846:  51:   items: T[],
12678: 10027:  7394: 4847:  52:   processor: (batch: T[]) => Promise<void>,
12679: 10028:  7395: 4848:  53:   options: BatchOptions = {}
12680: 10029:  7396: 4849:  54: ): Promise<BatchResult> {
12681: 10030:  7397: 4850:  55:   const {
12682: 10031:  7398: 4851:  56:     batchSize = 100,
12683: 10032:  7399: 4852:  57:     concurrency = 1,
12684: 10033:  7400: 4853:  58:     retries = 3,
12685: 10034:  7401: 4854:  59:     onProgress
12686: 10035:  7402: 4855:  60:   } = options;
12687: 10036:  7403: 4856:  61: 
12688: 10037:  7404: 4857:  62:   const batches = chunk(items, batchSize);
12689: 10038:  7405: 4858:  63:   let processed = 0;
12690: 10039:  7406: 4859:  64:   let failed = 0;
12691: 10040:  7407: 4860:  65: 
12692: 10041:  7408: 4861:  66:   for (let i = 0; i < batches.length; i++) {
12693: 10042:  7409: 4862:  67:     try {
12694: 10043:  7410: 4863:  68:       await processor(batches[i]);
12695: 10044:  7411: 4864:  69:       processed += batches[i].length;
12696: 10045:  7412: 4865:  70:     } catch (error) {
12697: 10046:  7413: 4866:  71:       failed += batches[i].length;
12698: 10047:  7414: 4867:  72:       await handleBatchError(error, retries);
12699: 10048:  7415: 4868:  73:     }
12700: 10049:  7416: 4869:  74: 
12701: 10050:  7417: 4870:  75:     if (onProgress) {
12702: 10051:  7418: 4871:  76:       onProgress({
12703: 10052:  7419: 4872:  77:         total: items.length,
12704: 10053:  7420: 4873:  78:         processed,
12705: 10054:  7421: 4874:  79:         failed,
12706: 10055:  7422: 4875:  80:         currentBatch: i + 1,
12707: 10056:  7423: 4876:  81:         totalBatches: batches.length,
12708: 10057:  7424: 4877:  82:         percentage: (processed + failed) / items.length * 100
12709: 10058:  7425: 4878:  83:       });
12710: 10059:  7426: 4879:  84:     }
12711: 10060:  7427: 4880:  85:   }
12712: 10061:  7428: 4881:  86: 
12713: 10062:  7429: 4882:  87:   return { processed, failed };
12714: 10063:  7430: 4883:  88: }
12715: 10064:  7431: 4884:  89: ```
12716: 10065:  7432: 4885:  90: 
12717: 10066:  7433: 4886:  91: ## Implementation Examples
12718: 10067:  7434: 4887:  92: 
12719: 10068:  7435: 4888:  93: ### Basic Usage
12720: 10069:  7436: 4889:  94: 
12721: 10070:  7437: 4890:  95: ```typescript
12722: 10071:  7438: 4891:  96: const items = await fetchItems();
12723: 10072:  7439: 4892:  97: const result = await processBatch(
12724: 10073:  7440: 4893:  98:   items,
12725: 10074:  7441: 4894:  99:   async (batch) => {
12726: 10075:  7442: 4895: 100:     await processItems(batch);
12727: 10076:  7443: 4896: 101:   },
12728: 10077:  7444: 4897: 102:   {
12729: 10078:  7445: 4898: 103:     batchSize: 50,
12730: 10079:  7446: 4899: 104:     onProgress: (progress) => {
12731: 10080:  7447: 4900: 105:       console.log(
12732: 10081:  7448: 4901: 106:         `Processed ${progress.processed}/${progress.total} items`
12733: 10082:  7449: 4902: 107:       );
12734: 10083:  7450: 4903: 108:     }
12735: 10084:  7451: 4904: 109:   }
12736: 10085:  7452: 4905: 110: );
12737: 10086:  7453: 4906: 111: ```
12738: 10087:  7454: 4907: 112: 
12739: 10088:  7455: 4908: 113: ### With Concurrency
12740: 10089:  7456: 4909: 114: 
12741: 10090:  7457: 4910: 115: ```typescript
12742: 10091:  7458: 4911: 116: const processConcurrentBatches = async <T>(
12743: 10092:  7459: 4912: 117:   items: T[],
12744: 10093:  7460: 4913: 118:   processor: (item: T) => Promise<void>
12745: 10094:  7461: 4914: 119: ): Promise<void> => {
12746: 10095:  7462: 4915: 120:   await processBatch(items, async (batch) => {
12747: 10096:  7463: 4916: 121:     await Promise.all(
12748: 10097:  7464: 4917: 122:       batch.map(item => processor(item))
12749: 10098:  7465: 4918: 123:     );
12750: 10099:  7466: 4919: 124:   }, {
12751: 10100:  7467: 4920: 125:     batchSize: 25,
12752: 10101:  7468: 4921: 126:     concurrency: 3
12753: 10102:  7469: 4922: 127:   });
12754: 10103:  7470: 4923: 128: };
12755: 10104:  7471: 4924: 129: ```
12756: 10105:  7472: 4925: 130: 
12757: 10106:  7473: 4926: 131: ## Error Management
12758: 10107:  7474: 4927: 132: 
12759: 10108:  7475: 4928: 133: ### Retry Logic
12760: 10109:  7476: 4929: 134: 
12761: 10110:  7477: 4930: 135: ```typescript
12762: 10111:  7478: 4931: 136: async function handleBatchError(
12763: 10112:  7479: 4932: 137:   error: unknown,
12764: 10113:  7480: 4933: 138:   retriesLeft: number,
12765: 10114:  7481: 4934: 139:   backoff: number = 1000
12766: 10115:  7482: 4935: 140: ): Promise<void> {
12767: 10116:  7483: 4936: 141:   if (retriesLeft <= 0) {
12768: 10117:  7484: 4937: 142:     throw error;
12769: 10118:  7485: 4938: 143:   }
12770: 10119:  7486: 4939: 144: 
12771: 10120:  7487: 4940: 145:   await new Promise(resolve => 
12772: 10121:  7488: 4941: 146:     setTimeout(resolve, backoff * (4 - retriesLeft))
12773: 10122:  7489: 4942: 147:   );
12774: 10123:  7490: 4943: 148:  
12775: 10124:  7491: 4944: 149:   return handleBatchError(
12776: 10125:  7492: 4945: 150:     error,
12777: 10126:  7493: 4946: 151:     retriesLeft - 1,
12778: 10127:  7494: 4947: 152:     backoff
12779: 10128:  7495: 4948: 153:   );
12780: 10129:  7496: 4949: 154: }
12781: 10130:  7497: 4950: 155: ```
12782: 10131:  7498: 4951: 156: 
12783: 10132:  7499: 4952: 157: ### Error Collection
12784: 10133:  7500: 4953: 158: 
12785: 10134:  7501: 4954: 159: ```typescript
12786: 10135:  7502: 4955: 160: interface BatchError {
12787: 10136:  7503: 4956: 161:   batchIndex: number;
12788: 10137:  7504: 4957: 162:   items: unknown[];
12789: 10138:  7505: 4958: 163:   error: Error;
12790: 10139:  7506: 4959: 164: }
12791: 10140:  7507: 4960: 165: 
12792: 10141:  7508: 4961: 166: const collectErrors = async <T>(
12793: 10142:  7509: 4962: 167:   items: T[],
12794: 10143:  7510: 4963: 168:   processor: (batch: T[]) => Promise<void>
12795: 10144:  7511: 4964: 169: ): Promise<BatchError[]> => {
12796: 10145:  7512: 4965: 170:   const errors: BatchError[] = [];
12797: 10146:  7513: 4966: 171:  
12798: 10147:  7514: 4967: 172:   await processBatch(items, async (batch, index) => {
12799: 10148:  7515: 4968: 173:     try {
12800: 10149:  7516: 4969: 174:       await processor(batch);
12801: 10150:  7517: 4970: 175:     } catch (error) {
12802: 10151:  7518: 4971: 176:       errors.push({
12803: 10152:  7519: 4972: 177:         batchIndex: index,
12804: 10153:  7520: 4973: 178:         items: batch,
12805: 10154:  7521: 4974: 179:         error: error instanceof Error ? error : new Error(String(error))
12806: 10155:  7522: 4975: 180:       });
12807: 10156:  7523: 4976: 181:     }
12808: 10157:  7524: 4977: 182:   });
12809: 10158:  7525: 4978: 183: 
12810: 10159:  7526: 4979: 184:   return errors;
12811: 10160:  7527: 4980: 185: };
12812: 10161:  7528: 4981: 186: ```
12813: 10162:  7529: 4982: 187: 
12814: 10163:  7530: 4983: 188: ## Memory Management
12815: 10164:  7531: 4984: 189: 
12816: 10165:  7532: 4985: 190: ### Chunking Function
12817: 10166:  7533: 4986: 191: 
12818: 10167:  7534: 4987: 192: ```typescript
12819: 10168:  7535: 4988: 193: function chunk<T>(
12820: 10169:  7536: 4989: 194:   items: T[], 
12821: 10170:  7537: 4990: 195:   size: number
12822: 10171:  7538: 4991: 196: ): T[][] {
12823: 10172:  7539: 4992: 197:   const chunks: T[][] = [];
12824: 10173:  7540: 4993: 198:  
12825: 10174:  7541: 4994: 199:   for (let i = 0; i < items.length; i += size) {
12826: 10175:  7542: 4995: 200:     chunks.push(items.slice(i, i + size));
12827: 10176:  7543: 4996: 201:   }
12828: 10177:  7544: 4997: 202:  
12829: 10178:  7545: 4998: 203:   return chunks;
12830: 10179:  7546: 4999: 204: }
12831: 10180:  7547: 5000: 205: ```
12832: 10181:  7548: 5001: 206: 
12833: 10182:  7549: 5002: 207: ### Resource Cleanup
12834: 10183:  7550: 5003: 208: 
12835: 10184:  7551: 5004: 209: ```typescript
12836: 10185:  7552: 5005: 210: async function processWithCleanup<T>(
12837: 10186:  7553: 5006: 211:   items: T[],
12838: 10187:  7554: 5007: 212:   processor: (batch: T[]) => Promise<void>
12839: 10188:  7555: 5008: 213: ): Promise<void> {
12840: 10189:  7556: 5009: 214:   let currentBatch: T[] = [];
12841: 10190:  7557: 5010: 215:  
12842: 10191:  7558: 5011: 216:   try {
12843: 10192:  7559: 5012: 217:     await processBatch(items, async (batch) => {
12844: 10193:  7560: 5013: 218:       currentBatch = batch;
12845: 10194:  7561: 5014: 219:       await processor(batch);
12846: 10195:  7562: 5015: 220:       currentBatch = [];
12847: 10196:  7563: 5016: 221:     });
12848: 10197:  7564: 5017: 222:   } finally {
12849: 10198:  7565: 5018: 223:     currentBatch = [];
12850: 10199:  7566: 5019: 224:   }
12851: 10200:  7567: 5020: 225: }
12852: 10201:  7568: 5021: 226: ```
12853: 10202:  7569: 5022: 227: 
12854: 10203:  7570: 5023: 228: ## Progress Tracking
12855: 10204:  7571: 5024: 229: 
12856: 10205:  7572: 5025: 230: ### Progress Calculator
12857: 10206:  7573: 5026: 231: 
12858: 10207:  7574: 5027: 232: ```typescript
12859: 10208:  7575: 5028: 233: function calculateProgress(
12860: 10209:  7576: 5029: 234:   processed: number,
12861: 10210:  7577: 5030: 235:   total: number,
12862: 10211:  7578: 5031: 236:   startTime: number
12863: 10212:  7579: 5032: 237: ): BatchProgress {
12864: 10213:  7580: 5033: 238:   const elapsed = Date.now() - startTime;
12865: 10214:  7581: 5034: 239:   const rate = processed / (elapsed / 1000);
12866: 10215:  7582: 5035: 240:   const remaining = total - processed;
12867: 10216:  7583: 5036: 241:  
12868: 10217:  7584: 5037: 242:   return {
12869: 10218:  7585: 5038: 243:     processed,
12870: 10219:  7586: 5039: 244:     total,
12871: 10220:  7587: 5040: 245:     percentage: (processed / total) * 100,
12872: 10221:  7588: 5041: 246:     estimatedTimeRemaining: remaining / rate
12873: 10222:  7589: 5042: 247:   };
12874: 10223:  7590: 5043: 248: }
12875: 10224:  7591: 5044: 249: ```
12876: 10225:  7592: 5045: 250: 
12877: 10226:  7593: 5046: 251: ## Best Practices
12878: 10227:  7594: 5047: 252: 
12879: 10228:  7595: 5048: 253: ### Batch Size Selection
12880: 10229:  7596: 5049: 254: 
12881: 10230:  7597: 5050: 255: - Consider memory constraints
12882: 10231:  7598: 5051: 256: - Balance throughput and overhead
12883: 10232:  7599: 5052: 257: - Monitor processing times
12884: 10233:  7600: 5053: 258: 
12885: 10234:  7601: 5054: 259: ### Error Handling
12886: 10235:  7602: 5055: 260: 
12887: 10236:  7603: 5056: 261: - Implement proper retries
12888: 10237:  7604: 5057: 262: - Log batch failures
12889: 10238:  7605: 5058: 263: - Maintain item context
12890: 10239:  7606: 5059: 264: 
12891: 10240:  7607: 5060: 265: ### Resource Management
12892: 10241:  7608: 5061: 266: 
12893: 10242:  7609: 5062: 267: - Clean up after processing
12894: 10243:  7610: 5063: 268: - Monitor memory usage
12895: 10244:  7611: 5064: 269: - Handle aborted operations
12896: 10245:  7612: 5065: 270: 
12897: 10246:  7613: 5066: 271: ## Related Components
12898: 10247:  7614: 5067: 272: 
12899: 10248:  7615: 5068: 273: - [Progress Tracker](./progress)
12900: 10249:  7616: 5069: 274: - [Error Handler](./error-handling)
12901: 10250:  7617: 5070: 275: - [Logger](./logging)
12902: 10251:  7618: 5071: 276: 
12903: 10252:  7619: 5072: 277: ## Troubleshooting
12904: 10253:  7620: 5073: 278: 
12905: 10254:  7621: 5074: 279: ### Common Issues
12906: 10255:  7622: 5075: 280: 
12907: 10256:  7623: 5076: 281: 1. Memory Problems:
12908: 10257:  7624: 5077: 282:    - Reduce batch size
12909: 10258:  7625: 5078: 283:    - Implement cleanup
12910: 10259:  7626: 5079: 284:    - Monitor heap usage
12911: 10260:  7627: 5080: 285: 
12912: 10261:  7628: 5081: 286: 2. Performance Issues:
12913: 10262:  7629: 5082: 287:    - Adjust concurrency
12914: 10263:  7630: 5083: 288:    - Optimize batch size
12915: 10264:  7631: 5084: 289:    - Monitor processing rates
12916: 10265:  7632: 5085: 290: 
12917: 10266:  7633: 5086: 291: 3. Error Handling:
12918: 10267:  7634: 5087: 292:    - Check retry logic
12919: 10268:  7635: 5088: 293:    - Verify error collection
12920: 10269:  7636: 5089: 294:    - Monitor failure patterns
12921: 10270:  7637: 5090: </file>
12922: 10271:  7638: 5091: 
12923: 10272:  7639: 5092: <file path="utils/cache.md">
12924: 10273:  7640: 5093:   1: # Cache System
12925: 10274:  7641: 5094:   2: 
12926: 10275:  7642: 5095:   3: ## Overview
12927: 10276:  7643: 5096:   4: 
12928: 10277:  7644: 5097:   5: The Cache System provides efficient memory caching for card data, prices, and images. It implements an LRU (Least Recently Used) caching strategy and includes specialized caching for different data types.
12929: 10278:  7645: 5098:   6: 
12930: 10279:  7646: 5099:   7: ## Components
12931: 10280:  7647: 5100:   8: 
12932: 10281:  7648: 5101:   9: The system consists of two main cache implementations:
12933: 10282:  7649: 5102:  10: 
12934: 10283:  7650: 5103:  11: 1. Basic LRU Cache (`cache.ts`)
12935: 10284:  7651: 5104:  12: 2. Specialized Image Cache (`imageCache.ts`)
12936: 10285:  7652: 5105:  13: 
12937: 10286:  7653: 5106:  14: ## Basic Cache Implementation
12938: 10287:  7654: 5107:  15: 
12939: 10288:  7655: 5108:  16: ### Configuration
12940: 10289:  7656: 5109:  17: 
12941: 10290:  7657: 5110:  18: ```typescript
12942: 10291:  7658: 5111:  19: const options = {
12943: 10292:  7659: 5112:  20:   max: 500,                // Maximum number of items
12944: 10293:  7660: 5113:  21:   ttl: 1000 * 60 * 60,    // Time to live: 1 hour
12945: 10294:  7661: 5114:  22: };
12946: 10295:  7662: 5115:  23: 
12947: 10296:  7663: 5116:  24: export const cardCache = new LRUCache<string, CardProduct>(options);
12948: 10297:  7664: 5117:  25: ```
12949: 10298:  7665: 5118:  26: 
12950: 10299:  7666: 5119:  27: ### Basic Key Generation
12951: 10300:  7667: 5120:  28: 
12952: 10301:  7668: 5121:  29: ```typescript
12953: 10302:  7669: 5122:  30: export type CacheType = "card" | "price" | "image";
12954: 10303:  7670: 5123:  31: 
12955: 10304:  7671: 5124:  32: export const getCacheKey = (type: CacheType, id: number): string => {
12956: 10305:  7672: 5125:  33:   return `${type}:${id}`;
12957: 10306:  7673: 5126:  34: };
12958: 10307:  7674: 5127:  35: ```
12959: 10308:  7675: 5128:  36: 
12960: 10309:  7676: 5129:  37: ## Image Cache Implementation
12961: 10310:  7677: 5130:  38: 
12962: 10311:  7678: 5131:  39: ### Class Structure
12963: 10312:  7679: 5132:  40: 
12964: 10313:  7680: 5133:  41: ```typescript
12965: 10314:  7681: 5134:  42: export class ImageCache {
12966: 10315:  7682: 5135:  43:   private metadataCache: LRUCache<string, ImageMetadata>;
12967: 10316:  7683: 5136:  44:   private bufferCache: LRUCache<string, Buffer>;
12968: 10317:  7684: 5137:  45:   private existsCache: LRUCache<string, boolean>;
12969: 10318:  7685: 5138:  46:   private stats: CacheStats;
12970: 10319:  7686: 5139:  47: }
12971: 10320:  7687: 5140:  48: ```
12972: 10321:  7688: 5141:  49: 
12973: 10322:  7689: 5142:  50: ### Cache Configuration
12974: 10323:  7690: 5143:  51: 
12975: 10324:  7691: 5144:  52: ```typescript
12976: 10325:  7692: 5145:  53: constructor() {
12977: 10326:  7693: 5146:  54:   this.metadataCache = new LRUCache<string, ImageMetadata>({
12978: 10327:  7694: 5147:  55:     max: 1000,
12979: 10328:  7695: 5148:  56:     ttl: 1000 * 60 * 60,  // 1 hour
12980: 10329:  7696: 5149:  57:     updateAgeOnGet: true,
12981: 10330:  7697: 5150:  58:   });
12982: 10331:  7698: 5151:  59: 
12983: 10332:  7699: 5152:  60:   this.bufferCache = new LRUCache<string, Buffer>({
12984: 10333:  7700: 5153:  61:     max: 100,
12985: 10334:  7701: 5154:  62:     ttl: 1000 * 60 * 5,   // 5 minutes
12986: 10335:  7702: 5155:  63:     updateAgeOnGet: true,
12987: 10336:  7703: 5156:  64:     maxSize: 50 * 1024 * 1024,  // 50MB max cache size
12988: 10337:  7704: 5157:  65:     sizeCalculation: (buffer) => buffer.length,
12989: 10338:  7705: 5158:  66:   });
12990: 10339:  7706: 5159:  67: 
12991: 10340:  7707: 5160:  68:   this.existsCache = new LRUCache<string, boolean>({
12992: 10341:  7708: 5161:  69:     max: 1000,
12993: 10342:  7709: 5162:  70:     ttl: 1000 * 60 * 60,  // 1 hour
12994: 10343:  7710: 5163:  71:     updateAgeOnGet: true,
12995: 10344:  7711: 5164:  72:   });
12996: 10345:  7712: 5165:  73: }
12997: 10346:  7713: 5166:  74: ```
12998: 10347:  7714: 5167:  75: 
12999: 10348:  7715: 5168:  76: ## Usage Examples
13000: 10349:  7716: 5169:  77: 
13001: 10350:  7717: 5170:  78: ### Basic Cache Usage
13002: 10351:  7718: 5171:  79: 
13003: 10352:  7719: 5172:  80: ```typescript
13004: 10353:  7720: 5173:  81: // Store card data
13005: 10354:  7721: 5174:  82: const cardId = 477236;
13006: 10355:  7722: 5175:  83: const cacheKey = getCacheKey("card", cardId);
13007: 10356:  7723: 5176:  84: cardCache.set(cacheKey, cardData);
13008: 10357:  7724: 5177:  85: 
13009: 10358:  7725: 5178:  86: // Retrieve card data
13010: 10359:  7726: 5179:  87: const cachedCard = cardCache.get(cacheKey);
13011: 10360:  7727: 5180:  88: if (cachedCard) {
13012: 10361:  7728: 5181:  89:   return cachedCard;
13013: 10362:  7729: 5182:  90: }
13014: 10363:  7730: 5183:  91: ```
13015: 10364:  7731: 5184:  92: 
13016: 10365:  7732: 5185:  93: ### Image Cache Usage
13017: 10366:  7733: 5186:  94: 
13018: 10367:  7734: 5187:  95: ```typescript
13019: 10368:  7735: 5188:  96: const imageCache = new ImageCache();
13020: 10369:  7736: 5189:  97: 
13021: 10370:  7737: 5190:  98: // Get metadata
13022: 10371:  7738: 5191:  99: const metadataKey = imageCache.getMetadataCacheKey(groupId, productId, false);
13023: 10372:  7739: 5192: 100: const metadata = await imageCache.getMetadata(metadataKey);
13024: 10373:  7740: 5193: 101: 
13025: 10374:  7741: 5194: 102: // Get image buffer
13026: 10375:  7742: 5195: 103: const bufferKey = imageCache.getBufferCacheKey(imageUrl);
13027: 10376:  7743: 5196: 104: const buffer = await imageCache.getBuffer(bufferKey);
13028: 10377:  7744: 5197: 105: 
13029: 10378:  7745: 5198: 106: // Check existence
13030: 10379:  7746: 5199: 107: const existsKey = imageCache.getExistsCacheKey(groupId, productId, false);
13031: 10380:  7747: 5200: 108: const exists = imageCache.getExists(existsKey);
13032: 10381:  7748: 5201: 109: ```
13033: 10382:  7749: 5202: 110: 
13034: 10383:  7750: 5203: 111: ## Image Cache Key Types
13035: 10384:  7751: 5204: 112: 
13036: 10385:  7752: 5205: 113: ### Metadata Keys
13037: 10386:  7753: 5206: 114: 
13038: 10387:  7754: 5207: 115: ```typescript
13039: 10388:  7755: 5208: 116: getMetadataCacheKey(
13040: 10389:  7756: 5209: 117:   groupId: string,
13041: 10390:  7757: 5210: 118:   productId: number,
13042: 10391:  7758: 5211: 119:   isHighRes: boolean
13043: 10392:  7759: 5212: 120: ): string {
13044: 10393:  7760: 5213: 121:   return `metadata:${groupId}:${productId}:${isHighRes ? "high" : "original"}`;
13045: 10394:  7761: 5214: 122: }
13046: 10395:  7762: 5215: 123: ```
13047: 10396:  7763: 5216: 124: 
13048: 10397:  7764: 5217: 125: ### Buffer Keys
13049: 10398:  7765: 5218: 126: 
13050: 10399:  7766: 5219: 127: ```typescript
13051: 10400:  7767: 5220: 128: getBufferCacheKey(url: string): string {
13052: 10401:  7768: 5221: 129:   return `buffer:${url}`;
13053: 10402:  7769: 5222: 130: }
13054: 10403:  7770: 5223: 131: ```
13055: 10404:  7771: 5224: 132: 
13056: 10405:  7772: 5225: 133: ### Existence Check Keys
13057: 10406:  7773: 5226: 134: 
13058: 10407:  7774: 5227: 135: ```typescript
13059: 10408:  7775: 5228: 136: getExistsCacheKey(
13060: 10409:  7776: 5229: 137:   groupId: string,
13061: 10410:  7777: 5230: 138:   productId: number,
13062: 10411:  7778: 5231: 139:   isHighRes: boolean
13063: 10412:  7779: 5232: 140: ): string {
13064: 10413:  7780: 5233: 141:   return `exists:${groupId}:${productId}:${isHighRes ? "high" : "original"}`;
13065: 10414:  7781: 5234: 142: }
13066: 10415:  7782: 5235: 143: ```
13067: 10416:  7783: 5236: 144: 
13068: 10417:  7784: 5237: 145: ## Statistics Tracking
13069: 10418:  7785: 5238: 146: 
13070: 10419:  7786: 5239: 147: ```typescript
13071: 10420:  7787: 5240: 148: interface CacheStats {
13072: 10421:  7788: 5241: 149:   hits: number;
13073: 10422:  7789: 5242: 150:   misses: number;
13074: 10423:  7790: 5243: 151:   totalRequests: number;
13075: 10424:  7791: 5244: 152: }
13076: 10425:  7792: 5245: 153: 
13077: 10426:  7793: 5246: 154: getStats(): CacheStats {
13078: 10427:  7794: 5247: 155:   return {...this.stats};
13079: 10428:  7795: 5248: 156: }
13080: 10429:  7796: 5249: 157: ```
13081: 10430:  7797: 5250: 158: 
13082: 10431:  7798: 5251: 159: ## Cache Management
13083: 10432:  7799: 5252: 160: 
13084: 10433:  7800: 5253: 161: ### Clearing Cache
13085: 10434:  7801: 5254: 162: 
13086: 10435:  7802: 5255: 163: ```typescript
13087: 10436:  7803: 5256: 164: clear(): void {
13088: 10437:  7804: 5257: 165:   this.metadataCache.clear();
13089: 10438:  7805: 5258: 166:   this.bufferCache.clear();
13090: 10439:  7806: 5259: 167:   this.existsCache.clear();
13091: 10440:  7807: 5260: 168:   this.stats = {
13092: 10441:  7808: 5261: 169:     hits: 0,
13093: 10442:  7809: 5262: 170:     misses: 0,
13094: 10443:  7810: 5263: 171:     totalRequests: 0,
13095: 10444:  7811: 5264: 172:   };
13096: 10445:  7812: 5265: 173: }
13097: 10446:  7813: 5266: 174: ```
13098: 10447:  7814: 5267: 175: 
13099: 10448:  7815: 5268: 176: ### Performance Monitoring
13100: 10449:  7816: 5269: 177: 
13101: 10450:  7817: 5270: 178: ```typescript
13102: 10451:  7818: 5271: 179: async getMetadata(key: string): Promise<ImageMetadata | undefined> {
13103: 10452:  7819: 5272: 180:   this.stats.totalRequests++;
13104: 10453:  7820: 5273: 181:   const value = this.metadataCache.get(key);
13105: 10454:  7821: 5274: 182:   if (value) {
13106: 10455:  7822: 5275: 183:     this.stats.hits++;
13107: 10456:  7823: 5276: 184:     await logInfo("Cache hit: metadata", {
13108: 10457:  7824: 5277: 185:       key,
13109: 10458:  7825: 5278: 186:       timestamp: new Date().toISOString(),
13110: 10459:  7826: 5279: 187:     });
13111: 10460:  7827: 5280: 188:   } else {
13112: 10461:  7828: 5281: 189:     this.stats.misses++;
13113: 10462:  7829: 5282: 190:   }
13114: 10463:  7830: 5283: 191:   return value;
13115: 10464:  7831: 5284: 192: }
13116: 10465:  7832: 5285: 193: ```
13117: 10466:  7833: 5286: 194: 
13118: 10467:  7834: 5287: 195: ## Best Practices
13119: 10468:  7835: 5288: 196: 
13120: 10469:  7836: 5289: 197: 1. **Memory Management**:
13121: 10470:  7837: 5290: 198:    - Set appropriate cache sizes
13122: 10471:  7838: 5291: 199:    - Monitor memory usage
13123: 10472:  7839: 5292: 200:    - Implement TTL for all cached items
13124: 10473:  7840: 5293: 201: 
13125: 10474:  7841: 5294: 202: 2. **Performance Optimization**:
13126: 10475:  7842: 5295: 203:    - Use buffer cache for frequently accessed images
13127: 10476:  7843: 5296: 204:    - Implement size limits for buffer cache
13128: 10477:  7844: 5297: 205:    - Track cache statistics
13129: 10478:  7845: 5298: 206: 
13130: 10479:  7846: 5299: 207: 3. **Error Handling**:
13131: 10480:  7847: 5300: 208:    - Graceful degradation on cache misses
13132: 10481:  7848: 5301: 209:    - Monitor cache hit rates
13133: 10482:  7849: 5302: 210:    - Log cache operations
13134: 10483:  7850: 5303: 211: 
13135: 10484:  7851: 5304: 212: ## Troubleshooting
13136: 10485:  7852: 5305: 213: 
13137: 10486:  7853: 5306: 214: ### Common Issues
13138: 10487:  7854: 5307: 215: 
13139: 10488:  7855: 5308: 216: 1. Memory Usage:
13140: 10489:  7856: 5309: 217:    - Monitor cache size
13141: 10490:  7857: 5310: 218:    - Adjust max entries
13142: 10491:  7858: 5311: 219:    - Check TTL settings
13143: 10492:  7859: 5312: 220: 
13144: 10493:  7860: 5313: 221: 2. Cache Misses:
13145: 10494:  7861: 5314: 222:    - Verify key generation
13146: 10495:  7862: 5315: 223:    - Check TTL values
13147: 10496:  7863: 5316: 224:    - Monitor hit rates
13148: 10497:  7864: 5317: 225: 
13149: 10498:  7865: 5318: 226: 3. Performance:
13150: 10499:  7866: 5319: 227:    - Analyze cache stats
13151: 10500:  7867: 5320: 228:    - Adjust cache sizes
13152: 10501:  7868: 5321: 229:    - Optimize key generation
13153: 10502:  7869: 5322: 230: 
13154: 10503:  7870: 5323: 231: ## Related Components
13155: 10504:  7871: 5324: 232: 
13156: 10505:  7872: 5325: 233: - [Image Handler](./image-handler)
13157: 10506:  7873: 5326: 234: - [Logger](./logging)
13158: 10507:  7874: 5327: 235: - [Error Handling](./error-handling)
13159: 10508:  7875: 5328: </file>
13160: 10509:  7876: 5329: 
13161: 10510:  7877: 5330: <file path="utils/error-handling.md">
13162: 10511:  7878: 5331:   1: # Error Handling System
13163: 10512:  7879: 5332:   2: 
13164: 10513:  7880: 5333:   3: ## Overview
13165: 10514:  7881: 5334:   4: 
13166: 10515:  7882: 5335:   5: The Error Handling system (`error.ts`) provides a standardized approach to error management across the application. It includes error classification, detailed logging, and integration with the logging system for comprehensive error tracking.
13167: 10516:  7883: 5336:   6: 
13168: 10517:  7884: 5337:   7: ## Features
13169: 10518:  7885: 5338:   8: 
13170: 10519:  7886: 5339:   9: - Custom error types
13171: 10520:  7887: 5340:  10: - Detailed error reporting
13172: 10521:  7888: 5341:  11: - Error severity levels
13173: 10522:  7889: 5342:  12: - Metadata support
13174: 10523:  7890: 5343:  13: - Firestore integration
13175: 10524:  7891: 5344:  14: - Stack trace preservation
13176: 10525:  7892: 5345:  15: 
13177: 10526:  7893: 5346:  16: ## Core Components
13178: 10527:  7894: 5347:  17: 
13179: 10528:  7895: 5348:  18: ### Error Types
13180: 10529:  7896: 5349:  19: 
13181: 10530:  7897: 5350:  20: ```typescript
13182: 10531:  7898: 5351:  21: export interface ErrorReport {
13183: 10532:  7899: 5352:  22:   timestamp: Date;
13184: 10533:  7900: 5353:  23:   context: string;
13185: 10534:  7901: 5354:  24:   error: string;
13186: 10535:  7902: 5355:  25:   stackTrace?: string;
13187: 10536:  7903: 5356:  26:   metadata?: Record<string, unknown>;
13188: 10537:  7904: 5357:  27:   severity: "ERROR" | "WARNING" | "CRITICAL";
13189: 10538:  7905: 5358:  28: }
13190: 10539:  7906: 5359:  29: 
13191: 10540:  7907: 5360:  30: export class DetailedError extends Error {
13192: 10541:  7908: 5361:  31:   constructor(
13193: 10542:  7909: 5362:  32:     message: string,
13194: 10543:  7910: 5363:  33:     public context: string,
13195: 10544:  7911: 5364:  34:     public metadata?: Record<string, unknown>,
13196: 10545:  7912: 5365:  35:     public severity: "ERROR" | "WARNING" | "CRITICAL" = "ERROR"
13197: 10546:  7913: 5366:  36:   ) {
13198: 10547:  7914: 5367:  37:     super(message);
13199: 10548:  7915: 5368:  38:     this.name = "DetailedError";
13200: 10549:  7916: 5369:  39:   }
13201: 10550:  7917: 5370:  40: }
13202: 10551:  7918: 5371:  41: ```
13203: 10552:  7919: 5372:  42: 
13204: 10553:  7920: 5373:  43: ## Error Logging
13205: 10554:  7921: 5374:  44: 
13206: 10555:  7922: 5375:  45: ### Basic Error Logging
13207: 10556:  7923: 5376:  46: 
13208: 10557:  7924: 5377:  47: ```typescript
13209: 10558:  7925: 5378:  48: export async function logDetailedError(
13210: 10559:  7926: 5379:  49:   error: Error,
13211: 10560:  7927: 5380:  50:   context: string,
13212: 10561:  7928: 5381:  51:   metadata?: Record<string, unknown>,
13213: 10562:  7929: 5382:  52:   severity: "ERROR" | "WARNING" | "CRITICAL" = "ERROR"
13214: 10563:  7930: 5383:  53: ): Promise<void> {
13215: 10564:  7931: 5384:  54:   const report: ErrorReport = {
13216: 10565:  7932: 5385:  55:     timestamp: new Date(),
13217: 10566:  7933: 5386:  56:     context,
13218: 10567:  7934: 5387:  57:     error: error.message,
13219: 10568:  7935: 5388:  58:     stackTrace: error.stack,
13220: 10569:  7936: 5389:  59:     metadata,
13221: 10570:  7937: 5390:  60:     severity,
13222: 10571:  7938: 5391:  61:   };
13223: 10572:  7939: 5392:  62: 
13224: 10573:  7940: 5393:  63:   await db.collection(COLLECTION.LOGS).add(report);
13225: 10574:  7941: 5394:  64:   await logError(error, context);
13226: 10575:  7942: 5395:  65: }
13227: 10576:  7943: 5396:  66: ```
13228: 10577:  7944: 5397:  67: 
13229: 10578:  7945: 5398:  68: ## Usage Examples
13230: 10579:  7946: 5399:  69: 
13231: 10580:  7947: 5400:  70: ### Basic Error Handling
13232: 10581:  7948: 5401:  71: 
13233: 10582:  7949: 5402:  72: ```typescript
13234: 10583:  7950: 5403:  73: try {
13235: 10584:  7951: 5404:  74:   await processImage(imageUrl);
13236: 10585:  7952: 5405:  75: } catch (error) {
13237: 10586:  7953: 5406:  76:   await logDetailedError(
13238: 10587:  7954: 5407:  77:     error as Error,
13239: 10588:  7955: 5408:  78:     "imageProcessing",
13240: 10589:  7956: 5409:  79:     { imageUrl, timestamp: new Date() },
13241: 10590:  7957: 5410:  80:     "ERROR"
13242: 10591:  7958: 5411:  81:   );
13243: 10592:  7959: 5412:  82: }
13244: 10593:  7960: 5413:  83: ```
13245: 10594:  7961: 5414:  84: 
13246: 10595:  7962: 5415:  85: ### Custom Error Creation
13247: 10596:  7963: 5416:  86: 
13248: 10597:  7964: 5417:  87: ```typescript
13249: 10598:  7965: 5418:  88: const handleImageError = async (error: unknown, imageUrl: string) => {
13250: 10599:  7966: 5419:  89:   const detailedError = new DetailedError(
13251: 10600:  7967: 5420:  90:     "Image processing failed",
13252: 10601:  7968: 5421:  91:     "imageHandler:process",
13253: 10602:  7969: 5422:  92:     {
13254: 10603:  7970: 5423:  93:       imageUrl,
13255: 10604:  7971: 5424:  94:       originalError: error instanceof Error ? error.message : "Unknown error",
13256: 10605:  7972: 5425:  95:       timestamp: new Date().toISOString()
13257: 10606:  7973: 5426:  96:     },
13258: 10607:  7974: 5427:  97:     "ERROR"
13259: 10608:  7975: 5428:  98:   );
13260: 10609:  7976: 5429:  99: 
13261: 10610:  7977: 5430: 100:   await logDetailedError(detailedError, detailedError.context);
13262: 10611:  7978: 5431: 101: };
13263: 10612:  7979: 5432: 102: ```
13264: 10613:  7980: 5433: 103: 
13265: 10614:  7981: 5434: 104: ## Error Classification
13266: 10615:  7982: 5435: 105: 
13267: 10616:  7983: 5436: 106: ### Severity Levels
13268: 10617:  7984: 5437: 107: 
13269: 10618:  7985: 5438: 108: ```typescript
13270: 10619:  7986: 5439: 109: type ErrorSeverity = "ERROR" | "WARNING" | "CRITICAL";
13271: 10620:  7987: 5440: 110: 
13272: 10621:  7988: 5441: 111: const determineSeverity = (error: Error): ErrorSeverity => {
13273: 10622:  7989: 5442: 112:   if (error instanceof NetworkError) return "WARNING";
13274: 10623:  7990: 5443: 113:   if (error instanceof DataCorruptionError) return "CRITICAL";
13275: 10624:  7991: 5444: 114:   return "ERROR";
13276: 10625:  7992: 5445: 115: };
13277: 10626:  7993: 5446: 116: ```
13278: 10627:  7994: 5447: 117: 
13279: 10628:  7995: 5448: 118: ### Context Management
13280: 10629:  7996: 5449: 119: 
13281: 10630:  7997: 5450: 120: ```typescript
13282: 10631:  7998: 5451: 121: interface ErrorContext {
13283: 10632:  7999: 5452: 122:   component: string;
13284: 10633:  8000: 5453: 123:   operation: string;
13285: 10634:  8001: 5454: 124:   metadata?: Record<string, unknown>;
13286: 10635:  8002: 5455: 125: }
13287: 10636:  8003: 5456: 126: 
13288: 10637:  8004: 5457: 127: const createErrorContext = (
13289: 10638:  8005: 5458: 128:   component: string,
13290: 10639:  8006: 5459: 129:   operation: string,
13291: 10640:  8007: 5460: 130:   metadata?: Record<string, unknown>
13292: 10641:  8008: 5461: 131: ): ErrorContext => ({
13293: 10642:  8009: 5462: 132:   component,
13294: 10643:  8010: 5463: 133:   operation,
13295: 10644:  8011: 5464: 134:   metadata
13296: 10645:  8012: 5465: 135: });
13297: 10646:  8013: 5466: 136: ```
13298: 10647:  8014: 5467: 137: 
13299: 10648:  8015: 5468: 138: ## Best Practices
13300: 10649:  8016: 5469: 139: 
13301: 10650:  8017: 5470: 140: ### 1. Error Wrapping
13302: 10651:  8018: 5471: 141: 
13303: 10652:  8019: 5472: 142: ```typescript
13304: 10653:  8020: 5473: 143: try {
13305: 10654:  8021: 5474: 144:   await externalOperation();
13306: 10655:  8022: 5475: 145: } catch (error) {
13307: 10656:  8023: 5476: 146:   const wrappedError = new DetailedError(
13308: 10657:  8024: 5477: 147:     "External operation failed",
13309: 10658:  8025: 5478: 148:     "externalService:operation",
13310: 10659:  8026: 5479: 149:     {
13311: 10660:  8027: 5480: 150:       originalError: error instanceof Error ? error.message : "Unknown error",
13312: 10661:  8028: 5481: 151:       timestamp: new Date().toISOString()
13313: 10662:  8029: 5482: 152:     }
13314: 10663:  8030: 5483: 153:   );
13315: 10664:  8031: 5484: 154:   throw wrappedError;
13316: 10665:  8032: 5485: 155: }
13317: 10666:  8033: 5486: 156: ```
13318: 10667:  8034: 5487: 157: 
13319: 10668:  8035: 5488: 158: ### 2. Error Recovery
13320: 10669:  8036: 5489: 159: 
13321: 10670:  8037: 5490: 160: ```typescript
13322: 10671:  8038: 5491: 161: async function withErrorRecovery<T>(
13323: 10672:  8039: 5492: 162:   operation: () => Promise<T>,
13324: 10673:  8040: 5493: 163:   fallback: T,
13325: 10674:  8041: 5494: 164:   context: string
13326: 10675:  8042: 5495: 165: ): Promise<T> {
13327: 10676:  8043: 5496: 166:   try {
13328: 10677:  8044: 5497: 167:     return await operation();
13329: 10678:  8045: 5498: 168:   } catch (error) {
13330: 10679:  8046: 5499: 169:     await logDetailedError(
13331: 10680:  8047: 5500: 170:       error as Error,
13332: 10681:  8048: 5501: 171:       context,
13333: 10682:  8049: 5502: 172:       { recoveryAction: "using fallback" }
13334: 10683:  8050: 5503: 173:     );
13335: 10684:  8051: 5504: 174:     return fallback;
13336: 10685:  8052: 5505: 175:   }
13337: 10686:  8053: 5506: 176: }
13338: 10687:  8054: 5507: 177: ```
13339: 10688:  8055: 5508: 178: 
13340: 10689:  8056: 5509: 179: ### 3. Batch Error Handling
13341: 10690:  8057: 5510: 180: 
13342: 10691:  8058: 5511: 181: ```typescript
13343: 10692:  8059: 5512: 182: interface BatchError {
13344: 10693:  8060: 5513: 183:   index: number;
13345: 10694:  8061: 5514: 184:   error: Error;
13346: 10695:  8062: 5515: 185:   item: unknown;
13347: 10696:  8063: 5516: 186: }
13348: 10697:  8064: 5517: 187: 
13349: 10698:  8065: 5518: 188: async function processBatchWithErrors<T>(
13350: 10699:  8066: 5519: 189:   items: T[],
13351: 10700:  8067: 5520: 190:   processor: (item: T) => Promise<void>
13352: 10701:  8068: 5521: 191: ): Promise<BatchError[]> {
13353: 10702:  8069: 5522: 192:   const errors: BatchError[] = [];
13354: 10703:  8070: 5523: 193: 
13355: 10704:  8071: 5524: 194:   for (let i = 0; i < items.length; i++) {
13356: 10705:  8072: 5525: 195:     try {
13357: 10706:  8073: 5526: 196:       await processor(items[i]);
13358: 10707:  8074: 5527: 197:     } catch (error) {
13359: 10708:  8075: 5528: 198:       errors.push({
13360: 10709:  8076: 5529: 199:         index: i,
13361: 10710:  8077: 5530: 200:         error: error as Error,
13362: 10711:  8078: 5531: 201:         item: items[i]
13363: 10712:  8079: 5532: 202:       });
13364: 10713:  8080: 5533: 203:     }
13365: 10714:  8081: 5534: 204:   }
13366: 10715:  8082: 5535: 205: 
13367: 10716:  8083: 5536: 206:   return errors;
13368: 10717:  8084: 5537: 207: }
13369: 10718:  8085: 5538: 208: ```
13370: 10719:  8086: 5539: 209: 
13371: 10720:  8087: 5540: 210: ## Error Monitoring
13372: 10721:  8088: 5541: 211: 
13373: 10722:  8089: 5542: 212: ### Error Aggregation
13374: 10723:  8090: 5543: 213: 
13375: 10724:  8091: 5544: 214: ```typescript
13376: 10725:  8092: 5545: 215: interface ErrorAggregate {
13377: 10726:  8093: 5546: 216:   count: number;
13378: 10727:  8094: 5547: 217:   lastOccurrence: Date;
13379: 10728:  8095: 5548: 218:   contexts: string[];
13380: 10729:  8096: 5549: 219: }
13381: 10730:  8097: 5550: 220: 
13382: 10731:  8098: 5551: 221: const aggregateErrors = async (
13383: 10732:  8099: 5552: 222:   timeWindow: number
13384: 10733:  8100: 5553: 223: ): Promise<Map<string, ErrorAggregate>> => {
13385: 10734:  8101: 5554: 224:   const now = new Date();
13386: 10735:  8102: 5555: 225:   const windowStart = new Date(now.getTime() - timeWindow);
13387: 10736:  8103: 5556: 226: 
13388: 10737:  8104: 5557: 227:   const errors = await db
13389: 10738:  8105: 5558: 228:     .collection(COLLECTION.LOGS)
13390: 10739:  8106: 5559: 229:     .where("timestamp", ">=", windowStart)
13391: 10740:  8107: 5560: 230:     .where("level", "==", "ERROR")
13392: 10741:  8108: 5561: 231:     .get();
13393: 10742:  8109: 5562: 232: 
13394: 10743:  8110: 5563: 233:   return errors.docs.reduce((acc, doc) => {
13395: 10744:  8111: 5564: 234:     const data = doc.data();
13396: 10745:  8112: 5565: 235:     const key = data.error;
13397: 10746:  8113: 5566: 236:     const existing = acc.get(key) || {
13398: 10747:  8114: 5567: 237:       count: 0,
13399: 10748:  8115: 5568: 238:       lastOccurrence: windowStart,
13400: 10749:  8116: 5569: 239:       contexts: []
13401: 10750:  8117: 5570: 240:     };
13402: 10751:  8118: 5571: 241: 
13403: 10752:  8119: 5572: 242:     existing.count++;
13404: 10753:  8120: 5573: 243:     existing.lastOccurrence = data.timestamp.toDate();
13405: 10754:  8121: 5574: 244:     if (!existing.contexts.includes(data.context)) {
13406: 10755:  8122: 5575: 245:       existing.contexts.push(data.context);
13407: 10756:  8123: 5576: 246:     }
13408: 10757:  8124: 5577: 247: 
13409: 10758:  8125: 5578: 248:     acc.set(key, existing);
13410: 10759:  8126: 5579: 249:     return acc;
13411: 10760:  8127: 5580: 250:   }, new Map<string, ErrorAggregate>());
13412: 10761:  8128: 5581: 251: };
13413: 10762:  8129: 5582: 252: ```
13414: 10763:  8130: 5583: 253: 
13415: 10764:  8131: 5584: 254: ## Error Resolution
13416: 10765:  8132: 5585: 255: 
13417: 10766:  8133: 5586: 256: ### Automatic Recovery
13418: 10767:  8134: 5587: 257: 
13419: 10768:  8135: 5588: 258: ```typescript
13420: 10769:  8136: 5589: 259: async function attemptRecovery(
13421: 10770:  8137: 5590: 260:   error: DetailedError,
13422: 10771:  8138: 5591: 261:   maxAttempts: number = 3
13423: 10772:  8139: 5592: 262: ): Promise<boolean> {
13424: 10773:  8140: 5593: 263:   let attempts = 0;
13425: 10774:  8141: 5594: 264:   let recovered = false;
13426: 10775:  8142: 5595: 265: 
13427: 10776:  8143: 5596: 266:   while (attempts < maxAttempts && !recovered) {
13428: 10777:  8144: 5597: 267:     try {
13429: 10778:  8145: 5598: 268:       await recoveryStrategies[error.name]?.(error);
13430: 10779:  8146: 5599: 269:       recovered = true;
13431: 10780:  8147: 5600: 270:     } catch (recoveryError) {
13432: 10781:  8148: 5601: 271:       attempts++;
13433: 10782:  8149: 5602: 272:       await logWarning(
13434: 10783:  8150: 5603: 273:         `Recovery attempt ${attempts} failed`,
13435: 10784:  8151: 5604: 274:         { error: recoveryError }
13436: 10785:  8152: 5605: 275:       );
13437: 10786:  8153: 5606: 276:     }
13438: 10787:  8154: 5607: 277:   }
13439: 10788:  8155: 5608: 278: 
13440: 10789:  8156: 5609: 279:   return recovered;
13441: 10790:  8157: 5610: 280: }
13442: 10791:  8158: 5611: 281: ```
13443: 10792:  8159: 5612: 282: 
13444: 10793:  8160: 5613: 283: ## Related Components
13445: 10794:  8161: 5614: 284: 
13446: 10795:  8162: 5615: 285: - [Logger](./logging)
13447: 10796:  8163: 5616: 286: - [Sync Logger](./sync-logger)
13448: 10797:  8164: 5617: 287: - [Image Handler](./image-handler)
13449: 10798:  8165: 5618: 288: 
13450: 10799:  8166: 5619: 289: ## Troubleshooting
13451: 10800:  8167: 5620: 290: 
13452: 10801:  8168: 5621: 291: ### Common Issues
13453: 10802:  8169: 5622: 292: 
13454: 10803:  8170: 5623: 293: 1. Missing Error Context:
13455: 10804:  8171: 5624: 294:    - Ensure proper error wrapping
13456: 10805:  8172: 5625: 295:    - Include relevant metadata
13457: 10806:  8173: 5626: 296:    - Use appropriate error types
13458: 10807:  8174: 5627: 297: 
13459: 10808:  8175: 5628: 298: 2. Error Recovery:
13460: 10809:  8176: 5629: 299:    - Implement fallback mechanisms
13461: 10810:  8177: 5630: 300:    - Use appropriate retry strategies
13462: 10811:  8178: 5631: 301:    - Monitor recovery success rates
13463: 10812:  8179: 5632: 302: 
13464: 10813:  8180: 5633: 303: 3. Performance Impact:
13465: 10814:  8181: 5634: 304:    - Balance logging detail with performance
13466: 10815:  8182: 5635: 305:    - Implement error aggregation
13467: 10816:  8183: 5636: 306:    - Use appropriate severity levels
13468: 10817:  8184: 5637: </file>
13469: 10818:  8185: 5638: 
13470: 10819:  8186: 5639: <file path="utils/image-compressor.md">
13471: 10820:  8187: 5640:   1: # Image Compressor Utility
13472: 10821:  8188: 5641:   2: 
13473: 10822:  8189: 5642:   3: ## Overview
13474: 10823:  8190: 5643:   4: 
13475: 10824:  8191: 5644:   5: The Image Compressor (`imageCompressor.ts`) handles image optimization and compression for card images. It provides configurable compression settings for both standard and high-resolution images while maintaining image quality.
13476: 10825:  8192: 5645:   6: 
13477: 10826:  8193: 5646:   7: ## Core Features
13478: 10827:  8194: 5647:   8: 
13479: 10828:  8195: 5648:   9: - Dual resolution support (200w/400w)
13480: 10829:  8196: 5649:  10: - Quality-preserving compression
13481: 10830:  8197: 5650:  11: - Dimension optimization
13482: 10831:  8198: 5651:  12: - Progressive JPEG support
13483: 10832:  8199: 5652:  13: - Metadata preservation
13484: 10833:  8200: 5653:  14: - Compression statistics
13485: 10834:  8201: 5654:  15: 
13486: 10835:  8202: 5655:  16: ## Configuration
13487: 10836:  8203: 5656:  17: 
13488: 10837:  8204: 5657:  18: ### Quality Settings
13489: 10838:  8205: 5658:  19: 
13490: 10839:  8206: 5659:  20: ```typescript
13491: 10840:  8207: 5660:  21: private static readonly QUALITY = {
13492: 10841:  8208: 5661:  22:   HIGH_RES: 90,
13493: 10842:  8209: 5662:  23:   LOW_RES: 85,
13494: 10843:  8210: 5663:  24: };
13495: 10844:  8211: 5664:  25: ```
13496: 10845:  8212: 5665:  26: 
13497: 10846:  8213: 5666:  27: ### Dimension Settings
13498: 10847:  8214: 5667:  28: 
13499: 10848:  8215: 5668:  29: ```typescript
13500: 10849:  8216: 5669:  30: private static readonly DIMENSIONS = {
13501: 10850:  8217: 5670:  31:   HIGH_RES: 400,
13502: 10851:  8218: 5671:  32:   LOW_RES: 200,
13503: 10852:  8219: 5672:  33: };
13504: 10853:  8220: 5673:  34: ```
13505: 10854:  8221: 5674:  35: 
13506: 10855:  8222: 5675:  36: ## Main Interfaces
13507: 10856:  8223: 5676:  37: 
13508: 10857:  8224: 5677:  38: ### Compression Result
13509: 10858:  8225: 5678:  39: 
13510: 10859:  8226: 5679:  40: ```typescript
13511: 10860:  8227: 5680:  41: export interface CompressionResult {
13512: 10861:  8228: 5681:  42:   buffer: Buffer;
13513: 10862:  8229: 5682:  43:   info: {
13514: 10863:  8230: 5683:  44:     width: number;
13515: 10864:  8231: 5684:  45:     height: number;
13516: 10865:  8232: 5685:  46:     size: number;
13517: 10866:  8233: 5686:  47:     format: string;
13518: 10867:  8234: 5687:  48:     quality: number;
13519: 10868:  8235: 5688:  49:   };
13520: 10869:  8236: 5689:  50: }
13521: 10870:  8237: 5690:  51: ```
13522: 10871:  8238: 5691:  52: 
13523: 10872:  8239: 5692:  53: ## Primary Methods
13524: 10873:  8240: 5693:  54: 
13525: 10874:  8241: 5694:  55: ### Compression Method
13526: 10875:  8242: 5695:  56: 
13527: 10876:  8243: 5696:  57: ```typescript
13528: 10877:  8244: 5697:  58: static async compress(
13529: 10878:  8245: 5698:  59:   buffer: Buffer,
13530: 10879:  8246: 5699:  60:   isHighRes: boolean = false
13531: 10880:  8247: 5700:  61: ): Promise<CompressionResult>
13532: 10881:  8248: 5701:  62: ```
13533: 10882:  8249: 5702:  63: 
13534: 10883:  8250: 5703:  64: ### Format Validation
13535: 10884:  8251: 5704:  65: 
13536: 10885:  8252: 5705:  66: ```typescript
13537: 10886:  8253: 5706:  67: static async isCompressible(buffer: Buffer): Promise<boolean>
13538: 10887:  8254: 5707:  68: ```
13539: 10888:  8255: 5708:  69: 
13540: 10889:  8256: 5709:  70: ## Implementation Examples
13541: 10890:  8257: 5710:  71: 
13542: 10891:  8258: 5711:  72: ### Basic Compression
13543: 10892:  8259: 5712:  73: 
13544: 10893:  8260: 5713:  74: ```typescript
13545: 10894:  8261: 5714:  75: const imageBuffer = await fetchImage(url);
13546: 10895:  8262: 5715:  76: const result = await ImageCompressor.compress(imageBuffer, false);
13547: 10896:  8263: 5716:  77: 
13548: 10897:  8264: 5717:  78: console.log("Compression stats:", {
13549: 10898:  8265: 5718:  79:   originalSize: imageBuffer.length,
13550: 10899:  8266: 5719:  80:   compressedSize: result.buffer.length,
13551: 10900:  8267: 5720:  81:   dimensions: `${result.info.width}x${result.info.height}`,
13552: 10901:  8268: 5721:  82:   quality: result.info.quality
13553: 10902:  8269: 5722:  83: });
13554: 10903:  8270: 5723:  84: ```
13555: 10904:  8271: 5724:  85: 
13556: 10905:  8272: 5725:  86: ### High-Resolution Processing
13557: 10906:  8273: 5726:  87: 
13558: 10907:  8274: 5727:  88: ```typescript
13559: 10908:  8275: 5728:  89: const highResResult = await ImageCompressor.compress(buffer, true);
13560: 10909:  8276: 5729:  90: await logInfo("High-res compression complete", {
13561: 10910:  8277: 5730:  91:   originalSize: buffer.length,
13562: 10911:  8278: 5731:  92:   compressedSize: highResResult.buffer.length,
13563: 10912:  8279: 5732:  93:   dimensions: `${highResResult.info.width}x${highResResult.info.height}`,
13564: 10913:  8280: 5733:  94:   quality: highResResult.info.quality
13565: 10914:  8281: 5734:  95: });
13566: 10915:  8282: 5735:  96: ```
13567: 10916:  8283: 5736:  97: 
13568: 10917:  8284: 5737:  98: ## Compression Pipeline
13569: 10918:  8285: 5738:  99: 
13570: 10919:  8286: 5739: 100: ### Image Analysis
13571: 10920:  8287: 5740: 101: 
13572: 10921:  8288: 5741: 102: ```typescript
13573: 10922:  8289: 5742: 103: const originalInfo = await sharp(buffer).metadata();
13574: 10923:  8290: 5743: 104: const originalSize = buffer.length;
13575: 10924:  8291: 5744: 105: ```
13576: 10925:  8292: 5745: 106: 
13577: 10926:  8293: 5746: 107: ### Optimization Process
13578: 10927:  8294: 5747: 108: 
13579: 10928:  8295: 5748: 109: ```typescript
13580: 10929:  8296: 5749: 110: const image = sharp(buffer).jpeg({
13581: 10930:  8297: 5750: 111:   quality,
13582: 10931:  8298: 5751: 112:   progressive: true,
13583: 10932:  8299: 5752: 113:   mozjpeg: true,
13584: 10933:  8300: 5753: 114: });
13585: 10934:  8301: 5754: 115: 
13586: 10935:  8302: 5755: 116: if (originalInfo.width && originalInfo.width > targetWidth) {
13587: 10936:  8303: 5756: 117:   image.resize(targetWidth, null, {
13588: 10937:  8304: 5757: 118:     fit: "inside",
13589: 10938:  8305: 5758: 119:     withoutEnlargement: true,
13590: 10939:  8306: 5759: 120:   });
13591: 10940:  8307: 5760: 121: }
13592: 10941:  8308: 5761: 122: ```
13593: 10942:  8309: 5762: 123: 
13594: 10943:  8310: 5763: 124: ## Performance Monitoring
13595: 10944:  8311: 5764: 125: 
13596: 10945:  8312: 5765: 126: ### Size Reduction Tracking
13597: 10946:  8313: 5766: 127: 
13598: 10947:  8314: 5767: 128: ```typescript
13599: 10948:  8315: 5768: 129: const compressionStats = {
13600: 10949:  8316: 5769: 130:   originalSize: buffer.length,
13601: 10950:  8317: 5770: 131:   compressedSize: compressedBuffer.length,
13602: 10951:  8318: 5771: 132:   reductionPercent: (
13603: 10952:  8319: 5772: 133:     (buffer.length - compressedBuffer.length) / 
13604: 10953:  8320: 5773: 134:     buffer.length * 100
13605: 10954:  8321: 5774: 135:   ).toFixed(2)
13606: 10955:  8322: 5775: 136: };
13607: 10956:  8323: 5776: 137: ```
13608: 10957:  8324: 5777: 138: 
13609: 10958:  8325: 5778: 139: ### Quality Metrics
13610: 10959:  8326: 5779: 140: 
13611: 10960:  8327: 5780: 141: ```typescript
13612: 10961:  8328: 5781: 142: const qualityMetrics = {
13613: 10962:  8329: 5782: 143:   dimensions: `${compressedInfo.width}x${compressedInfo.height}`,
13614: 10963:  8330: 5783: 144:   format: compressedInfo.format,
13615: 10964:  8331: 5784: 145:   quality: isHighRes ? QUALITY.HIGH_RES : QUALITY.LOW_RES
13616: 10965:  8332: 5785: 146: };
13617: 10966:  8333: 5786: 147: ```
13618: 10967:  8334: 5787: 148: 
13619: 10968:  8335: 5788: 149: ## Best Practices
13620: 10969:  8336: 5789: 150: 
13621: 10970:  8337: 5790: 151: ### Memory Management
13622: 10971:  8338: 5791: 152: 
13623: 10972:  8339: 5792: 153: - Process one image at a time
13624: 10973:  8340: 5793: 154: - Release buffers after processing
13625: 10974:  8341: 5794: 155: - Monitor memory usage
13626: 10975:  8342: 5795: 156: 
13627: 10976:  8343: 5796: 157: ### Quality Control
13628: 10977:  8344: 5797: 158: 
13629: 10978:  8345: 5798: 159: - Use appropriate quality settings
13630: 10979:  8346: 5799: 160: - Validate output dimensions
13631: 10980:  8347: 5800: 161: - Check compression ratios
13632: 10981:  8348: 5801: 162: 
13633: 10982:  8349: 5802: 163: ### Error Prevention
13634: 10983:  8350: 5803: 164: 
13635: 10984:  8351: 5804: 165: - Validate input formats
13636: 10985:  8352: 5805: 166: - Check buffer integrity
13637: 10986:  8353: 5806: 167: - Monitor compression results
13638: 10987:  8354: 5807: 168: 
13639: 10988:  8355: 5808: 169: ## Usage Guidelines
13640: 10989:  8356: 5809: 170: 
13641: 10990:  8357: 5810: 171: ### Standard Resolution
13642: 10991:  8358: 5811: 172: 
13643: 10992:  8359: 5812: 173: ```typescript
13644: 10993:  8360: 5813: 174: const standardResult = await ImageCompressor.compress(buffer);
13645: 10994:  8361: 5814: 175: if (standardResult.buffer.length > buffer.length) {
13646: 10995:  8362: 5815: 176:   // Use original if compression didn't help
13647: 10996:  8363: 5816: 177:   return buffer;
13648: 10997:  8364: 5817: 178: }
13649: 10998:  8365: 5818: 179: ```
13650: 10999:  8366: 5819: 180: 
13651: 11000:  8367: 5820: 181: ### High Resolution
13652: 11001:  8368: 5821: 182: 
13653: 11002:  8369: 5822: 183: ```typescript
13654: 11003:  8370: 5823: 184: const highResResult = await ImageCompressor.compress(buffer, true);
13655: 11004:  8371: 5824: 185: if (!highResResult.info.width || highResResult.info.width < 400) {
13656: 11005:  8372: 5825: 186:   throw new Error("High-res compression failed to meet size requirements");
13657: 11006:  8373: 5826: 187: }
13658: 11007:  8374: 5827: 188: ```
13659: 11008:  8375: 5828: 189: 
13660: 11009:  8376: 5829: 190: ## Error Handling
13661: 11010:  8377: 5830: 191: 
13662: 11011:  8378: 5831: 192: ### Input Validation
13663: 11012:  8379: 5832: 193: 
13664: 11013:  8380: 5833: 194: ```typescript
13665: 11014:  8381: 5834: 195: if (!buffer || buffer.length === 0) {
13666: 11015:  8382: 5835: 196:   throw new Error("Invalid input buffer");
13667: 11016:  8383: 5836: 197: }
13668: 11017:  8384: 5837: 198: 
13669: 11018:  8385: 5838: 199: if (!await ImageCompressor.isCompressible(buffer)) {
13670: 11019:  8386: 5839: 200:   throw new Error("Unsupported image format");
13671: 11020:  8387: 5840: 201: }
13672: 11021:  8388: 5841: 202: ```
13673: 11022:  8389: 5842: 203: 
13674: 11023:  8390: 5843: 204: ### Processing Errors
13675: 11024:  8391: 5844: 205: 
13676: 11025:  8392: 5845: 206: ```typescript
13677: 11026:  8393: 5846: 207: try {
13678: 11027:  8394: 5847: 208:   return await ImageCompressor.compress(buffer);
13679: 11028:  8395: 5848: 209: } catch (error) {
13680: 11029:  8396: 5849: 210:   throw new Error(
13681: 11030:  8397: 5850: 211:     `Image compression failed: ${
13682: 11031:  8398: 5851: 212:       error instanceof Error ? error.message : "Unknown error"
13683: 11032:  8399: 5852: 213:     }`
13684: 11033:  8400: 5853: 214:   );
13685: 11034:  8401: 5854: 215: }
13686: 11035:  8402: 5855: 216: ```
13687: 11036:  8403: 5856: 217: 
13688: 11037:  8404: 5857: 218: ## Related Components
13689: 11038:  8405: 5858: 219: 
13690: 11039:  8406: 5859: 220: - [Image Handler](./image-handler)
13691: 11040:  8407: 5860: 221: - [Image Validator](./image-validator)
13692: 11041:  8408: 5861: 222: - [Logger](./logging)
13693: 11042:  8409: 5862: 223: 
13694: 11043:  8410: 5863: 224: ## Troubleshooting
13695: 11044:  8411: 5864: 225: 
13696: 11045:  8412: 5865: 226: ### Common Issues
13697: 11046:  8413: 5866: 227: 
13698: 11047:  8414: 5867: 228: 1. Memory Constraints:
13699: 11048:  8415: 5868: 229:    - Monitor buffer sizes
13700: 11049:  8416: 5869: 230:    - Process images sequentially
13701: 11050:  8417: 5870: 231:    - Implement garbage collection
13702: 11051:  8418: 5871: 232: 
13703: 11052:  8419: 5872: 233: 2. Quality Problems:
13704: 11053:  8420: 5873: 234:    - Verify quality settings
13705: 11054:  8421: 5874: 235:    - Check dimension constraints
13706: 11055:  8422: 5875: 236:    - Validate output formats
13707: 11056:  8423: 5876: 237: 
13708: 11057:  8424: 5877: 238: 3. Performance Issues:
13709: 11058:  8425: 5878: 239:    - Monitor processing times
13710: 11059:  8426: 5879: 240:    - Track compression ratios
13711: 11060:  8427: 5880: 241:    - Optimize batch processing
13712: 11061:  8428: 5881: </file>
13713: 11062:  8429: 5882: 
13714: 11063:  8430: 5883: <file path="utils/image-handler.md">
13715: 11064:  8431: 5884:   1: # Image Handler Utility
13716: 11065:  8432: 5885:   2: 
13717: 11066:  8433: 5886:   3: ## Overview
13718: 11067:  8434: 5887:   4: 
13719: 11068:  8435: 5888:   5: The Image Handler (`imageHandler.ts`) is a comprehensive utility for managing card images. It handles downloading, processing, compression, caching, and storage of both standard and high-resolution card images in Firebase Storage.
13720: 11069:  8436: 5889:   6: 
13721: 11070:  8437: 5890:   7: ## Features
13722: 11071:  8438: 5891:   8: 
13723: 11072:  8439: 5892:   9: - Dual resolution support (200w and 400w)
13724: 11073:  8440: 5893:  10: - Image compression and optimization
13725: 11074:  8441: 5894:  11: - Caching system
13726: 11075:  8442: 5895:  12: - Hash-based change detection
13727: 11076:  8443: 5896:  13: - Error handling and retry logic
13728: 11077:  8444: 5897:  14: - Storage path management
13729: 11078:  8445: 5898:  15: - Metadata tracking
13730: 11079:  8446: 5899:  16: 
13731: 11080:  8447: 5900:  17: ## Class Structure
13732: 11081:  8448: 5901:  18: 
13733: 11082:  8449: 5902:  19: ```typescript
13734: 11083:  8450: 5903:  20: export class ImageHandler {
13735: 11084:  8451: 5904:  21:   private bucket = storage.bucket(STORAGE.BUCKETS.CARD_IMAGES);
13736: 11085:  8452: 5905:  22:  
13737: 11086:  8453: 5906:  23:   // Main method
13738: 11087:  8454: 5907:  24:   async processImage(
13739: 11088:  8455: 5908:  25:     imageUrl: string,
13740: 11089:  8456: 5909:  26:     groupId: string,
13741: 11090:  8457: 5910:  27:     productId: number
13742: 11091:  8458: 5911:  28:   ): Promise<ImageProcessingResult>
13743: 11092:  8459: 5912:  29: }
13744: 11093:  8460: 5913:  30: ```
13745: 11094:  8461: 5914:  31: 
13746: 11095:  8462: 5915:  32: ## Core Methods
13747: 11096:  8463: 5916:  33: 
13748: 11097:  8464: 5917:  34: ### Process Image
13749: 11098:  8465: 5918:  35: 
13750: 11099:  8466: 5919:  36: ```typescript
13751: 11100:  8467: 5920:  37: async processImage(
13752: 11101:  8468: 5921:  38:   imageUrl: string,
13753: 11102:  8469: 5922:  39:   groupId: string,
13754: 11103:  8470: 5923:  40:   productId: number
13755: 11104:  8471: 5924:  41: ): Promise<ImageProcessingResult>
13756: 11105:  8472: 5925:  42: ```
13757: 11106:  8473: 5926:  43: 
13758: 11107:  8474: 5927:  44: #### Parameters
13759: 11108:  8475: 5928:  45: 
13760: 11109:  8476: 5929:  46: - `imageUrl`: Source URL of the card image
13761: 11110:  8477: 5930:  47: - `groupId`: Card group identifier
13762: 11111:  8478: 5931:  48: - `productId`: Unique card identifier
13763: 11112:  8479: 5932:  49: 
13764: 11113:  8480: 5933:  50: #### Returns
13765: 11114:  8481: 5934:  51: 
13766: 11115:  8482: 5935:  52: ```typescript
13767: 11116:  8483: 5936:  53: interface ImageProcessingResult {
13768: 11117:  8484: 5937:  54:   originalUrl: string;      // URL of standard resolution image
13769: 11118:  8485: 5938:  55:   highResUrl: string;       // URL of high resolution image
13770: 11119:  8486: 5939:  56:   metadata: ImageMetadata;  // Image processing metadata
13771: 11120:  8487: 5940:  57:   updated: boolean;         // Whether image was updated
13772: 11121:  8488: 5941:  58: }
13773: 11122:  8489: 5942:  59: ```
13774: 11123:  8490: 5943:  60: 
13775: 11124:  8491: 5944:  61: ### Image Processing Pipeline
13776: 11125:  8492: 5945:  62: 
13777: 11126:  8493: 5946:  63: 1. **URL Processing**:
13778: 11127:  8494: 5947:  64: 
13779: 11128:  8495: 5948:  65: ```typescript
13780: 11129:  8496: 5949:  66: private getHighResUrl(imageUrl: string): string {
13781: 11130:  8497: 5950:  67:   return imageUrl.replace(/_200w\.jpg$/, "_400w.jpg");
13782: 11131:  8498: 5951:  68: }
13783: 11132:  8499: 5952:  69: ```
13784: 11133:  8500: 5953:  70: 
13785: 11134:  8501: 5954:  71: 1. **Storage Path Management**:
13786: 11135:  8502: 5955:  72: 
13787: 11136:  8503: 5956:  73: ```typescript
13788: 11137:  8504: 5957:  74: private getStoragePath(
13789: 11138:  8505: 5958:  75:   groupId: string,
13790: 11139:  8506: 5959:  76:   productId: number,
13791: 11140:  8507: 5960:  77:   isHighRes: boolean = false
13792: 11141:  8508: 5961:  78: ): string {
13793: 11142:  8509: 5962:  79:   const suffix = isHighRes ? "_400w" : "_200w";
13794: 11143:  8510: 5963:  80:   return `${STORAGE.PATHS.IMAGES}/${groupId}/${productId}${suffix}.jpg`;
13795: 11144:  8511: 5964:  81: }
13796: 11145:  8512: 5965:  82: ```
13797: 11146:  8513: 5966:  83: 
13798: 11147:  8514: 5967:  84: 1. **Image Download**:
13799: 11148:  8515: 5968:  85: 
13800: 11149:  8516: 5969:  86: ```typescript
13801: 11150:  8517: 5970:  87: private async downloadImage(url: string): Promise<Buffer>
13802: 11151:  8518: 5971:  88: ```
13803: 11152:  8519: 5972:  89: 
13804: 11153:  8520: 5973:  90: 1. **Image Compression**:
13805: 11154:  8521: 5974:  91: 
13806: 11155:  8522: 5975:  92: ```typescript
13807: 11156:  8523: 5976:  93: private async compressImage(
13808: 11157:  8524: 5977:  94:   buffer: Buffer,
13809: 11158:  8525: 5978:  95:   isHighRes: boolean
13810: 11159:  8526: 5979:  96: ): Promise<Buffer>
13811: 11160:  8527: 5980:  97: ```
13812: 11161:  8528: 5981:  98: 
13813: 11162:  8529: 5982:  99: ## Configuration
13814: 11163:  8530: 5983: 100: 
13815: 11164:  8531: 5984: 101: ### Storage Settings
13816: 11165:  8532: 5985: 102: 
13817: 11166:  8533: 5986: 103: ```typescript
13818: 11167:  8534: 5987: 104: export const STORAGE = {
13819: 11168:  8535: 5988: 105:   BUCKETS: {
13820: 11169:  8536: 5989: 106:     CARD_IMAGES: "fftcg-sync-service.firebasestorage.app",
13821: 11170:  8537: 5990: 107:   },
13822: 11171:  8538: 5991: 108:   PATHS: {
13823: 11172:  8539: 5992: 109:     IMAGES: "card-images",
13824: 11173:  8540: 5993: 110:   },
13825: 11174:  8541: 5994: 111: };
13826: 11175:  8542: 5995: 112: ```
13827: 11176:  8543: 5996: 113: 
13828: 11177:  8544: 5997: 114: ### Compression Settings
13829: 11178:  8545: 5998: 115: 
13830: 11179:  8546: 5999: 116: ```typescript
13831: 11180:  8547: 6000: 117: private static readonly QUALITY = {
13832: 11181:  8548: 6001: 118:   HIGH_RES: 90,
13833: 11182:  8549: 6002: 119:   LOW_RES: 85,
13834: 11183:  8550: 6003: 120: };
13835: 11184:  8551: 6004: 121: 
13836: 11185:  8552: 6005: 122: private static readonly DIMENSIONS = {
13837: 11186:  8553: 6006: 123:   HIGH_RES: 400,
13838: 11187:  8554: 6007: 124:   LOW_RES: 200,
13839: 11188:  8555: 6008: 125: };
13840: 11189:  8556: 6009: 126: ```
13841: 11190:  8557: 6010: 127: 
13842: 11191:  8558: 6011: 128: ## Usage Examples
13843: 11192:  8559: 6012: 129: 
13844: 11193:  8560: 6013: 130: ### Basic Image Processing
13845: 11194:  8561: 6014: 131: 
13846: 11195:  8562: 6015: 132: ```typescript
13847: 11196:  8563: 6016: 133: const imageHandler = new ImageHandler();
13848: 11197:  8564: 6017: 134: 
13849: 11198:  8565: 6018: 135: const result = await imageHandler.processImage(
13850: 11199:  8566: 6019: 136:   "https://tcgplayer-cdn.tcgplayer.com/product/477236_200w.jpg",
13851: 11200:  8567: 6020: 137:   "23783",
13852: 11201:  8568: 6021: 138:   477236
13853: 11202:  8569: 6022: 139: );
13854: 11203:  8570: 6023: 140: 
13855: 11204:  8571: 6024: 141: console.log("Image URLs:", {
13856: 11205:  8572: 6025: 142:   original: result.originalUrl,
13857: 11206:  8573: 6026: 143:   highRes: result.highResUrl
13858: 11207:  8574: 6027: 144: });
13859: 11208:  8575: 6028: 145: ```
13860: 11209:  8576: 6029: 146: 
13861: 11210:  8577: 6030: 147: ### With Error Handling
13862: 11211:  8578: 6031: 148: 
13863: 11212:  8579: 6032: 149: ```typescript
13864: 11213:  8580: 6033: 150: try {
13865: 11214:  8581: 6034: 151:   const imageHandler = new ImageHandler();
13866: 11215:  8582: 6035: 152:   const result = await imageHandler.processImage(imageUrl, groupId, productId);
13867: 11216:  8583: 6036: 153:  
13868: 11217:  8584: 6037: 154:   if (result.updated) {
13869: 11218:  8585: 6038: 155:     console.log("Image updated successfully");
13870: 11219:  8586: 6039: 156:     console.log("Metadata:", result.metadata);
13871: 11220:  8587: 6040: 157:   }
13872: 11221:  8588: 6041: 158: } catch (error) {
13873: 11222:  8589: 6042: 159:   console.error("Image processing failed:", error);
13874: 11223:  8590: 6043: 160: }
13875: 11224:  8591: 6044: 161: ```
13876: 11225:  8592: 6045: 162: 
13877: 11226:  8593: 6046: 163: ## Metadata Management
13878: 11227:  8594: 6047: 164: 
13879: 11228:  8595: 6048: 165: ### Metadata Structure
13880: 11229:  8596: 6049: 166: 
13881: 11230:  8597: 6050: 167: ```typescript
13882: 11231:  8598: 6051: 168: interface ImageMetadata {
13883: 11232:  8599: 6052: 169:   contentType: string;
13884: 11233:  8600: 6053: 170:   size: number;
13885: 11234:  8601: 6054: 171:   updated: Date;
13886: 11235:  8602: 6055: 172:   hash: string;
13887: 11236:  8603: 6056: 173:   originalUrl: string;
13888: 11237:  8604: 6057: 174:   highResUrl: string;
13889: 11238:  8605: 6058: 175:   originalSize?: number;
13890: 11239:  8606: 6059: 176:   highResSize?: number;
13891: 11240:  8607: 6060: 177: }
13892: 11241:  8608: 6061: 178: ```
13893: 11242:  8609: 6062: 179: 
13894: 11243:  8610: 6063: 180: ### Saving Metadata
13895: 11244:  8611: 6064: 181: 
13896: 11245:  8612: 6065: 182: ```typescript
13897: 11246:  8613: 6066: 183: private async saveMetadata(
13898: 11247:  8614: 6067: 184:   groupId: string,
13899: 11248:  8615: 6068: 185:   productId: number,
13900: 11249:  8616: 6069: 186:   metadata: ImageMetadata
13901: 11250:  8617: 6070: 187: ): Promise<void>
13902: 11251:  8618: 6071: 188: ```
13903: 11252:  8619: 6072: 189: 
13904: 11253:  8620: 6073: 190: ## Cache Integration
13905: 11254:  8621: 6074: 191: 
13906: 11255:  8622: 6075: 192: The Image Handler integrates with the caching system for improved performance:
13907: 11256:  8623: 6076: 193: 
13908: 11257:  8624: 6077: 194: ```typescript
13909: 11258:  8625: 6078: 195: const cacheKey = imageCache.getBufferCacheKey(url);
13910: 11259:  8626: 6079: 196: const cachedBuffer = await imageCache.getBuffer(cacheKey);
13911: 11260:  8627: 6080: 197: 
13912: 11261:  8628: 6081: 198: if (cachedBuffer) {
13913: 11262:  8629: 6082: 199:   return cachedBuffer;
13914: 11263:  8630: 6083: 200: }
13915: 11264:  8631: 6084: 201: ```
13916: 11265:  8632: 6085: 202: 
13917: 11266:  8633: 6086: 203: ## Error Handling
13918: 11267:  8634: 6087: 204: 
13919: 11268:  8635: 6088: 205: ### Error Types
13920: 11269:  8636: 6089: 206: 
13921: 11270:  8637: 6090: 207: ```typescript
13922: 11271:  8638: 6091: 208: interface ImageProcessingError extends GenericError {
13923: 11272:  8639: 6092: 209:   productId: number;
13924: 11273:  8640: 6093: 210:   groupId: string;
13925: 11274:  8641: 6094: 211:   originalUrl: string;
13926: 11275:  8642: 6095: 212:   type: "download" | "upload" | "metadata" | "unknown";
13927: 11276:  8643: 6096: 213: }
13928: 11277:  8644: 6097: 214: ```
13929: 11278:  8645: 6098: 215: 
13930: 11279:  8646: 6099: 216: ### Error Recovery
13931: 11280:  8647: 6100: 217: 
13932: 11281:  8648: 6101: 218: ```typescript
13933: 11282:  8649: 6102: 219: catch (error) {
13934: 11283:  8650: 6103: 220:   return {
13935: 11284:  8651: 6104: 221:     originalUrl: imageUrl,
13936: 11285:  8652: 6105: 222:     highResUrl: this.getHighResUrl(imageUrl),
13937: 11286:  8653: 6106: 223:     metadata: {
13938: 11287:  8654: 6107: 224:       contentType: "image/jpeg",
13939: 11288:  8655: 6108: 225:       size: 0,
13940: 11289:  8656: 6109: 226:       updated: new Date(),
13941: 11290:  8657: 6110: 227:       hash: "",
13942: 11291:  8658: 6111: 228:       originalUrl: imageUrl,
13943: 11292:  8659: 6112: 229:       highResUrl: this.getHighResUrl(imageUrl),
13944: 11293:  8660: 6113: 230:     },
13945: 11294:  8661: 6114: 231:     updated: false,
13946: 11295:  8662: 6115: 232:   };
13947: 11296:  8663: 6116: 233: }
13948: 11297:  8664: 6117: 234: ```
13949: 11298:  8665: 6118: 235: 
13950: 11299:  8666: 6119: 236: ## Best Practices
13951: 11300:  8667: 6120: 237: 
13952: 11301:  8668: 6121: 238: 1. **Memory Management**:
13953: 11302:  8669: 6122: 239:    - Process one resolution at a time
13954: 11303:  8670: 6123: 240:    - Use streams for large files
13955: 11304:  8671: 6124: 241:    - Implement proper cleanup
13956: 11305:  8672: 6125: 242: 
13957: 11306:  8673: 6126: 243: 2. **Error Handling**:
13958: 11307:  8674: 6127: 244:    - Implement retries for transient failures
13959: 11308:  8675: 6128: 245:    - Log detailed error information
13960: 11309:  8676: 6129: 246:    - Maintain fallback URLs
13961: 11310:  8677: 6130: 247: 
13962: 11311:  8678: 6131: 248: 3. **Performance**:
13963: 11312:  8679: 6132: 249:    - Utilize caching effectively
13964: 11313:  8680: 6133: 250:    - Implement batch processing
13965: 11314:  8681: 6134: 251:    - Monitor storage quotas
13966: 11315:  8682: 6135: 252: 
13967: 11316:  8683: 6136: 253: ## Related Components
13968: 11317:  8684: 6137: 254: 
13969: 11318:  8685: 6138: 255: - [Image Cache](./cache)
13970: 11319:  8686: 6139: 256: - [Image Compressor](./image-compressor)
13971: 11320:  8687: 6140: 257: - [Image Validator](./image-validator)
13972: 11321:  8688: 6141: 258: - [Logger](./logging)
13973: 11322:  8689: 6142: </file>
13974: 11323:  8690: 6143: 
13975: 11324:  8691: 6144: <file path="utils/image-validator.md">
13976: 11325:  8692: 6145:   1: # Image Validator Utility
13977: 11326:  8693: 6146:   2: 
13978: 11327:  8694: 6147:   3: ## Overview
13979: 11328:  8695: 6148:   4: 
13980: 11329:  8696: 6149:   5: The Image Validator (`imageValidator.ts`) ensures image integrity and conformance to required specifications before processing. It validates format, dimensions, file size, and other critical image attributes.
13981: 11330:  8697: 6150:   6: 
13982: 11331:  8698: 6151:   7: ## Core Features
13983: 11332:  8699: 6152:   8: 
13984: 11333:  8700: 6153:   9: - Format validation
13985: 11334:  8701: 6154:  10: - Dimension verification
13986: 11335:  8702: 6155:  11: - Size limit enforcement
13987: 11336:  8703: 6156:  12: - Metadata validation
13988: 11337:  8704: 6157:  13: - URL structure validation
13989: 11338:  8705: 6158:  14: - MIME type checking
13990: 11339:  8706: 6159:  15: 
13991: 11340:  8707: 6160:  16: ## Configuration
13992: 11341:  8708: 6161:  17: 
13993: 11342:  8709: 6162:  18: ### Size Limits
13994: 11343:  8710: 6163:  19: 
13995: 11344:  8711: 6164:  20: ```typescript
13996: 11345:  8712: 6165:  21: export const IMAGE_LIMITS = {
13997: 11346:  8713: 6166:  22:   MAX_SIZE: 10 * 1024 * 1024,  // 10MB
13998: 11347:  8714: 6167:  23:   MIN_SIZE: 1024,              // 1KB
13999: 11348:  8715: 6168:  24:   MAX_WIDTH: 2048,
14000: 11349:  8716: 6169:  25:   MAX_HEIGHT: 2048,
14001: 11350:  8717: 6170:  26:   MIN_WIDTH: 100,
14002: 11351:  8718: 6171:  27:   MIN_HEIGHT: 100,
14003: 11352:  8719: 6172:  28: };
14004: 11353:  8720: 6173:  29: ```
14005: 11354:  8721: 6174:  30: 
14006: 11355:  8722: 6175:  31: ### Format Settings
14007: 11356:  8723: 6176:  32: 
14008: 11357:  8724: 6177:  33: ```typescript
14009: 11358:  8725: 6178:  34: export const SUPPORTED_FORMATS = [
14010: 11359:  8726: 6179:  35:   "image/jpeg",
14011: 11360:  8727: 6180:  36:   "image/jpg",
14012: 11361:  8728: 6181:  37:   "image/png"
14013: 11362:  8729: 6182:  38: ] as const;
14014: 11363:  8730: 6183:  39: 
14015: 11364:  8731: 6184:  40: export const REQUIRED_DIMENSIONS = {
14016: 11365:  8732: 6185:  41:   STANDARD: {
14017: 11366:  8733: 6186:  42:     width: 200,
14018: 11367:  8734: 6187:  43:     height: 200
14019: 11368:  8735: 6188:  44:   },
14020: 11369:  8736: 6189:  45:   HIGH_RES: {
14021: 11370:  8737: 6190:  46:     width: 400,
14022: 11371:  8738: 6191:  47:     height: 400
14023: 11372:  8739: 6192:  48:   }
14024: 11373:  8740: 6193:  49: };
14025: 11374:  8741: 6194:  50: ```
14026: 11375:  8742: 6195:  51: 
14027: 11376:  8743: 6196:  52: ## Validation Methods
14028: 11377:  8744: 6197:  53: 
14029: 11378:  8745: 6198:  54: ### URL Pattern Check
14030: 11379:  8746: 6199:  55: 
14031: 11380:  8747: 6200:  56: ```typescript
14032: 11381:  8748: 6201:  57: export function isValidImageUrl(url: string): boolean {
14033: 11382:  8749: 6202:  58:   const pattern = /^https:\/\/.*\.(jpg|jpeg|png)(\?.*)?$/i;
14034: 11383:  8750: 6203:  59:   return pattern.test(url);
14035: 11384:  8751: 6204:  60: }
14036: 11385:  8752: 6205:  61: ```
14037: 11386:  8753: 6206:  62: 
14038: 11387:  8754: 6207:  63: ### Format Verification
14039: 11388:  8755: 6208:  64: 
14040: 11389:  8756: 6209:  65: ```typescript
14041: 11390:  8757: 6210:  66: export async function isValidFormat(
14042: 11391:  8758: 6211:  67:   buffer: Buffer
14043: 11392:  8759: 6212:  68: ): Promise<boolean> {
14044: 11393:  8760: 6213:  69:   try {
14045: 11394:  8761: 6214:  70:     const metadata = await sharp(buffer).metadata();
14046: 11395:  8762: 6215:  71:     return SUPPORTED_FORMATS.includes(
14047: 11396:  8763: 6216:  72:       `image/${metadata.format}` as typeof SUPPORTED_FORMATS[number]
14048: 11397:  8764: 6217:  73:     );
14049: 11398:  8765: 6218:  74:   } catch {
14050: 11399:  8766: 6219:  75:     return false;
14051: 11400:  8767: 6220:  76:   }
14052: 11401:  8768: 6221:  77: }
14053: 11402:  8769: 6222:  78: ```
14054: 11403:  8770: 6223:  79: 
14055: 11404:  8771: 6224:  80: ## Implementation Examples
14056: 11405:  8772: 6225:  81: 
14057: 11406:  8773: 6226:  82: ### Basic Validation
14058: 11407:  8774: 6227:  83: 
14059: 11408:  8775: 6228:  84: ```typescript
14060: 11409:  8776: 6229:  85: const validator = new ImageValidator();
14061: 11410:  8777: 6230:  86: 
14062: 11411:  8778: 6231:  87: try {
14063: 11412:  8779: 6232:  88:   await validator.validate(imageBuffer);
14064: 11413:  8780: 6233:  89:   console.log("Image validation successful");
14065: 11414:  8781: 6234:  90: } catch (error) {
14066: 11415:  8782: 6235:  91:   console.error("Validation failed:", error.message);
14067: 11416:  8783: 6236:  92: }
14068: 11417:  8784: 6237:  93: ```
14069: 11418:  8785: 6238:  94: 
14070: 11419:  8786: 6239:  95: ### URL Validation
14071: 11420:  8787: 6240:  96: 
14072: 11421:  8788: 6241:  97: ```typescript
14073: 11422:  8789: 6242:  98: const isValid = validator.validateUrl(imageUrl);
14074: 11423:  8790: 6243:  99: if (!isValid) {
14075: 11424:  8791: 6244: 100:   throw new Error(`Invalid image URL: ${imageUrl}`);
14076: 11425:  8792: 6245: 101: }
14077: 11426:  8793: 6246: 102: ```
14078: 11427:  8794: 6247: 103: 
14079: 11428:  8795: 6248: 104: ## Validation Pipeline
14080: 11429:  8796: 6249: 105: 
14081: 11430:  8797: 6250: 106: ### Size Check
14082: 11431:  8798: 6251: 107: 
14083: 11432:  8799: 6252: 108: ```typescript
14084: 11433:  8800: 6253: 109: private async validateSize(buffer: Buffer): Promise<void> {
14085: 11434:  8801: 6254: 110:   const size = buffer.length;
14086: 11435:  8802: 6255: 111:  
14087: 11436:  8803: 6256: 112:   if (size > IMAGE_LIMITS.MAX_SIZE) {
14088: 11437:  8804: 6257: 113:     throw new Error(
14089: 11438:  8805: 6258: 114:       `Image size ${size} exceeds maximum limit of ${IMAGE_LIMITS.MAX_SIZE}`
14090: 11439:  8806: 6259: 115:     );
14091: 11440:  8807: 6260: 116:   }
14092: 11441:  8808: 6261: 117:  
14093: 11442:  8809: 6262: 118:   if (size < IMAGE_LIMITS.MIN_SIZE) {
14094: 11443:  8810: 6263: 119:     throw new Error(
14095: 11444:  8811: 6264: 120:       `Image size ${size} below minimum requirement of ${IMAGE_LIMITS.MIN_SIZE}`
14096: 11445:  8812: 6265: 121:     );
14097: 11446:  8813: 6266: 122:   }
14098: 11447:  8814: 6267: 123: }
14099: 11448:  8815: 6268: 124: ```
14100: 11449:  8816: 6269: 125: 
14101: 11450:  8817: 6270: 126: ### Dimension Check
14102: 11451:  8818: 6271: 127: 
14103: 11452:  8819: 6272: 128: ```typescript
14104: 11453:  8820: 6273: 129: private async validateDimensions(
14105: 11454:  8821: 6274: 130:   metadata: sharp.Metadata
14106: 11455:  8822: 6275: 131: ): Promise<void> {
14107: 11456:  8823: 6276: 132:   const { width, height } = metadata;
14108: 11457:  8824: 6277: 133:  
14109: 11458:  8825: 6278: 134:   if (!width || !height) {
14110: 11459:  8826: 6279: 135:     throw new Error("Unable to determine image dimensions");
14111: 11460:  8827: 6280: 136:   }
14112: 11461:  8828: 6281: 137:  
14113: 11462:  8829: 6282: 138:   if (width > IMAGE_LIMITS.MAX_WIDTH || height > IMAGE_LIMITS.MAX_HEIGHT) {
14114: 11463:  8830: 6283: 139:     throw new Error("Image dimensions exceed maximum limits");
14115: 11464:  8831: 6284: 140:   }
14116: 11465:  8832: 6285: 141:  
14117: 11466:  8833: 6286: 142:   if (width < IMAGE_LIMITS.MIN_WIDTH || height < IMAGE_LIMITS.MIN_HEIGHT) {
14118: 11467:  8834: 6287: 143:     throw new Error("Image dimensions below minimum requirements");
14119: 11468:  8835: 6288: 144:   }
14120: 11469:  8836: 6289: 145: }
14121: 11470:  8837: 6290: 146: ```
14122: 11471:  8838: 6291: 147: 
14123: 11472:  8839: 6292: 148: ## Utility Functions
14124: 11473:  8840: 6293: 149: 
14125: 11474:  8841: 6294: 150: ### Metadata Extraction
14126: 11475:  8842: 6295: 151: 
14127: 11476:  8843: 6296: 152: ```typescript
14128: 11477:  8844: 6297: 153: async function getImageMetadata(
14129: 11478:  8845: 6298: 154:   buffer: Buffer
14130: 11479:  8846: 6299: 155: ): Promise<sharp.Metadata> {
14131: 11480:  8847: 6300: 156:   try {
14132: 11481:  8848: 6301: 157:     return await sharp(buffer).metadata();
14133: 11482:  8849: 6302: 158:   } catch (error) {
14134: 11483:  8850: 6303: 159:     throw new Error("Failed to extract image metadata");
14135: 11484:  8851: 6304: 160:   }
14136: 11485:  8852: 6305: 161: }
14137: 11486:  8853: 6306: 162: ```
14138: 11487:  8854: 6307: 163: 
14139: 11488:  8855: 6308: 164: ### Resolution Check
14140: 11489:  8856: 6309: 165: 
14141: 11490:  8857: 6310: 166: ```typescript
14142: 11491:  8858: 6311: 167: function isValidResolution(
14143: 11492:  8859: 6312: 168:   width: number,
14144: 11493:  8860: 6313: 169:   height: number,
14145: 11494:  8861: 6314: 170:   isHighRes: boolean
14146: 11495:  8862: 6315: 171: ): boolean {
14147: 11496:  8863: 6316: 172:   const requirements = isHighRes ? 
14148: 11497:  8864: 6317: 173:     REQUIRED_DIMENSIONS.HIGH_RES : 
14149: 11498:  8865: 6318: 174:     REQUIRED_DIMENSIONS.STANDARD;
14150: 11499:  8866: 6319: 175:    
14151: 11500:  8867: 6320: 176:   return width >= requirements.width && 
14152: 11501:  8868: 6321: 177:          height >= requirements.height;
14153: 11502:  8869: 6322: 178: }
14154: 11503:  8870: 6323: 179: ```
14155: 11504:  8871: 6324: 180: 
14156: 11505:  8872: 6325: 181: ## Error Messages
14157: 11506:  8873: 6326: 182: 
14158: 11507:  8874: 6327: 183: ### Custom Validation Errors
14159: 11508:  8875: 6328: 184: 
14160: 11509:  8876: 6329: 185: ```typescript
14161: 11510:  8877: 6330: 186: export class ImageValidationError extends Error {
14162: 11511:  8878: 6331: 187:   constructor(
14163: 11512:  8879: 6332: 188:     message: string,
14164: 11513:  8880: 6333: 189:     public code: string,
14165: 11514:  8881: 6334: 190:     public details?: Record<string, unknown>
14166: 11515:  8882: 6335: 191:   ) {
14167: 11516:  8883: 6336: 192:     super(message);
14168: 11517:  8884: 6337: 193:     this.name = "ImageValidationError";
14169: 11518:  8885: 6338: 194:   }
14170: 11519:  8886: 6339: 195: }
14171: 11520:  8887: 6340: 196: ```
14172: 11521:  8888: 6341: 197: 
14173: 11522:  8889: 6342: 198: ### Error Codes
14174: 11523:  8890: 6343: 199: 
14175: 11524:  8891: 6344: 200: ```typescript
14176: 11525:  8892: 6345: 201: export const VALIDATION_ERRORS = {
14177: 11526:  8893: 6346: 202:   INVALID_FORMAT: "INVALID_FORMAT",
14178: 11527:  8894: 6347: 203:   INVALID_SIZE: "INVALID_SIZE",
14179: 11528:  8895: 6348: 204:   INVALID_DIMENSIONS: "INVALID_DIMENSIONS",
14180: 11529:  8896: 6349: 205:   INVALID_URL: "INVALID_URL",
14181: 11530:  8897: 6350: 206:   METADATA_ERROR: "METADATA_ERROR"
14182: 11531:  8898: 6351: 207: } as const;
14183: 11532:  8899: 6352: 208: ```
14184: 11533:  8900: 6353: 209: 
14185: 11534:  8901: 6354: 210: ## Best Practices
14186: 11535:  8902: 6355: 211: 
14187: 11536:  8903: 6356: 212: ### Input Validation
14188: 11537:  8904: 6357: 213: 
14189: 11538:  8905: 6358: 214: - Check buffer integrity
14190: 11539:  8906: 6359: 215: - Validate URL structure
14191: 11540:  8907: 6360: 216: - Verify MIME types
14192: 11541:  8908: 6361: 217: 
14193: 11542:  8909: 6362: 218: ### Performance Optimization
14194: 11543:  8910: 6363: 219: 
14195: 11544:  8911: 6364: 220: - Cache validation results
14196: 11545:  8912: 6365: 221: - Implement early returns
14197: 11546:  8913: 6366: 222: - Use efficient checks
14198: 11547:  8914: 6367: 223: 
14199: 11548:  8915: 6368: 224: ### Error Handling
14200: 11549:  8916: 6369: 225: 
14201: 11550:  8917: 6370: 226: - Provide detailed error messages
14202: 11551:  8918: 6371: 227: - Include validation context
14203: 11552:  8919: 6372: 228: - Log validation failures
14204: 11553:  8920: 6373: 229: 
14205: 11554:  8921: 6374: 230: ## Usage Guidelines
14206: 11555:  8922: 6375: 231: 
14207: 11556:  8923: 6376: 232: ### Standard Validation
14208: 11557:  8924: 6377: 233: 
14209: 11558:  8925: 6378: 234: ```typescript
14210: 11559:  8926: 6379: 235: const validateImage = async (buffer: Buffer): Promise<void> => {
14211: 11560:  8927: 6380: 236:   const validator = new ImageValidator();
14212: 11561:  8928: 6381: 237:  
14213: 11562:  8929: 6382: 238:   try {
14214: 11563:  8930: 6383: 239:     await validator.validate(buffer);
14215: 11564:  8931: 6384: 240:   } catch (error) {
14216: 11565:  8932: 6385: 241:     await logError(error, "imageValidation");
14217: 11566:  8933: 6386: 242:     throw error;
14218: 11567:  8934: 6387: 243:   }
14219: 11568:  8935: 6388: 244: };
14220: 11569:  8936: 6389: 245: ```
14221: 11570:  8937: 6390: 246: 
14222: 11571:  8938: 6391: 247: ### URL Pattern Validation
14223: 11572:  8939: 6392: 248: 
14224: 11573:  8940: 6393: 249: ```typescript
14225: 11574:  8941: 6394: 250: const validateImageUrl = (url: string): void => {
14226: 11575:  8942: 6395: 251:   if (!isValidImageUrl(url)) {
14227: 11576:  8943: 6396: 252:     throw new ImageValidationError(
14228: 11577:  8944: 6397: 253:       `Invalid image URL: ${url}`,
14229: 11578:  8945: 6398: 254:       VALIDATION_ERRORS.INVALID_URL,
14230: 11579:  8946: 6399: 255:       { url }
14231: 11580:  8947: 6400: 256:     );
14232: 11581:  8948: 6401: 257:   }
14233: 11582:  8949: 6402: 258: };
14234: 11583:  8950: 6403: 259: ```
14235: 11584:  8951: 6404: 260: 
14236: 11585:  8952: 6405: 261: ## Related Components
14237: 11586:  8953: 6406: 262: 
14238: 11587:  8954: 6407: 263: - [Image Compressor](./image-compressor)
14239: 11588:  8955: 6408: 264: - [Image Handler](./image-handler)
14240: 11589:  8956: 6409: 265: - [Error Handling](./error-handling)
14241: 11590:  8957: 6410: 266: 
14242: 11591:  8958: 6411: 267: ## Troubleshooting
14243: 11592:  8959: 6412: 268: 
14244: 11593:  8960: 6413: 269: ### Common Issues
14245: 11594:  8961: 6414: 270: 
14246: 11595:  8962: 6415: 271: 1. Format Problems:
14247: 11596:  8963: 6416: 272:    - Check file extensions
14248: 11597:  8964: 6417: 273:    - Verify MIME types
14249: 11598:  8965: 6418: 274:    - Validate image headers
14250: 11599:  8966: 6419: 275: 
14251: 11600:  8967: 6420: 276: 2. Size Issues:
14252: 11601:  8968: 6421: 277:    - Monitor file sizes
14253: 11602:  8969: 6422: 278:    - Check compression settings
14254: 11603:  8970: 6423: 279:    - Verify buffer integrity
14255: 11604:  8971: 6424: 280: 
14256: 11605:  8972: 6425: 281: 3. Dimension Errors:
14257: 11606:  8973: 6426: 282:    - Validate aspect ratios
14258: 11607:  8974: 6427: 283:    - Check resolution requirements
14259: 11608:  8975: 6428: 284:    - Monitor scaling issues
14260: 11609:  8976: 6429: </file>
14261: 11610:  8977: 6430: 
14262: 11611:  8978: 6431: <file path="utils/logging.md">
14263: 11612:  8979: 6432:   1: # Logging System
14264: 11613:  8980: 6433:   2: 
14265: 11614:  8981: 6434:   3: ## Overview
14266: 11615:  8982: 6435:   4: 
14267: 11616:  8983: 6436:   5: The Logging System (`logger.ts`) provides comprehensive logging functionality across the application. It integrates with Firebase Functions logger and Firestore for persistent log storage, supporting multiple log levels and structured logging data.
14268: 11617:  8984: 6437:   6: 
14269: 11618:  8985: 6438:   7: ## Features
14270: 11619:  8986: 6439:   8: 
14271: 11620:  8987: 6440:   9: - Multiple log levels (INFO, WARNING, ERROR)
14272: 11621:  8988: 6441:  10: - Structured logging with metadata
14273: 11622:  8989: 6442:  11: - Firestore integration for log persistence
14274: 11623:  8990: 6443:  12: - Data cleaning and sanitization
14275: 11624:  8991: 6444:  13: - Flexible context tracking
14276: 11625:  8992: 6445:  14: - Type-safe logging interfaces
14277: 11626:  8993: 6446:  15: 
14278: 11627:  8994: 6447:  16: ## Basic Usage
14279: 11628:  8995: 6448:  17: 
14280: 11629:  8996: 6449:  18: ### Importing the Logger
14281: 11630:  8997: 6450:  19: 
14282: 11631:  8998: 6451:  20: ```typescript
14283: 11632:  8999: 6452:  21: import { logInfo, logWarning, logError } from "../utils/logger";
14284: 11633:  9000: 6453:  22: import { logger } from "firebase-functions";
14285: 11634:  9001: 6454:  23: ```
14286: 11635:  9002: 6455:  24: 
14287: 11636:  9003: 6456:  25: ### Log Levels
14288: 11637:  9004: 6457:  26: 
14289: 11638:  9005: 6458:  27: ```typescript
14290: 11639:  9006: 6459:  28: // Info level logging
14291: 11640:  9007: 6460:  29: await logInfo("Processing started", {
14292: 11641:  9008: 6461:  30:   timestamp: new Date().toISOString(),
14293: 11642:  9009: 6462:  31:   operation: "syncCards"
14294: 11643:  9010: 6463:  32: });
14295: 11644:  9011: 6464:  33: 
14296: 11645:  9012: 6465:  34: // Warning level logging
14297: 11646:  9013: 6466:  35: await logWarning("Retry attempt required", {
14298: 11647:  9014: 6467:  36:   attempt: 2,
14299: 11648:  9015: 6468:  37:   maxRetries: 3
14300: 11649:  9016: 6469:  38: });
14301: 11650:  9017: 6470:  39: 
14302: 11651:  9018: 6471:  40: // Error level logging
14303: 11652:  9019: 6472:  41: await logError(error, "syncCards:main");
14304: 11653:  9020: 6473:  42: ```
14305: 11654:  9021: 6474:  43: 
14306: 11655:  9022: 6475:  44: ## Data Structures
14307: 11656:  9023: 6476:  45: 
14308: 11657:  9024: 6477:  46: ### Log Entry Interface
14309: 11658:  9025: 6478:  47: 
14310: 11659:  9026: 6479:  48: ```typescript
14311: 11660:  9027: 6480:  49: interface LogEntry {
14312: 11661:  9028: 6481:  50:   timestamp: Date;
14313: 11662:  9029: 6482:  51:   level: "INFO" | "WARNING" | "ERROR";
14314: 11663:  9030: 6483:  52:   message: string;
14315: 11664:  9031: 6484:  53:   context?: string;
14316: 11665:  9032: 6485:  54:   data?: Record<string, unknown>;
14317: 11666:  9033: 6486:  55: }
14318: 11667:  9034: 6487:  56: ```
14319: 11668:  9035: 6488:  57: 
14320: 11669:  9036: 6489:  58: ### Error Logging Interface
14321: 11670:  9037: 6490:  59: 
14322: 11671:  9038: 6491:  60: ```typescript
14323: 11672:  9039: 6492:  61: interface GenericError {
14324: 11673:  9040: 6493:  62:   message: string;
14325: 11674:  9041: 6494:  63:   name: string;
14326: 11675:  9042: 6495:  64:   code?: string;
14327: 11676:  9043: 6496:  65:   stack?: string;
14328: 11677:  9044: 6497:  66: }
14329: 11678:  9045: 6498:  67: ```
14330: 11679:  9046: 6499:  68: 
14331: 11680:  9047: 6500:  69: ## Core Functions
14332: 11681:  9048: 6501:  70: 
14333: 11682:  9049: 6502:  71: ### Info Logging
14334: 11683:  9050: 6503:  72: 
14335: 11684:  9051: 6504:  73: ```typescript
14336: 11685:  9052: 6505:  74: export const logInfo = async (
14337: 11686:  9053: 6506:  75:   message: string,
14338: 11687:  9054: 6507:  76:   data?: LogData
14339: 11688:  9055: 6508:  77: ) => {
14340: 11689:  9056: 6509:  78:   const cleanedData = data ? cleanLogData({
14341: 11690:  9057: 6510:  79:     ...data,
14342: 11691:  9058: 6511:  80:     timestamp: new Date().toISOString(),
14343: 11692:  9059: 6512:  81:   }) : undefined;
14344: 11693:  9060: 6513:  82: 
14345: 11694:  9061: 6514:  83:   const entry: LogEntry = {
14346: 11695:  9062: 6515:  84:     timestamp: new Date(),
14347: 11696:  9063: 6516:  85:     level: "INFO",
14348: 11697:  9064: 6517:  86:     message,
14349: 11698:  9065: 6518:  87:     ...(cleanedData && {data: cleanedData}),
14350: 11699:  9066: 6519:  88:   };
14351: 11700:  9067: 6520:  89: 
14352: 11701:  9068: 6521:  90:   logger.info(message, cleanedData);
14353: 11702:  9069: 6522:  91:   await saveLogEntry(entry);
14354: 11703:  9070: 6523:  92: };
14355: 11704:  9071: 6524:  93: ```
14356: 11705:  9072: 6525:  94: 
14357: 11706:  9073: 6526:  95: ### Error Logging
14358: 11707:  9074: 6527:  96: 
14359: 11708:  9075: 6528:  97: ```typescript
14360: 11709:  9076: 6529:  98: export const logError = async (
14361: 11710:  9077: 6530:  99:   error: GenericError | GenericObject,
14362: 11711:  9078: 6531: 100:   context: string
14363: 11712:  9079: 6532: 101: ) => {
14364: 11713:  9080: 6533: 102:   const errorData = cleanLogData({
14365: 11714:  9081: 6534: 103:     stack: error.stack,
14366: 11715:  9082: 6535: 104:     code: error.code,
14367: 11716:  9083: 6536: 105:     ...(error as GenericObject),
14368: 11717:  9084: 6537: 106:     timestamp: new Date().toISOString(),
14369: 11718:  9085: 6538: 107:   });
14370: 11719:  9086: 6539: 108: 
14371: 11720:  9087: 6540: 109:   const entry: LogEntry = {
14372: 11721:  9088: 6541: 110:     timestamp: new Date(),
14373: 11722:  9089: 6542: 111:     level: "ERROR",
14374: 11723:  9090: 6543: 112:     message: error.message || "Unknown error",
14375: 11724:  9091: 6544: 113:     context,
14376: 11725:  9092: 6545: 114:     data: errorData,
14377: 11726:  9093: 6546: 115:   };
14378: 11727:  9094: 6547: 116: 
14379: 11728:  9095: 6548: 117:   logger.error(entry.message, errorData);
14380: 11729:  9096: 6549: 118:   await saveLogEntry(entry);
14381: 11730:  9097: 6550: 119: };
14382: 11731:  9098: 6551: 120: ```
14383: 11732:  9099: 6552: 121: 
14384: 11733:  9100: 6553: 122: ## Data Cleaning
14385: 11734:  9101: 6554: 123: 
14386: 11735:  9102: 6555: 124: ### Clean Log Data Function
14387: 11736:  9103: 6556: 125: 
14388: 11737:  9104: 6557: 126: ```typescript
14389: 11738:  9105: 6558: 127: function cleanLogData(
14390: 11739:  9106: 6559: 128:   data: Record<string, unknown>
14391: 11740:  9107: 6560: 129: ): Record<string, unknown> {
14392: 11741:  9108: 6561: 130:   return Object.entries(data).reduce((acc, [key, value]) => {
14393: 11742:  9109: 6562: 131:     if (value !== undefined && value !== null) {
14394: 11743:  9110: 6563: 132:       if (value && typeof value === "object") {
14395: 11744:  9111: 6564: 133:         const cleaned = cleanLogData(value as Record<string, unknown>);
14396: 11745:  9112: 6565: 134:         if (Object.keys(cleaned).length > 0) {
14397: 11746:  9113: 6566: 135:           acc[key] = cleaned;
14398: 11747:  9114: 6567: 136:         }
14399: 11748:  9115: 6568: 137:       } else {
14400: 11749:  9116: 6569: 138:         acc[key] = value instanceof Date ? value.toISOString() : value;
14401: 11750:  9117: 6570: 139:       }
14402: 11751:  9118: 6571: 140:     }
14403: 11752:  9119: 6572: 141:     return acc;
14404: 11753:  9120: 6573: 142:   }, {} as Record<string, unknown>);
14405: 11754:  9121: 6574: 143: }
14406: 11755:  9122: 6575: 144: ```
14407: 11756:  9123: 6576: 145: 
14408: 11757:  9124: 6577: 146: ## Firestore Integration
14409: 11758:  9125: 6578: 147: 
14410: 11759:  9126: 6579: 148: ### Save Log Entry
14411: 11760:  9127: 6580: 149: 
14412: 11761:  9128: 6581: 150: ```typescript
14413: 11762:  9129: 6582: 151: async function saveLogEntry(entry: LogEntry): Promise<void> {
14414: 11763:  9130: 6583: 152:   const cleanEntry = {
14415: 11764:  9131: 6584: 153:     timestamp: entry.timestamp,
14416: 11765:  9132: 6585: 154:     level: entry.level,
14417: 11766:  9133: 6586: 155:     message: entry.message,
14418: 11767:  9134: 6587: 156:     ...(entry.context && {context: entry.context}),
14419: 11768:  9135: 6588: 157:     ...(entry.data && {data: cleanLogData(entry.data)}),
14420: 11769:  9136: 6589: 158:   };
14421: 11770:  9137: 6590: 159: 
14422: 11771:  9138: 6591: 160:   await db.collection(COLLECTION.LOGS).add(cleanEntry);
14423: 11772:  9139: 6592: 161: }
14424: 11773:  9140: 6593: 162: ```
14425: 11774:  9141: 6594: 163: 
14426: 11775:  9142: 6595: 164: ## Best Practices
14427: 11776:  9143: 6596: 165: 
14428: 11777:  9144: 6597: 166: 1. **Structured Logging**:
14429: 11778:  9145: 6598: 167: 
14430: 11779:  9146: 6599: 168:    ```typescript
14431: 11780:  9147: 6600: 169:    await logInfo("Card sync completed", {
14432: 11781:  9148: 6601: 170:      cardsProcessed: 50,
14433: 11782:  9149: 6602: 171:      updatedCount: 10,
14434: 11783:  9150: 6603: 172:      duration: "5m30s",
14435: 11784:  9151: 6604: 173:      timestamp: new Date().toISOString()
14436: 11785:  9152: 6605: 174:    });
14437: 11786:  9153: 6606: 175:    ```
14438: 11787:  9154: 6607: 176: 
14439: 11788:  9155: 6608: 177: 2. **Error Context**:
14440: 11789:  9156: 6609: 178: 
14441: 11790:  9157: 6610: 179:    ```typescript
14442: 11791:  9158: 6611: 180:    await logError(error, "cardSync:processGroup", {
14443: 11792:  9159: 6612: 181:      groupId: "23783",
14444: 11793:  9160: 6613: 182:      attempt: 2,
14445: 11794:  9161: 6614: 183:      operation: "imageProcessing"
14446: 11795:  9162: 6615: 184:    });
14447: 11796:  9163: 6616: 185:    ```
14448: 11797:  9164: 6617: 186: 
14449: 11798:  9165: 6618: 187: 3. **Performance Monitoring**:
14450: 11799:  9166: 6619: 188: 
14451: 11800:  9167: 6620: 189:    ```typescript
14452: 11801:  9168: 6621: 190:    await logInfo("Operation timing", {
14453: 11802:  9169: 6622: 191:      operation: "imageCompression",
14454: 11803:  9170: 6623: 192:      duration: endTime - startTime,
14455: 11804:  9171: 6624: 193:      size: {
14456: 11805:  9172: 6625: 194:        before: originalSize,
14457: 11806:  9173: 6626: 195:        after: compressedSize
14458: 11807:  9174: 6627: 196:      }
14459: 11808:  9175: 6628: 197:    });
14460: 11809:  9176: 6629: 198:    ```
14461: 11810:  9177: 6630: 199: 
14462: 11811:  9178: 6631: 200: ## Error Handling
14463: 11812:  9179: 6632: 201: 
14464: 11813:  9180: 6633: 202: ### Common Patterns
14465: 11814:  9181: 6634: 203: 
14466: 11815:  9182: 6635: 204: ```typescript
14467: 11816:  9183: 6636: 205: try {
14468: 11817:  9184: 6637: 206:   // Operation code
14469: 11818:  9185: 6638: 207: } catch (error) {
14470: 11819:  9186: 6639: 208:   await logError(
14471: 11820:  9187: 6640: 209:     error instanceof Error ? error : new Error("Unknown error"),
14472: 11821:  9188: 6641: 210:     "operationName",
14473: 11822:  9189: 6642: 211:     { contextData: "relevant info" }
14474: 11823:  9190: 6643: 212:   );
14475: 11824:  9191: 6644: 213:   throw error;
14476: 11825:  9192: 6645: 214: }
14477: 11826:  9193: 6646: 215: ```
14478: 11827:  9194: 6647: 216: 
14479: 11828:  9195: 6648: 217: ### Error with Context
14480: 11829:  9196: 6649: 218: 
14481: 11830:  9197: 6650: 219: ```typescript
14482: 11831:  9198: 6651: 220: class DetailedError extends Error {
14483: 11832:  9199: 6652: 221:   constructor(
14484: 11833:  9200: 6653: 222:     message: string,
14485: 11834:  9201: 6654: 223:     public context: string,
14486: 11835:  9202: 6655: 224:     public metadata?: Record<string, unknown>
14487: 11836:  9203: 6656: 225:   ) {
14488: 11837:  9204: 6657: 226:     super(message);
14489: 11838:  9205: 6658: 227:     this.name = "DetailedError";
14490: 11839:  9206: 6659: 228:   }
14491: 11840:  9207: 6660: 229: }
14492: 11841:  9208: 6661: 230: ```
14493: 11842:  9209: 6662: 231: 
14494: 11843:  9210: 6663: 232: ## Query Examples
14495: 11844:  9211: 6664: 233: 
14496: 11845:  9212: 6665: 234: ### Firestore Queries
14497: 11846:  9213: 6666: 235: 
14498: 11847:  9214: 6667: 236: ```typescript
14499: 11848:  9215: 6668: 237: // Get recent errors
14500: 11849:  9216: 6669: 238: const recentErrors = await db
14501: 11850:  9217: 6670: 239:   .collection(COLLECTION.LOGS)
14502: 11851:  9218: 6671: 240:   .where("level", "==", "ERROR")
14503: 11852:  9219: 6672: 241:   .orderBy("timestamp", "desc")
14504: 11853:  9220: 6673: 242:   .limit(10)
14505: 11854:  9221: 6674: 243:   .get();
14506: 11855:  9222: 6675: 244: 
14507: 11856:  9223: 6676: 245: // Get logs by context
14508: 11857:  9224: 6677: 246: const contextLogs = await db
14509: 11858:  9225: 6678: 247:   .collection(COLLECTION.LOGS)
14510: 11859:  9226: 6679: 248:   .where("context", "==", "cardSync:processGroup")
14511: 11860:  9227: 6680: 249:   .get();
14512: 11861:  9228: 6681: 250: ```
14513: 11862:  9229: 6682: 251: 
14514: 11863:  9230: 6683: 252: ## Related Components
14515: 11864:  9231: 6684: 253: 
14516: 11865:  9232: 6685: 254: - [Error Handling](./error-handling)
14517: 11866:  9233: 6686: 255: - [Sync Logger](./sync-logger)
14518: 11867:  9234: 6687: 256: - [Progress Tracking](./progress)
14519: 11868:  9235: 6688: 257: 
14520: 11869:  9236: 6689: 258: ## Troubleshooting
14521: 11870:  9237: 6690: 259: 
14522: 11871:  9238: 6691: 260: ### Common Issues
14523: 11872:  9239: 6692: 261: 
14524: 11873:  9240: 6693: 262: 1. Missing Logs:
14525: 11874:  9241: 6694: 263:    - Check log level configuration
14526: 11875:  9242: 6695: 264:    - Verify Firestore permissions
14527: 11876:  9243: 6696: 265:    - Check error handling implementation
14528: 11877:  9244: 6697: 266: 
14529: 11878:  9245: 6698: 267: 2. Performance Impact:
14530: 11879:  9246: 6699: 268:    - Use appropriate log levels
14531: 11880:  9247: 6700: 269:    - Implement log batching for high-volume operations
14532: 11881:  9248: 6701: 270:    - Monitor Firestore usage
14533: 11882:  9249: 6702: 271: 
14534: 11883:  9250: 6703: 272: 3. Data Size:
14535: 11884:  9251: 6704: 273:    - Implement log rotation
14536: 11885:  9252: 6705: 274:    - Clean sensitive data
14537: 11886:  9253: 6706: 275:    - Monitor storage usage
14538: 11887:  9254: 6707: </file>
14539: 11888:  9255: 6708: 
14540: 11889:  9256: 6709: <file path="utils/progress.md">
14541: 11890:  9257: 6710:   1: # Progress Tracking Utility
14542: 11891:  9258: 6711:   2: 
14543: 11892:  9259: 6712:   3: ## Overview
14544: 11893:  9260: 6713:   4: 
14545: 11894:  9261: 6714:   5: The Progress Tracker (`progress.ts`) provides real-time monitoring and reporting of long-running operations, particularly during synchronization processes. It handles progress calculation, ETA estimation, and status updates.
14546: 11895:  9262: 6715:   6: 
14547: 11896:  9263: 6716:   7: ## Core Features
14548: 11897:  9264: 6717:   8: 
14549: 11898:  9265: 6718:   9: - Real-time progress tracking
14550: 11899:  9266: 6719:  10: - ETA calculations
14551: 11900:  9267: 6720:  11: - Operation statistics
14552: 11901:  9268: 6721:  12: - Progress bar visualization
14553: 11902:  9269: 6722:  13: - Step-by-step monitoring
14554: 11903:  9270: 6723:  14: - Batch progress tracking
14555: 11904:  9271: 6724:  15: 
14556: 11905:  9272: 6725:  16: ## Main Interfaces
14557: 11906:  9273: 6726:  17: 
14558: 11907:  9274: 6727:  18: ### Progress Options
14559: 11908:  9275: 6728:  19: 
14560: 11909:  9276: 6729:  20: ```typescript
14561: 11910:  9277: 6730:  21: interface ProgressOptions {
14562: 11911:  9278: 6731:  22:   total: number;
14563: 11912:  9279: 6732:  23:   title?: string;
14564: 11913:  9280: 6733:  24:   showBar?: boolean;
14565: 11914:  9281: 6734:  25:   showEta?: boolean;
14566: 11915:  9282: 6735:  26:   batchSize?: number;
14567: 11916:  9283: 6736:  27: }
14568: 11917:  9284: 6737:  28: ```
14569: 11918:  9285: 6738:  29: 
14570: 11919:  9286: 6739:  30: ### Progress State
14571: 11920:  9287: 6740:  31: 
14572: 11921:  9288: 6741:  32: ```typescript
14573: 11922:  9289: 6742:  33: interface ProgressState {
14574: 11923:  9290: 6743:  34:   current: number;
14575: 11924:  9291: 6744:  35:   total: number;
14576: 11925:  9292: 6745:  36:   startTime: Date;
14577: 11926:  9293: 6746:  37:   lastUpdateTime: Date;
14578: 11927:  9294: 6747:  38:   completed: boolean;
14579: 11928:  9295: 6748:  39:   eta?: Date;
14580: 11929:  9296: 6749:  40:   rate?: number;
14581: 11930:  9297: 6750:  41: }
14582: 11931:  9298: 6751:  42: ```
14583: 11932:  9299: 6752:  43: 
14584: 11933:  9300: 6753:  44: ## Implementation Examples
14585: 11934:  9301: 6754:  45: 
14586: 11935:  9302: 6755:  46: ### Basic Usage
14587: 11936:  9303: 6756:  47: 
14588: 11937:  9304: 6757:  48: ```typescript
14589: 11938:  9305: 6758:  49: const progress = new ProgressTracker({
14590: 11939:  9306: 6759:  50:   total: totalItems,
14591: 11940:  9307: 6760:  51:   title: "Processing Cards",
14592: 11941:  9308: 6761:  52:   showBar: true,
14593: 11942:  9309: 6762:  53:   showEta: true
14594: 11943:  9310: 6763:  54: });
14595: 11944:  9311: 6764:  55: 
14596: 11945:  9312: 6765:  56: progress.start();
14597: 11946:  9313: 6766:  57: 
14598: 11947:  9314: 6767:  58: for (const item of items) {
14599: 11948:  9315: 6768:  59:   await processItem(item);
14600: 11949:  9316: 6769:  60:   progress.increment();
14601: 11950:  9317: 6770:  61: }
14602: 11951:  9318: 6771:  62: 
14603: 11952:  9319: 6772:  63: progress.finish();
14604: 11953:  9320: 6773:  64: ```
14605: 11954:  9321: 6774:  65: 
14606: 11955:  9322: 6775:  66: ### Batch Processing
14607: 11956:  9323: 6776:  67: 
14608: 11957:  9324: 6777:  68: ```typescript
14609: 11958:  9325: 6778:  69: const tracker = new ProgressTracker({
14610: 11959:  9326: 6779:  70:   total: totalGroups,
14611: 11960:  9327: 6780:  71:   title: "Syncing Groups",
14612: 11961:  9328: 6781:  72:   batchSize: 25
14613: 11962:  9329: 6782:  73: });
14614: 11963:  9330: 6783:  74: 
14615: 11964:  9331: 6784:  75: tracker.start();
14616: 11965:  9332: 6785:  76: 
14617: 11966:  9333: 6786:  77: for (const batch of batches) {
14618: 11967:  9334: 6787:  78:   await processBatch(batch);
14619: 11968:  9335: 6788:  79:   tracker.incrementBatch(batch.length);
14620: 11969:  9336: 6789:  80: }
14621: 11970:  9337: 6790:  81: 
14622: 11971:  9338: 6791:  82: tracker.finish();
14623: 11972:  9339: 6792:  83: ```
14624: 11973:  9340: 6793:  84: 
14625: 11974:  9341: 6794:  85: ## Progress Visualization
14626: 11975:  9342: 6795:  86: 
14627: 11976:  9343: 6796:  87: ### Progress Bar
14628: 11977:  9344: 6797:  88: 
14629: 11978:  9345: 6798:  89: ```typescript
14630: 11979:  9346: 6799:  90: private renderBar(
14631: 11980:  9347: 6800:  91:   percentage: number,
14632: 11981:  9348: 6801:  92:   width: number = 30
14633: 11982:  9349: 6802:  93: ): string {
14634: 11983:  9350: 6803:  94:   const filled = Math.floor(width * (percentage / 100));
14635: 11984:  9351: 6804:  95:   const empty = width - filled;
14636: 11985:  9352: 6805:  96:  
14637: 11986:  9353: 6806:  97:   return '[' + 
14638: 11987:  9354: 6807:  98:     '='.repeat(filled) + 
14639: 11988:  9355: 6808:  99:     ' '.repeat(empty) + 
14640: 11989:  9356: 6809: 100:     ']';
14641: 11990:  9357: 6810: 101: }
14642: 11991:  9358: 6811: 102: ```
14643: 11992:  9359: 6812: 103: 
14644: 11993:  9360: 6813: 104: ### Status Line
14645: 11994:  9361: 6814: 105: 
14646: 11995:  9362: 6815: 106: ```typescript
14647: 11996:  9363: 6816: 107: private renderStatus(): string {
14648: 11997:  9364: 6817: 108:   const percentage = this.getPercentage();
14649: 11998:  9365: 6818: 109:   const current = this.state.current;
14650: 11999:  9366: 6819: 110:   const total = this.state.total;
14651: 12000:  9367: 6820: 111:  
14652: 12001:  9368: 6821: 112:   return `${this.options.title || 'Progress'}: ` +
14653: 12002:  9369: 6822: 113:     `${current}/${total} ` +
14654: 12003:  9370: 6823: 114:     `(${percentage.toFixed(1)}%)`;
14655: 12004:  9371: 6824: 115: }
14656: 12005:  9372: 6825: 116: ```
14657: 12006:  9373: 6826: 117: 
14658: 12007:  9374: 6827: 118: ## Time Calculations
14659: 12008:  9375: 6828: 119: 
14660: 12009:  9376: 6829: 120: ### ETA Estimation
14661: 12010:  9377: 6830: 121: 
14662: 12011:  9378: 6831: 122: ```typescript
14663: 12012:  9379: 6832: 123: private calculateEta(): Date | undefined {
14664: 12013:  9380: 6833: 124:   if (this.state.current === 0) return undefined;
14665: 12014:  9381: 6834: 125:  
14666: 12015:  9382: 6835: 126:   const elapsed = Date.now() - this.state.startTime.getTime();
14667: 12016:  9383: 6836: 127:   const rate = this.state.current / (elapsed / 1000);
14668: 12017:  9384: 6837: 128:   const remaining = this.state.total - this.state.current;
14669: 12018:  9385: 6838: 129:  
14670: 12019:  9386: 6839: 130:   return new Date(
14671: 12020:  9387: 6840: 131:     Date.now() + (remaining / rate) * 1000
14672: 12021:  9388: 6841: 132:   );
14673: 12022:  9389: 6842: 133: }
14674: 12023:  9390: 6843: 134: ```
14675: 12024:  9391: 6844: 135: 
14676: 12025:  9392: 6845: 136: ### Processing Rate
14677: 12026:  9393: 6846: 137: 
14678: 12027:  9394: 6847: 138: ```typescript
14679: 12028:  9395: 6848: 139: private calculateRate(): number {
14680: 12029:  9396: 6849: 140:   const elapsed = (
14681: 12030:  9397: 6850: 141:     this.state.lastUpdateTime.getTime() - 
14682: 12031:  9398: 6851: 142:     this.state.startTime.getTime()
14683: 12032:  9399: 6852: 143:   ) / 1000;
14684: 12033:  9400: 6853: 144:  
14685: 12034:  9401: 6854: 145:   return this.state.current / elapsed;
14686: 12035:  9402: 6855: 146: }
14687: 12036:  9403: 6856: 147: ```
14688: 12037:  9404: 6857: 148: 
14689: 12038:  9405: 6858: 149: ## Event Handling
14690: 12039:  9406: 6859: 150: 
14691: 12040:  9407: 6860: 151: ### Progress Updates
14692: 12041:  9408: 6861: 152: 
14693: 12042:  9409: 6862: 153: ```typescript
14694: 12043:  9410: 6863: 154: onProgress(callback: ProgressCallback): void {
14695: 12044:  9411: 6864: 155:   this.progressCallbacks.push(callback);
14696: 12045:  9412: 6865: 156: }
14697: 12046:  9413: 6866: 157: 
14698: 12047:  9414: 6867: 158: private emitProgress(): void {
14699: 12048:  9415: 6868: 159:   const progress = {
14700: 12049:  9416: 6869: 160:     current: this.state.current,
14701: 12050:  9417: 6870: 161:     total: this.state.total,
14702: 12051:  9418: 6871: 162:     percentage: this.getPercentage(),
14703: 12052:  9419: 6872: 163:     eta: this.state.eta,
14704: 12053:  9420: 6873: 164:     rate: this.state.rate
14705: 12054:  9421: 6874: 165:   };
14706: 12055:  9422: 6875: 166:  
14707: 12056:  9423: 6876: 167:   this.progressCallbacks.forEach(callback => callback(progress));
14708: 12057:  9424: 6877: 168: }
14709: 12058:  9425: 6878: 169: ```
14710: 12059:  9426: 6879: 170: 
14711: 12060:  9427: 6880: 171: ### Completion Events
14712: 12061:  9428: 6881: 172: 
14713: 12062:  9429: 6882: 173: ```typescript
14714: 12063:  9430: 6883: 174: onComplete(callback: CompleteCallback): void {
14715: 12064:  9431: 6884: 175:   this.completeCallbacks.push(callback);
14716: 12065:  9432: 6885: 176: }
14717: 12066:  9433: 6886: 177: 
14718: 12067:  9434: 6887: 178: private emitComplete(): void {
14719: 12068:  9435: 6888: 179:   const summary = {
14720: 12069:  9436: 6889: 180:     total: this.state.total,
14721: 12070:  9437: 6890: 181:     duration: this.getDuration(),
14722: 12071:  9438: 6891: 182:     averageRate: this.calculateAverageRate()
14723: 12072:  9439: 6892: 183:   };
14724: 12073:  9440: 6893: 184:  
14725: 12074:  9441: 6894: 185:   this.completeCallbacks.forEach(callback => callback(summary));
14726: 12075:  9442: 6895: 186: }
14727: 12076:  9443: 6896: 187: ```
14728: 12077:  9444: 6897: 188: 
14729: 12078:  9445: 6898: 189: ## Usage Patterns
14730: 12079:  9446: 6899: 190: 
14731: 12080:  9447: 6900: 191: ### With Async Operations
14732: 12081:  9448: 6901: 192: 
14733: 12082:  9449: 6902: 193: ```typescript
14734: 12083:  9450: 6903: 194: const processWithProgress = async (
14735: 12084:  9451: 6904: 195:   items: any[],
14736: 12085:  9452: 6905: 196:   processor: (item: any) => Promise<void>
14737: 12086:  9453: 6906: 197: ): Promise<void> => {
14738: 12087:  9454: 6907: 198:   const progress = new ProgressTracker({
14739: 12088:  9455: 6908: 199:     total: items.length,
14740: 12089:  9456: 6909: 200:     title: "Processing Items",
14741: 12090:  9457: 6910: 201:     showBar: true
14742: 12091:  9458: 6911: 202:   });
14743: 12092:  9459: 6912: 203:  
14744: 12093:  9460: 6913: 204:   progress.start();
14745: 12094:  9461: 6914: 205:  
14746: 12095:  9462: 6915: 206:   for (const item of items) {
14747: 12096:  9463: 6916: 207:     await processor(item);
14748: 12097:  9464: 6917: 208:     progress.increment();
14749: 12098:  9465: 6918: 209:     await new Promise(resolve => setTimeout(resolve, 10));
14750: 12099:  9466: 6919: 210:   }
14751: 12100:  9467: 6920: 211:  
14752: 12101:  9468: 6921: 212:   progress.finish();
14753: 12102:  9469: 6922: 213: };
14754: 12103:  9470: 6923: 214: ```
14755: 12104:  9471: 6924: 215: 
14756: 12105:  9472: 6925: 216: ### With Batch Processing
14757: 12106:  9473: 6926: 217: 
14758: 12107:  9474: 6927: 218: ```typescript
14759: 12108:  9475: 6928: 219: const processBatchWithProgress = async (
14760: 12109:  9476: 6929: 220:   batches: any[][],
14761: 12110:  9477: 6930: 221:   processor: (batch: any[]) => Promise<void>
14762: 12111:  9478: 6931: 222: ): Promise<void> => {
14763: 12112:  9479: 6932: 223:   const totalItems = batches.reduce(
14764: 12113:  9480: 6933: 224:     (sum, batch) => sum + batch.length, 
14765: 12114:  9481: 6934: 225:     0
14766: 12115:  9482: 6935: 226:   );
14767: 12116:  9483: 6936: 227:  
14768: 12117:  9484: 6937: 228:   const progress = new ProgressTracker({
14769: 12118:  9485: 6938: 229:     total: totalItems,
14770: 12119:  9486: 6939: 230:     title: "Processing Batches",
14771: 12120:  9487: 6940: 231:     batchSize: batches[0].length
14772: 12121:  9488: 6941: 232:   });
14773: 12122:  9489: 6942: 233:  
14774: 12123:  9490: 6943: 234:   progress.start();
14775: 12124:  9491: 6944: 235:  
14776: 12125:  9492: 6945: 236:   for (const batch of batches) {
14777: 12126:  9493: 6946: 237:     await processor(batch);
14778: 12127:  9494: 6947: 238:     progress.incrementBatch(batch.length);
14779: 12128:  9495: 6948: 239:   }
14780: 12129:  9496: 6949: 240:  
14781: 12130:  9497: 6950: 241:   progress.finish();
14782: 12131:  9498: 6951: 242: };
14783: 12132:  9499: 6952: 243: ```
14784: 12133:  9500: 6953: 244: 
14785: 12134:  9501: 6954: 245: ## Best Practices
14786: 12135:  9502: 6955: 246: 
14787: 12136:  9503: 6956: 247: ### Memory Efficiency
14788: 12137:  9504: 6957: 248: 
14789: 12138:  9505: 6958: 249: - Clear callbacks after completion
14790: 12139:  9506: 6959: 250: - Limit status update frequency
14791: 12140:  9507: 6960: 251: - Manage event listener count
14792: 12141:  9508: 6961: 252: 
14793: 12142:  9509: 6962: 253: ### Accuracy
14794: 12143:  9510: 6963: 254: 
14795: 12144:  9511: 6964: 255: - Update progress immediately
14796: 12145:  9512: 6965: 256: - Calculate rates periodically
14797: 12146:  9513: 6966: 257: - Maintain precise counters
14798: 12147:  9514: 6967: 258: 
14799: 12148:  9515: 6968: 259: ### User Experience
14800: 12149:  9516: 6969: 260: 
14801: 12150:  9517: 6970: 261: - Show meaningful titles
14802: 12151:  9518: 6971: 262: - Provide accurate ETAs
14803: 12152:  9519: 6972: 263: - Update status consistently
14804: 12153:  9520: 6973: 264: 
14805: 12154:  9521: 6974: 265: ## Related Components
14806: 12155:  9522: 6975: 266: 
14807: 12156:  9523: 6976: 267: - [Sync Logger](./sync-logger)
14808: 12157:  9524: 6977: 268: - [Batch Processor](./batch)
14809: 12158:  9525: 6978: 269: - [Logger](./logging)
14810: 12159:  9526: 6979: 270: 
14811: 12160:  9527: 6980: 271: ## Troubleshooting
14812: 12161:  9528: 6981: 272: 
14813: 12162:  9529: 6982: 273: ### Common Issues
14814: 12163:  9530: 6983: 274: 
14815: 12164:  9531: 6984: 275: 1. Performance Impact:
14816: 12165:  9532: 6985: 276:    - Limit update frequency
14817: 12166:  9533: 6986: 277:    - Optimize calculations
14818: 12167:  9534: 6987: 278:    - Monitor memory usage
14819: 12168:  9535: 6988: 279: 
14820: 12169:  9536: 6989: 280: 2. Accuracy Problems:
14821: 12170:  9537: 6990: 281:    - Verify counter updates
14822: 12171:  9538: 6991: 282:    - Check time calculations
14823: 12172:  9539: 6992: 283:    - Validate batch sizes
14824: 12173:  9540: 6993: 284: 
14825: 12174:  9541: 6994: 285: 3. Display Issues:
14826: 12175:  9542: 6995: 286:    - Check terminal width
14827: 12176:  9543: 6996: 287:    - Verify output formatting
14828: 12177:  9544: 6997: 288:    - Monitor update rates
14829: 12178:  9545: 6998: </file>
14830: 12179:  9546: 6999: 
14831: 12180:  9547: 7000: <file path="utils/request.md">
14832: 12181:  9548: 7001:   1: # Request Handler Utility
14833: 12182:  9549: 7002:   2: 
14834: 12183:  9550: 7003:   3: ## Overview
14835: 12184:  9551: 7004:   4: 
14836: 12185:  9552: 7005:   5: The Request Handler (`request.ts`) manages HTTP requests with built-in retry logic, rate limiting, and error handling. It provides a robust foundation for external API communications, particularly with TCGplayer's API.
14837: 12186:  9553: 7006:   6: 
14838: 12187:  9554: 7007:   7: ## Core Features
14839: 12188:  9555: 7008:   8: 
14840: 12189:  9556: 7009:   9: - Configurable retry logic
14841: 12190:  9557: 7010:  10: - Rate limiting
14842: 12191:  9558: 7011:  11: - Request queuing
14843: 12192:  9559: 7012:  12: - Response caching
14844: 12193:  9560: 7013:  13: - Error standardization
14845: 12194:  9561: 7014:  14: - Request logging
14846: 12195:  9562: 7015:  15: 
14847: 12196:  9563: 7016:  16: ## Configuration
14848: 12197:  9564: 7017:  17: 
14849: 12198:  9565: 7018:  18: ### Request Settings
14850: 12199:  9566: 7019:  19: 
14851: 12200:  9567: 7020:  20: ```typescript
14852: 12201:  9568: 7021:  21: interface RequestOptions {
14853: 12202:  9569: 7022:  22:   baseURL?: string;
14854: 12203:  9570: 7023:  23:   timeout?: number;
14855: 12204:  9571: 7024:  24:   retries?: number;
14856: 12205:  9572: 7025:  25:   backoff?: number;
14857: 12206:  9573: 7026:  26:   headers?: Record<string, string>;
14858: 12207:  9574: 7027:  27:   cache?: boolean;
14859: 12208:  9575: 7028:  28:   validateStatus?: (status: number) => boolean;
14860: 12209:  9576: 7029:  29: }
14861: 12210:  9577: 7030:  30: ```
14862: 12211:  9578: 7031:  31: 
14863: 12212:  9579: 7032:  32: ### Default Configuration
14864: 12213:  9580: 7033:  33: 
14865: 12214:  9581: 7034:  34: ```typescript
14866: 12215:  9582: 7035:  35: const DEFAULT_OPTIONS: RequestOptions = {
14867: 12216:  9583: 7036:  36:   timeout: 10000,
14868: 12217:  9584: 7037:  37:   retries: 3,
14869: 12218:  9585: 7038:  38:   backoff: 1000,
14870: 12219:  9586: 7039:  39:   cache: true,
14871: 12220:  9587: 7040:  40:   validateStatus: (status: number) => status >= 200 && status < 300
14872: 12221:  9588: 7041:  41: };
14873: 12222:  9589: 7042:  42: ```
14874: 12223:  9590: 7043:  43: 
14875: 12224:  9591: 7044:  44: ## Main Methods
14876: 12225:  9592: 7045:  45: 
14877: 12226:  9593: 7046:  46: ### HTTP Methods
14878: 12227:  9594: 7047:  47: 
14879: 12228:  9595: 7048:  48: ```typescript
14880: 12229:  9596: 7049:  49: class RequestHandler {
14881: 12230:  9597: 7050:  50:   async get<T>(
14882: 12231:  9598: 7051:  51:     url: string, 
14883: 12232:  9599: 7052:  52:     options?: RequestOptions
14884: 12233:  9600: 7053:  53:   ): Promise<T>
14885: 12234:  9601: 7054:  54: 
14886: 12235:  9602: 7055:  55:   async post<T>(
14887: 12236:  9603: 7056:  56:     url: string, 
14888: 12237:  9604: 7057:  57:     data: unknown, 
14889: 12238:  9605: 7058:  58:     options?: RequestOptions
14890: 12239:  9606: 7059:  59:   ): Promise<T>
14891: 12240:  9607: 7060:  60: 
14892: 12241:  9608: 7061:  61:   async put<T>(
14893: 12242:  9609: 7062:  62:     url: string, 
14894: 12243:  9610: 7063:  63:     data: unknown, 
14895: 12244:  9611: 7064:  64:     options?: RequestOptions
14896: 12245:  9612: 7065:  65:   ): Promise<T>
14897: 12246:  9613: 7066:  66: 
14898: 12247:  9614: 7067:  67:   async delete<T>(
14899: 12248:  9615: 7068:  68:     url: string, 
14900: 12249:  9616: 7069:  69:     options?: RequestOptions
14901: 12250:  9617: 7070:  70:   ): Promise<T>
14902: 12251:  9618: 7071:  71: }
14903: 12252:  9619: 7072:  72: ```
14904: 12253:  9620: 7073:  73: 
14905: 12254:  9621: 7074:  74: ## Implementation Examples
14906: 12255:  9622: 7075:  75: 
14907: 12256:  9623: 7076:  76: ### Basic Request
14908: 12257:  9624: 7077:  77: 
14909: 12258:  9625: 7078:  78: ```typescript
14910: 12259:  9626: 7079:  79: const requestHandler = new RequestHandler({
14911: 12260:  9627: 7080:  80:   baseURL: "https://api.tcgplayer.com",
14912: 12261:  9628: 7081:  81:   headers: {
14913: 12262:  9629: 7082:  82:     "Authorization": `Bearer ${token}`,
14914: 12263:  9630: 7083:  83:     "Content-Type": "application/json"
14915: 12264:  9631: 7084:  84:   }
14916: 12265:  9632: 7085:  85: });
14917: 12266:  9633: 7086:  86: 
14918: 12267:  9634: 7087:  87: const data = await requestHandler.get<CardResponse>(
14919: 12268:  9635: 7088:  88:   `/catalog/products/${productId}`
14920: 12269:  9636: 7089:  89: );
14921: 12270:  9637: 7090:  90: ```
14922: 12271:  9638: 7091:  91: 
14923: 12272:  9639: 7092:  92: ### With Retry Logic
14924: 12273:  9640: 7093:  93: 
14925: 12274:  9641: 7094:  94: ```typescript
14926: 12275:  9642: 7095:  95: const fetchWithRetry = async <T>(
14927: 12276:  9643: 7096:  96:   url: string,
14928: 12277:  9644: 7097:  97:   options: RequestOptions = {}
14929: 12278:  9645: 7098:  98: ): Promise<T> => {
14930: 12279:  9646: 7099:  99:   let attempt = 0;
14931: 12280:  9647: 7100: 100:  
14932: 12281:  9648: 7101: 101:   while (attempt < (options.retries || DEFAULT_OPTIONS.retries)) {
14933: 12282:  9649: 7102: 102:     try {
14934: 12283:  9650: 7103: 103:       return await requestHandler.get<T>(url, options);
14935: 12284:  9651: 7104: 104:     } catch (error) {
14936: 12285:  9652: 7105: 105:       attempt++;
14937: 12286:  9653: 7106: 106:       if (attempt === options.retries) throw error;
14938: 12287:  9654: 7107: 107:      
14939: 12288:  9655: 7108: 108:       const delay = Math.pow(2, attempt) * options.backoff;
14940: 12289:  9656: 7109: 109:       await new Promise(resolve => setTimeout(resolve, delay));
14941: 12290:  9657: 7110: 110:     }
14942: 12291:  9658: 7111: 111:   }
14943: 12292:  9659: 7112: 112:  
14944: 12293:  9660: 7113: 113:   throw new Error("Max retries exceeded");
14945: 12294:  9661: 7114: 114: };
14946: 12295:  9662: 7115: 115: ```
14947: 12296:  9663: 7116: 116: 
14948: 12297:  9664: 7117: 117: ## Error Handling
14949: 12298:  9665: 7118: 118: 
14950: 12299:  9666: 7119: 119: ### Request Error
14951: 12300:  9667: 7120: 120: 
14952: 12301:  9668: 7121: 121: ```typescript
14953: 12302:  9669: 7122: 122: export class RequestError extends Error {
14954: 12303:  9670: 7123: 123:   constructor(
14955: 12304:  9671: 7124: 124:     message: string,
14956: 12305:  9672: 7125: 125:     public status?: number,
14957: 12306:  9673: 7126: 126:     public code?: string,
14958: 12307:  9674: 7127: 127:     public response?: unknown
14959: 12308:  9675: 7128: 128:   ) {
14960: 12309:  9676: 7129: 129:     super(message);
14961: 12310:  9677: 7130: 130:     this.name = "RequestError";
14962: 12311:  9678: 7131: 131:   }
14963: 12312:  9679: 7132: 132: }
14964: 12313:  9680: 7133: 133: ```
14965: 12314:  9681: 7134: 134: 
14966: 12315:  9682: 7135: 135: ### Error Processing
14967: 12316:  9683: 7136: 136: 
14968: 12317:  9684: 7137: 137: ```typescript
14969: 12318:  9685: 7138: 138: private processError(error: unknown): never {
14970: 12319:  9686: 7139: 139:   if (axios.isAxiosError(error)) {
14971: 12320:  9687: 7140: 140:     throw new RequestError(
14972: 12321:  9688: 7141: 141:       error.message,
14973: 12322:  9689: 7142: 142:       error.response?.status,
14974: 12323:  9690: 7143: 143:       error.code,
14975: 12324:  9691: 7144: 144:       error.response?.data
14976: 12325:  9692: 7145: 145:     );
14977: 12326:  9693: 7146: 146:   }
14978: 12327:  9694: 7147: 147:  
14979: 12328:  9695: 7148: 148:   throw error;
14980: 12329:  9696: 7149: 149: }
14981: 12330:  9697: 7150: 150: ```
14982: 12331:  9698: 7151: 151: 
14983: 12332:  9699: 7152: 152: ## Rate Limiting
14984: 12333:  9700: 7153: 153: 
14985: 12334:  9701: 7154: 154: ### Rate Limiter
14986: 12335:  9702: 7155: 155: 
14987: 12336:  9703: 7156: 156: ```typescript
14988: 12337:  9704: 7157: 157: class RateLimiter {
14989: 12338:  9705: 7158: 158:   private queue: Array<() => Promise<void>> = [];
14990: 12339:  9706: 7159: 159:   private processing = false;
14991: 12340:  9707: 7160: 160:  
14992: 12341:  9708: 7161: 161:   async add<T>(
14993: 12342:  9709: 7162: 162:     request: () => Promise<T>
14994: 12343:  9710: 7163: 163:   ): Promise<T> {
14995: 12344:  9711: 7164: 164:     return new Promise((resolve, reject) => {
14996: 12345:  9712: 7165: 165:       this.queue.push(async () => {
14997: 12346:  9713: 7166: 166:         try {
14998: 12347:  9714: 7167: 167:           const result = await request();
14999: 12348:  9715: 7168: 168:           resolve(result);
15000: 12349:  9716: 7169: 169:         } catch (error) {
15001: 12350:  9717: 7170: 170:           reject(error);
15002: 12351:  9718: 7171: 171:         }
15003: 12352:  9719: 7172: 172:       });
15004: 12353:  9720: 7173: 173:      
15005: 12354:  9721: 7174: 174:       if (!this.processing) {
15006: 12355:  9722: 7175: 175:         this.processQueue();
15007: 12356:  9723: 7176: 176:       }
15008: 12357:  9724: 7177: 177:     });
15009: 12358:  9725: 7178: 178:   }
15010: 12359:  9726: 7179: 179: }
15011: 12360:  9727: 7180: 180: ```
15012: 12361:  9728: 7181: 181: 
15013: 12362:  9729: 7182: 182: ### Queue Processing
15014: 12363:  9730: 7183: 183: 
15015: 12364:  9731: 7184: 184: ```typescript
15016: 12365:  9732: 7185: 185: private async processQueue(): Promise<void> {
15017: 12366:  9733: 7186: 186:   if (this.queue.length === 0) {
15018: 12367:  9734: 7187: 187:     this.processing = false;
15019: 12368:  9735: 7188: 188:     return;
15020: 12369:  9736: 7189: 189:   }
15021: 12370:  9737: 7190: 190:  
15022: 12371:  9738: 7191: 191:   this.processing = true;
15023: 12372:  9739: 7192: 192:   const request = this.queue.shift();
15024: 12373:  9740: 7193: 193:  
15025: 12374:  9741: 7194: 194:   if (request) {
15026: 12375:  9742: 7195: 195:     await request();
15027: 12376:  9743: 7196: 196:     await new Promise(resolve => 
15028: 12377:  9744: 7197: 197:       setTimeout(resolve, this.requestDelay)
15029: 12378:  9745: 7198: 198:     );
15030: 12379:  9746: 7199: 199:     await this.processQueue();
15031: 12380:  9747: 7200: 200:   }
15032: 12381:  9748: 7201: 201: }
15033: 12382:  9749: 7202: 202: ```
15034: 12383:  9750: 7203: 203: 
15035: 12384:  9751: 7204: 204: ## Response Caching
15036: 12385:  9752: 7205: 205: 
15037: 12386:  9753: 7206: 206: ### Cache Implementation
15038: 12387:  9754: 7207: 207: 
15039: 12388:  9755: 7208: 208: ```typescript
15040: 12389:  9756: 7209: 209: class ResponseCache {
15041: 12390:  9757: 7210: 210:   private cache = new Map<string, CacheEntry>();
15042: 12391:  9758: 7211: 211:  
15043: 12392:  9759: 7212: 212:   set(key: string, value: unknown, ttl: number): void {
15044: 12393:  9760: 7213: 213:     this.cache.set(key, {
15045: 12394:  9761: 7214: 214:       value,
15046: 12395:  9762: 7215: 215:       expiry: Date.now() + ttl
15047: 12396:  9763: 7216: 216:     });
15048: 12397:  9764: 7217: 217:   }
15049: 12398:  9765: 7218: 218:  
15050: 12399:  9766: 7219: 219:   get(key: string): unknown | undefined {
15051: 12400:  9767: 7220: 220:     const entry = this.cache.get(key);
15052: 12401:  9768: 7221: 221:     if (!entry) return undefined;
15053: 12402:  9769: 7222: 222:    
15054: 12403:  9770: 7223: 223:     if (Date.now() > entry.expiry) {
15055: 12404:  9771: 7224: 224:       this.cache.delete(key);
15056: 12405:  9772: 7225: 225:       return undefined;
15057: 12406:  9773: 7226: 226:     }
15058: 12407:  9774: 7227: 227:    
15059: 12408:  9775: 7228: 228:     return entry.value;
15060: 12409:  9776: 7229: 229:   }
15061: 12410:  9777: 7230: 230: }
15062: 12411:  9778: 7231: 231: ```
15063: 12412:  9779: 7232: 232: 
15064: 12413:  9780: 7233: 233: ## Usage Guidelines
15065: 12414:  9781: 7234: 234: 
15066: 12415:  9782: 7235: 235: ### Basic Usage
15067: 12416:  9783: 7236: 236: 
15068: 12417:  9784: 7237: 237: ```typescript
15069: 12418:  9785: 7238: 238: const handler = new RequestHandler();
15070: 12419:  9786: 7239: 239: 
15071: 12420:  9787: 7240: 240: // GET request
15072: 12421:  9788: 7241: 241: const data = await handler.get<DataType>(url);
15073: 12422:  9789: 7242: 242: 
15074: 12423:  9790: 7243: 243: // POST request
15075: 12424:  9791: 7244: 244: const response = await handler.post<ResponseType>(
15076: 12425:  9792: 7245: 245:   url,
15077: 12426:  9793: 7246: 246:   requestData
15078: 12427:  9794: 7247: 247: );
15079: 12428:  9795: 7248: 248: ```
15080: 12429:  9796: 7249: 249: 
15081: 12430:  9797: 7250: 250: ### With Options
15082: 12431:  9798: 7251: 251: 
15083: 12432:  9799: 7252: 252: ```typescript
15084: 12433:  9800: 7253: 253: const response = await handler.get<CardData>(url, {
15085: 12434:  9801: 7254: 254:   timeout: 5000,
15086: 12435:  9802: 7255: 255:   retries: 2,
15087: 12436:  9803: 7256: 256:   cache: true,
15088: 12437:  9804: 7257: 257:   headers: {
15089: 12438:  9805: 7258: 258:     "Authorization": `Bearer ${token}`
15090: 12439:  9806: 7259: 259:   }
15091: 12440:  9807: 7260: 260: });
15092: 12441:  9808: 7261: 261: ```
15093: 12442:  9809: 7262: 262: 
15094: 12443:  9810: 7263: 263: ## Best Practices
15095: 12444:  9811: 7264: 264: 
15096: 12445:  9812: 7265: 265: ### Error Management
15097: 12446:  9813: 7266: 266: 
15098: 12447:  9814: 7267: 267: - Implement proper error handling
15099: 12448:  9815: 7268: 268: - Use retry logic appropriately
15100: 12449:  9816: 7269: 269: - Log failed requests
15101: 12450:  9817: 7270: 270: 
15102: 12451:  9818: 7271: 271: ### Performance
15103: 12452:  9819: 7272: 272: 
15104: 12453:  9820: 7273: 273: - Enable caching when appropriate
15105: 12454:  9821: 7274: 274: - Use rate limiting
15106: 12455:  9822: 7275: 275: - Monitor response times
15107: 12456:  9823: 7276: 276: 
15108: 12457:  9824: 7277: 277: ### Security
15109: 12458:  9825: 7278: 278: 
15110: 12459:  9826: 7279: 279: - Validate URLs
15111: 12460:  9827: 7280: 280: - Secure sensitive headers
15112: 12461:  9828: 7281: 281: - Monitor request patterns
15113: 12462:  9829: 7282: 282: 
15114: 12463:  9830: 7283: 283: ## Related Components
15115: 12464:  9831: 7284: 284: 
15116: 12465:  9832: 7285: 285: - [Error Handler](./error-handling)
15117: 12466:  9833: 7286: 286: - [Logger](./logging)
15118: 12467:  9834: 7287: 287: - [Cache System](./cache)
15119: 12468:  9835: 7288: 288: 
15120: 12469:  9836: 7289: 289: ## Troubleshooting
15121: 12470:  9837: 7290: 290: 
15122: 12471:  9838: 7291: 291: ### Common Issues
15123: 12472:  9839: 7292: 292: 
15124: 12473:  9840: 7293: 293: 1. Request Timeouts:
15125: 12474:  9841: 7294: 294:    - Check network connectivity
15126: 12475:  9842: 7295: 295:    - Verify timeout settings
15127: 12476:  9843: 7296: 296:    - Monitor server response times
15128: 12477:  9844: 7297: 297: 
15129: 12478:  9845: 7298: 298: 2. Rate Limiting:
15130: 12479:  9846: 7299: 299:    - Review rate limit settings
15131: 12480:  9847: 7300: 300:    - Check queue processing
15132: 12481:  9848: 7301: 301:    - Monitor request patterns
15133: 12482:  9849: 7302: 302: 
15134: 12483:  9850: 7303: 303: 3. Cache Issues:
15135: 12484:  9851: 7304: 304:    - Verify cache configuration
15136: 12485:  9852: 7305: 305:    - Check TTL settings
15137: 12486:  9853: 7306: 306:    - Monitor cache hit rates
15138: 12487:  9854: 7307: </file>
15139: 12488:  9855: 7308: 
15140: 12489:  9856: 7309: <file path="utils/sync-logger.md">
15141: 12490:  9857: 7310:   1: # Sync Logger Utility
15142: 12491:  9858: 7311:   2: 
15143: 12492:  9859: 7312:   3: ## Overview
15144: 12493:  9860: 7313:   4: 
15145: 12494:  9861: 7314:   5: The Sync Logger (`syncLogger.ts`) provides specialized logging functionality for synchronization operations. It offers detailed tracking of card and price synchronization processes, including group details, card information, and sync results.
15146: 12495:  9862: 7315:   6: 
15147: 12496:  9863: 7316:   7: ## Features
15148: 12497:  9864: 7317:   8: 
15149: 12498:  9865: 7318:   9: - Detailed sync operation logging
15150: 12499:  9866: 7319:  10: - Card and price details tracking
15151: 12500:  9867: 7320:  11: - Group processing information
15152: 12501:  9868: 7321:  12: - Progress monitoring
15153: 12502:  9869: 7322:  13: - Results summarization
15154: 12503:  9870: 7323:  14: - Support for dry run operations
15155: 12504:  9871: 7324:  15: 
15156: 12505:  9872: 7325:  16: ## Core Interfaces
15157: 12506:  9873: 7326:  17: 
15158: 12507:  9874: 7327:  18: ### Logger Options
15159: 12508:  9875: 7328:  19: 
15160: 12509:  9876: 7329:  20: ```typescript
15161: 12510:  9877: 7330:  21: interface SyncLoggerOptions {
15162: 12511:  9878: 7331:  22:   type: "manual" | "scheduled" | "both";
15163: 12512:  9879: 7332:  23:   limit?: number;
15164: 12513:  9880: 7333:  24:   dryRun?: boolean;
15165: 12514:  9881: 7334:  25:   groupId?: string;
15166: 12515:  9882: 7335:  26:   batchSize?: number;
15167: 12516:  9883: 7336:  27: }
15168: 12517:  9884: 7337:  28: ```
15169: 12518:  9885: 7338:  29: 
15170: 12519:  9886: 7339:  30: ### Card Details
15171: 12520:  9887: 7340:  31: 
15172: 12521:  9888: 7341:  32: ```typescript
15173: 12522:  9889: 7342:  33: interface CardDetails {
15174: 12523:  9890: 7343:  34:   id: number;
15175: 12524:  9891: 7344:  35:   name: string;
15176: 12525:  9892: 7345:  36:   groupId: string;
15177: 12526:  9893: 7346:  37:   normalPrice?: number;
15178: 12527:  9894: 7347:  38:   foilPrice?: number;
15179: 12528:  9895: 7348:  39:   rawPrices: Array<{
15180: 12529:  9896: 7349:  40:     type: "Normal" | "Foil";
15181: 12530:  9897: 7350:  41:     price: number;
15182: 12531:  9898: 7351:  42:     groupId: string;
15183: 12532:  9899: 7352:  43:   }>;
15184: 12533:  9900: 7353:  44:   imageUrl?: string;
15185: 12534:  9901: 7354:  45:   storageImageUrl?: string;
15186: 12535:  9902: 7355:  46: }
15187: 12536:  9903: 7356:  47: ```
15188: 12537:  9904: 7357:  48: 
15189: 12538:  9905: 7358:  49: ### Sync Results
15190: 12539:  9906: 7359:  50: 
15191: 12540:  9907: 7360:  51: ```typescript
15192: 12541:  9908: 7361:  52: interface SyncResults {
15193: 12542:  9909: 7362:  53:   success: number;
15194: 12543:  9910: 7363:  54:   failures: number;
15195: 12544:  9911: 7364:  55:   groupId?: string;
15196: 12545:  9912: 7365:  56:   type: "Manual" | "Scheduled";
15197: 12546:  9913: 7366:  57:   imagesProcessed?: number;
15198: 12547:  9914: 7367:  58:   imagesUpdated?: number;
15199: 12548:  9915: 7368:  59: }
15200: 12549:  9916: 7369:  60: ```
15201: 12550:  9917: 7370:  61: 
15202: 12551:  9918: 7371:  62: ## Usage Examples
15203: 12552:  9919: 7372:  63: 
15204: 12553:  9920: 7373:  64: ### Basic Usage
15205: 12554:  9921: 7374:  65: 
15206: 12555:  9922: 7375:  66: ```typescript
15207: 12556:  9923: 7376:  67: const logger = new SyncLogger({
15208: 12557:  9924: 7377:  68:   type: "manual",
15209: 12558:  9925: 7378:  69:   dryRun: true,
15210: 12559:  9926: 7379:  70:   limit: 10,
15211: 12560:  9927: 7380:  71:   batchSize: 25
15212: 12561:  9928: 7381:  72: });
15213: 12562:  9929: 7382:  73: 
15214: 12563:  9930: 7383:  74: await logger.start();
15215: 12564:  9931: 7384:  75: await logger.logGroupFound(totalGroups);
15216: 12565:  9932: 7385:  76: await logger.logCardDetails(cardDetails);
15217: 12566:  9933: 7386:  77: await logger.finish();
15218: 12567:  9934: 7387:  78: ```
15219: 12568:  9935: 7388:  79: 
15220: 12569:  9936: 7389:  80: ### Sync Process Logging
15221: 12570:  9937: 7390:  81: 
15222: 12571:  9938: 7391:  82: ```typescript
15223: 12572:  9939: 7392:  83: // Initialize logger
15224: 12573:  9940: 7393:  84: const logger = new SyncLogger({
15225: 12574:  9941: 7394:  85:   type: options.dryRun ? "manual" : "scheduled",
15226: 12575:  9942: 7395:  86:   limit: options.limit,
15227: 12576:  9943: 7396:  87:   dryRun: options.dryRun,
15228: 12577:  9944: 7397:  88:   groupId: options.groupId
15229: 12578:  9945: 7398:  89: });
15230: 12579:  9946: 7399:  90: 
15231: 12580:  9947: 7400:  91: // Start logging
15232: 12581:  9948: 7401:  92: await logger.start();
15233: 12582:  9949: 7402:  93: 
15234: 12583:  9950: 7403:  94: // Log group information
15235: 12584:  9951: 7404:  95: await logger.logGroupDetails(groupId, products.length, prices.length);
15236: 12585:  9952: 7405:  96: 
15237: 12586:  9953: 7406:  97: // Log individual card details
15238: 12587:  9954: 7407:  98: await logger.logCardDetails({
15239: 12588:  9955: 7408:  99:   id: product.productId,
15240: 12589:  9956: 7409: 100:   name: product.name,
15241: 12590:  9957: 7410: 101:   groupId: product.groupId.toString(),
15242: 12591:  9958: 7411: 102:   normalPrice: normalPrice,
15243: 12592:  9959: 7412: 103:   foilPrice: foilPrice,
15244: 12593:  9960: 7413: 104:   rawPrices: pricesArray
15245: 12594:  9961: 7414: 105: });
15246: 12595:  9962: 7415: 106: 
15247: 12596:  9963: 7416: 107: // Log final results
15248: 12597:  9964: 7417: 108: await logger.logSyncResults({
15249: 12598:  9965: 7418: 109:   success: processedCount,
15250: 12599:  9966: 7419: 110:   failures: errorCount,
15251: 12600:  9967: 7420: 111:   type: "Manual",
15252: 12601:  9968: 7421: 112:   imagesProcessed: 100,
15253: 12602:  9969: 7422: 113:   imagesUpdated: 25
15254: 12603:  9970: 7423: 114: });
15255: 12604:  9971: 7424: 115: ```
15256: 12605:  9972: 7425: 116: 
15257: 12606:  9973: 7426: 117: ## Core Methods
15258: 12607:  9974: 7427: 118: 
15259: 12608:  9975: 7428: 119: ### Start Logging
15260: 12609:  9976: 7429: 120: 
15261: 12610:  9977: 7430: 121: ```typescript
15262: 12611:  9978: 7431: 122: async start(): Promise<void> {
15263: 12612:  9979: 7432: 123:   console.log("\nStarting sync test...");
15264: 12613:  9980: 7433: 124:   console.log(`Type: ${this.options.type}`);
15265: 12614:  9981: 7434: 125:   if (this.options.limit) console.log(`Limit: ${this.options.limit} cards`);
15266: 12615:  9982: 7435: 126:   console.log(`Dry Run: ${this.options.dryRun ? "true" : "false"}`);
15267: 12616:  9983: 7436: 127:   console.log("\n=== Fetching Raw Data ===");
15268: 12617:  9984: 7437: 128: }
15269: 12618:  9985: 7438: 129: ```
15270: 12619:  9986: 7439: 130: 
15271: 12620:  9987: 7440: 131: ### Group Logging
15272: 12621:  9988: 7441: 132: 
15273: 12622:  9989: 7442: 133: ```typescript
15274: 12623:  9990: 7443: 134: async logGroupDetails(
15275: 12624:  9991: 7444: 135:   groupId: string,
15276: 12625:  9992: 7445: 136:   products: number,
15277: 12626:  9993: 7446: 137:   prices: number
15278: 12627:  9994: 7447: 138: ): Promise<void> {
15279: 12628:  9995: 7448: 139:   this.groups.set(groupId, {products, prices});
15280: 12629:  9996: 7449: 140:   console.log(
15281: 12630:  9997: 7450: 141:     `Group ${groupId} has ${products} products and ${prices} prices`
15282: 12631:  9998: 7451: 142:   );
15283: 12632:  9999: 7452: 143: }
15284: 12633: 10000: 7453: 144: ```
15285: 12634: 10001: 7454: 145: 
15286: 12635: 10002: 7455: 146: ### Card Details Logging
15287: 12636: 10003: 7456: 147: 
15288: 12637: 10004: 7457: 148: ```typescript
15289: 12638: 10005: 7458: 149: async logCardDetails(details: CardDetails): Promise<void> {
15290: 12639: 10006: 7459: 150:   this.cards.push(details);
15291: 12640: 10007: 7460: 151:   if (this.cards.length === 1) {
15292: 12641: 10008: 7461: 152:     console.log("\n=== Card Details ===");
15293: 12642: 10009: 7462: 153:   }
15294: 12643: 10010: 7463: 154: 
15295: 12644: 10011: 7464: 155:   console.log(`Card: ${details.name} (${details.groupId || "UNKNOWN"})`);
15296: 12645: 10012: 7465: 156:   console.log(`- ID: ${details.id}`);
15297: 12646: 10013: 7466: 157:   console.log(`- Group ID: ${details.groupId || "UNKNOWN"}`);
15298: 12647: 10014: 7467: 158: 
15299: 12648: 10015: 7468: 159:   if (details.rawPrices.length > 0) {
15300: 12649: 10016: 7469: 160:     console.log("- Raw Prices:");
15301: 12650: 10017: 7470: 161:     details.rawPrices.forEach((price) => {
15302: 12651: 10018: 7471: 162:       console.log(
15303: 12652: 10019: 7472: 163:         `  > ${price.type}: $${price.price.toFixed(2)} ` +
15304: 12653: 10020: 7473: 164:         `(Group: ${price.groupId})`
15305: 12654: 10021: 7474: 165:       );
15306: 12655: 10022: 7475: 166:     });
15307: 12656: 10023: 7476: 167:   }
15308: 12657: 10024: 7477: 168: }
15309: 12658: 10025: 7478: 169: ```
15310: 12659: 10026: 7479: 170: 
15311: 12660: 10027: 7480: 171: ## Output Examples
15312: 12661: 10028: 7481: 172: 
15313: 12662: 10029: 7482: 173: ### Sync Start
15314: 12663: 10030: 7483: 174: 
15315: 12664: 10031: 7484: 175: ```text
15316: 12665: 10032: 7485: 176: Starting sync test...
15317: 12666: 10033: 7486: 177: Type: manual
15318: 12667: 10034: 7487: 178: Limit: 10 cards
15319: 12668: 10035: 7488: 179: Dry Run: true
15320: 12669: 10036: 7489: 180: 
15321: 12670: 10037: 7490: 181: === Fetching Raw Data ===
15322: 12671: 10038: 7491: 182: ```
15323: 12672: 10039: 7492: 183: 
15324: 12673: 10040: 7493: 184: ### Group Information
15325: 12674: 10041: 7494: 185: 
15326: 12675: 10042: 7495: 186: ```text
15327: 12676: 10043: 7496: 187: Found 15 groups
15328: 12677: 10044: 7497: 188: Group 23783 has 100 products and 200 prices
15329: 12678: 10045: 7498: 189: ```
15330: 12679: 10046: 7499: 190: 
15331: 12680: 10047: 7500: 191: ### Card Details Output Example
15332: 12681: 10048: 7501: 192: 
15333: 12682: 10049: 7502: 193: ```text
15334: 12683: 10050: 7503: 194: === Card Details ===
15335: 12684: 10051: 7504: 195: Card: Cloud (23783)
15336: 12685: 10052: 7505: 196: - ID: 477236
15337: 12686: 10053: 7506: 197: - Group ID: 23783
15338: 12687: 10054: 7507: 198: - Raw Prices:
15339: 12688: 10055: 7508: 199:   > Normal: $1.99 (Group: 23783)
15340: 12689: 10056: 7509: 200:   > Foil: $5.99 (Group: 23783)
15341: 12690: 10057: 7510: 201: - Image URL: https://example.com/image.jpg
15342: 12691: 10058: 7511: 202: - Storage URL: gs://bucket/image.jpg
15343: 12692: 10059: 7512: 203: ```
15344: 12693: 10060: 7513: 204: 
15345: 12694: 10061: 7514: 205: ## Best Practices
15346: 12695: 10062: 7515: 206: 
15347: 12696: 10063: 7516: 207: 1. **Consistent Usage**:
15348: 12697: 10064: 7517: 208: 
15349: 12698: 10065: 7518: 209:    ```typescript
15350: 12699: 10066: 7519: 210:    const logger = new SyncLogger(options);
15351: 12700: 10067: 7520: 211:    await logger.start();
15352: 12701: 10068: 7521: 212:    try {
15353: 12702: 10069: 7522: 213:      // Sync operations
15354: 12703: 10070: 7523: 214:    } finally {
15355: 12704: 10071: 7524: 215:      await logger.finish();
15356: 12705: 10072: 7525: 216:    }
15357: 12706: 10073: 7526: 217:    ```
15358: 12707: 10074: 7527: 218: 
15359: 12708: 10075: 7528: 219: 2. **Detailed Logging**:
15360: 12709: 10076: 7529: 220: 
15361: 12710: 10077: 7530: 221:    ```typescript
15362: 12711: 10078: 7531: 222:    await logger.logCardDetails({
15363: 12712: 10079: 7532: 223:      id: product.id,
15364: 12713: 10080: 7533: 224:      name: product.name,
15365: 12714: 10081: 7534: 225:      groupId: product.groupId,
15366: 12715: 10082: 7535: 226:      normalPrice: product.prices.normal,
15367: 12716: 10083: 7536: 227:      foilPrice: product.prices.foil,
15368: 12717: 10084: 7537: 228:      rawPrices: product.allPrices,
15369: 12718: 10085: 7538: 229:      imageUrl: product.imageUrl,
15370: 12719: 10086: 7539: 230:      storageImageUrl: product.storageUrl
15371: 12720: 10087: 7540: 231:    });
15372: 12721: 10088: 7541: 232:    ```
15373: 12722: 10089: 7542: 233: 
15374: 12723: 10090: 7543: 234: 3. **Error Tracking**:
15375: 12724: 10091: 7544: 235: 
15376: 12725: 10092: 7545: 236:    ```typescript
15377: 12726: 10093: 7546: 237:    try {
15378: 12727: 10094: 7547: 238:      await processGroup(group);
15379: 12728: 10095: 7548: 239:    } catch (error) {
15380: 12729: 10096: 7549: 240:      await logger.logSyncResults({
15381: 12730: 10097: 7550: 241:        success: processed,
15382: 12731: 10098: 7551: 242:        failures: failures + 1,
15383: 12732: 10099: 7552: 243:        type: "Manual"
15384: 12733: 10100: 7553: 244:      });
15385: 12734: 10101: 7554: 245:    }
15386: 12735: 10102: 7555: 246:    ```
15387: 12736: 10103: 7556: 247: 
15388: 12737: 10104: 7557: 248: ## Related Components
15389: 12738: 10105: 7558: 249: 
15390: 12739: 10106: 7559: 250: - [Logger](./logging)
15391: 12740: 10107: 7560: 251: - [Error Handling](./error-handling)
15392: 12741: 10108: 7561: 252: - [Progress Tracking](./progress)
15393: 12742: 10109: 7562: 253: 
15394: 12743: 10110: 7563: 254: ## Troubleshooting
15395: 12744: 10111: 7564: 255: 
15396: 12745: 10112: 7565: 256: ### Common Issues
15397: 12746: 10113: 7566: 257: 
15398: 12747: 10114: 7567: 258: 1. Missing Information:
15399: 12748: 10115: 7568: 259:    - Verify all required fields are provided
15400: 12749: 10116: 7569: 260:    - Check logging options configuration
15401: 12750: 10117: 7570: 261:    - Ensure proper error handling
15402: 12751: 10118: 7571: 262: 
15403: 12752: 10119: 7572: 263: 2. Performance Impact:
15404: 12753: 10120: 7573: 264:    - Use appropriate batch sizes
15405: 12754: 10121: 7574: 265:    - Monitor memory usage
15406: 12755: 10122: 7575: 266:    - Implement log rotation
15407: 12756: 10123: 7576: 267: 
15408: 12757: 10124: 7577: 268: 3. Output Formatting:
15409: 12758: 10125: 7578: 269:    - Verify console output formatting
15410: 12759: 10126: 7579: 270:    - Check price formatting
15411: 12760: 10127: 7580: 271:    - Validate date/time formats
15412: 12761: 10128: 7581: </file>
15413: 12762: 10129: 7582: 
15414: 12763: 10130: 7583: </repository_files>
15415: 12764: 10131: </file>
15416: 12765: 10132: 
15417: 12766: 10133: <file path="faq.md">
15418: 12767: 10134:   1: # Frequently Asked Questions
15419: 12768: 10135:   2: 
15420: 12769: 10136:   3: ## General
15421: 12770: 10137:   4: 
15422: 12771: 10138:   5: ### What is FFTCG Sync Service?
15423: 12772: 10139:   6: 
15424: 12773: 10140:   7: A Firebase-based service that synchronizes Final Fantasy Trading Card Game data from TCGplayer, including card information, prices, and images.
15425: 12774: 10141:   8: 
15426: 12775: 10142:   9: ### What are the system requirements?
15427: 12776: 10143:  10: 
15428: 12777: 10144:  11: - Node.js 18 or higher
15429: 12778: 10145:  12: - Firebase CLI
15430: 12779: 10146:  13: - Firebase project with Firestore and Storage enabled
15431: 12780: 10147:  14: - 1GB minimum memory allocation
15432: 12781: 10148:  15: - Sufficient storage quota for card images
15433: 12782: 10149:  16: 
15434: 12783: 10150:  17: ### How often does the service sync data?
15435: 12784: 10151:  18: 
15436: 12785: 10152:  19: - Cards: Daily at 21:00 UTC
15437: 12786: 10153:  20: - Prices: Daily at 21:30 UTC
15438: 12787: 10154:  21: - Images: During card synchronization
15439: 12788: 10155:  22: 
15440: 12789: 10156:  23: ## Synchronization
15441: 12790: 10157:  24: 
15442: 12791: 10158:  25: ### How do I manually trigger a sync?
15443: 12792: 10159:  26: 
15444: 12793: 10160:  27: ```typescript
15445: 12794: 10161:  28: // For cards
15446: 12795: 10162:  29: await syncCards({
15447: 12796: 10163:  30:   dryRun: false,
15448: 12797: 10164:  31:   limit: undefined,
15449: 12798: 10165:  32:   groupId: undefined
15450: 12799: 10166:  33: });
15451: 12800: 10167:  34: 
15452: 12801: 10168:  35: // For prices
15453: 12802: 10169:  36: await syncPrices({
15454: 12803: 10170:  37:   dryRun: false,
15455: 12804: 10171:  38:   limit: undefined,
15456: 12805: 10172:  39:   groupId: undefined
15457: 12806: 10173:  40: });
15458: 12807: 10174:  41: ```
15459: 12808: 10175:  42: 
15460: 12809: 10176:  43: ### What is dry run mode?
15461: 12810: 10177:  44: 
15462: 12811: 10178:  45: Dry run mode (`dryRun: true`) allows you to test synchronization without making any changes to the database. It's useful for:
15463: 12812: 10179:  46: 
15464: 12813: 10180:  47: - Validating data before actual sync
15465: 12814: 10181:  48: - Testing configuration changes
15466: 12815: 10182:  49: - Debugging sync issues
15467: 12816: 10183:  50: 
15468: 12817: 10184:  51: ### How do I sync specific card groups?
15469: 12818: 10185:  52: 
15470: 12819: 10186:  53: ```typescript
15471: 12820: 10187:  54: const options = {
15472: 12821: 10188:  55:   groupId: "23783",  // Specific group ID
15473: 12822: 10189:  56:   dryRun: false
15474: 12823: 10190:  57: };
15475: 12824: 10191:  58: await syncCards(options);
15476: 12825: 10192:  59: ```
15477: 12826: 10193:  60: 
15478: 12827: 10194:  61: ### Why are some syncs skipped?
15479: 12828: 10195:  62: 
15480: 12829: 10196:  63: Syncs may be skipped when:
15481: 12830: 10197:  64: 
15482: 12831: 10198:  65: - Data hasn't changed (verified via hash comparison)
15483: 12832: 10199:  66: - Rate limits are reached
15484: 12833: 10200:  67: - Previous sync is still in progress
15485: 12834: 10201:  68: - Network issues occur
15486: 12835: 10202:  69: 
15487: 12836: 10203:  70: ## Image Processing
15488: 12837: 10204:  71: 
15489: 12838: 10205:  72: ### What image formats are supported?
15490: 12839: 10206:  73: 
15491: 12840: 10207:  74: Currently, only JPEG images are supported. The service:
15492: 12841: 10208:  75: 
15493: 12842: 10209:  76: - Validates JPEG format
15494: 12843: 10210:  77: - Checks file signatures
15495: 12844: 10211:  78: - Enforces size limits (5MB max)
15496: 12845: 10212:  79: 
15497: 12846: 10213:  80: ### How are images optimized?
15498: 12847: 10214:  81: 
15499: 12848: 10215:  82: Images are processed in two ways:
15500: 12849: 10216:  83: 
15501: 12850: 10217:  84: - Standard resolution (200px width)
15502: 12851: 10218:  85: - High resolution (400px width)
15503: 12852: 10219:  86: 
15504: 12853: 10220:  87: Both versions are:
15505: 12854: 10221:  88: 
15506: 12855: 10222:  89: - Compressed using mozjpeg
15507: 12856: 10223:  90: - Progressive loading enabled
15508: 12857: 10224:  91: - Quality optimized (85-90%)
15509: 12858: 10225:  92: 
15510: 12859: 10226:  93: ### Why are some images not updating?
15511: 12860: 10227:  94: 
15512: 12861: 10228:  95: Images might not update if:
15513: 12862: 10229:  96: 
15514: 12863: 10230:  97: - Hash matches existing image
15515: 12864: 10231:  98: - Validation fails
15516: 12865: 10232:  99: - Storage quota is exceeded
15517: 12866: 10233: 100: - Network errors occur
15518: 12867: 10234: 101: 
15519: 12868: 10235: 102: ## Firebase Integration
15520: 12869: 10236: 103: 
15521: 12870: 10237: 104: ### How is data stored in Firestore?
15522: 12871: 10238: 105: 
15523: 12872: 10239: 106: Data is organized in collections:
15524: 12873: 10240: 107: 
15525: 12874: 10241: 108: - `cards`: Card information
15526: 12875: 10242: 109: - `prices`: Price history
15527: 12876: 10243: 110: - `cardHashes`: Change detection
15528: 12877: 10244: 111: - `priceHashes`: Price updates
15529: 12878: 10245: 112: - `imageMetadata`: Image information
15530: 12879: 10246: 113: - `syncMetadata`: Sync status
15531: 12880: 10247: 114: - `logs`: System logs
15532: 12881: 10248: 115: 
15533: 12882: 10249: 116: ### How are images stored?
15534: 12883: 10250: 117: 
15535: 12884: 10251: 118: Images are stored in Firebase Storage:
15536: 12885: 10252: 119: 
15537: 12886: 10253: 120: - Path format: `card-images/{groupId}/{productId}_{resolution}.jpg`
15538: 12887: 10254: 121: - Metadata includes hash and timestamp
15539: 12888: 10255: 122: - URLs are signed for long-term access
15540: 12889: 10256: 123: 
15541: 12890: 10257: 124: ### What happens if Firebase quotas are exceeded?
15542: 12891: 10258: 125: 
15543: 12892: 10259: 126: The service will:
15544: 12893: 10260: 127: 
15545: 12894: 10261: 128: 1. Log the quota error
15546: 12895: 10262: 129: 2. Pause operations
15547: 12896: 10263: 130: 3. Retry with exponential backoff
15548: 12897: 10264: 131: 4. Skip non-critical updates
15549: 12898: 10265: 132: 
15550: 12899: 10266: 133: ## Rate Limiting
15551: 12900: 10267: 134: 
15552: 12901: 10268: 135: ### How does rate limiting work?
15553: 12902: 10269: 136: 
15554: 12903: 10270: 137: ```typescript
15555: 12904: 10271: 138: const rateLimiter = {
15556: 12905: 10272: 139:   tokens: 100,
15557: 12906: 10273: 140:   refillRate: 10,
15558: 12907: 10274: 141:   interval: 1000
15559: 12908: 10275: 142: };
15560: 12909: 10276: 143: ```
15561: 12910: 10277: 144: 
15562: 12911: 10278: 145: - Token bucket algorithm
15563: 12912: 10279: 146: - Configurable limits
15564: 12913: 10280: 147: - Automatic retry handling
15565: 12914: 10281: 148: 
15566: 12915: 10282: 149: ### What are the default rate limits?
15567: 12916: 10283: 150: 
15568: 12917: 10284: 151: - API requests: 100 per minute
15569: 12918: 10285: 152: - Image processing: 25 concurrent operations
15570: 12919: 10286: 153: - Database writes: Batch size of 500
15571: 12920: 10287: 154: - Storage operations: 10 concurrent uploads
15572: 12921: 10288: 155: 
15573: 12922: 10289: 156: ### How do I adjust rate limits?
15574: 12923: 10290: 157: 
15575: 12924: 10291: 158: Modify the configuration in your environment:
15576: 12925: 10292: 159: 
15577: 12926: 10293: 160: ```typescript
15578: 12927: 10294: 161: const runtimeOpts = {
15579: 12928: 10295: 162:   timeoutSeconds: 540,
15580: 12929: 10296: 163:   memory: "1GiB",
15581: 12930: 10297: 164: } as const;
15582: 12931: 10298: 165: ```
15583: 12932: 10299: 166: 
15584: 12933: 10300: 167: ## Caching
15585: 12934: 10301: 168: 
15586: 12935: 10302: 169: ### What is cached?
15587: 12936: 10303: 170: 
15588: 12937: 10304: 171: - Card data: 1 hour TTL
15589: 12938: 10305: 172: - Image metadata: 1 hour TTL
15590: 12939: 10306: 173: - Image buffers: 5 minutes TTL
15591: 12940: 10307: 174: - API responses: Request-specific TTL
15592: 12941: 10308: 175: 
15593: 12942: 10309: 176: ### How does the cache hierarchy work?
15594: 12943: 10310: 177: 
15595: 12944: 10311: 178: 1. Memory cache (L1)
15596: 12945: 10312: 179: 2. LRU cache (L2)
15597: 12946: 10313: 180: 3. Firestore (persistent)
15598: 12947: 10314: 181: 
15599: 12948: 10315: 182: ### How do I clear the cache?
15600: 12949: 10316: 183: 
15601: 12950: 10317: 184: ```typescript
15602: 12951: 10318: 185: // Clear specific cache
15603: 12952: 10319: 186: imageCache.clear();
15604: 12953: 10320: 187: cardCache.clear();
15605: 12954: 10321: 188: 
15606: 12955: 10322: 189: // Clear all caches
15607: 12956: 10323: 190: await clearAllCaches();
15608: 12957: 10324: 191: ```
15609: 12958: 10325: 192: 
15610: 12959: 10326: 193: ## Error Handling
15611: 12960: 10327: 194: 
15612: 12961: 10328: 195: ### How are errors logged?
15613: 12962: 10329: 196: 
15614: 12963: 10330: 197: ```typescript
15615: 12964: 10331: 198: // Error logging with context
15616: 12965: 10332: 199: await logDetailedError(
15617: 12966: 10333: 200:   error,
15618: 12967: 10334: 201:   "operationContext",
15619: 12968: 10335: 202:   { metadata: "details" },
15620: 12969: 10336: 203:   "ERROR"
15621: 12970: 10337: 204: );
15622: 12971: 10338: 205: ```
15623: 12972: 10339: 206: 
15624: 12973: 10340: 207: ### What retry mechanisms are in place?
15625: 12974: 10341: 208: 
15626: 12975: 10342: 209: - Maximum 3 retries
15627: 12976: 10343: 210: - Exponential backoff
15628: 12977: 10344: 211: - Configurable delay
15629: 12978: 10345: 212: - Operation-specific handling
15630: 12979: 10346: 213: 
15631: 12980: 10347: 214: ### How do I debug sync failures?
15632: 12981: 10348: 215: 
15633: 12982: 10349: 216: 1. Check sync metadata collection
15634: 12983: 10350: 217: 2. Review error logs
15635: 12984: 10351: 218: 3. Use dry run mode
15636: 12985: 10352: 219: 4. Monitor rate limits
15637: 12986: 10353: 220: 
15638: 12987: 10354: 221: ## Deployment
15639: 12988: 10355: 222: 
15640: 12989: 10356: 223: ### How do I deploy updates?
15641: 12990: 10357: 224: 
15642: 12991: 10358: 225: ```bash
15643: 12992: 10359: 226: # Deploy all functions
15644: 12993: 10360: 227: npm run deploy
15645: 12994: 10361: 228: 
15646: 12995: 10362: 229: # Deploy specific function
15647: 12996: 10363: 230: firebase deploy --only functions:functionName
15648: 12997: 10364: 231: ```
15649: 12998: 10365: 232: 
15650: 12999: 10366: 233: ### How do I test before deployment?
15651: 13000: 10367: 234: 
15652: 13001: 10368: 235: ```bash
15653: 13002: 10369: 236: # Run tests
15654: 13003: 10370: 237: npm run test:images
15655: 13004: 10371: 238: 
15656: 13005: 10372: 239: # Validate sync
15657: 13006: 10373: 240: npm run validate-sync
15658: 13007: 10374: 241: 
15659: 13008: 10375: 242: # Local emulation
15660: 13009: 10376: 243: npm run serve
15661: 13010: 10377: 244: ```
15662: 13011: 10378: 245: 
15663: 13012: 10379: 246: ### What's the deployment rollback process?
15664: 13013: 10380: 247: 
15665: 13014: 10381: 248: 1. Use Firebase Console
15666: 13015: 10382: 249: 2. Select previous version
15667: 13016: 10383: 250: 3. Click "Rollback"
15668: 13017: 10384: 251: 4. Verify functionality
15669: 13018: 10385: 252: 
15670: 13019: 10386: 253: ## Monitoring
15671: 13020: 10387: 254: 
15672: 13021: 10388: 255: ### How do I monitor sync status?
15673: 13022: 10389: 256: 
15674: 13023: 10390: 257: 1. Check sync metadata collection
15675: 13024: 10391: 258: 2. Review logging dashboard
15676: 13025: 10392: 259: 3. Use health check endpoint
15677: 13026: 10393: 260: 4. Monitor performance metrics
15678: 13027: 10394: 261: 
15679: 13028: 10395: 262: ### What metrics are available?
15680: 13029: 10396: 263: 
15681: 13030: 10397: 264: - Sync completion rates
15682: 13031: 10398: 265: - Processing times
15683: 13032: 10399: 266: - Error rates
15684: 13033: 10400: 267: - Cache hit rates
15685: 13034: 10401: 268: - Storage usage
15686: 13035: 10402: 269: - API response times
15687: 13036: 10403: 270: 
15688: 13037: 10404: 271: ### How do I set up alerts?
15689: 13038: 10405: 272: 
15690: 13039: 10406: 273: Configure Firebase Alert conditions for:
15691: 13040: 10407: 274: 
15692: 13041: 10408: 275: - Function failures
15693: 13042: 10409: 276: - High error rates
15694: 13043: 10410: 277: - Quota approaching limits
15695: 13044: 10411: 278: - Sync failures
15696: 13045: 10412: 279: - Performance degradation
15697: 13046: 10413: </file>
15698: 13047: 10414: 
15699: 13048: 10415: <file path="index.md">
15700: 13049: 10416:  1: ---
15701: 13050: 10417:  2: layout: home
15702: 13051: 10418:  3: hero:
15703: 13052: 10419:  4:   name: FFTCG Sync Service
15704: 13053: 10420:  5:   text: Card and Price Synchronization Service
15705: 13054: 10421:  6:   tagline: Automated synchronization and management of FFTCG card data and prices
15706: 13055: 10422:  7:   actions:
15707: 13056: 10423:  8:     - theme: brand
15708: 13057: 10424:  9:       text: Get Started
15709: 13058: 10425: 10:       link: /introduction
15710: 13059: 10426: 11:     - theme: alt
15711: 13060: 10427: 12:       text: View API
15712: 13061: 10428: 13:       link: /api/
15713: 13062: 10429: 14: features:
15714: 13063: 10430: 15:   - title: Card Synchronization
15715: 13064: 10431: 16:     details: Automatically sync card information from external sources
15716: 13065: 10432: 17:   - title: Price Tracking
15717: 13066: 10433: 18:     details: Monitor and update card prices in real-time
15718: 13067: 10434: 19:   - title: Image Processing
15719: 13068: 10435: 20:     details: Automated image downloading, optimization, and storage
15720: 13069: 10436: 21:   - title: Caching System
15721: 13070: 10437: 22:     details: Efficient caching mechanism for improved performance
15722: 13071: 10438: 23: ---
15723: 13072: 10439: </file>
15724: 13073: 10440: 
15725: 13074: 10441: <file path="introduction.md">
15726: 13075: 10442:  1: # FFTCG Sync Service Documentation
15727: 13076: 10443:  2: 
15728: 13077: 10444:  3: ## Overview
15729: 13078: 10445:  4: 
15730: 13079: 10446:  5: FFTCG Sync Service is a specialized Firebase application designed to synchronize Final Fantasy Trading Card Game (FFTCG) card data, prices, and images. The service provides automated synchronization of card information, price tracking, and image optimization through Firebase Functions.
15731: 13080: 10447:  6: 
15732: 13081: 10448:  7: ## Core Features
15733: 13082: 10449:  8: 
15734: 13083: 10450:  9: ### Card Synchronization
15735: 13084: 10451: 10: 
15736: 13085: 10452: 11: - Automated card data synchronization from TCGPlayer
15737: 13086: 10453: 12: - Batch processing for efficient data handling
15738: 13087: 10454: 13: - Data validation and error handling
15739: 13088: 10455: 14: - Support for dry-run operations
15740: 13089: 10456: 15: 
15741: 13090: 10457: 16: ### Price Tracking
15742: 13091: 10458: 17: 
15743: 13092: 10459: 18: - Real-time price monitoring
15744: 13093: 10460: 19: - Support for both normal and foil card prices
15745: 13094: 10461: 20: - Price history tracking
15746: 13095: 10462: 21: - Configurable sync intervals
15747: 13096: 10463: 22: 
15748: 13097: 10464: 23: ### Image Processing
15749: 13098: 10465: 24: 
15750: 13099: 10466: 25: - Automatic image downloading and optimization
15751: 13100: 10467: 26: - Multiple resolution support (200w and 400w)
15752: 13101: 10468: 27: - Image compression with quality preservation
15753: 13102: 10469: 28: - Efficient caching system
15754: 13103: 10470: 29: - Firebase Storage integration
15755: 13104: 10471: 30: 
15756: 13105: 10472: 31: ### System Architecture
15757: 13106: 10473: 32: 
15758: 13107: 10474: 33: - Firebase Functions for serverless operation
15759: 13108: 10475: 34: - Firestore for data storage
15760: 13109: 10476: 35: - Firebase Storage for image management
15761: 13110: 10477: 36: - LRU caching for performance optimization
15762: 13111: 10478: 37: 
15763: 13112: 10479: 38: ## Technical Stack
15764: 13113: 10480: 39: 
15765: 13114: 10481: 40: - **Runtime**: Node.js 18
15766: 13115: 10482: 41: - **Framework**: Firebase Functions v6
15767: 13116: 10483: 42: - **Database**: Firestore
15768: 13117: 10484: 43: - **Storage**: Firebase Storage
15769: 13118: 10485: 44: - **Image Processing**: Sharp
15770: 13119: 10486: 45: - **HTTP Client**: Axios
15771: 13120: 10487: 46: - **Caching**: LRU Cache
15772: 13121: 10488: 47: - **Language**: TypeScript
15773: 13122: 10489: 48: 
15774: 13123: 10490: 49: ## Key Components
15775: 13124: 10491: 50: 
15776: 13125: 10492: 51: ### Services
15777: 13126: 10493: 52: 
15778: 13127: 10494: 53: - `cardSync`: Manages card data synchronization
15779: 13128: 10495: 54: - `priceSync`: Handles price updates and tracking
15780: 13129: 10496: 55: 
15781: 13130: 10497: 56: ### Utilities
15782: 13131: 10498: 57: 
15783: 13132: 10499: 58: - `ImageHandler`: Manages image processing and storage
15784: 13133: 10500: 59: - `ImageCompressor`: Handles image optimization
15785: 13134: 10501: 60: - `ImageCache`: Provides caching functionality
15786: 13135: 10502: 61: - `Logger`: Manages application logging
15787: 13136: 10503: 62: - `BatchProcessor`: Handles batch operations
15788: 13137: 10504: 63: 
15789: 13138: 10505: 64: ## Getting Started
15790: 13139: 10506: 65: 
15791: 13140: 10507: 66: To get started with the FFTCG Sync Service, see:
15792: 13141: 10508: 67: 
15793: 13142: 10509: 68: - [Installation Guide](./setup/installation)
15794: 13143: 10510: 69: - [Configuration Guide](./setup/configuration)
15795: 13144: 10511: 70: - [API Documentation](./api/)
15796: 13145: 10512: </file>
15797: 13146: 10513: 
15798: 13147: 10514: <file path="package.json">
15799: 13148: 10515:  1: {
15800: 13149: 10516:  2:   "name": "fftcg-sync-docs",
15801: 13150: 10517:  3:   "version": "1.0.0",
15802: 13151: 10518:  4:   "description": "Documentation for FFTCG Sync Service",
15803: 13152: 10519:  5:   "type": "module",
15804: 13153: 10520:  6:   "scripts": {
15805: 13154: 10521:  7:     "docs:dev": "vitepress dev",
15806: 13155: 10522:  8:     "docs:build": "vitepress build",
15807: 13156: 10523:  9:     "docs:preview": "vitepress preview"
15808: 13157: 10524: 10:   },
15809: 13158: 10525: 11:   "keywords": [],
15810: 13159: 10526: 12:   "author": "",
15811: 13160: 10527: 13:   "license": "ISC",
15812: 13161: 10528: 14:   "devDependencies": {
15813: 13162: 10529: 15:     "@vueuse/core": "^10.7.0",
15814: 13163: 10530: 16:     "firebase": "^10.7.0",
15815: 13164: 10531: 17:     "vitepress": "^1.0.0-rc.31",
15816: 13165: 10532: 18:     "vue": "^3.3.8"
15817: 13166: 10533: 19:   }
15818: 13167: 10534: 20: }
15819: 13168: 10535: </file>
15820: 13169: 10536: 
15821: 13170: 10537: <file path="performance.md">
15822: 13171: 10538:   1: # Performance Guide
15823: 13172: 10539:   2: 
15824: 13173: 10540:   3: ## Optimization Overview
15825: 13174: 10541:   4: 
15826: 13175: 10542:   5: This guide covers performance optimization strategies implemented in the FFTCG Sync Service, including caching, batch processing, memory management, and monitoring.
15827: 13176: 10543:   6: 
15828: 13177: 10544:   7: ## Resource Management
15829: 13178: 10545:   8: 
15830: 13179: 10546:   9: ### Memory Allocation
15831: 13180: 10547:  10: 
15832: 13181: 10548:  11: ```typescript
15833: 13182: 10549:  12: // Default runtime options
15834: 13183: 10550:  13: const runtimeOpts = {
15835: 13184: 10551:  14:   timeoutSeconds: 540,
15836: 13185: 10552:  15:   memory: "1GiB"
15837: 13186: 10553:  16: } as const;
15838: 13187: 10554:  17: ```
15839: 13188: 10555:  18: 
15840: 13189: 10556:  19: Memory optimization techniques:
15841: 13190: 10557:  20: 
15842: 13191: 10558:  21: - Batch processing to control memory usage
15843: 13192: 10559:  22: - Automatic garbage collection
15844: 13193: 10560:  23: - Resource cleanup after operations
15845: 13194: 10561:  24: - Stream processing for large datasets
15846: 13195: 10562:  25: 
15847: 13196: 10563:  26: ### Resource Cleanup
15848: 13197: 10564:  27: 
15849: 13198: 10565:  28: ```typescript
15850: 13199: 10566:  29: async function cleanupResources(): Promise<void> {
15851: 13200: 10567:  30:   // Clear image cache
15852: 13201: 10568:  31:   await imageCache.clear();
15853: 13202: 10569:  32:  
15854: 13203: 10570:  33:   // Force garbage collection if available
15855: 13204: 10571:  34:   global.gc && global.gc();
15856: 13205: 10572:  35:  
15857: 13206: 10573:  36:   // Clear other caches
15858: 13207: 10574:  37:   cardCache.clear();
15859: 13208: 10575:  38: }
15860: 13209: 10576:  39: ```
15861: 13210: 10577:  40: 
15862: 13211: 10578:  41: ## Caching Strategy
15863: 13212: 10579:  42: 
15864: 13213: 10580:  43: ### Multi-Level Caching
15865: 13214: 10581:  44: 
15866: 13215: 10582:  45: ```typescript
15867: 13216: 10583:  46: // L1 Cache (Memory)
15868: 13217: 10584:  47: private l1Cache = new Map<string, T>();
15869: 13218: 10585:  48: 
15870: 13219: 10586:  49: // L2 Cache (LRU)
15871: 13220: 10587:  50: private l2Cache: LRUCache<string, T> = new LRUCache<string, T>({
15872: 13221: 10588:  51:   max: options.maxSize,
15873: 13222: 10589:  52:   ttl: options.ttl
15874: 13223: 10590:  53: });
15875: 13224: 10591:  54: ```
15876: 13225: 10592:  55: 
15877: 13226: 10593:  56: Cache hierarchy:
15878: 13227: 10594:  57: 
15879: 13228: 10595:  58: 1. In-memory cache for frequent access
15880: 13229: 10596:  59: 2. LRU cache for larger datasets
15881: 13230: 10597:  60: 3. Persistent storage for backups
15882: 13231: 10598:  61: 
15883: 13232: 10599:  62: ### Cache Configuration
15884: 13233: 10600:  63: 
15885: 13234: 10601:  64: ```typescript
15886: 13235: 10602:  65: const cacheOptions = {
15887: 13236: 10603:  66:   // Card cache settings
15888: 13237: 10604:  67:   cardCache: {
15889: 13238: 10605:  68:     max: 500,
15890: 13239: 10606:  69:     ttl: 1000 * 60 * 60 // 1 hour
15891: 13240: 10607:  70:   },
15892: 13241: 10608:  71:  
15893: 13242: 10609:  72:   // Image cache settings
15894: 13243: 10610:  73:   imageCache: {
15895: 13244: 10611:  74:     metadata: {
15896: 13245: 10612:  75:       max: 1000,
15897: 13246: 10613:  76:       ttl: 1000 * 60 * 60 // 1 hour
15898: 13247: 10614:  77:     },
15899: 13248: 10615:  78:     buffer: {
15900: 13249: 10616:  79:       max: 100,
15901: 13250: 10617:  80:       ttl: 1000 * 60 * 5, // 5 minutes
15902: 13251: 10618:  81:       maxSize: 50 * 1024 * 1024 // 50MB
15903: 13252: 10619:  82:     }
15904: 13253: 10620:  83:   }
15905: 13254: 10621:  84: };
15906: 13255: 10622:  85: ```
15907: 13256: 10623:  86: 
15908: 13257: 10624:  87: ## Batch Processing
15909: 13258: 10625:  88: 
15910: 13259: 10626:  89: ### Adaptive Batch Processing
15911: 13260: 10627:  90: 
15912: 13261: 10628:  91: ```typescript
15913: 13262: 10629:  92: class AdaptiveBatchProcessor {
15914: 13263: 10630:  93:   private optimalBatchSize: number = 100;
15915: 13264: 10631:  94:   private processingTimes: number[] = [];
15916: 13265: 10632:  95: 
15917: 13266: 10633:  96:   async processBatch<T>(
15918: 13267: 10634:  97:     items: T[],
15919: 13268: 10635:  98:     processor: (batch: T[]) => Promise<void>
15920: 13269: 10636:  99:   ): Promise<void> {
15921: 13270: 10637: 100:     for (let i = 0; i < items.length; i += this.optimalBatchSize) {
15922: 13271: 10638: 101:       const start = Date.now();
15923: 13272: 10639: 102:       const batch = items.slice(i, i + this.optimalBatchSize);
15924: 13273: 10640: 103:      
15925: 13274: 10641: 104:       await processor(batch);
15926: 13275: 10642: 105:      
15927: 13276: 10643: 106:       this.adjustBatchSize(Date.now() - start);
15928: 13277: 10644: 107:     }
15929: 13278: 10645: 108:   }
15930: 13279: 10646: 109: 
15931: 13280: 10647: 110:   private adjustBatchSize(lastProcessingTime: number): void {
15932: 13281: 10648: 111:     // Dynamically adjust batch size based on processing time
15933: 13282: 10649: 112:     if (lastProcessingTime > 1000) {
15934: 13283: 10650: 113:       this.optimalBatchSize = Math.max(10, this.optimalBatchSize * 0.8);
15935: 13284: 10651: 114:     } else if (lastProcessingTime < 500) {
15936: 13285: 10652: 115:       this.optimalBatchSize = Math.min(1000, this.optimalBatchSize * 1.2);
15937: 13286: 10653: 116:     }
15938: 13287: 10654: 117:   }
15939: 13288: 10655: 118: }
15940: 13289: 10656: 119: ```
15941: 13290: 10657: 120: 
15942: 13291: 10658: 121: ### Batch Size Optimization
15943: 13292: 10659: 122: 
15944: 13293: 10660: 123: ```typescript
15945: 13294: 10661: 124: const batchOptions = {
15946: 13295: 10662: 125:   batchSize: 100,
15947: 13296: 10663: 126:   delayBetweenBatches: 1000,
15948: 13297: 10664: 127:   onBatchComplete: async (stats) => {
15949: 13298: 10665: 128:     console.log(`Processed: ${stats.processed}/${stats.total}`);
15950: 13299: 10666: 129:   }
15951: 13300: 10667: 130: };
15952: 13301: 10668: 131: ```
15953: 13302: 10669: 132: 
15954: 13303: 10670: 133: ## Image Processing Optimization
15955: 13304: 10671: 134: 
15956: 13305: 10672: 135: ### Compression Settings
15957: 13306: 10673: 136: 
15958: 13307: 10674: 137: ```typescript
15959: 13308: 10675: 138: const compressionOptions = {
15960: 13309: 10676: 139:   quality: {
15961: 13310: 10677: 140:     HIGH_RES: 90,
15962: 13311: 10678: 141:     LOW_RES: 85
15963: 13312: 10679: 142:   },
15964: 13313: 10680: 143:   dimensions: {
15965: 13314: 10681: 144:     HIGH_RES: 400,
15966: 13315: 10682: 145:     LOW_RES: 200
15967: 13316: 10683: 146:   }
15968: 13317: 10684: 147: };
15969: 13318: 10685: 148: ```
15970: 13319: 10686: 149: 
15971: 13320: 10687: 150: ### Progressive Loading
15972: 13321: 10688: 151: 
15973: 13322: 10689: 152: ```typescript
15974: 13323: 10690: 153: const imageProcessingOptions = {
15975: 13324: 10691: 154:   progressive: true,
15976: 13325: 10692: 155:   mozjpeg: true,
15977: 13326: 10693: 156:   optimizationLevel: 3
15978: 13327: 10694: 157: };
15979: 13328: 10695: 158: ```
15980: 13329: 10696: 159: 
15981: 13330: 10697: 160: ## Database Optimization
15982: 13331: 10698: 161: 
15983: 13332: 10699: 162: ### Batch Operations
15984: 13333: 10700: 163: 
15985: 13334: 10701: 164: ```typescript
15986: 13335: 10702: 165: async function batchWrite(updates: any[]): Promise<void> {
15987: 13336: 10703: 166:   const batch = db.batch();
15988: 13337: 10704: 167:   updates.forEach(update => {
15989: 13338: 10705: 168:     const ref = db.collection('cards').doc(update.id);
15990: 13339: 10706: 169:     batch.update(ref, update.data);
15991: 13340: 10707: 170:   });
15992: 13341: 10708: 171:   await batch.commit();
15993: 13342: 10709: 172: }
15994: 13343: 10710: 173: ```
15995: 13344: 10711: 174: 
15996: 13345: 10712: 175: ### Index Optimization
15997: 13346: 10713: 176: 
15998: 13347: 10714: 177: ```json
15999: 13348: 10715: 178: {
16000: 13349: 10716: 179:   "indexes": [
16001: 13350: 10717: 180:     {
16002: 13351: 10718: 181:       "collectionGroup": "cards",
16003: 13352: 10719: 182:       "queryScope": "COLLECTION",
16004: 13353: 10720: 183:       "fields": [
16005: 13354: 10721: 184:         { "fieldPath": "groupId", "order": "ASCENDING" },
16006: 13355: 10722: 185:         { "fieldPath": "lastUpdated", "order": "DESCENDING" }
16007: 13356: 10723: 186:       ]
16008: 13357: 10724: 187:     }
16009: 13358: 10725: 188:   ]
16010: 13359: 10726: 189: }
16011: 13360: 10727: 190: ```
16012: 13361: 10728: 191: 
16013: 13362: 10729: 192: ## Rate Limiting
16014: 13363: 10730: 193: 
16015: 13364: 10731: 194: ### Token Bucket Implementation
16016: 13365: 10732: 195: 
16017: 13366: 10733: 196: ```typescript
16018: 13367: 10734: 197: const rateLimiter = {
16019: 13368: 10735: 198:   tokens: 100,
16020: 13369: 10736: 199:   refillRate: 10,
16021: 13370: 10737: 200:   interval: 1000,
16022: 13371: 10738: 201: 
16023: 13372: 10739: 202:   async acquire(): Promise<boolean> {
16024: 13373: 10740: 203:     if (this.tokens > 0) {
16025: 13374: 10741: 204:       this.tokens--;
16026: 13375: 10742: 205:       return true;
16027: 13376: 10743: 206:     }
16028: 13377: 10744: 207:     return false;
16029: 13378: 10745: 208:   }
16030: 13379: 10746: 209: };
16031: 13380: 10747: 210: ```
16032: 13381: 10748: 211: 
16033: 13382: 10749: 212: ### Request Throttling
16034: 13383: 10750: 213: 
16035: 13384: 10751: 214: ```typescript
16036: 13385: 10752: 215: async function makeThrottledRequest<T>(
16037: 13386: 10753: 216:   endpoint: string,
16038: 13387: 10754: 217:   options: RequestOptions = {}
16039: 13388: 10755: 218: ): Promise<T> {
16040: 13389: 10756: 219:   if (!await rateLimiter.acquire()) {
16041: 13390: 10757: 220:     throw new Error("Rate limit exceeded");
16042: 13391: 10758: 221:   }
16043: 13392: 10759: 222:   return makeRequest<T>(endpoint, options);
16044: 13393: 10760: 223: }
16045: 13394: 10761: 224: ```
16046: 13395: 10762: 225: 
16047: 13396: 10763: 226: ## Performance Monitoring
16048: 13397: 10764: 227: 
16049: 13398: 10765: 228: ### Progress Tracking
16050: 13399: 10766: 229: 
16051: 13400: 10767: 230: ```typescript
16052: 13401: 10768: 231: export class EnhancedProgressTracker {
16053: 13402: 10769: 232:   private calculateStats(): ProgressStats {
16054: 13403: 10770: 233:     const now = Date.now();
16055: 13404: 10771: 234:     const elapsed = (now - this.startTime) / 1000;
16056: 13405: 10772: 235:     const percent = (this.current / this.total) * 100;
16057: 13406: 10773: 236:     const rate = this.current / elapsed;
16058: 13407: 10774: 237:    
16059: 13408: 10775: 238:     return {
16060: 13409: 10776: 239:       current: this.current,
16061: 13410: 10777: 240:       total: this.total,
16062: 13411: 10778: 241:       percent,
16063: 13412: 10779: 242:       elapsed,
16064: 13413: 10780: 243:       rate,
16065: 13414: 10781: 244:       remaining: this.total - this.current,
16066: 13415: 10782: 245:       eta: (this.total - this.current) / rate
16067: 13416: 10783: 246:     };
16068: 13417: 10784: 247:   }
16069: 13418: 10785: 248: }
16070: 13419: 10786: 249: ```
16071: 13420: 10787: 250: 
16072: 13421: 10788: 251: ### Performance Metrics
16073: 13422: 10789: 252: 
16074: 13423: 10790: 253: ```typescript
16075: 13424: 10791: 254: interface PerformanceMetrics {
16076: 13425: 10792: 255:   timestamp: Date;
16077: 13426: 10793: 256:   operation: string;
16078: 13427: 10794: 257:   duration: number;
16079: 13428: 10795: 258:   memory: {
16080: 13429: 10796: 259:     heapUsed: number;
16081: 13430: 10797: 260:     heapTotal: number;
16082: 13431: 10798: 261:   };
16083: 13432: 10799: 262:   success: boolean;
16084: 13433: 10800: 263: }
16085: 13434: 10801: 264: 
16086: 13435: 10802: 265: async function trackPerformance(
16087: 13436: 10803: 266:   operation: string,
16088: 13437: 10804: 267:   task: () => Promise<void>
16089: 13438: 10805: 268: ): Promise<void> {
16090: 13439: 10806: 269:   const start = Date.now();
16091: 13440: 10807: 270:   const startMemory = process.memoryUsage();
16092: 13441: 10808: 271:  
16093: 13442: 10809: 272:   try {
16094: 13443: 10810: 273:     await task();
16095: 13444: 10811: 274:     const endMemory = process.memoryUsage();
16096: 13445: 10812: 275:    
16097: 13446: 10813: 276:     await logInfo("Performance metrics", {
16098: 13447: 10814: 277:       operation,
16099: 13448: 10815: 278:       duration: Date.now() - start,
16100: 13449: 10816: 279:       memoryDelta: {
16101: 13450: 10817: 280:         heapUsed: endMemory.heapUsed - startMemory.heapUsed,
16102: 13451: 10818: 281:         heapTotal: endMemory.heapTotal - startMemory.heapTotal
16103: 13452: 10819: 282:       }
16104: 13453: 10820: 283:     });
16105: 13454: 10821: 284:   } catch (error) {
16106: 13455: 10822: 285:     await logError(error, "performanceTracking");
16107: 13456: 10823: 286:     throw error;
16108: 13457: 10824: 287:   }
16109: 13458: 10825: 288: }
16110: 13459: 10826: 289: ```
16111: 13460: 10827: 290: 
16112: 13461: 10828: 291: ## Best Practices
16113: 13462: 10829: 292: 
16114: 13463: 10830: 293: ### Memory Management
16115: 13464: 10831: 294: 
16116: 13465: 10832: 295: 1. Use streams for large file operations
16117: 13466: 10833: 296: 2. Implement cleanup routines
16118: 13467: 10834: 297: 3. Monitor memory usage
16119: 13468: 10835: 298: 4. Set appropriate cache limits
16120: 13469: 10836: 299: 5. Use batch processing
16121: 13470: 10837: 300: 
16122: 13471: 10838: 301: ### Network Optimization
16123: 13472: 10839: 302: 
16124: 13473: 10840: 303: 1. Implement request caching
16125: 13474: 10841: 304: 2. Use compression
16126: 13475: 10842: 305: 3. Batch API requests
16127: 13476: 10843: 306: 4. Handle rate limits
16128: 13477: 10844: 307: 5. Implement retry strategies
16129: 13478: 10845: 308: 
16130: 13479: 10846: 309: ### Database Efficiency
16131: 13480: 10847: 310: 
16132: 13481: 10848: 311: 1. Use batch operations
16133: 13482: 10849: 312: 2. Optimize indexes
16134: 13483: 10850: 313: 3. Implement caching
16135: 13484: 10851: 314: 4. Monitor query performance
16136: 13485: 10852: 315: 5. Use appropriate batch sizes
16137: 13486: 10853: 316: 
16138: 13487: 10854: 317: ### Image Processing
16139: 13488: 10855: 318: 
16140: 13489: 10856: 319: 1. Use progressive loading
16141: 13490: 10857: 320: 2. Implement size limits
16142: 13491: 10858: 321: 3. Optimize compression
16143: 13492: 10859: 322: 4. Cache processed images
16144: 13493: 10860: 323: 5. Use appropriate quality settings
16145: 13494: 10861: 324: 
16146: 13495: 10862: 325: ## Monitoring and Alerts
16147: 13496: 10863: 326: 
16148: 13497: 10864: 327: ### Key Metrics
16149: 13498: 10865: 328: 
16150: 13499: 10866: 329: ```typescript
16151: 13500: 10867: 330: interface SystemMetrics {
16152: 13501: 10868: 331:   syncDuration: number;
16153: 13502: 10869: 332:   memoryUsage: number;
16154: 13503: 10870: 333:   processedItems: number;
16155: 13504: 10871: 334:   errorRate: number;
16156: 13505: 10872: 335:   cacheHitRate: number;
16157: 13506: 10873: 336: }
16158: 13507: 10874: 337: 
16159: 13508: 10875: 338: async function monitorSystem(): Promise<SystemMetrics> {
16160: 13509: 10876: 339:   return {
16161: 13510: 10877: 340:     syncDuration: calculateSyncDuration(),
16162: 13511: 10878: 341:     memoryUsage: process.memoryUsage().heapUsed,
16163: 13512: 10879: 342:     processedItems: getProcessedCount(),
16164: 13513: 10880: 343:     errorRate: calculateErrorRate(),
16165: 13514: 10881: 344:     cacheHitRate: calculateCacheHitRate()
16166: 13515: 10882: 345:   };
16167: 13516: 10883: 346: }
16168: 13517: 10884: 347: ```
16169: 13518: 10885: 348: 
16170: 13519: 10886: 349: ### Alert Thresholds
16171: 13520: 10887: 350: 
16172: 13521: 10888: 351: ```typescript
16173: 13522: 10889: 352: const alertThresholds = {
16174: 13523: 10890: 353:   syncDuration: 1000 * 60 * 30, // 30 minutes
16175: 13524: 10891: 354:   memoryUsage: 900 * 1024 * 1024, // 900MB
16176: 13525: 10892: 355:   errorRate: 0.05, // 5%
16177: 13526: 10893: 356:   cacheHitRate: 0.7 // 70%
16178: 13527: 10894: 357: };
16179: 13528: 10895: 358: ```
16180: 13529: 10896: </file>
16181: 13530: 10897: 
16182: 13531: 10898: <file path="security.md">
16183: 13532: 10899:   1: # Security Guidelines
16184: 13533: 10900:   2: 
16185: 13534: 10901:   3: ## Overview
16186: 13535: 10902:   4: 
16187: 13536: 10903:   5: This guide outlines security best practices and implementations for the FFTCG Sync Service, covering authentication, data validation, rate limiting, and other security considerations.
16188: 13537: 10904:   6: 
16189: 13538: 10905:   7: ## Authentication
16190: 13539: 10906:   8: 
16191: 13540: 10907:   9: ### Firebase Authentication
16192: 13541: 10908:  10: 
16193: 13542: 10909:  11: ```typescript
16194: 13543: 10910:  12: // Verify Firebase authentication token
16195: 13544: 10911:  13: async function verifyAuth(req: Request): Promise<void> {
16196: 13545: 10912:  14:   const token = req.headers.authorization?.split("Bearer ")[1];
16197: 13546: 10913:  15:   if (!token) {
16198: 13547: 10914:  16:     throw new Error("No authentication token provided");
16199: 13548: 10915:  17:   }
16200: 13549: 10916:  18: 
16201: 13550: 10917:  19:   try {
16202: 13551: 10918:  20:     await admin.auth().verifyIdToken(token);
16203: 13552: 10919:  21:   } catch (error) {
16204: 13553: 10920:  22:     throw new Error("Invalid authentication token");
16205: 13554: 10921:  23:   }
16206: 13555: 10922:  24: }
16207: 13556: 10923:  25: ```
16208: 13557: 10924:  26: 
16209: 13558: 10925:  27: ### Service Account Security
16210: 13559: 10926:  28: 
16211: 13560: 10927:  29: ```typescript
16212: 13561: 10928:  30: // Service account initialization
16213: 13562: 10929:  31: async function initializeFirebase(): Promise<FirebaseFirestore.Firestore> {
16214: 13563: 10930:  32:   try {
16215: 13564: 10931:  33:     const serviceAccountPath = path.resolve(__dirname, "../../../service_account_key.json");
16216: 13565: 10932:  34:     const serviceAccount = JSON.parse(await fs.readFile(serviceAccountPath, "utf8"));
16217: 13566: 10933:  35: 
16218: 13567: 10934:  36:     if (!admin.apps.length) {
16219: 13568: 10935:  37:       admin.initializeApp({
16220: 13569: 10936:  38:         credential: admin.credential.cert(serviceAccount)
16221: 13570: 10937:  39:       });
16222: 13571: 10938:  40:     }
16223: 13572: 10939:  41: 
16224: 13573: 10940:  42:     return admin.firestore();
16225: 13574: 10941:  43:   } catch (error) {
16226: 13575: 10942:  44:     throw new Error("Failed to initialize Firebase: " + error);
16227: 13576: 10943:  45:   }
16228: 13577: 10944:  46: }
16229: 13578: 10945:  47: ```
16230: 13579: 10946:  48: 
16231: 13580: 10947:  49: ## Input Validation
16232: 13581: 10948:  50: 
16233: 13582: 10949:  51: ### Request Validation
16234: 13583: 10950:  52: 
16235: 13584: 10951:  53: ```typescript
16236: 13585: 10952:  54: // Validate sync options
16237: 13586: 10953:  55: function validateSyncOptions(options: unknown): asserts options is SyncOptions {
16238: 13587: 10954:  56:   if (!options || typeof options !== "object") {
16239: 13588: 10955:  57:     throw new Error("Invalid options object");
16240: 13589: 10956:  58:   }
16241: 13590: 10957:  59: 
16242: 13591: 10958:  60:   const opts = options as Record<string, unknown>;
16243: 13592: 10959:  61:  
16244: 13593: 10960:  62:   if (opts.limit && typeof opts.limit !== "number") {
16245: 13594: 10961:  63:     throw new Error("Limit must be a number");
16246: 13595: 10962:  64:   }
16247: 13596: 10963:  65: 
16248: 13597: 10964:  66:   if (opts.groupId && typeof opts.groupId !== "string") {
16249: 13598: 10965:  67:     throw new Error("GroupId must be a string");
16250: 13599: 10966:  68:   }
16251: 13600: 10967:  69: }
16252: 13601: 10968:  70: ```
16253: 13602: 10969:  71: 
16254: 13603: 10970:  72: ### Image Validation
16255: 13604: 10971:  73: 
16256: 13605: 10972:  74: ```typescript
16257: 13606: 10973:  75: class ImageValidator {
16258: 13607: 10974:  76:   private static readonly MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
16259: 13608: 10975:  77: 
16260: 13609: 10976:  78:   static async validateImage(buffer: Buffer): Promise<ImageValidationError | null> {
16261: 13610: 10977:  79:     // Check file size
16262: 13611: 10978:  80:     if (buffer.length > this.MAX_FILE_SIZE) {
16263: 13612: 10979:  81:       return {
16264: 13613: 10980:  82:         code: "FILE_TOO_LARGE",
16265: 13614: 10981:  83:         message: `Image exceeds maximum size of ${this.MAX_FILE_SIZE / 1024 / 1024}MB`
16266: 13615: 10982:  84:       };
16267: 13616: 10983:  85:     }
16268: 13617: 10984:  86: 
16269: 13618: 10985:  87:     // Verify file signature
16270: 13619: 10986:  88:     if (!this.isJpeg(buffer)) {
16271: 13620: 10987:  89:       return {
16272: 13621: 10988:  90:         code: "INVALID_FORMAT",
16273: 13622: 10989:  91:         message: "Image must be in JPEG format"
16274: 13623: 10990:  92:       };
16275: 13624: 10991:  93:     }
16276: 13625: 10992:  94: 
16277: 13626: 10993:  95:     return null;
16278: 13627: 10994:  96:   }
16279: 13628: 10995:  97: }
16280: 13629: 10996:  98: ```
16281: 13630: 10997:  99: 
16282: 13631: 10998: 100: ## Rate Limiting
16283: 13632: 10999: 101: 
16284: 13633: 11000: 102: ### API Rate Limiting
16285: 13634: 11001: 103: 
16286: 13635: 11002: 104: ```typescript
16287: 13636: 11003: 105: const rateLimiter = {
16288: 13637: 11004: 106:   tokens: 100,
16289: 13638: 11005: 107:   refillRate: 10,
16290: 13639: 11006: 108:   interval: 1000,
16291: 13640: 11007: 109: 
16292: 13641: 11008: 110:   async acquire(): Promise<boolean> {
16293: 13642: 11009: 111:     if (this.tokens > 0) {
16294: 13643: 11010: 112:       this.tokens--;
16295: 13644: 11011: 113:       return true;
16296: 13645: 11012: 114:     }
16297: 13646: 11013: 115:     return false;
16298: 13647: 11014: 116:   }
16299: 13648: 11015: 117: };
16300: 13649: 11016: 118: ```
16301: 13650: 11017: 119: 
16302: 13651: 11018: 120: ### Function Concurrency Control
16303: 13652: 11019: 121: 
16304: 13653: 11020: 122: ```typescript
16305: 13654: 11021: 123: // Configure function instance limits
16306: 13655: 11022: 124: exports.syncCards = onRequest({
16307: 13656: 11023: 125:   timeoutSeconds: runtimeOpts.timeoutSeconds,
16308: 13657: 11024: 126:   memory: runtimeOpts.memory,
16309: 13658: 11025: 127:   maxInstances: 1
16310: 13659: 11026: 128: }, async (req: Request, res: Response) => {
16311: 13660: 11027: 129:   // Function implementation
16312: 13661: 11028: 130: });
16313: 13662: 11029: 131: ```
16314: 13663: 11030: 132: 
16315: 13664: 11031: 133: ## Data Protection
16316: 13665: 11032: 134: 
16317: 13666: 11033: 135: ### Data Encryption
16318: 13667: 11034: 136: 
16319: 13668: 11035: 137: ```typescript
16320: 13669: 11036: 138: // Hash sensitive data
16321: 13670: 11037: 139: function getDataHash(data: any): string {
16322: 13671: 11038: 140:   return crypto.createHash("md5")
16323: 13672: 11039: 141:     .update(JSON.stringify(data, Object.keys(data).sort()))
16324: 13673: 11040: 142:     .digest("hex");
16325: 13674: 11041: 143: }
16326: 13675: 11042: 144: ```
16327: 13676: 11043: 145: 
16328: 13677: 11044: 146: ### Secure Storage Access
16329: 13678: 11045: 147: 
16330: 13679: 11046: 148: ```typescript
16331: 13680: 11047: 149: // Secure URL generation
16332: 13681: 11048: 150: async function getSecureImageUrl(path: string): Promise<string> {
16333: 13682: 11049: 151:   const [url] = await storage
16334: 13683: 11050: 152:     .bucket(STORAGE.BUCKETS.CARD_IMAGES)
16335: 13684: 11051: 153:     .file(path)
16336: 13685: 11052: 154:     .getSignedUrl({
16337: 13686: 11053: 155:       action: "read",
16338: 13687: 11054: 156:       expires: "03-01-2500"
16339: 13688: 11055: 157:     });
16340: 13689: 11056: 158:   return url;
16341: 13690: 11057: 159: }
16342: 13691: 11058: 160: ```
16343: 13692: 11059: 161: 
16344: 13693: 11060: 162: ## Error Handling
16345: 13694: 11061: 163: 
16346: 13695: 11062: 164: ### Secure Error Logging
16347: 13696: 11063: 165: 
16348: 13697: 11064: 166: ```typescript
16349: 13698: 11065: 167: export async function logDetailedError(
16350: 13699: 11066: 168:   error: Error,
16351: 13700: 11067: 169:   context: string,
16352: 13701: 11068: 170:   metadata?: Record<string, unknown>,
16353: 13702: 11069: 171:   severity: "ERROR" | "WARNING" | "CRITICAL" = "ERROR"
16354: 13703: 11070: 172: ): Promise<void> {
16355: 13704: 11071: 173:   const report: ErrorReport = {
16356: 13705: 11072: 174:     timestamp: new Date(),
16357: 13706: 11073: 175:     context,
16358: 13707: 11074: 176:     error: error.message,
16359: 13708: 11075: 177:     stackTrace: error.stack,
16360: 13709: 11076: 178:     metadata,
16361: 13710: 11077: 179:     severity
16362: 13711: 11078: 180:   };
16363: 13712: 11079: 181: 
16364: 13713: 11080: 182:   // Sanitize sensitive information before logging
16365: 13714: 11081: 183:   const sanitizedReport = sanitizeErrorReport(report);
16366: 13715: 11082: 184:   await db.collection(COLLECTION.LOGS).add(sanitizedReport);
16367: 13716: 11083: 185: }
16368: 13717: 11084: 186: ```
16369: 13718: 11085: 187: 
16370: 13719: 11086: 188: ### Error Response Sanitization
16371: 13720: 11087: 189: 
16372: 13721: 11088: 190: ```typescript
16373: 13722: 11089: 191: function sanitizeErrorMessage(error: Error): string {
16374: 13723: 11090: 192:   // Remove sensitive information from error messages
16375: 13724: 11091: 193:   return error.message.replace(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)/gi, '[EMAIL]')
16376: 13725: 11092: 194:     .replace(/\b\d{4}\b/g, '[ID]');
16377: 13726: 11093: 195: }
16378: 13727: 11094: 196: ```
16379: 13728: 11095: 197: 
16380: 13729: 11096: 198: ## Network Security
16381: 13730: 11097: 199: 
16382: 13731: 11098: 200: ### Request Configuration
16383: 13732: 11099: 201: 
16384: 13733: 11100: 202: ```typescript
16385: 13734: 11101: 203: const secureRequestConfig = {
16386: 13735: 11102: 204:   timeout: 30000,
16387: 13736: 11103: 205:   headers: {
16388: 13737: 11104: 206:     "Accept": "application/json",
16389: 13738: 11105: 207:     "User-Agent": "FFTCG-Sync-Service/1.0"
16390: 13739: 11106: 208:   },
16391: 13740: 11107: 209:   validateStatus: (status: number) => status < 400
16392: 13741: 11108: 210: };
16393: 13742: 11109: 211: ```
16394: 13743: 11110: 212: 
16395: 13744: 11111: 213: ### HTTPS Enforcement
16396: 13745: 11112: 214: 
16397: 13746: 11113: 215: ```typescript
16398: 13747: 11114: 216: // Ensure HTTPS usage
16399: 13748: 11115: 217: const BASE_URL = "https://tcgcsv.com";
16400: 13749: 11116: 218: const SECURE_STORAGE_URL = "https://storage.googleapis.com";
16401: 13750: 11117: 219: ```
16402: 13751: 11118: 220: 
16403: 13752: 11119: 221: ## Firestore Security Rules
16404: 13753: 11120: 222: 
16405: 13754: 11121: 223: ```typescript
16406: 13755: 11122: 224: // firestore.rules
16407: 13756: 11123: 225: rules_version = '2';
16408: 13757: 11124: 226: service cloud.firestore {
16409: 13758: 11125: 227:   match /databases/{database}/documents {
16410: 13759: 11126: 228:     // Card collection rules
16411: 13760: 11127: 229:     match /cards/{cardId} {
16412: 13761: 11128: 230:       allow read: if true;
16413: 13762: 11129: 231:       allow write: if request.auth != null 
16414: 13763: 11130: 232:         && request.auth.token.admin == true;
16415: 13764: 11131: 233:     }
16416: 13765: 11132: 234: 
16417: 13766: 11133: 235:     // Price collection rules
16418: 13767: 11134: 236:     match /prices/{priceId} {
16419: 13768: 11135: 237:       allow read: if true;
16420: 13769: 11136: 238:       allow write: if request.auth != null 
16421: 13770: 11137: 239:         && request.auth.token.admin == true;
16422: 13771: 11138: 240:     }
16423: 13772: 11139: 241: 
16424: 13773: 11140: 242:     // Sync metadata rules
16425: 13774: 11141: 243:     match /syncMetadata/{docId} {
16426: 13775: 11142: 244:       allow read: if request.auth != null;
16427: 13776: 11143: 245:       allow write: if request.auth != null 
16428: 13777: 11144: 246:         && request.auth.token.admin == true;
16429: 13778: 11145: 247:     }
16430: 13779: 11146: 248:   }
16431: 13780: 11147: 249: }
16432: 13781: 11148: 250: ```
16433: 13782: 11149: 251: 
16434: 13783: 11150: 252: ## Storage Security Rules
16435: 13784: 11151: 253: 
16436: 13785: 11152: 254: ```typescript
16437: 13786: 11153: 255: // storage.rules
16438: 13787: 11154: 256: rules_version = '2';
16439: 13788: 11155: 257: service firebase.storage {
16440: 13789: 11156: 258:   match /b/{bucket}/o {
16441: 13790: 11157: 259:     match /card-images/{groupId}/{imageId} {
16442: 13791: 11158: 260:       allow read: if true;
16443: 13792: 11159: 261:       allow write: if request.auth != null 
16444: 13793: 11160: 262:         && request.auth.token.admin == true
16445: 13794: 11161: 263:         && request.resource.size < 5 * 1024 * 1024
16446: 13795: 11162: 264:         && request.resource.contentType.matches('image/jpeg');
16447: 13796: 11163: 265:     }
16448: 13797: 11164: 266:   }
16449: 13798: 11165: 267: }
16450: 13799: 11166: 268: ```
16451: 13800: 11167: 269: 
16452: 13801: 11168: 270: ## Best Practices
16453: 13802: 11169: 271: 
16454: 13803: 11170: 272: ### API Security
16455: 13804: 11171: 273: 
16456: 13805: 11172: 274: 1. Use HTTPS for all requests
16457: 13806: 11173: 275: 2. Implement proper authentication
16458: 13807: 11174: 276: 3. Validate all inputs
16459: 13808: 11175: 277: 4. Rate limit requests
16460: 13809: 11176: 278: 5. Monitor for suspicious activity
16461: 13810: 11177: 279: 
16462: 13811: 11178: 280: ### Data Security
16463: 13812: 11179: 281: 
16464: 13813: 11180: 282: 1. Minimize sensitive data storage
16465: 13814: 11181: 283: 2. Encrypt sensitive information
16466: 13815: 11182: 284: 3. Implement proper access controls
16467: 13816: 11183: 285: 4. Regular security audits
16468: 13817: 11184: 286: 5. Secure backup procedures
16469: 13818: 11185: 287: 
16470: 13819: 11186: 288: ### Error Management
16471: 13820: 11187: 289: 
16472: 13821: 11188: 290: 1. Sanitize error messages
16473: 13822: 11189: 291: 2. Avoid exposing internal details
16474: 13823: 11190: 292: 3. Log security events
16475: 13824: 11191: 293: 4. Monitor error patterns
16476: 13825: 11192: 294: 5. Implement proper error recovery
16477: 13826: 11193: 295: 
16478: 13827: 11194: 296: ### Function Security
16479: 13828: 11195: 297: 
16480: 13829: 11196: 298: 1. Use minimal permissions
16481: 13830: 11197: 299: 2. Implement request validation
16482: 13831: 11198: 300: 3. Control function concurrency
16483: 13832: 11199: 301: 4. Monitor function execution
16484: 13833: 11200: 302: 5. Regular security updates
16485: 13834: 11201: 303: 
16486: 13835: 11202: 304: ## Security Monitoring
16487: 13836: 11203: 305: 
16488: 13837: 11204: 306: ### Logging Security Events
16489: 13838: 11205: 307: 
16490: 13839: 11206: 308: ```typescript
16491: 13840: 11207: 309: interface SecurityEvent {
16492: 13841: 11208: 310:   timestamp: Date;
16493: 13842: 11209: 311:   eventType: "AUTH" | "ACCESS" | "ERROR" | "MODIFICATION";
16494: 13843: 11210: 312:   severity: "LOW" | "MEDIUM" | "HIGH" | "CRITICAL";
16495: 13844: 11211: 313:   details: Record<string, unknown>;
16496: 13845: 11212: 314: }
16497: 13846: 11213: 315: 
16498: 13847: 11214: 316: async function logSecurityEvent(event: SecurityEvent): Promise<void> {
16499: 13848: 11215: 317:   await db.collection("securityLogs").add({
16500: 13849: 11216: 318:     ...event,
16501: 13850: 11217: 319:     timestamp: new Date()
16502: 13851: 11218: 320:   });
16503: 13852: 11219: 321: }
16504: 13853: 11220: 322: ```
16505: 13854: 11221: 323: 
16506: 13855: 11222: 324: ### Audit Trail
16507: 13856: 11223: 325: 
16508: 13857: 11224: 326: ```typescript
16509: 13858: 11225: 327: interface AuditLog {
16510: 13859: 11226: 328:   timestamp: Date;
16511: 13860: 11227: 329:   userId: string;
16512: 13861: 11228: 330:   action: string;
16513: 13862: 11229: 331:   resource: string;
16514: 13863: 11230: 332:   changes: Record<string, unknown>;
16515: 13864: 11231: 333: }
16516: 13865: 11232: 334: 
16517: 13866: 11233: 335: async function createAuditLog(
16518: 13867: 11234: 336:   action: string,
16519: 13868: 11235: 337:   resource: string,
16520: 13869: 11236: 338:   changes: Record<string, unknown>
16521: 13870: 11237: 339: ): Promise<void> {
16522: 13871: 11238: 340:   await db.collection("auditLogs").add({
16523: 13872: 11239: 341:     timestamp: new Date(),
16524: 13873: 11240: 342:     action,
16525: 13874: 11241: 343:     resource,
16526: 13875: 11242: 344:     changes
16527: 13876: 11243: 345:   });
16528: 13877: 11244: 346: }
16529: 13878: 11245: 347: ```
16530: 13879: 11246: 348: 
16531: 13880: 11247: 349: ### Security Metrics
16532: 13881: 11248: 350: 
16533: 13882: 11249: 351: ```typescript
16534: 13883: 11250: 352: interface SecurityMetrics {
16535: 13884: 11251: 353:   failedAuthAttempts: number;
16536: 13885: 11252: 354:   rateLimitExceeded: number;
16537: 13886: 11253: 355:   suspiciousRequests: number;
16538: 13887: 11254: 356:   securityEvents: number;
16539: 13888: 11255: 357: }
16540: 13889: 11256: 358: 
16541: 13890: 11257: 359: async function trackSecurityMetrics(): Promise<SecurityMetrics> {
16542: 13891: 11258: 360:   // Implementation of security metrics tracking
16543: 13892: 11259: 361:   return {
16544: 13893: 11260: 362:     failedAuthAttempts: 0,
16545: 13894: 11261: 363:     rateLimitExceeded: 0,
16546: 13895: 11262: 364:     suspiciousRequests: 0,
16547: 13896: 11263: 365:     securityEvents: 0
16548: 13897: 11264: 366:   };
16549: 13898: 11265: 367: }
16550: 13899: 11266: 368: ```
16551: 13900: 11267: </file>
16552: 13901: 11268: 
16553: 13902: 11269: <file path="services/card-sync.md">
16554: 13903: 11270:   1: # Card Synchronization Service
16555: 13904: 11271:   2: 
16556: 13905: 11272:   3: ## Overview
16557: 13906: 11273:   4: 
16558: 13907: 11274:   5: The Card Synchronization service (`cardSync.ts`) manages the automated synchronization of FFTCG card data from TCGPlayer's API. It handles card information updates, image processing, and maintains data consistency through hash-based versioning.
16559: 13908: 11275:   6: 
16560: 13909: 11276:   7: ## Core Features
16561: 13910: 11277:   8: 
16562: 13911: 11278:   9: - Automated card data synchronization
16563: 13912: 11279:  10: - Image processing and storage
16564: 13913: 11280:  11: - Batch processing
16565: 13914: 11281:  12: - Error handling and retry logic
16566: 13915: 11282:  13: - Dry run capability for testing
16567: 13916: 11283:  14: - Progress tracking and logging
16568: 13917: 11284:  15: 
16569: 13918: 11285:  16: ## API Reference
16570: 13919: 11286:  17: 
16571: 13920: 11287:  18: ### Main Function
16572: 13921: 11288:  19: 
16573: 13922: 11289:  20: ```typescript
16574: 13923: 11290:  21: async function syncCards(options: SyncOptions = {}): Promise<SyncMetadata>
16575: 13924: 11291:  22: ```
16576: 13925: 11292:  23: 
16577: 13926: 11293:  24: #### Options
16578: 13927: 11294:  25: 
16579: 13928: 11295:  26: ```typescript
16580: 13929: 11296:  27: interface SyncOptions {
16581: 13930: 11297:  28:   dryRun?: boolean;      // Run without making changes
16582: 13931: 11298:  29:   limit?: number;        // Limit number of cards processed
16583: 13932: 11299:  30:   groupId?: string;      // Process specific group only
16584: 13933: 11300:  31:   skipImages?: boolean;  // Skip image processing
16585: 13934: 11301:  32: }
16586: 13935: 11302:  33: ```
16587: 13936: 11303:  34: 
16588: 13937: 11304:  35: #### Response
16589: 13938: 11305:  36: 
16590: 13939: 11306:  37: ```typescript
16591: 13940: 11307:  38: interface SyncMetadata {
16592: 13941: 11308:  39:   lastSync: Date;
16593: 13942: 11309:  40:   status: "in_progress" | "success" | "failed" | "completed_with_errors";
16594: 13943: 11310:  41:   cardCount: number;
16595: 13944: 11311:  42:   type: "manual" | "scheduled";
16596: 13945: 11312:  43:   groupsProcessed: number;
16597: 13946: 11313:  44:   groupsUpdated: number;
16598: 13947: 11314:  45:   errors: string[];
16599: 13948: 11315:  46:   duration?: number;
16600: 13949: 11316:  47:   imagesProcessed?: number;
16601: 13950: 11317:  48:   imagesUpdated?: number;
16602: 13951: 11318:  49: }
16603: 13952: 11319:  50: ```
16604: 13953: 11320:  51: 
16605: 13954: 11321:  52: ## Usage Examples
16606: 13955: 11322:  53: 
16607: 13956: 11323:  54: ### Scheduled Sync
16608: 13957: 11324:  55: 
16609: 13958: 11325:  56: The service runs automatically on a daily schedule:
16610: 13959: 11326:  57: 
16611: 13960: 11327:  58: ```typescript
16612: 13961: 11328:  59: exports.scheduledCardSync = onSchedule({
16613: 13962: 11329:  60:   schedule: "0 21 * * *", // Daily at 21:00 UTC
16614: 13963: 11330:  61:   timeZone: "UTC",
16615: 13964: 11331:  62:   memory: runtimeOpts.memory,
16616: 13965: 11332:  63:   timeoutSeconds: runtimeOpts.timeoutSeconds,
16617: 13966: 11333:  64:   retryCount: 3,
16618: 13967: 11334:  65: });
16619: 13968: 11335:  66: ```
16620: 13969: 11336:  67: 
16621: 13970: 11337:  68: ### Manual Sync
16622: 13971: 11338:  69: 
16623: 13972: 11339:  70: Test specific groups or cards:
16624: 13973: 11340:  71: 
16625: 13974: 11341:  72: ```typescript
16626: 13975: 11342:  73: // Test sync with limits
16627: 13976: 11343:  74: await syncCards({
16628: 13977: 11344:  75:   dryRun: true,
16629: 13978: 11345:  76:   limit: 5,
16630: 13979: 11346:  77:   groupId: "23783"
16631: 13980: 11347:  78: });
16632: 13981: 11348:  79: 
16633: 13982: 11349:  80: // Full manual sync
16634: 13983: 11350:  81: await syncCards({
16635: 13984: 11351:  82:   dryRun: false
16636: 13985: 11352:  83: });
16637: 13986: 11353:  84: ```
16638: 13987: 11354:  85: 
16639: 13988: 11355:  86: ## Error Handling
16640: 13989: 11356:  87: 
16641: 13990: 11357:  88: The service implements comprehensive error handling:
16642: 13991: 11358:  89: 
16643: 13992: 11359:  90: ```typescript
16644: 13993: 11360:  91: class SyncError extends Error implements GenericError {
16645: 13994: 11361:  92:   constructor(
16646: 13995: 11362:  93:     message: string,
16647: 13996: 11363:  94:     code?: string,
16648: 13997: 11364:  95:     public details?: Record<string, unknown>
16649: 13998: 11365:  96:   ) {
16650: 13999: 11366:  97:     super(message);
16651: 14000: 11367:  98:     this.name = "SyncError";
16652: 14001: 11368:  99:     this.code = code;
16653: 14002: 11369: 100:   }
16654: 14003: 11370: 101: }
16655: 14004: 11371: 102: ```
16656: 14005: 11372: 103: 
16657: 14006: 11373: 104: ### Retry Logic
16658: 14007: 11374: 105: 
16659: 14008: 11375: 106: ```typescript
16660: 14009: 11376: 107: const MAX_RETRIES = 3;
16661: 14010: 11377: 108: const BASE_DELAY = 1000; // 1 second
16662: 14011: 11378: 109: 
16663: 14012: 11379: 110: // Exponential backoff
16664: 14013: 11380: 111: const delay = Math.pow(2, retryCount) * BASE_DELAY;
16665: 14014: 11381: 112: ```
16666: 14015: 11382: 113: 
16667: 14016: 11383: 114: ## Data Processing
16668: 14017: 11384: 115: 
16669: 14018: 11385: 116: ### Batch Processing
16670: 14019: 11386: 117: 
16671: 14020: 11387: 118: ```typescript
16672: 14021: 11388: 119: async function processBatch<T>(
16673: 14022: 11389: 120:   items: T[],
16674: 14023: 11390: 121:   processor: (batch: T[]) => Promise<void>,
16675: 14024: 11391: 122:   options: BatchOptions = {}
16676: 14025: 11392: 123: ): Promise<void>
16677: 14026: 11393: 124: ```
16678: 14027: 11394: 125: 
16679: 14028: 11395: 126: ### Hash Generation
16680: 14029: 11396: 127: 
16681: 14030: 11397: 128: ```typescript
16682: 14031: 11398: 129: function getDataHash(data: any): string {
16683: 14032: 11399: 130:   return crypto.createHash("md5")
16684: 14033: 11400: 131:     .update(JSON.stringify(data, Object.keys(data).sort()))
16685: 14034: 11401: 132:     .digest("hex");
16686: 14035: 11402: 133: }
16687: 14036: 11403: 134: ```
16688: 14037: 11404: 135: 
16689: 14038: 11405: 136: ## Monitoring
16690: 14039: 11406: 137: 
16691: 14040: 11407: 138: ### Progress Tracking
16692: 14041: 11408: 139: 
16693: 14042: 11409: 140: The service logs detailed progress information:
16694: 14043: 11410: 141: 
16695: 14044: 11411: 142: - Groups processed
16696: 14045: 11412: 143: - Cards updated
16697: 14046: 11413: 144: - Images processed
16698: 14047: 11414: 145: - Processing duration
16699: 14048: 11415: 146: - Error counts
16700: 14049: 11416: 147: 
16701: 14050: 11417: 148: ### Success Metrics
16702: 14051: 11418: 149: 
16703: 14052: 11419: 150: - Number of groups updated
16704: 14053: 11420: 151: - Number of cards processed
16705: 14054: 11421: 152: - Number of images updated
16706: 14055: 11422: 153: - Processing duration
16707: 14056: 11423: 154: - Error rate
16708: 14057: 11424: 155: 
16709: 14058: 11425: 156: ## Best Practices
16710: 14059: 11426: 157: 
16711: 14060: 11427: 158: 1. Testing Changes:
16712: 14061: 11428: 159: 
16713: 14062: 11429: 160: ```typescript
16714: 14063: 11430: 161: // Always test with dry run first
16715: 14064: 11431: 162: await syncCards({
16716: 14065: 11432: 163:   dryRun: true,
16717: 14066: 11433: 164:   limit: 5
16718: 14067: 11434: 165: });
16719: 14068: 11435: 166: ```
16720: 14069: 11436: 167: 
16721: 14070: 11437: 168: 1. Error Monitoring:
16722: 14071: 11438: 169: 
16723: 14072: 11439: 170: ```typescript
16724: 14073: 11440: 171: // Check sync metadata for errors
16725: 14074: 11441: 172: const metadata = await syncCards();
16726: 14075: 11442: 173: if (metadata.errors.length > 0) {
16727: 14076: 11443: 174:   console.error("Sync completed with errors:", metadata.errors);
16728: 14077: 11444: 175: }
16729: 14078: 11445: 176: ```
16730: 14079: 11446: 177: 
16731: 14080: 11447: 178: 1. Resource Management:
16732: 14081: 11448: 179: 
16733: 14082: 11449: 180: ```typescript
16734: 14083: 11450: 181: // Use limits when testing
16735: 14084: 11451: 182: const options: SyncOptions = {
16736: 14085: 11452: 183:   limit: 10,
16737: 14086: 11453: 184:   dryRun: true
16738: 14087: 11454: 185: };
16739: 14088: 11455: 186: ```
16740: 14089: 11456: 187: 
16741: 14090: 11457: 188: ## Troubleshooting
16742: 14091: 11458: 189: 
16743: 14092: 11459: 190: ### Common Issues
16744: 14093: 11460: 191: 
16745: 14094: 11461: 192: 1. Rate Limiting:
16746: 14095: 11462: 193:    - Implement proper delays between requests
16747: 14096: 11463: 194:    - Use batch processing
16748: 14097: 11464: 195:    - Follow exponential backoff
16749: 14098: 11465: 196: 
16750: 14099: 11466: 197: 2. Image Processing:
16751: 14100: 11467: 198:    - Verify storage permissions
16752: 14101: 11468: 199:    - Check image URLs
16753: 14102: 11469: 200:    - Monitor storage quotas
16754: 14103: 11470: 201: 
16755: 14104: 11471: 202: 3. Data Consistency:
16756: 14105: 11472: 203:    - Use hash verification
16757: 14106: 11473: 204:    - Implement proper error handling
16758: 14107: 11474: 205:    - Monitor sync metadata
16759: 14108: 11475: 206: 
16760: 14109: 11476: 207: ### Debug Mode
16761: 14110: 11477: 208: 
16762: 14111: 11478: 209: Enable detailed logging:
16763: 14112: 11479: 210: 
16764: 14113: 11480: 211: ```typescript
16765: 14114: 11481: 212: // Enable debug logging
16766: 14115: 11482: 213: await syncCards({
16767: 14116: 11483: 214:   dryRun: true,
16768: 14117: 11484: 215:   debug: true
16769: 14118: 11485: 216: });
16770: 14119: 11486: 217: ```
16771: 14120: 11487: 218: 
16772: 14121: 11488: 219: ## Related Components
16773: 14122: 11489: 220: 
16774: 14123: 11490: 221: - [Price Sync Service](./price-sync)
16775: 14124: 11491: 222: - [Image Handler](../utils/image-handler)
16776: 14125: 11492: 223: - [Cache System](../utils/cache)
16777: 14126: 11493: 224: - [Error Handling](../utils/error-handling)
16778: 14127: 11494: </file>
16779: 14128: 11495: 
16780: 14129: 11496: <file path="services/price-sync.md">
16781: 14130: 11497:   1: # Price Synchronization Service
16782: 14131: 11498:   2: 
16783: 14132: 11499:   3: ## Overview
16784: 14133: 11500:   4: 
16785: 14134: 11501:   5: The Price Synchronization service (`priceSync.ts`) manages automated price updates for FFTCG cards. It handles both normal and foil price variants, implements version control through hashing, and provides detailed logging of price changes.
16786: 14135: 11502:   6: 
16787: 14136: 11503:   7: ## Core Features
16788: 14137: 11504:   8: 
16789: 14138: 11505:   9: - Real-time price synchronization
16790: 14139: 11506:  10: - Support for multiple price variants (Normal/Foil)
16791: 14140: 11507:  11: - Hash-based version control
16792: 14141: 11508:  12: - Batch processing
16793: 14142: 11509:  13: - Detailed price change logging
16794: 14143: 11510:  14: - Configurable sync intervals
16795: 14144: 11511:  15: 
16796: 14145: 11512:  16: ## API Reference
16797: 14146: 11513:  17: 
16798: 14147: 11514:  18: ### Main Function
16799: 14148: 11515:  19: 
16800: 14149: 11516:  20: ```typescript
16801: 14150: 11517:  21: async function syncPrices(options: SyncOptions = {}): Promise<SyncMetadata>
16802: 14151: 11518:  22: ```
16803: 14152: 11519:  23: 
16804: 14153: 11520:  24: #### Options
16805: 14154: 11521:  25: 
16806: 14155: 11522:  26: ```typescript
16807: 14156: 11523:  27: interface SyncOptions {
16808: 14157: 11524:  28:   dryRun?: boolean;      // Run without making changes
16809: 14158: 11525:  29:   limit?: number;        // Limit number of prices processed
16810: 14159: 11526:  30:   groupId?: string;      // Process specific group only
16811: 14160: 11527:  31:   productId?: number;    // Process specific product only
16812: 14161: 11528:  32:   showAll?: boolean;     // Show all prices, including unchanged
16813: 14162: 11529:  33: }
16814: 14163: 11530:  34: ```
16815: 14164: 11531:  35: 
16816: 14165: 11532:  36: #### Price Data Structure
16817: 14166: 11533:  37: 
16818: 14167: 11534:  38: ```typescript
16819: 14168: 11535:  39: interface CardPrice {
16820: 14169: 11536:  40:   productId: number;
16821: 14170: 11537:  41:   lowPrice: number;
16822: 14171: 11538:  42:   midPrice: number;
16823: 14172: 11539:  43:   highPrice: number;
16824: 14173: 11540:  44:   marketPrice: number | null;
16825: 14174: 11541:  45:   directLowPrice: number | null;
16826: 14175: 11542:  46:   subTypeName: "Normal" | "Foil";
16827: 14176: 11543:  47: }
16828: 14177: 11544:  48: 
16829: 14178: 11545:  49: interface PriceData {
16830: 14179: 11546:  50:   normal?: CardPrice;
16831: 14180: 11547:  51:   foil?: CardPrice;
16832: 14181: 11548:  52:   lastUpdated: Date;
16833: 14182: 11549:  53: }
16834: 14183: 11550:  54: ```
16835: 14184: 11551:  55: 
16836: 14185: 11552:  56: ## Usage Examples
16837: 14186: 11553:  57: 
16838: 14187: 11554:  58: ### Scheduled Sync
16839: 14188: 11555:  59: 
16840: 14189: 11556:  60: Automated daily price updates:
16841: 14190: 11557:  61: 
16842: 14191: 11558:  62: ```typescript
16843: 14192: 11559:  63: exports.scheduledPriceSync = onSchedule({
16844: 14193: 11560:  64:   schedule: "30 21 * * *", // Daily at 21:30 UTC
16845: 14194: 11561:  65:   timeZone: "UTC",
16846: 14195: 11562:  66:   memory: runtimeOpts.memory,
16847: 14196: 11563:  67:   timeoutSeconds: runtimeOpts.timeoutSeconds,
16848: 14197: 11564:  68:   retryCount: 3,
16849: 14198: 11565:  69: });
16850: 14199: 11566:  70: ```
16851: 14200: 11567:  71: 
16852: 14201: 11568:  72: ### Manual Price Checks
16853: 14202: 11569:  73: 
16854: 14203: 11570:  74: ```typescript
16855: 14204: 11571:  75: // Test specific product
16856: 14205: 11572:  76: await syncPrices({
16857: 14206: 11573:  77:   dryRun: true,
16858: 14207: 11574:  78:   productId: 477236,
16859: 14208: 11575:  79:   showAll: true
16860: 14209: 11576:  80: });
16861: 14210: 11577:  81: 
16862: 14211: 11578:  82: // Check specific group
16863: 14212: 11579:  83: await syncPrices({
16864: 14213: 11580:  84:   dryRun: true,
16865: 14214: 11581:  85:   groupId: "23783",
16866: 14215: 11582:  86:   limit: 10
16867: 14216: 11583:  87: });
16868: 14217: 11584:  88: ```
16869: 14218: 11585:  89: 
16870: 14219: 11586:  90: ## Price Processing
16871: 14220: 11587:  91: 
16872: 14221: 11588:  92: ### Price Data Processing
16873: 14222: 11589:  93: 
16874: 14223: 11590:  94: ```typescript
16875: 14224: 11591:  95: function processPrices(prices: CardPrice[]): Record<number, PriceData> {
16876: 14225: 11592:  96:   const priceMap: Record<number, PriceData> = {};
16877: 14226: 11593:  97: 
16878: 14227: 11594:  98:   prices.forEach((price) => {
16879: 14228: 11595:  99:     if (!priceMap[price.productId]) {
16880: 14229: 11596: 100:       priceMap[price.productId] = {
16881: 14230: 11597: 101:         lastUpdated: new Date(),
16882: 14231: 11598: 102:       };
16883: 14232: 11599: 103:     }
16884: 14233: 11600: 104: 
16885: 14234: 11601: 105:     if (price.subTypeName === "Normal") {
16886: 14235: 11602: 106:       priceMap[price.productId].normal = price;
16887: 14236: 11603: 107:     } else {
16888: 14237: 11604: 108:       priceMap[price.productId].foil = price;
16889: 14238: 11605: 109:     }
16890: 14239: 11606: 110:   });
16891: 14240: 11607: 111: 
16892: 14241: 11608: 112:   return priceMap;
16893: 14242: 11609: 113: }
16894: 14243: 11610: 114: ```
16895: 14244: 11611: 115: 
16896: 14245: 11612: 116: ### Batch Processing
16897: 14246: 11613: 117: 
16898: 14247: 11614: 118: ```typescript
16899: 14248: 11615: 119: async function processBatch<T>(
16900: 14249: 11616: 120:   items: T[],
16901: 14250: 11617: 121:   processor: (batch: T[]) => Promise<void>,
16902: 14251: 11618: 122:   batchSize: number = 500
16903: 14252: 11619: 123: ): Promise<void>
16904: 14253: 11620: 124: ```
16905: 14254: 11621: 125: 
16906: 14255: 11622: 126: ## Error Handling
16907: 14256: 11623: 127: 
16908: 14257: 11624: 128: ### Error Types
16909: 14258: 11625: 129: 
16910: 14259: 11626: 130: ```typescript
16911: 14260: 11627: 131: class SyncError extends Error implements GenericError {
16912: 14261: 11628: 132:   code?: string;
16913: 14262: 11629: 133: 
16914: 14263: 11630: 134:   constructor(
16915: 14264: 11631: 135:     message: string,
16916: 14265: 11632: 136:     code?: string,
16917: 14266: 11633: 137:     public details?: Record<string, unknown>
16918: 14267: 11634: 138:   ) {
16919: 14268: 11635: 139:     super(message);
16920: 14269: 11636: 140:     this.name = "SyncError";
16921: 14270: 11637: 141:     this.code = code;
16922: 14271: 11638: 142:   }
16923: 14272: 11639: 143: }
16924: 14273: 11640: 144: ```
16925: 14274: 11641: 145: 
16926: 14275: 11642: 146: ### Request Retry Logic
16927: 14276: 11643: 147: 
16928: 14277: 11644: 148: ```typescript
16929: 14278: 11645: 149: const MAX_RETRIES = 3;
16930: 14279: 11646: 150: const BASE_DELAY = 1000; // 1 second base delay
16931: 14280: 11647: 151: 
16932: 14281: 11648: 152: // Exponential backoff implementation
16933: 14282: 11649: 153: if (retryCount < MAX_RETRIES - 1) {
16934: 14283: 11650: 154:   const delay = Math.pow(2, retryCount) * BASE_DELAY;
16935: 14284: 11651: 155:   await logWarning(`Request failed, retrying in ${delay}ms...`);
16936: 14285: 11652: 156: }
16937: 14286: 11653: 157: ```
16938: 14287: 11654: 158: 
16939: 14288: 11655: 159: ## Monitoring
16940: 14289: 11656: 160: 
16941: 14290: 11657: 161: ### Price Change Tracking
16942: 14291: 11658: 162: 
16943: 14292: 11659: 163: The service tracks:
16944: 14293: 11660: 164: 
16945: 14294: 11661: 165: - Price updates per group
16946: 14295: 11662: 166: - Number of cards processed
16947: 14296: 11663: 167: - Processing duration
16948: 14297: 11664: 168: - Error rates
16949: 14298: 11665: 169: - Price change percentages
16950: 14299: 11666: 170: 
16951: 14300: 11667: 171: ### Success Metrics
16952: 14301: 11668: 172: 
16953: 14302: 11669: 173: ```typescript
16954: 14303: 11670: 174: interface SyncMetadata {
16955: 14304: 11671: 175:   lastSync: Date;
16956: 14305: 11672: 176:   status: "in_progress" | "success" | "failed" | "completed_with_errors";
16957: 14306: 11673: 177:   cardCount: number;
16958: 14307: 11674: 178:   type: "manual" | "scheduled";
16959: 14308: 11675: 179:   groupsProcessed: number;
16960: 14309: 11676: 180:   groupsUpdated: number;
16961: 14310: 11677: 181:   errors: string[];
16962: 14311: 11678: 182:   duration?: number;
16963: 14312: 11679: 183: }
16964: 14313: 11680: 184: 
16965: 14314: 11681: 185: 
16966: 14315: 11682: 186: ## Best Practices
16967: 14316: 11683: 187: 
16968: 14317: 11684: 188: 1. Regular Monitoring:
16969: 14318: 11685: 189:    - Check sync metadata regularly
16970: 14319: 11686: 190:    - Monitor price change patterns
16971: 14320: 11687: 191:    - Track error rates
16972: 14321: 11688: 192: 
16973: 14322: 11689: 193: 1. Testing Changes:
16974: 14323: 11690: 194: 
16975: 14324: 11691: 195: ```typescript
16976: 14325: 11692: 196: // Always test with dry run
16977: 14326: 11693: 197: const testSync = await syncPrices({
16978: 14327: 11694: 198:   dryRun: true,
16979: 14328: 11695: 199:   limit: 5,
16980: 14329: 11696: 200:   showAll: true
16981: 14330: 11697: 201: });
16982: 14331: 11698: 202: ```
16983: 14332: 11699: 203: 
16984: 14333: 11700: 204: 1. Error Handling:
16985: 14334: 11701: 205: 
16986: 14335: 11702: 206: ```typescript
16987: 14336: 11703: 207: // Implement proper error checking
16988: 14337: 11704: 208: const sync = await syncPrices(options);
16989: 14338: 11705: 209: if (sync.status === "completed_with_errors") {
16990: 14339: 11706: 210:   console.error("Sync errors:", sync.errors);
16991: 14340: 11707: 211: }
16992: 14341: 11708: 212: ```
16993: 14342: 11709: 213: 
16994: 14343: 11710: 214: ## Troubleshooting
16995: 14344: 11711: 215: 
16996: 14345: 11712: 216: ### Common Issues
16997: 14346: 11713: 217: 
16998: 14347: 11714: 218: 1. Price Discrepancies:
16999: 14348: 11715: 219:    - Verify data source connection
17000: 14349: 11716: 220:    - Check price format consistency
17001: 14350: 11717: 221:    - Monitor exchange rate impacts
17002: 14351: 11718: 222: 
17003: 14352: 11719: 223: 2. Sync Failures:
17004: 14353: 11720: 224:    - Check network connectivity
17005: 14354: 11721: 225:    - Verify API rate limits
17006: 14355: 11722: 226:    - Monitor service quotas
17007: 14356: 11723: 227: 
17008: 14357: 11724: 228: 3. Performance Issues:
17009: 14358: 11725: 229:    - Use appropriate batch sizes
17010: 14359: 11726: 230:    - Implement proper delays
17011: 14360: 11727: 231:    - Monitor memory usage
17012: 14361: 11728: 232: 
17013: 14362: 11729: 233: ### Validation
17014: 14363: 11730: 234: 
17015: 14364: 11731: 235: ```typescript
17016: 14365: 11732: 236: // Validate price data
17017: 14366: 11733: 237: if (price.midPrice < 0 || price.lowPrice < 0) {
17018: 14367: 11734: 238:   throw new Error("Invalid price values detected");
17019: 14368: 11735: 239: }
17020: 14369: 11736: 240: ```
17021: 14370: 11737: 241: 
17022: 14371: 11738: 242: ## Related Components
17023: 14372: 11739: 243: 
17024: 14373: 11740: 244: - [Card Sync Service](./card-sync)
17025: 14374: 11741: 245: - [Cache System](../utils/cache)
17026: 14375: 11742: 246: - [Error Handling](../utils/error-handling)
17027: 14376: 11743: 247: - [Logger](../utils/logging)
17028: 14377: 11744: </file>
17029: 14378: 11745: 
17030: 14379: 11746: <file path="setup/configuration.md">
17031: 14380: 11747:   1: # Configuration Guide
17032: 14381: 11748:   2: 
17033: 14382: 11749:   3: ## Firebase Configuration
17034: 14383: 11750:   4: 
17035: 14384: 11751:   5: ### Environment Variables
17036: 14385: 11752:   6: 
17037: 14386: 11753:   7: Create a `.env.local` file in your project root:
17038: 14387: 11754:   8: 
17039: 14388: 11755:   9: ```env
17040: 14389: 11756:  10: FIREBASE_PROJECT_ID=your-project-id
17041: 14390: 11757:  11: FIREBASE_STORAGE_BUCKET=your-storage-bucket
17042: 14391: 11758:  12: ```
17043: 14392: 11759:  13: 
17044: 14393: 11760:  14: ### Firebase Console Settings
17045: 14394: 11761:  15: 
17046: 14395: 11762:  16: 1. Firestore Database:
17047: 14396: 11763:  17: 
17048: 14397: 11764:  18: - Collection structure:
17049: 14398: 11765:  19:   - `cards`: Stores card information
17050: 14399: 11766:  20:   - `prices`: Stores price data
17051: 14400: 11767:  21:   - `syncMetadata`: Stores sync operation logs
17052: 14401: 11768:  22:   - `logs`: System logs
17053: 14402: 11769:  23:   - `cardHashes`: Card data version control
17054: 14403: 11770:  24:   - `priceHashes`: Price data version control
17055: 14404: 11771:  25:   - `imageMetadata`: Image processing metadata
17056: 14405: 11772:  26: 
17057: 14406: 11773:  27: 1. Storage:
17058: 14407: 11774:  28: 
17059: 14408: 11775:  29: - Bucket structure:
17060: 14409: 11776:  30:   - `/card-images/{groupId}/{productId}_200w.jpg`
17061: 14410: 11777:  31:   - `/card-images/{groupId}/{productId}_400w.jpg`
17062: 14411: 11778:  32: 
17063: 14412: 11779:  33: ## Application Configuration
17064: 14413: 11780:  34: 
17065: 14414: 11781:  35: ### Runtime Options
17066: 14415: 11782:  36: 
17067: 14416: 11783:  37: Located in `src/config/firebase.ts`:
17068: 14417: 11784:  38: 
17069: 14418: 11785:  39: ```typescript
17070: 14419: 11786:  40: export const runtimeOpts = {
17071: 14420: 11787:  41:   timeoutSeconds: 540,
17072: 14421: 11788:  42:   memory: "1GiB",
17073: 14422: 11789:  43: } as const;
17074: 14423: 11790:  44: ```
17075: 14424: 11791:  45: 
17076: 14425: 11792:  46: ### API Configuration
17077: 14426: 11793:  47: 
17078: 14427: 11794:  48: Base URL and category settings:
17079: 14428: 11795:  49: 
17080: 14429: 11796:  50: ```typescript
17081: 14430: 11797:  51: export const BASE_URL = "https://tcgcsv.com";
17082: 14431: 11798:  52: export const FFTCG_CATEGORY_ID = "24";
17083: 14432: 11799:  53: ```
17084: 14433: 11800:  54: 
17085: 14434: 11801:  55: ### Collection Names
17086: 14435: 11802:  56: 
17087: 14436: 11803:  57: ```typescript
17088: 14437: 11804:  58: export const COLLECTION = {
17089: 14438: 11805:  59:   CARDS: "cards",
17090: 14439: 11806:  60:   PRICES: "prices",
17091: 14440: 11807:  61:   SYNC_METADATA: "syncMetadata",
17092: 14441: 11808:  62:   LOGS: "logs",
17093: 14442: 11809:  63:   CARD_HASHES: "cardHashes",
17094: 14443: 11810:  64:   PRICE_HASHES: "priceHashes",
17095: 14444: 11811:  65:   IMAGE_METADATA: "imageMetadata",
17096: 14445: 11812:  66: };
17097: 14446: 11813:  67: ```
17098: 14447: 11814:  68: 
17099: 14448: 11815:  69: ## Sync Configuration
17100: 14449: 11816:  70: 
17101: 14450: 11817:  71: ### Card Sync Schedule
17102: 14451: 11818:  72: 
17103: 14452: 11819:  73: ```typescript
17104: 14453: 11820:  74: exports.scheduledCardSync = onSchedule({
17105: 14454: 11821:  75:   schedule: "0 21 * * *", // Daily at 21:00 UTC
17106: 14455: 11822:  76:   timeZone: "UTC",
17107: 14456: 11823:  77:   memory: runtimeOpts.memory,
17108: 14457: 11824:  78:   timeoutSeconds: runtimeOpts.timeoutSeconds,
17109: 14458: 11825:  79:   retryCount: 3,
17110: 14459: 11826:  80: });
17111: 14460: 11827:  81: ```
17112: 14461: 11828:  82: 
17113: 14462: 11829:  83: ### Price Sync Schedule
17114: 14463: 11830:  84: 
17115: 14464: 11831:  85: ```typescript
17116: 14465: 11832:  86: exports.scheduledPriceSync = onSchedule({
17117: 14466: 11833:  87:   schedule: "30 21 * * *", // Daily at 21:30 UTC
17118: 14467: 11834:  88:   timeZone: "UTC",
17119: 14468: 11835:  89:   memory: runtimeOpts.memory,
17120: 14469: 11836:  90:   timeoutSeconds: runtimeOpts.timeoutSeconds,
17121: 14470: 11837:  91:   retryCount: 3,
17122: 14471: 11838:  92: });
17123: 14472: 11839:  93: ```
17124: 14473: 11840:  94: 
17125: 14474: 11841:  95: ## Image Processing Configuration
17126: 14475: 11842:  96: 
17127: 14476: 11843:  97: ### Compression Settings
17128: 14477: 11844:  98: 
17129: 14478: 11845:  99: ```typescript
17130: 14479: 11846: 100: private static readonly QUALITY = {
17131: 14480: 11847: 101:   HIGH_RES: 90,
17132: 14481: 11848: 102:   LOW_RES: 85,
17133: 14482: 11849: 103: };
17134: 14483: 11850: 104: 
17135: 14484: 11851: 105: private static readonly DIMENSIONS = {
17136: 14485: 11852: 106:   HIGH_RES: 400,
17137: 14486: 11853: 107:   LOW_RES: 200,
17138: 14487: 11854: 108: };
17139: 14488: 11855: 109: ```
17140: 14489: 11856: 110: 
17141: 14490: 11857: 111: ### Cache Settings
17142: 14491: 11858: 112: 
17143: 14492: 11859: 113: ```typescript
17144: 14493: 11860: 114: const options = {
17145: 14494: 11861: 115:   max: 500,
17146: 14495: 11862: 116:   ttl: 1000 * 60 * 60, // 1 hour
17147: 14496: 11863: 117: };
17148: 14497: 11864: 118: ```
17149: 14498: 11865: 119: 
17150: 14499: 11866: 120: ## Testing Configuration
17151: 14500: 11867: 121: 
17152: 14501: 11868: 122: ### Test Cases
17153: 14502: 11869: 123: 
17154: 14503: 11870: 124: ```typescript
17155: 14504: 11871: 125: const TEST_CASES = [
17156: 14505: 11872: 126:   {
17157: 14506: 11873: 127:     imageUrl: "https://tcgplayer-cdn.tcgplayer.com/product/477236_200w.jpg",
17158: 14507: 11874: 128:     groupId: "23783",
17159: 14508: 11875: 129:     productId: 477236,
17160: 14509: 11876: 130:     description: "FFVII Boss Deck",
17161: 14510: 11877: 131:   },
17162: 14511: 11878: 132: ];
17163: 14512: 11879: 133: ```
17164: 14513: 11880: 134: 
17165: 14514: 11881: 135: ## Error Handling Configuration
17166: 14515: 11882: 136: 
17167: 14516: 11883: 137: ### Log Levels
17168: 14517: 11884: 138: 
17169: 14518: 11885: 139: ```typescript
17170: 14519: 11886: 140: export interface ErrorReport {
17171: 14520: 11887: 141:   timestamp: Date;
17172: 14521: 11888: 142:   context: string;
17173: 14522: 11889: 143:   error: string;
17174: 14523: 11890: 144:   stackTrace?: string;
17175: 14524: 11891: 145:   metadata?: Record<string, unknown>;
17176: 14525: 11892: 146:   severity: "ERROR" | "WARNING" | "CRITICAL";
17177: 14526: 11893: 147: }
17178: 14527: 11894: 148: ```
17179: 14528: 11895: </file>
17180: 14529: 11896: 
17181: 14530: 11897: <file path="setup/installation.md">
17182: 14531: 11898:  1: # Installation Guide
17183: 14532: 11899:  2: 
17184: 14533: 11900:  3: ## Prerequisites
17185: 14534: 11901:  4: 
17186: 14535: 11902:  5: - Node.js 18 or higher
17187: 14536: 11903:  6: - Firebase CLI
17188: 14537: 11904:  7: - Git (for version control)
17189: 14538: 11905:  8: - A Firebase project with Firestore and Storage enabled
17190: 14539: 11906:  9: 
17191: 14540: 11907: 10: ## Firebase Project Setup
17192: 14541: 11908: 11: 
17193: 14542: 11909: 12: 1. Create or select a Firebase project:
17194: 14543: 11910: 13: 
17195: 14544: 11911: 14: - Visit the [Firebase Console](https://console.firebase.google.com/)
17196: 14545: 11912: 15: - Create a new project or select an existing one
17197: 14546: 11913: 16: - Note your project ID for later use
17198: 14547: 11914: 17: 
17199: 14548: 11915: 18: 1. Enable required services:
17200: 14549: 11916: 19: 
17201: 14550: 11917: 20: - Firestore Database
17202: 14551: 11918: 21: - Cloud Storage
17203: 14552: 11919: 22: - Cloud Functions
17204: 14553: 11920: 23: 
17205: 14554: 11921: 24: 1. Configure Firebase Authentication:
17206: 14555: 11922: 25: 
17207: 14556: 11923: 26: - Enable Google Authentication
17208: 14557: 11924: 27: - Add authorized domains if needed
17209: 14558: 11925: 28: - Set up authorized email addresses for admin access
17210: 14559: 11926: 29: 
17211: 14560: 11927: 30: ## Local Development Setup
17212: 14561: 11928: 31: 
17213: 14562: 11929: 32: 1. Clone the repository:
17214: 14563: 11930: 33: 
17215: 14564: 11931: 34: ```bash
17216: 14565: 11932: 35: git clone <repository-url>
17217: 14566: 11933: 36: cd fftcg-sync-service
17218: 14567: 11934: </file>
17219: 14568: 11935: 
17220: 14569: 11936: <file path="troubleshooting.md">
17221: 14570: 11937:   1: # Troubleshooting Guide
17222: 14571: 11938:   2: 
17223: 14572: 11939:   3: ## Quick Diagnosis
17224: 14573: 11940:   4: 
17225: 14574: 11941:   5: ### System Status Check
17226: 14575: 11942:   6: 
17227: 14576: 11943:   7: ```bash
17228: 14577: 11944:   8: # Check service health
17229: 14578: 11945:   9: curl https://${REGION}-${PROJECT_ID}.cloudfunctions.net/healthCheck
17230: 14579: 11946:  10: 
17231: 14580: 11947:  11: # Expected Response
17232: 14581: 11948:  12: {
17233: 14582: 11949:  13:   "status": "healthy",
17234: 14583: 11950:  14:   "timestamp": "2024-11-22T01:47:16.617Z",
17235: 14584: 11951:  15:   "version": "1.0.0"
17236: 14585: 11952:  16: }
17237: 14586: 11953:  17: ```
17238: 14587: 11954:  18: 
17239: 14588: 11955:  19: ### Log Analysis
17240: 14589: 11956:  20: 
17241: 14590: 11957:  21: ```typescript
17242: 14591: 11958:  22: // View recent logs
17243: 14592: 11959:  23: firebase functions:log
17244: 14593: 11960:  24: 
17245: 14594: 11961:  25: // Filter for errors
17246: 14595: 11962:  26: firebase functions:log --only errors
17247: 14596: 11963:  27: 
17248: 14597: 11964:  28: // View specific function logs
17249: 14598: 11965:  29: firebase functions:log --only syncCards
17250: 14599: 11966:  30: ```
17251: 14600: 11967:  31: 
17252: 14601: 11968:  32: ## Common Issues
17253: 14602: 11969:  33: 
17254: 14603: 11970:  34: ### Synchronization Failures
17255: 14604: 11971:  35: 
17256: 14605: 11972:  36: #### Cards Not Syncing
17257: 14606: 11973:  37: 
17258: 14607: 11974:  38: **Symptoms:**
17259: 14608: 11975:  39: 
17260: 14609: 11976:  40: - Missing card data
17261: 14610: 11977:  41: - Outdated information
17262: 14611: 11978:  42: - Sync operation completes without updates
17263: 14612: 11979:  43: 
17264: 14613: 11980:  44: **Solutions:**
17265: 14614: 11981:  45: 
17266: 14615: 11982:  46: 1. Check API access:
17267: 14616: 11983:  47: 
17268: 14617: 11984:  48: ```typescript
17269: 14618: 11985:  49: // Test API connection
17270: 14619: 11986:  50: const response = await makeRequest<{ results: any[] }>(
17271: 14620: 11987:  51:   `${FFTCG_CATEGORY_ID}/groups`,
17272: 14621: 11988:  52:   {metadata: {operation: "fetchGroups"}}
17273: 14622: 11989:  53: );
17274: 14623: 11990:  54: ```
17275: 14624: 11991:  55: 
17276: 14625: 11992:  56: 1. Verify hash comparison:
17277: 14626: 11993:  57: 
17278: 14627: 11994:  58: ```typescript
17279: 14628: 11995:  59: // Force sync by clearing hashes
17280: 14629: 11996:  60: await db.collection(COLLECTION.CARD_HASHES).doc(groupId).delete();
17281: 14630: 11997:  61: ```
17282: 14631: 11998:  62: 
17283: 14632: 11999:  63: 1. Check rate limits:
17284: 14633: 12000:  64: 
17285: 14634: 12001:  65: ```typescript
17286: 14635: 12002:  66: // Monitor rate limit logs
17287: 14636: 12003:  67: await logInfo("Rate limit status", {
17288: 14637: 12004:  68:   remaining: rateLimiter.tokens,
17289: 14638: 12005:  69:   nextRefill: rateLimiter.nextRefillTime
17290: 14639: 12006:  70: });
17291: 14640: 12007:  71: ```
17292: 14641: 12008:  72: 
17293: 14642: 12009:  73: #### Price Updates Failed
17294: 14643: 12010:  74: 
17295: 14644: 12011:  75: **Symptoms:**
17296: 14645: 12012:  76: 
17297: 14646: 12013:  77: - Outdated prices
17298: 14647: 12014:  78: - Partial updates
17299: 14648: 12015:  79: - Sync metadata shows errors
17300: 14649: 12016:  80: 
17301: 14650: 12017:  81: **Solutions:**
17302: 14651: 12018:  82: 
17303: 14652: 12019:  83: 1. Validate price data:
17304: 14653: 12020:  84: 
17305: 14654: 12021:  85: ```typescript
17306: 14655: 12022:  86: const priceResult = await validateCollection(
17307: 14656: 12023:  87:   db,
17308: 14657: 12024:  88:   COLLECTION.PRICES,
17309: 14658: 12025:  89:   (data) => {
17310: 14659: 12026:  90:     return (
17311: 14660: 12027:  91:       data.lastUpdated instanceof Timestamp &&
17312: 14661: 12028:  92:       (!data.normal || typeof data.normal.midPrice === "number") &&
17313: 14662: 12029:  93:       (!data.foil || typeof data.foil.midPrice === "number")
17314: 14663: 12030:  94:     );
17315: 14664: 12031:  95:   }
17316: 14665: 12032:  96: );
17317: 14666: 12033:  97: ```
17318: 14667: 12034:  98: 
17319: 14668: 12035:  99: 1. Force price sync:
17320: 14669: 12036: 100: 
17321: 14670: 12037: 101: ```typescript
17322: 14671: 12038: 102: await syncPrices({
17323: 14672: 12039: 103:   dryRun: false,
17324: 14673: 12040: 104:   groupId: specificGroupId,
17325: 14674: 12041: 105:   forceUpdate: true
17326: 14675: 12042: 106: });
17327: 14676: 12043: 107: ```
17328: 14677: 12044: 108: 
17329: 14678: 12045: 109: ### Image Processing Issues
17330: 14679: 12046: 110: 
17331: 14680: 12047: 111: #### Image Upload Failures
17332: 14681: 12048: 112: 
17333: 14682: 12049: 113: **Symptoms:**
17334: 14683: 12050: 114: 
17335: 14684: 12051: 115: - Missing images in storage
17336: 14685: 12052: 116: - Failed compression attempts
17337: 14686: 12053: 117: - Storage quota errors
17338: 14687: 12054: 118: 
17339: 14688: 12055: 119: **Solutions:**
17340: 14689: 12056: 120: 
17341: 14690: 12057: 121: 1. Check image validation:
17342: 14691: 12058: 122: 
17343: 14692: 12059: 123: ```typescript
17344: 14693: 12060: 124: const validationResult = await ImageValidator.validateImage(buffer);
17345: 14694: 12061: 125: if (validationResult) {
17346: 14695: 12062: 126:   console.error("Validation failed:", validationResult.message);
17347: 14696: 12063: 127: }
17348: 14697: 12064: 128: ```
17349: 14698: 12065: 129: 
17350: 14699: 12066: 130: 1. Verify storage permissions:
17351: 14700: 12067: 131: 
17352: 14701: 12068: 132: ```typescript
17353: 14702: 12069: 133: try {
17354: 14703: 12070: 134:   await storage.bucket(STORAGE.BUCKETS.CARD_IMAGES).file(path).save(buffer);
17355: 14704: 12071: 135: } catch (error) {
17356: 14705: 12072: 136:   console.error("Storage access error:", error);
17357: 14706: 12073: 137: }
17358: 14707: 12074: 138: ```
17359: 14708: 12075: 139: 
17360: 14709: 12076: 140: 1. Monitor storage quota:
17361: 14710: 12077: 141: 
17362: 14711: 12078: 142: ```typescript
17363: 14712: 12079: 143: const [usage] = await storage.bucket().getMetadata();
17364: 14713: 12080: 144: console.log("Storage usage:", usage.size);
17365: 14714: 12081: 145: ```
17366: 14715: 12082: 146: 
17367: 14716: 12083: 147: #### Image Compression Problems
17368: 14717: 12084: 148: 
17369: 14718: 12085: 149: **Symptoms:**
17370: 14719: 12086: 150: 
17371: 14720: 12087: 151: - Large file sizes
17372: 14721: 12088: 152: - Poor image quality
17373: 14722: 12089: 153: - Processing timeouts
17374: 14723: 12090: 154: 
17375: 14724: 12091: 155: **Solutions:**
17376: 14725: 12092: 156: 
17377: 14726: 12093: 157: 1. Adjust compression settings:
17378: 14727: 12094: 158: 
17379: 14728: 12095: 159: ```typescript
17380: 14729: 12096: 160: const compressionOptions = {
17381: 14730: 12097: 161:   quality: ImageCompressor.QUALITY.HIGH_RES,
17382: 14731: 12098: 162:   progressive: true,
17383: 14732: 12099: 163:   mozjpeg: true
17384: 14733: 12100: 164: };
17385: 14734: 12101: 165: ```
17386: 14735: 12102: 166: 
17387: 14736: 12103: 167: 1. Debug compression process:
17388: 14737: 12104: 168: 
17389: 14738: 12105: 169: ```typescript
17390: 14739: 12106: 170: const result = await ImageCompressor.compress(buffer, false);
17391: 14740: 12107: 171: console.log("Compression results:", {
17392: 14741: 12108: 172:   originalSize: buffer.length,
17393: 14742: 12109: 173:   compressedSize: result.buffer.length,
17394: 14743: 12110: 174:   ratio: result.buffer.length / buffer.length
17395: 14744: 12111: 175: });
17396: 14745: 12112: 176: ```
17397: 14746: 12113: 177: 
17398: 14747: 12114: 178: ### Database Issues
17399: 14748: 12115: 179: 
17400: 14749: 12116: 180: #### Write Operations Failed
17401: 14750: 12117: 181: 
17402: 14751: 12118: 182: **Symptoms:**
17403: 14752: 12119: 183: 
17404: 14753: 12120: 184: - Timeout errors
17405: 14754: 12121: 185: - Batch operation failures
17406: 14755: 12122: 186: - Inconsistent data state
17407: 14756: 12123: 187: 
17408: 14757: 12124: 188: **Solutions:**
17409: 14758: 12125: 189: 
17410: 14759: 12126: 190: 1. Check batch size:
17411: 14760: 12127: 191: 
17412: 14761: 12128: 192: ```typescript
17413: 14762: 12129: 193: // Reduce batch size
17414: 14763: 12130: 194: const batchOptions = {
17415: 14764: 12131: 195:   batchSize: 100,  // Decrease from default 500
17416: 14765: 12132: 196:   delayBetweenBatches: 1000
17417: 14766: 12133: 197: };
17418: 14767: 12134: 198: ```
17419: 14768: 12135: 199: 
17420: 14769: 12136: 200: 1. Monitor write operations:
17421: 14770: 12137: 201: 
17422: 14771: 12138: 202: ```typescript
17423: 14772: 12139: 203: const stats = {
17424: 14773: 12140: 204:   attempted: 0,
17425: 14774: 12141: 205:   successful: 0,
17426: 14775: 12142: 206:   failed: 0
17427: 14776: 12143: 207: };
17428: 14777: 12144: 208: 
17429: 14778: 12145: 209: await processBatch(items, async (batch) => {
17430: 14779: 12146: 210:   try {
17431: 14780: 12147: 211:     await writeBatch.commit();
17432: 14781: 12148: 212:     stats.successful += batch.length;
17433: 14782: 12149: 213:   } catch (error) {
17434: 14783: 12150: 214:     stats.failed += batch.length;
17435: 14784: 12151: 215:     await logError(error, "writeBatch");
17436: 14785: 12152: 216:   }
17437: 14786: 12153: 217:   stats.attempted += batch.length;
17438: 14787: 12154: 218: });
17439: 14788: 12155: 219: ```
17440: 14789: 12156: 220: 
17441: 14790: 12157: 221: #### Cache Inconsistency
17442: 14791: 12158: 222: 
17443: 14792: 12159: 223: **Symptoms:**
17444: 14793: 12160: 224: 
17445: 14794: 12161: 225: - Stale data
17446: 14795: 12162: 226: - Memory usage spikes
17447: 14796: 12163: 227: - Inconsistent results
17448: 14797: 12164: 228: 
17449: 14798: 12165: 229: **Solutions:**
17450: 14799: 12166: 230: 
17451: 14800: 12167: 231: 1. Clear caches:
17452: 14801: 12168: 232: 
17453: 14802: 12169: 233: ```typescript
17454: 14803: 12170: 234: // Clear specific cache
17455: 14804: 12171: 235: imageCache.clear();
17456: 14805: 12172: 236: cardCache.clear();
17457: 14806: 12173: 237: 
17458: 14807: 12174: 238: // Clear all caches
17459: 14808: 12175: 239: await Promise.all([
17460: 14809: 12176: 240:   imageCache.clear(),
17461: 14810: 12177: 241:   cardCache.clear(),
17462: 14811: 12178: 242:   db.clearPersistence()
17463: 14812: 12179: 243: ]);
17464: 14813: 12180: 244: ```
17465: 14814: 12181: 245: 
17466: 14815: 12182: 246: 1. Verify cache settings:
17467: 14816: 12183: 247: 
17468: 14817: 12184: 248: ```typescript
17469: 14818: 12185: 249: const cacheOptions = {
17470: 14819: 12186: 250:   max: 500,
17471: 14820: 12187: 251:   ttl: 1000 * 60 * 60, // 1 hour
17472: 14821: 12188: 252:   updateAgeOnGet: true
17473: 14822: 12189: 253: };
17474: 14823: 12190: 254: ```
17475: 14824: 12191: 255: 
17476: 14825: 12192: 256: ### Performance Issues
17477: 14826: 12193: 257: 
17478: 14827: 12194: 258: #### High Memory Usage
17479: 14828: 12195: 259: 
17480: 14829: 12196: 260: **Symptoms:**
17481: 14830: 12197: 261: 
17482: 14831: 12198: 262: - Function timeouts
17483: 14832: 12199: 263: - Out of memory errors
17484: 14833: 12200: 264: - Slow processing
17485: 14834: 12201: 265: 
17486: 14835: 12202: 266: **Solutions:**
17487: 14836: 12203: 267: 
17488: 14837: 12204: 268: 1. Monitor memory usage:
17489: 14838: 12205: 269: 
17490: 14839: 12206: 270: ```typescript
17491: 14840: 12207: 271: const used = process.memoryUsage();
17492: 14841: 12208: 272: await logInfo("Memory usage", {
17493: 14842: 12209: 273:   heapUsed: `${Math.round(used.heapUsed / 1024 / 1024 * 100) / 100} MB`,
17494: 14843: 12210: 274:   heapTotal: `${Math.round(used.heapTotal / 1024 / 1024 * 100) / 100} MB`,
17495: 14844: 12211: 275: });
17496: 14845: 12212: 276: ```
17497: 14846: 12213: 277: 
17498: 14847: 12214: 278: 1. Implement cleanup:
17499: 14848: 12215: 279: 
17500: 14849: 12216: 280: ```typescript
17501: 14850: 12217: 281: async function cleanupResources(): Promise<void> {
17502: 14851: 12218: 282:   await imageCache.clear();
17503: 14852: 12219: 283:   global.gc && global.gc();
17504: 14853: 12220: 284: }
17505: 14854: 12221: 285: ```
17506: 14855: 12222: 286: 
17507: 14856: 12223: 287: #### Slow Synchronization
17508: 14857: 12224: 288: 
17509: 14858: 12225: 289: **Symptoms:**
17510: 14859: 12226: 290: 
17511: 14860: 12227: 291: - Long sync duration
17512: 14861: 12228: 292: - Timeout errors
17513: 14862: 12229: 293: - Queue buildup
17514: 14863: 12230: 294: 
17515: 14864: 12231: 295: **Solutions:**
17516: 14865: 12232: 296: 
17517: 14866: 12233: 297: 1. Enable progress tracking:
17518: 14867: 12234: 298: 
17519: 14868: 12235: 299: ```typescript
17520: 14869: 12236: 300: const progress = new EnhancedProgressTracker(
17521: 14870: 12237: 301:   totalItems,
17522: 14871: 12238: 302:   "Processing Cards",
17523: 14872: 12239: 303:   { updateInterval: 1000 }
17524: 14873: 12240: 304: );
17525: 14874: 12241: 305: 
17526: 14875: 12242: 306: // Monitor progress
17527: 14876: 12243: 307: progress.update(1);
17528: 14877: 12244: 308: const stats = progress.getProgress();
17529: 14878: 12245: 309: ```
17530: 14879: 12246: 310: 
17531: 14880: 12247: 311: 1. Optimize batch processing:
17532: 14881: 12248: 312: 
17533: 14882: 12249: 313: ```typescript
17534: 14883: 12250: 314: const optimizedBatch = new AdaptiveBatchProcessor();
17535: 14884: 12251: 315: await optimizedBatch.processBatch(items, processor);
17536: 14885: 12252: 316: ```
17537: 14886: 12253: 317: 
17538: 14887: 12254: 318: ### Network Issues
17539: 14888: 12255: 319: 
17540: 14889: 12256: 320: #### API Connection Failures
17541: 14890: 12257: 321: 
17542: 14891: 12258: 322: **Symptoms:**
17543: 14892: 12259: 323: 
17544: 14893: 12260: 324: - Request timeouts
17545: 14894: 12261: 325: - Connection refused
17546: 14895: 12262: 326: - DNS resolution failed
17547: 14896: 12263: 327: 
17548: 14897: 12264: 328: **Solutions:**
17549: 14898: 12265: 329: 
17550: 14899: 12266: 330: 1. Implement retry logic:
17551: 14900: 12267: 331: 
17552: 14901: 12268: 332: ```typescript
17553: 14902: 12269: 333: const requestWithRetry = async () => {
17554: 14903: 12270: 334:   const retryStrategy = new RetryStrategy();
17555: 14904: 12271: 335:   return retryStrategy.executeWithRetry(
17556: 14905: 12272: 336:     operation,
17557: 14906: 12273: 337:     "API_REQUEST"
17558: 14907: 12274: 338:   );
17559: 14908: 12275: 339: };
17560: 14909: 12276: 340: ```
17561: 14910: 12277: 341: 
17562: 14911: 12278: 342: 1. Check network status:
17563: 14912: 12279: 343: 
17564: 14913: 12280: 344: ```typescript
17565: 14914: 12281: 345: async function checkConnectivity(): Promise<boolean> {
17566: 14915: 12282: 346:   try {
17567: 14916: 12283: 347:     await axios.get(BASE_URL, { timeout: 5000 });
17568: 14917: 12284: 348:     return true;
17569: 14918: 12285: 349:   } catch (error) {
17570: 14919: 12286: 350:     await logError(error, "connectivityCheck");
17571: 14920: 12287: 351:     return false;
17572: 14921: 12288: 352:   }
17573: 14922: 12289: 353: }
17574: 14923: 12290: 354: ```
17575: 14924: 12291: 355: 
17576: 14925: 12292: 356: ## Debugging Tools
17577: 14926: 12293: 357: 
17578: 14927: 12294: 358: ### Logging and Diagnostics
17579: 14928: 12295: 359: 
17580: 14929: 12296: 360: ```typescript
17581: 14930: 12297: 361: // Enable detailed logging
17582: 14931: 12298: 362: const logger = new SyncLogger({
17583: 14932: 12299: 363:   type: "manual",
17584: 14933: 12300: 364:   limit: 10,
17585: 14934: 12301: 365:   dryRun: true,
17586: 14935: 12302: 366:   verbose: true
17587: 14936: 12303: 367: });
17588: 14937: 12304: 368: 
17589: 14938: 12305: 369: // Track specific operations
17590: 14939: 12306: 370: await logger.logGroupDetails(groupId, products.length, prices.length);
17591: 14940: 12307: 371: ```
17592: 14941: 12308: 372: 
17593: 14942: 12309: 373: ### Validation Tools
17594: 14943: 12310: 374: 
17595: 14944: 12311: 375: ```typescript
17596: 14945: 12312: 376: // Validate sync state
17597: 14946: 12313: 377: await validateSync({
17598: 14947: 12314: 378:   limit: 100,
17599: 14948: 12315: 379:   verbose: true,
17600: 14949: 12316: 380:   groupId: "test_group"
17601: 14950: 12317: 381: });
17602: 14951: 12318: 382: 
17603: 14952: 12319: 383: // Check data integrity
17604: 14953: 12320: 384: const integrityCheck = await validateCollection(db, COLLECTION.CARDS);
17605: 14954: 12321: 385: console.log("Integrity check results:", integrityCheck);
17606: 14955: 12322: 386: ```
17607: 14956: 12323: 387: 
17608: 14957: 12324: 388: ### Performance Monitoring
17609: 14958: 12325: 389: 
17610: 14959: 12326: 390: ```typescript
17611: 14960: 12327: 391: // Track operation timing
17612: 14961: 12328: 392: const timer = {
17613: 14962: 12329: 393:   start: Date.now(),
17614: 14963: 12330: 394:   checkPoint(operation: string) {
17615: 14964: 12331: 395:     const duration = Date.now() - this.start;
17616: 14965: 12332: 396:     console.log(`${operation}: ${duration}ms`);
17617: 14966: 12333: 397:   }
17618: 14967: 12334: 398: };
17619: 14968: 12335: 399: 
17620: 14969: 12336: 400: // Monitor async operations
17621: 14970: 12337: 401: async function trackAsyncOperation<T>(
17622: 14971: 12338: 402:   operation: () => Promise<T>,
17623: 14972: 12339: 403:   name: string
17624: 14973: 12340: 404: ): Promise<T> {
17625: 14974: 12341: 405:   const start = Date.now();
17626: 14975: 12342: 406:   try {
17627: 14976: 12343: 407:     const result = await operation();
17628: 14977: 12344: 408:     const duration = Date.now() - start;
17629: 14978: 12345: 409:     await logInfo(`${name} completed`, { duration });
17630: 14979: 12346: 410:     return result;
17631: 14980: 12347: 411:   } catch (error) {
17632: 14981: 12348: 412:     await logError(error, name);
17633: 14982: 12349: 413:     throw error;
17634: 14983: 12350: 414:   }
17635: 14984: 12351: 415: }
17636: 14985: 12352: 416: ```
17637: 14986: 12353: 417: 
17638: 14987: 12354: 418: ## Recovery Procedures
17639: 14988: 12355: 419: 
17640: 14989: 12356: 420: ### Data Recovery
17641: 14990: 12357: 421: 
17642: 14991: 12358: 422: 1. Backup verification:
17643: 14992: 12359: 423: 
17644: 14993: 12360: 424: ```typescript
17645: 14994: 12361: 425: async function verifyBackups(): Promise<boolean> {
17646: 14995: 12362: 426:   const backups = await db.collection('backups').get();
17647: 14996: 12363: 427:   return backups.size > 0;
17648: 14997: 12364: 428: }
17649: 14998: 12365: 429: ```
17650: 14999: 12366: 430: 
17651: 15000: 12367: 431: 1. Restore procedure:
17652: 15001: 12368: 432: 
17653: 15002: 12369: 433: ```typescript
17654: 15003: 12370: 434: async function restoreData(timestamp: Date): Promise<void> {
17655: 15004: 12371: 435:   const backup = await db.collection('backups')
17656: 15005: 12372: 436:     .where('timestamp', '<=', timestamp)
17657: 15006: 12373: 437:     .orderBy('timestamp', 'desc')
17658: 15007: 12374: 438:     .limit(1)
17659: 15008: 12375: 439:     .get();
17660: 15009: 12376: 440:    
17661: 15010: 12377: 441:   if (!backup.empty) {
17662: 15011: 12378: 442:     await restoreFromBackup(backup.docs[0]);
17663: 15012: 12379: 443:   }
17664: 15013: 12380: 444: }
17665: 15014: 12381: 445: ```
17666: 15015: 12382: 446: 
17667: 15016: 12383: 447: ### Error Recovery
17668: 15017: 12384: 448: 
17669: 15018: 12385: 449: 1. Clear error state:
17670: 15019: 12386: 450: 
17671: 15020: 12387: 451: ```typescript
17672: 15021: 12388: 452: async function clearErrorState(): Promise<void> {
17673: 15022: 12389: 453:   await db.collection(COLLECTION.SYNC_METADATA)
17674: 15023: 12390: 454:     .where('status', '==', 'failed')
17675: 15024: 12391: 455:     .get()
17676: 15025: 12392: 456:     .then(snapshot => {
17677: 15026: 12393: 457:       const batch = db.batch();
17678: 15027: 12394: 458:       snapshot.forEach(doc => {
17679: 15028: 12395: 459:         batch.update(doc.ref, { status: 'ready' });
17680: 15029: 12396: 460:       });
17681: 15030: 12397: 461:       return batch.commit();
17682: 15031: 12398: 462:     });
17683: 15032: 12399: 463: }
17684: 15033: 12400: 464: ```
17685: 15034: 12401: 465: 
17686: 15035: 12402: 466: 1. Reset sync state:
17687: 15036: 12403: 467: 
17688: 15037: 12404: 468: ```typescript
17689: 15038: 12405: 469: async function resetSyncState(): Promise<void> {
17690: 15039: 12406: 470:   await Promise.all([
17691: 15040: 12407: 471:     db.collection(COLLECTION.CARD_HASHES).get()
17692: 15041: 12408: 472:       .then(snapshot => {
17693: 15042: 12409: 473:         const batch = db.batch();
17694: 15043: 12410: 474:         snapshot.forEach(doc => batch.delete(doc.ref));
17695: 15044: 12411: 475:         return batch.commit();
17696: 15045: 12412: 476:       }),
17697: 15046: 12413: 477:     db.collection(COLLECTION.PRICE_HASHES).get()
17698: 15047: 12414: 478:       .then(snapshot => {
17699: 15048: 12415: 479:         const batch = db.batch();
17700: 15049: 12416: 480:         snapshot.forEach(doc => batch.delete(doc.ref));
17701: 15050: 12417: 481:         return batch.commit();
17702: 15051: 12418: 482:       })
17703: 15052: 12419: 483:   ]);
17704: 15053: 12420: 484: }
17705: 15054: 12421: 485: ```
17706: 15055: 12422: </file>
17707: 15056: 12423: 
17708: 15057: 12424: <file path="usage-guide.md">
17709: 15058: 12425:   1: # FFTCG Sync Service Usage Guide
17710: 15059: 12426:   2: 
17711: 15060: 12427:   3: ## Overview
17712: 15061: 12428:   4: 
17713: 15062: 12429:   5: This guide provides comprehensive instructions for using the FFTCG Sync Service, including setup, operations, and best practices.
17714: 15063: 12430:   6: 
17715: 15064: 12431:   7: ## Quick Start
17716: 15065: 12432:   8: 
17717: 15066: 12433:   9: ### Prerequisites
17718: 15067: 12434:  10: 
17719: 15068: 12435:  11: - Node.js 18 or higher
17720: 15069: 12436:  12: - Firebase CLI installed (`npm install -g firebase-tools`)
17721: 15070: 12437:  13: - Firebase project created
17722: 15071: 12438:  14: - Service account key configured
17723: 15072: 12439:  15: 
17724: 15073: 12440:  16: ### Initial Setup
17725: 15074: 12441:  17: 
17726: 15075: 12442:  18: 1. Clone the repository
17727: 15076: 12443:  19: 
17728: 15077: 12444:  20: ```bash
17729: 15078: 12445:  21: git clone https://github.com/yourusername/fftcg-sync-service.git
17730: 15079: 12446:  22: cd fftcg-sync-service
17731: 15080: 12447:  23: ```
17732: 15081: 12448:  24: 
17733: 15082: 12449:  25: 1. Install dependencies
17734: 15083: 12450:  26: 
17735: 15084: 12451:  27: ```bash
17736: 15085: 12452:  28: npm install
17737: 15086: 12453:  29: ```
17738: 15087: 12454:  30: 
17739: 15088: 12455:  31: 1. Initialize Firebase
17740: 15089: 12456:  32: 
17741: 15090: 12457:  33: ```bash
17742: 15091: 12458:  34: firebase login
17743: 15092: 12459:  35: firebase init
17744: 15093: 12460:  36: ```
17745: 15094: 12461:  37: 
17746: 15095: 12462:  38: ## API Reference
17747: 15096: 12463:  39: 
17748: 15097: 12464:  40: ### Card Management Endpoints
17749: 15098: 12465:  41: 
17750: 15099: 12466:  42: #### Test Card Sync
17751: 15100: 12467:  43: 
17752: 15101: 12468:  44: ```http
17753: 15102: 12469:  45: GET /testCardSync?limit=5&dryRun=true&groupId=23783
17754: 15103: 12470:  46: ```
17755: 15104: 12471:  47: 
17756: 15105: 12472:  48: #### Manual Card Sync
17757: 15106: 12473:  49: 
17758: 15107: 12474:  50: ```http
17759: 15108: 12475:  51: GET /manualCardSync
17760: 15109: 12476:  52: ```
17761: 15110: 12477:  53: 
17762: 15111: 12478:  54: ### Price Management Endpoints
17763: 15112: 12479:  55: 
17764: 15113: 12480:  56: #### Test Price Sync
17765: 15114: 12481:  57: 
17766: 15115: 12482:  58: ```http
17767: 15116: 12483:  59: GET /testPriceSync?limit=5&dryRun=true&groupId=23783
17768: 15117: 12484:  60: ```
17769: 15118: 12485:  61: 
17770: 15119: 12486:  62: #### Manual Price Sync
17771: 15120: 12487:  63: 
17772: 15121: 12488:  64: ```http
17773: 15122: 12489:  65: GET /manualPriceSync
17774: 15123: 12490:  66: ```
17775: 15124: 12491:  67: 
17776: 15125: 12492:  68: ## Synchronization Features
17777: 15126: 12493:  69: 
17778: 15127: 12494:  70: ### Card Data Synchronization
17779: 15128: 12495:  71: 
17780: 15129: 12496:  72: ```typescript
17781: 15130: 12497:  73: // Test sync with limited cards
17782: 15131: 12498:  74: const options = {
17783: 15132: 12499:  75:   dryRun: true,
17784: 15133: 12500:  76:   limit: 5,
17785: 15134: 12501:  77:   groupId: "23783" // Optional: specific group
17786: 15135: 12502:  78: };
17787: 15136: 12503:  79: 
17788: 15137: 12504:  80: await syncCards(options);
17789: 15138: 12505:  81: ```
17790: 15139: 12506:  82: 
17791: 15140: 12507:  83: ### Price Data Synchronization
17792: 15141: 12508:  84: 
17793: 15142: 12509:  85: ```typescript
17794: 15143: 12510:  86: // Test price sync for specific cards
17795: 15144: 12511:  87: const options = {
17796: 15145: 12512:  88:   dryRun: true,
17797: 15146: 12513:  89:   limit: 10,
17798: 15147: 12514:  90:   groupId: "23783",
17799: 15148: 12515:  91:   productId: 477236 // Optional: specific card
17800: 15149: 12516:  92: };
17801: 15150: 12517:  93: 
17802: 15151: 12518:  94: await syncPrices(options);
17803: 15152: 12519:  95: ```
17804: 15153: 12520:  96: 
17805: 15154: 12521:  97: ## Image Management
17806: 15155: 12522:  98: 
17807: 15156: 12523:  99: ### Basic Image Processing
17808: 15157: 12524: 100: 
17809: 15158: 12525: 101: ```typescript
17810: 15159: 12526: 102: const imageHandler = new ImageHandler();
17811: 15160: 12527: 103: 
17812: 15161: 12528: 104: const result = await imageHandler.processImage(
17813: 15162: 12529: 105:   imageUrl,
17814: 15163: 12530: 106:   groupId,
17815: 15164: 12531: 107:   productId
17816: 15165: 12532: 108: );
17817: 15166: 12533: 109: ```
17818: 15167: 12534: 110: 
17819: 15168: 12535: 111: ### Image Processing Options
17820: 15169: 12536: 112: 
17821: 15170: 12537: 113: ```typescript
17822: 15171: 12538: 114: const options = {
17823: 15172: 12539: 115:   skipImages: false,    // Skip image processing
17824: 15173: 12540: 116:   retryFailedImages: true,    // Retry failed images
17825: 15174: 12541: 117:   batchSize: 25        // Batch size for processing
17826: 15175: 12542: 118: };
17827: 15176: 12543: 119: ```
17828: 15177: 12544: 120: 
17829: 15178: 12545: 121: ## Batch Operations
17830: 15179: 12546: 122: 
17831: 15180: 12547: 123: ### Standard Batch Processing
17832: 15181: 12548: 124: 
17833: 15182: 12549: 125: ```typescript
17834: 15183: 12550: 126: const batchOptions = {
17835: 15184: 12551: 127:   batchSize: 100,
17836: 15185: 12552: 128:   delayBetweenBatches: 1000,
17837: 15186: 12553: 129:   onBatchComplete: async (stats) => {
17838: 15187: 12554: 130:     console.log(`Processed: ${stats.processed}/${stats.total}`);
17839: 15188: 12555: 131:   }
17840: 15189: 12556: 132: };
17841: 15190: 12557: 133: 
17842: 15191: 12558: 134: await processBatch(items, processor, batchOptions);
17843: 15192: 12559: 135: ```
17844: 15193: 12560: 136: 
17845: 15194: 12561: 137: ## Logging System
17846: 15195: 12562: 138: 
17847: 15196: 12563: 139: ### Core Logging Operations
17848: 15197: 12564: 140: 
17849: 15198: 12565: 141: ```typescript
17850: 15199: 12566: 142: // Info logging
17851: 15200: 12567: 143: await logInfo("Operation started", {
17852: 15201: 12568: 144:   context: "syncOperation",
17853: 15202: 12569: 145:   timestamp: new Date()
17854: 15203: 12570: 146: });
17855: 15204: 12571: 147: 
17856: 15205: 12572: 148: // Warning logging
17857: 15206: 12573: 149: await logWarning("Retry required", {
17858: 15207: 12574: 150:   attempt: 2,
17859: 15208: 12575: 151:   maxRetries: 3
17860: 15209: 12576: 152: });
17861: 15210: 12577: 153: 
17862: 15211: 12578: 154: // Error logging
17863: 15212: 12579: 155: await logError(error, "operationName");
17864: 15213: 12580: 156: ```
17865: 15214: 12581: 157: 
17866: 15215: 12582: 158: ### Sync Status Logging
17867: 15216: 12583: 159: 
17868: 15217: 12584: 160: ```typescript
17869: 15218: 12585: 161: const logger = new SyncLogger({
17870: 15219: 12586: 162:   type: "manual",
17871: 15220: 12587: 163:   limit: 10,
17872: 15221: 12588: 164:   dryRun: true
17873: 15222: 12589: 165: });
17874: 15223: 12590: 166: 
17875: 15224: 12591: 167: await logger.start();
17876: 15225: 12592: 168: await logger.logGroupDetails(groupId, products.length, prices.length);
17877: 15226: 12593: 169: await logger.finish();
17878: 15227: 12594: 170: ```
17879: 15228: 12595: 171: 
17880: 15229: 12596: 172: ## Testing Infrastructure
17881: 15230: 12597: 173: 
17882: 15231: 12598: 174: ### Image System Testing
17883: 15232: 12599: 175: 
17884: 15233: 12600: 176: ```typescript
17885: 15234: 12601: 177: // Run the image processing test suite
17886: 15235: 12602: 178: npm run test:images
17887: 15236: 12603: 179: 
17888: 15237: 12604: 180: // Test specific image handling
17889: 15238: 12605: 181: const testCase = {
17890: 15239: 12606: 182:   imageUrl: "https://example.com/card.jpg",
17891: 15240: 12607: 183:   groupId: "23783",
17892: 15241: 12608: 184:   productId: 477236
17893: 15242: 12609: 185: };
17894: 15243: 12610: 186: 
17895: 15244: 12611: 187: await testImageProcessing(testCase);
17896: 15245: 12612: 188: ```
17897: 15246: 12613: 189: 
17898: 15247: 12614: 190: ### Sync System Testing
17899: 15248: 12615: 191: 
17900: 15249: 12616: 192: ```bash
17901: 15250: 12617: 193: # Basic validation
17902: 15251: 12618: 194: npm run validate-sync
17903: 15252: 12619: 195: 
17904: 15253: 12620: 196: # Advanced validation with options
17905: 15254: 12621: 197: npm run validate-sync -- --limit 10 --verbose --groupId 23783
17906: 15255: 12622: 198: ```
17907: 15256: 12623: 199: 
17908: 15257: 12624: 200: ## System Observation
17909: 15258: 12625: 201: 
17910: 15259: 12626: 202: ### Health Monitoring
17911: 15260: 12627: 203: 
17912: 15261: 12628: 204: ```typescript
17913: 15262: 12629: 205: // Endpoint: GET /healthCheck
17914: 15263: 12630: 206: const healthResponse = {
17915: 15264: 12631: 207:   status: "healthy",
17916: 15265: 12632: 208:   timestamp: "2024-11-22T01:47:16.617Z",
17917: 15266: 12633: 209:   version: "1.0.0"
17918: 15267: 12634: 210: };
17919: 15268: 12635: 211: ```
17920: 15269: 12636: 212: 
17921: 15270: 12637: 213: ### Runtime Monitoring
17922: 15271: 12638: 214: 
17923: 15272: 12639: 215: ```typescript
17924: 15273: 12640: 216: // Monitor sync operations
17925: 15274: 12641: 217: const syncStats = {
17926: 15275: 12642: 218:   processedItems: 0,
17927: 15276: 12643: 219:   totalItems: 100,
17928: 15277: 12644: 220:   startTime: Date.now(),
17929: 15278: 12645: 221:   errors: []
17930: 15279: 12646: 222: };
17931: 15280: 12647: 223: 
17932: 15281: 12648: 224: // Update monitoring stats
17933: 15282: 12649: 225: function updateStats(processed: number): void {
17934: 15283: 12650: 226:   syncStats.processedItems = processed;
17935: 15284: 12651: 227:   const elapsed = Date.now() - syncStats.startTime;
17936: 15285: 12652: 228:   const rate = processed / (elapsed / 1000);
17937: 15286: 12653: 229:   console.log(`Processing rate: ${rate.toFixed(2)} items/second`);
17938: 15287: 12654: 230: }
17939: 15288: 12655: 231: ```
17940: 15289: 12656: 232: 
17941: 15290: 12657: 233: ## Operational Procedures
17942: 15291: 12658: 234: 
17943: 15292: 12659: 235: ### Sync Process Workflow
17944: 15293: 12660: 236: 
17945: 15294: 12661: 237: 1. Initialize sync operation
17946: 15295: 12662: 238: 
17947: 15296: 12663: 239: ```typescript
17948: 15297: 12664: 240: const syncOptions = {
17949: 15298: 12665: 241:   dryRun: false,
17950: 15299: 12666: 242:   limit: undefined,
17951: 15300: 12667: 243:   groupId: undefined
17952: 15301: 12668: 244: };
17953: 15302: 12669: 245: ```
17954: 15303: 12670: 246: 
17955: 15304: 12671: 247: 1. Fetch and validate data
17956: 15305: 12672: 248: 
17957: 15306: 12673: 249: ```typescript
17958: 15307: 12674: 250: const rawData = await fetchData();
17959: 15308: 12675: 251: const validatedData = await validateData(rawData);
17960: 15309: 12676: 252: ```
17961: 15310: 12677: 253: 
17962: 15311: 12678: 254: 1. Process updates
17963: 15312: 12679: 255: 
17964: 15313: 12680: 256: ```typescript
17965: 15314: 12681: 257: await processBatch(validatedData, async (batch) => {
17966: 15315: 12682: 258:   await updateDatabase(batch);
17967: 15316: 12683: 259: });
17968: 15317: 12684: 260: ```
17969: 15318: 12685: 261: 
17970: 15319: 12686: 262: 1. Handle image processing
17971: 15320: 12687: 263: 
17972: 15321: 12688: 264: ```typescript
17973: 15322: 12689: 265: await processImages(validatedData, {
17974: 15323: 12690: 266:   compression: true,
17975: 15324: 12691: 267:   validateMetadata: true
17976: 15325: 12692: 268: });
17977: 15326: 12693: 269: ```
17978: 15327: 12694: 270: 
17979: 15328: 12695: 271: 1. Update cache system
17980: 15329: 12696: 272: 
17981: 15330: 12697: 273: ```typescript
17982: 15331: 12698: 274: await updateCacheEntries(processedData);
17983: 15332: 12699: 275: ```
17984: 15333: 12700: 276: 
17985: 15334: 12701: 277: ### Image Pipeline Workflow
17986: 15335: 12702: 278: 
17987: 15336: 12703: 279: #### Image Acquisition and Validation
17988: 15337: 12704: 280: 
17989: 15338: 12705: 281: ```typescript
17990: 15339: 12706: 282: const imageHandler = new ImageHandler();
17991: 15340: 12707: 283: const validator = new ImageValidator();
17992: 15341: 12708: 284: 
17993: 15342: 12709: 285: const buffer = await imageHandler.downloadImage(url);
17994: 15343: 12710: 286: const validationResult = await validator.validateImage(buffer);
17995: 15344: 12711: 287: ```
17996: 15345: 12712: 288: 
17997: 15346: 12713: 289: #### Image Processing and Storage
17998: 15347: 12714: 290: 
17999: 15348: 12715: 291: ```typescript
18000: 15349: 12716: 292: const compressor = new ImageCompressor();
18001: 15350: 12717: 293: const result = await compressor.compress(buffer, {
18002: 15351: 12718: 294:   quality: 85,
18003: 15352: 12719: 295:   maxWidth: 800
18004: 15353: 12720: 296: });
18005: 15354: 12721: 297: 
18006: 15355: 12722: 298: await storageService.uploadImage(result.buffer, {
18007: 15356: 12723: 299:   metadata: result.info
18008: 15357: 12724: 300: });
18009: 15358: 12725: 301: ```
18010: 15359: 12726: 302: 
18011: 15360: 12727: 303: ## System Optimization
18012: 15361: 12728: 304: 
18013: 15362: 12729: 305: ### Database Performance
18014: 15363: 12730: 306: 
18015: 15364: 12731: 307: ```typescript
18016: 15365: 12732: 308: // Use batch operations for multiple updates
18017: 15366: 12733: 309: const batch = db.batch();
18018: 15367: 12734: 310: updates.forEach(update => {
18019: 15368: 12735: 311:   const ref = db.collection('cards').doc(update.id);
18020: 15369: 12736: 312:   batch.update(ref, update.data);
18021: 15370: 12737: 313: });
18022: 15371: 12738: 314: await batch.commit();
18023: 15372: 12739: 315: ```
18024: 15373: 12740: 316: 
18025: 15374: 12741: 317: ### Resource Management
18026: 15375: 12742: 318: 
18027: 15376: 12743: 319: ```typescript
18028: 15377: 12744: 320: // Implement cleanup for large operations
18029: 15378: 12745: 321: async function cleanupResources(): Promise<void> {
18030: 15379: 12746: 322:   await imageCache.clear();
18031: 15380: 12747: 323:   global.gc && global.gc();
18032: 15381: 12748: 324: }
18033: 15382: 12749: 325: ```
18034: 15383: 12750: 326: 
18035: 15384: 12751: 327: ### Request Rate Management
18036: 15385: 12752: 328: 
18037: 15386: 12753: 329: ```typescript
18038: 15387: 12754: 330: const rateLimiter = {
18039: 15388: 12755: 331:   tokens: 100,
18040: 15389: 12756: 332:   refillRate: 10,
18041: 15390: 12757: 333:   interval: 1000,
18042: 15391: 12758: 334: 
18043: 15392: 12759: 335:   async acquire(): Promise<boolean> {
18044: 15393: 12760: 336:     if (this.tokens > 0) {
18045: 15394: 12761: 337:       this.tokens--;
18046: 15395: 12762: 338:       return true;
18047: 15396: 12763: 339:     }
18048: 15397: 12764: 340:     return false;
18049: 15398: 12765: 341:   }
18050: 15399: 12766: 342: };
18051: 15400: 12767: 343: ```
18052: 15401: 12768: 344: 
18053: 15402: 12769: 345: ## Security Controls
18054: 15403: 12770: 346: 
18055: 15404: 12771: 347: ### Input Validation
18056: 15405: 12772: 348: 
18057: 15406: 12773: 349: ```typescript
18058: 15407: 12774: 350: // Implement strict type checking
18059: 15408: 12775: 351: function validateSyncOptions(options: unknown): asserts options is SyncOptions {
18060: 15409: 12776: 352:   if (!options || typeof options !== "object") {
18061: 15410: 12777: 353:     throw new Error("Invalid options object");
18062: 15411: 12778: 354:   }
18063: 15412: 12779: 355: 
18064: 15413: 12780: 356:   const opts = options as Record<string, unknown>;
18065: 15414: 12781: 357:  
18066: 15415: 12782: 358:   if (opts.limit && typeof opts.limit !== "number") {
18067: 15416: 12783: 359:     throw new Error("Limit must be a number");
18068: 15417: 12784: 360:   }
18069: 15418: 12785: 361: 
18070: 15419: 12786: 362:   if (opts.groupId && typeof opts.groupId !== "string") {
18071: 15420: 12787: 363:     throw new Error("GroupId must be a string");
18072: 15421: 12788: 364:   }
18073: 15422: 12789: 365: }
18074: 15423: 12790: 366: ```
18075: 15424: 12791: 367: 
18076: 15425: 12792: 368: ### Authentication
18077: 15426: 12793: 369: 
18078: 15427: 12794: 370: ```typescript
18079: 15428: 12795: 371: // Verify Firebase authentication
18080: 15429: 12796: 372: async function verifyAuth(req: Request): Promise<void> {
18081: 15430: 12797: 373:   const token = req.headers.authorization?.split("Bearer ")[1];
18082: 15431: 12798: 374:   if (!token) {
18083: 15432: 12799: 375:     throw new Error("No authentication token provided");
18084: 15433: 12800: 376:   }
18085: 15434: 12801: 377: 
18086: 15435: 12802: 378:   try {
18087: 15436: 12803: 379:     await admin.auth().verifyIdToken(token);
18088: 15437: 12804: 380:   } catch (error) {
18089: 15438: 12805: 381:     throw new Error("Invalid authentication token");
18090: 15439: 12806: 382:   }
18091: 15440: 12807: 383: }
18092: 15441: 12808: 384: ```
18093: 15442: 12809: 385: 
18094: 15443: 12810: 386: ## Advanced Patterns
18095: 15444: 12811: 387: 
18096: 15445: 12812: 388: ### Custom Synchronization
18097: 15446: 12813: 389: 
18098: 15447: 12814: 390: ```typescript
18099: 15448: 12815: 391: // Implement custom sync logic
18100: 15449: 12816: 392: async function customSync<T extends BaseEntity>(
18101: 15450: 12817: 393:   fetcher: DataFetcher<T>,
18102: 15451: 12818: 394:   processor: DataProcessor<T>,
18103: 15452: 12819: 395:   options: SyncOptions
18104: 15453: 12820: 396: ): Promise<SyncMetadata> {
18105: 15454: 12821: 397:   const logger = new SyncLogger({
18106: 15455: 12822: 398:     type: "custom",
18107: 15456: 12823: 399:     ...options
18108: 15457: 12824: 400:   });
18109: 15458: 12825: 401: 
18110: 15459: 12826: 402:   await logger.start();
18111: 15460: 12827: 403:  
18112: 15461: 12828: 404:   try {
18113: 15462: 12829: 405:     const data = await fetcher.fetch();
18114: 15463: 12830: 406:     const processed = await processor.process(data);
18115: 15464: 12831: 407:     return {
18116: 15465: 12832: 408:       status: "success",
18117: 15466: 12833: 409:       processed: processed.length,
18118: 15467: 12834: 410:       timestamp: new Date()
18119: 15468: 12835: 411:     };
18120: 15469: 12836: 412:   } catch (error) {
18121: 15470: 12837: 413:     await logger.logError(error);
18122: 15471: 12838: 414:     throw error;
18123: 15472: 12839: 415:   } finally {
18124: 15473: 12840: 416:     await logger.finish();
18125: 15474: 12841: 417:   }
18126: 15475: 12842: 418: }
18127: 15476: 12843: 419: ```
18128: 15477: 12844: 420: 
18129: 15478: 12845: 421: ### Advanced Caching
18130: 15479: 12846: 422: 
18131: 15480: 12847: 423: ```typescript
18132: 15481: 12848: 424: // Implement hierarchical caching
18133: 15482: 12849: 425: class HierarchicalCache<T> {
18134: 15483: 12850: 426:   private l1Cache = new Map<string, T>();
18135: 15484: 12851: 427:   private l2Cache: LRUCache<string, T>;
18136: 15485: 12852: 428: 
18137: 15486: 12853: 429:   constructor(options: CacheOptions) {
18138: 15487: 12854: 430:     this.l2Cache = new LRUCache<string, T>({
18139: 15488: 12855: 431:       max: options.maxSize,
18140: 15489: 12856: 432:       ttl: options.ttl
18141: 15490: 12857: 433:     });
18142: 15491: 12858: 434:   }
18143: 15492: 12859: 435: 
18144: 15493: 12860: 436:   async get(key: string): Promise<T | undefined> {
18145: 15494: 12861: 437:     // Check L1 cache first
18146: 15495: 12862: 438:     const l1Result = this.l1Cache.get(key);
18147: 15496: 12863: 439:     if (l1Result) return l1Result;
18148: 15497: 12864: 440: 
18149: 15498: 12865: 441:     // Check L2 cache
18150: 15499: 12866: 442:     const l2Result = this.l2Cache.get(key);
18151: 15500: 12867: 443:     if (l2Result) {
18152: 15501: 12868: 444:       this.l1Cache.set(key, l2Result);
18153: 15502: 12869: 445:       return l2Result;
18154: 15503: 12870: 446:     }
18155: 15504: 12871: 447: 
18156: 15505: 12872: 448:     return undefined;
18157: 15506: 12873: 449:   }
18158: 15507: 12874: 450: }
18159: 15508: 12875: 451: ```
18160: 15509: 12876: 452: 
18161: 15510: 12877: 453: ### Advanced Batch Processing
18162: 15511: 12878: 454: 
18163: 15512: 12879: 455: ```typescript
18164: 15513: 12880: 456: // Implement adaptive batch sizing
18165: 15514: 12881: 457: class AdaptiveBatchProcessor {
18166: 15515: 12882: 458:   private optimalBatchSize: number = 100;
18167: 15516: 12883: 459:   private processingTimes: number[] = [];
18168: 15517: 12884: 460: 
18169: 15518: 12885: 461:   async processBatch<T>(
18170: 15519: 12886: 462:     items: T[],
18171: 15520: 12887: 463:     processor: (batch: T[]) => Promise<void>
18172: 15521: 12888: 464:   ): Promise<void> {
18173: 15522: 12889: 465:     for (let i = 0; i < items.length; i += this.optimalBatchSize) {
18174: 15523: 12890: 466:       const start = Date.now();
18175: 15524: 12891: 467:       const batch = items.slice(i, i + this.optimalBatchSize);
18176: 15525: 12892: 468:      
18177: 15526: 12893: 469:       await processor(batch);
18178: 15527: 12894: 470:      
18179: 15528: 12895: 471:       const duration = Date.now() - start;
18180: 15529: 12896: 472:       this.adjustBatchSize(duration);
18181: 15530: 12897: 473:     }
18182: 15531: 12898: 474:   }
18183: 15532: 12899: 475: 
18184: 15533: 12900: 476:   private adjustBatchSize(lastProcessingTime: number): void {
18185: 15534: 12901: 477:     this.processingTimes.push(lastProcessingTime);
18186: 15535: 12902: 478:     if (this.processingTimes.length >= 5) {
18187: 15536: 12903: 479:       const avgTime = this.calculateAverage(this.processingTimes);
18188: 15537: 12904: 480:       if (avgTime > 1000) {
18189: 15538: 12905: 481:         this.optimalBatchSize = Math.max(10, this.optimalBatchSize * 0.8);
18190: 15539: 12906: 482:       } else if (avgTime < 500) {
18191: 15540: 12907: 483:         this.optimalBatchSize = Math.min(1000, this.optimalBatchSize * 1.2);
18192: 15541: 12908: 484:       }
18193: 15542: 12909: 485:       this.processingTimes = [];
18194: 15543: 12910: 486:     }
18195: 15544: 12911: 487:   }
18196: 15545: 12912: 488: }
18197: 15546: 12913: 489: ```
18198: 15547: 12914: 490: 
18199: 15548: 12915: 491: ### Recovery Strategies
18200: 15549: 12916: 492: 
18201: 15550: 12917: 493: ```typescript
18202: 15551: 12918: 494: // Implement progressive retry with backoff
18203: 15552: 12919: 495: class RetryStrategy {
18204: 15553: 12920: 496:   private static readonly MAX_RETRIES = 3;
18205: 15554: 12921: 497:   private static readonly BASE_DELAY = 1000;
18206: 15555: 12922: 498: 
18207: 15556: 12923: 499:   async executeWithRetry<T>(
18208: 15557: 12924: 500:     operation: () => Promise<T>,
18209: 15558: 12925: 501:     context: string
18210: 15559: 12926: 502:   ): Promise<T> {
18211: 15560: 12927: 503:     let lastError: Error;
18212: 15561: 12928: 504:    
18213: 15562: 12929: 505:     for (let attempt = 0; attempt < RetryStrategy.MAX_RETRIES; attempt++) {
18214: 15563: 12930: 506:       try {
18215: 15564: 12931: 507:         return await operation();
18216: 15565: 12932: 508:       } catch (error) {
18217: 15566: 12933: 509:         lastError = error instanceof Error ? error : new Error(String(error));
18218: 15567: 12934: 510:         const delay = Math.pow(2, attempt) * RetryStrategy.BASE_DELAY;
18219: 15568: 12935: 511:        
18220: 15569: 12936: 512:         await logWarning(
18221: 15570: 12937: 513:           `Operation failed, attempting retry ${attempt + 1}/${RetryStrategy.MAX_RETRIES}`,
18222: 15571: 12938: 514:           { context, error: lastError.message }
18223: 15572: 12939: 515:         );
18224: 15573: 12940: 516:        
18225: 15574: 12941: 517:         await new Promise(resolve => setTimeout(resolve, delay));
18226: 15575: 12942: 518:       }
18227: 15576: 12943: 519:     }
18228: 15577: 12944: 520:    
18229: 15578: 12945: 521:     throw lastError!;
18230: 15579: 12946: 522:   }
18231: 15580: 12947: 523: }
18232: 15581: 12948: 524: ```
18233: 15582: 12949: 525: 
18234: 15583: 12950: 526: ## Reference Materials
18235: 15584: 12951: 527: 
18236: 15585: 12952: 528: ### CLI Commands
18237: 15586: 12953: 529: 
18238: 15587: 12954: 530: ```bash
18239: 15588: 12955: 531: # Build the project
18240: 15589: 12956: 532: npm run build
18241: 15590: 12957: 533: 
18242: 15591: 12958: 534: # Run linting
18243: 15592: 12959: 535: npm run lint
18244: 15593: 12960: 536: 
18245: 15594: 12961: 537: # Fix linting issues
18246: 15595: 12962: 538: npm run lint:fix
18247: 15596: 12963: 539: 
18248: 15597: 12964: 540: # Run tests
18249: 15598: 12965: 541: npm run test:images
18250: 15599: 12966: 542: 
18251: 15600: 12967: 543: # Deploy functions
18252: 15601: 12968: 544: npm run deploy
18253: 15602: 12969: 545: ```
18254: 15603: 12970: 546: 
18255: 15604: 12971: 547: ### Documentation Links
18256: 15605: 12972: 548: 
18257: 15606: 12973: 549: - [Architecture Overview](./architecture.md)
18258: 15607: 12974: 550: - [API Documentation](./api/index.md)
18259: 15608: 12975: 551: - [Troubleshooting Guide](./troubleshooting.md)
18260: 15609: 12976: 552: - [Security Guidelines](./security.md)
18261: 15610: 12977: 553: - [Performance Guide](./performance.md)
18262: 15611: 12978: </file>
18263: 15612: 12979: 
18264: 15613: 12980: <file path="utils/batch.md">
18265: 15614: 12981:   1: # Batch Processing Utility
18266: 15615: 12982:   2: 
18267: 15616: 12983:   3: ## Overview
18268: 15617: 12984:   4: 
18269: 15618: 12985:   5: The Batch Processor (`batch.ts`) manages efficient processing of large data sets through controlled batching. It provides configurable batch sizes, concurrent processing, and progress tracking for synchronization operations.
18270: 15619: 12986:   6: 
18271: 15620: 12987:   7: ## Core Features
18272: 15621: 12988:   8: 
18273: 15622: 12989:   9: - Configurable batch sizes
18274: 15623: 12990:  10: - Concurrent processing
18275: 15624: 12991:  11: - Progress tracking
18276: 15625: 12992:  12: - Error handling
18277: 15626: 12993:  13: - Memory management
18278: 15627: 12994:  14: - Rate limiting
18279: 15628: 12995:  15: 
18280: 15629: 12996:  16: ## Main Interfaces
18281: 15630: 12997:  17: 
18282: 15631: 12998:  18: ### Batch Options
18283: 15632: 12999:  19: 
18284: 15633: 13000:  20: ```typescript
18285: 15634: 13001:  21: interface BatchOptions {
18286: 15635: 13002:  22:   batchSize?: number;
18287: 15636: 13003:  23:   concurrency?: number;
18288: 15637: 13004:  24:   retries?: number;
18289: 15638: 13005:  25:   backoff?: number;
18290: 15639: 13006:  26:   onProgress?: (progress: BatchProgress) => void;
18291: 15640: 13007:  27:   abortSignal?: AbortSignal;
18292: 15641: 13008:  28: }
18293: 15642: 13009:  29: ```
18294: 15643: 13010:  30: 
18295: 15644: 13011:  31: ### Progress Interface
18296: 15645: 13012:  32: 
18297: 15646: 13013:  33: ```typescript
18298: 15647: 13014:  34: interface BatchProgress {
18299: 15648: 13015:  35:   total: number;
18300: 15649: 13016:  36:   processed: number;
18301: 15650: 13017:  37:   failed: number;
18302: 15651: 13018:  38:   currentBatch: number;
18303: 15652: 13019:  39:   totalBatches: number;
18304: 15653: 13020:  40:   percentage: number;
18305: 15654: 13021:  41:   estimatedTimeRemaining?: number;
18306: 15655: 13022:  42: }
18307: 15656: 13023:  43: ```
18308: 15657: 13024:  44: 
18309: 15658: 13025:  45: ## Core Methods
18310: 15659: 13026:  46: 
18311: 15660: 13027:  47: ### Batch Processing
18312: 15661: 13028:  48: 
18313: 15662: 13029:  49: ```typescript
18314: 15663: 13030:  50: export async function processBatch<T>(
18315: 15664: 13031:  51:   items: T[],
18316: 15665: 13032:  52:   processor: (batch: T[]) => Promise<void>,
18317: 15666: 13033:  53:   options: BatchOptions = {}
18318: 15667: 13034:  54: ): Promise<BatchResult> {
18319: 15668: 13035:  55:   const {
18320: 15669: 13036:  56:     batchSize = 100,
18321: 15670: 13037:  57:     concurrency = 1,
18322: 15671: 13038:  58:     retries = 3,
18323: 15672: 13039:  59:     onProgress
18324: 15673: 13040:  60:   } = options;
18325: 15674: 13041:  61: 
18326: 15675: 13042:  62:   const batches = chunk(items, batchSize);
18327: 15676: 13043:  63:   let processed = 0;
18328: 15677: 13044:  64:   let failed = 0;
18329: 15678: 13045:  65: 
18330: 15679: 13046:  66:   for (let i = 0; i < batches.length; i++) {
18331: 15680: 13047:  67:     try {
18332: 15681: 13048:  68:       await processor(batches[i]);
18333: 15682: 13049:  69:       processed += batches[i].length;
18334: 15683: 13050:  70:     } catch (error) {
18335: 15684: 13051:  71:       failed += batches[i].length;
18336: 15685: 13052:  72:       await handleBatchError(error, retries);
18337: 15686: 13053:  73:     }
18338: 15687: 13054:  74: 
18339: 15688: 13055:  75:     if (onProgress) {
18340: 15689: 13056:  76:       onProgress({
18341: 15690: 13057:  77:         total: items.length,
18342: 15691: 13058:  78:         processed,
18343: 15692: 13059:  79:         failed,
18344: 15693: 13060:  80:         currentBatch: i + 1,
18345: 15694: 13061:  81:         totalBatches: batches.length,
18346: 15695: 13062:  82:         percentage: (processed + failed) / items.length * 100
18347: 15696: 13063:  83:       });
18348: 15697: 13064:  84:     }
18349: 15698: 13065:  85:   }
18350: 15699: 13066:  86: 
18351: 15700: 13067:  87:   return { processed, failed };
18352: 15701: 13068:  88: }
18353: 15702: 13069:  89: ```
18354: 15703: 13070:  90: 
18355: 15704: 13071:  91: ## Implementation Examples
18356: 15705: 13072:  92: 
18357: 15706: 13073:  93: ### Basic Usage
18358: 15707: 13074:  94: 
18359: 15708: 13075:  95: ```typescript
18360: 15709: 13076:  96: const items = await fetchItems();
18361: 15710: 13077:  97: const result = await processBatch(
18362: 15711: 13078:  98:   items,
18363: 15712: 13079:  99:   async (batch) => {
18364: 15713: 13080: 100:     await processItems(batch);
18365: 15714: 13081: 101:   },
18366: 15715: 13082: 102:   {
18367: 15716: 13083: 103:     batchSize: 50,
18368: 15717: 13084: 104:     onProgress: (progress) => {
18369: 15718: 13085: 105:       console.log(
18370: 15719: 13086: 106:         `Processed ${progress.processed}/${progress.total} items`
18371: 15720: 13087: 107:       );
18372: 15721: 13088: 108:     }
18373: 15722: 13089: 109:   }
18374: 15723: 13090: 110: );
18375: 15724: 13091: 111: ```
18376: 15725: 13092: 112: 
18377: 15726: 13093: 113: ### With Concurrency
18378: 15727: 13094: 114: 
18379: 15728: 13095: 115: ```typescript
18380: 15729: 13096: 116: const processConcurrentBatches = async <T>(
18381: 15730: 13097: 117:   items: T[],
18382: 15731: 13098: 118:   processor: (item: T) => Promise<void>
18383: 15732: 13099: 119: ): Promise<void> => {
18384: 15733: 13100: 120:   await processBatch(items, async (batch) => {
18385: 15734: 13101: 121:     await Promise.all(
18386: 15735: 13102: 122:       batch.map(item => processor(item))
18387: 15736: 13103: 123:     );
18388: 15737: 13104: 124:   }, {
18389: 15738: 13105: 125:     batchSize: 25,
18390: 15739: 13106: 126:     concurrency: 3
18391: 15740: 13107: 127:   });
18392: 15741: 13108: 128: };
18393: 15742: 13109: 129: ```
18394: 15743: 13110: 130: 
18395: 15744: 13111: 131: ## Error Management
18396: 15745: 13112: 132: 
18397: 15746: 13113: 133: ### Retry Logic
18398: 15747: 13114: 134: 
18399: 15748: 13115: 135: ```typescript
18400: 15749: 13116: 136: async function handleBatchError(
18401: 15750: 13117: 137:   error: unknown,
18402: 15751: 13118: 138:   retriesLeft: number,
18403: 15752: 13119: 139:   backoff: number = 1000
18404: 15753: 13120: 140: ): Promise<void> {
18405: 15754: 13121: 141:   if (retriesLeft <= 0) {
18406: 15755: 13122: 142:     throw error;
18407: 15756: 13123: 143:   }
18408: 15757: 13124: 144: 
18409: 15758: 13125: 145:   await new Promise(resolve => 
18410: 15759: 13126: 146:     setTimeout(resolve, backoff * (4 - retriesLeft))
18411: 15760: 13127: 147:   );
18412: 15761: 13128: 148:  
18413: 15762: 13129: 149:   return handleBatchError(
18414: 15763: 13130: 150:     error,
18415: 15764: 13131: 151:     retriesLeft - 1,
18416: 15765: 13132: 152:     backoff
18417: 15766: 13133: 153:   );
18418: 15767: 13134: 154: }
18419: 15768: 13135: 155: ```
18420: 15769: 13136: 156: 
18421: 15770: 13137: 157: ### Error Collection
18422: 15771: 13138: 158: 
18423: 15772: 13139: 159: ```typescript
18424: 15773: 13140: 160: interface BatchError {
18425: 15774: 13141: 161:   batchIndex: number;
18426: 15775: 13142: 162:   items: unknown[];
18427: 15776: 13143: 163:   error: Error;
18428: 15777: 13144: 164: }
18429: 15778: 13145: 165: 
18430: 15779: 13146: 166: const collectErrors = async <T>(
18431: 15780: 13147: 167:   items: T[],
18432: 15781: 13148: 168:   processor: (batch: T[]) => Promise<void>
18433: 15782: 13149: 169: ): Promise<BatchError[]> => {
18434: 15783: 13150: 170:   const errors: BatchError[] = [];
18435: 15784: 13151: 171:  
18436: 15785: 13152: 172:   await processBatch(items, async (batch, index) => {
18437: 15786: 13153: 173:     try {
18438: 15787: 13154: 174:       await processor(batch);
18439: 15788: 13155: 175:     } catch (error) {
18440: 15789: 13156: 176:       errors.push({
18441: 15790: 13157: 177:         batchIndex: index,
18442: 15791: 13158: 178:         items: batch,
18443: 15792: 13159: 179:         error: error instanceof Error ? error : new Error(String(error))
18444: 15793: 13160: 180:       });
18445: 15794: 13161: 181:     }
18446: 15795: 13162: 182:   });
18447: 15796: 13163: 183: 
18448: 15797: 13164: 184:   return errors;
18449: 15798: 13165: 185: };
18450: 15799: 13166: 186: ```
18451: 15800: 13167: 187: 
18452: 15801: 13168: 188: ## Memory Management
18453: 15802: 13169: 189: 
18454: 15803: 13170: 190: ### Chunking Function
18455: 15804: 13171: 191: 
18456: 15805: 13172: 192: ```typescript
18457: 15806: 13173: 193: function chunk<T>(
18458: 15807: 13174: 194:   items: T[], 
18459: 15808: 13175: 195:   size: number
18460: 15809: 13176: 196: ): T[][] {
18461: 15810: 13177: 197:   const chunks: T[][] = [];
18462: 15811: 13178: 198:  
18463: 15812: 13179: 199:   for (let i = 0; i < items.length; i += size) {
18464: 15813: 13180: 200:     chunks.push(items.slice(i, i + size));
18465: 15814: 13181: 201:   }
18466: 15815: 13182: 202:  
18467: 15816: 13183: 203:   return chunks;
18468: 15817: 13184: 204: }
18469: 15818: 13185: 205: ```
18470: 15819: 13186: 206: 
18471: 15820: 13187: 207: ### Resource Cleanup
18472: 15821: 13188: 208: 
18473: 15822: 13189: 209: ```typescript
18474: 15823: 13190: 210: async function processWithCleanup<T>(
18475: 15824: 13191: 211:   items: T[],
18476: 15825: 13192: 212:   processor: (batch: T[]) => Promise<void>
18477: 15826: 13193: 213: ): Promise<void> {
18478: 15827: 13194: 214:   let currentBatch: T[] = [];
18479: 15828: 13195: 215:  
18480: 15829: 13196: 216:   try {
18481: 15830: 13197: 217:     await processBatch(items, async (batch) => {
18482: 15831: 13198: 218:       currentBatch = batch;
18483: 15832: 13199: 219:       await processor(batch);
18484: 15833: 13200: 220:       currentBatch = [];
18485: 15834: 13201: 221:     });
18486: 15835: 13202: 222:   } finally {
18487: 15836: 13203: 223:     currentBatch = [];
18488: 15837: 13204: 224:   }
18489: 15838: 13205: 225: }
18490: 15839: 13206: 226: ```
18491: 15840: 13207: 227: 
18492: 15841: 13208: 228: ## Progress Tracking
18493: 15842: 13209: 229: 
18494: 15843: 13210: 230: ### Progress Calculator
18495: 15844: 13211: 231: 
18496: 15845: 13212: 232: ```typescript
18497: 15846: 13213: 233: function calculateProgress(
18498: 15847: 13214: 234:   processed: number,
18499: 15848: 13215: 235:   total: number,
18500: 15849: 13216: 236:   startTime: number
18501: 15850: 13217: 237: ): BatchProgress {
18502: 15851: 13218: 238:   const elapsed = Date.now() - startTime;
18503: 15852: 13219: 239:   const rate = processed / (elapsed / 1000);
18504: 15853: 13220: 240:   const remaining = total - processed;
18505: 15854: 13221: 241:  
18506: 15855: 13222: 242:   return {
18507: 15856: 13223: 243:     processed,
18508: 15857: 13224: 244:     total,
18509: 15858: 13225: 245:     percentage: (processed / total) * 100,
18510: 15859: 13226: 246:     estimatedTimeRemaining: remaining / rate
18511: 15860: 13227: 247:   };
18512: 15861: 13228: 248: }
18513: 15862: 13229: 249: ```
18514: 15863: 13230: 250: 
18515: 15864: 13231: 251: ## Best Practices
18516: 15865: 13232: 252: 
18517: 15866: 13233: 253: ### Batch Size Selection
18518: 15867: 13234: 254: 
18519: 15868: 13235: 255: - Consider memory constraints
18520: 15869: 13236: 256: - Balance throughput and overhead
18521: 15870: 13237: 257: - Monitor processing times
18522: 15871: 13238: 258: 
18523: 15872: 13239: 259: ### Error Handling
18524: 15873: 13240: 260: 
18525: 15874: 13241: 261: - Implement proper retries
18526: 15875: 13242: 262: - Log batch failures
18527: 15876: 13243: 263: - Maintain item context
18528: 15877: 13244: 264: 
18529: 15878: 13245: 265: ### Resource Management
18530: 15879: 13246: 266: 
18531: 15880: 13247: 267: - Clean up after processing
18532: 15881: 13248: 268: - Monitor memory usage
18533: 15882: 13249: 269: - Handle aborted operations
18534: 15883: 13250: 270: 
18535: 15884: 13251: 271: ## Related Components
18536: 15885: 13252: 272: 
18537: 15886: 13253: 273: - [Progress Tracker](./progress)
18538: 15887: 13254: 274: - [Error Handler](./error-handling)
18539: 15888: 13255: 275: - [Logger](./logging)
18540: 15889: 13256: 276: 
18541: 15890: 13257: 277: ## Troubleshooting
18542: 15891: 13258: 278: 
18543: 15892: 13259: 279: ### Common Issues
18544: 15893: 13260: 280: 
18545: 15894: 13261: 281: 1. Memory Problems:
18546: 15895: 13262: 282:    - Reduce batch size
18547: 15896: 13263: 283:    - Implement cleanup
18548: 15897: 13264: 284:    - Monitor heap usage
18549: 15898: 13265: 285: 
18550: 15899: 13266: 286: 2. Performance Issues:
18551: 15900: 13267: 287:    - Adjust concurrency
18552: 15901: 13268: 288:    - Optimize batch size
18553: 15902: 13269: 289:    - Monitor processing rates
18554: 15903: 13270: 290: 
18555: 15904: 13271: 291: 3. Error Handling:
18556: 15905: 13272: 292:    - Check retry logic
18557: 15906: 13273: 293:    - Verify error collection
18558: 15907: 13274: 294:    - Monitor failure patterns
18559: 15908: 13275: </file>
18560: 15909: 13276: 
18561: 15910: 13277: <file path="utils/cache.md">
18562: 15911: 13278:   1: # Cache System
18563: 15912: 13279:   2: 
18564: 15913: 13280:   3: ## Overview
18565: 15914: 13281:   4: 
18566: 15915: 13282:   5: The Cache System provides efficient memory caching for card data, prices, and images. It implements an LRU (Least Recently Used) caching strategy and includes specialized caching for different data types.
18567: 15916: 13283:   6: 
18568: 15917: 13284:   7: ## Components
18569: 15918: 13285:   8: 
18570: 15919: 13286:   9: The system consists of two main cache implementations:
18571: 15920: 13287:  10: 
18572: 15921: 13288:  11: 1. Basic LRU Cache (`cache.ts`)
18573: 15922: 13289:  12: 2. Specialized Image Cache (`imageCache.ts`)
18574: 15923: 13290:  13: 
18575: 15924: 13291:  14: ## Basic Cache Implementation
18576: 15925: 13292:  15: 
18577: 15926: 13293:  16: ### Configuration
18578: 15927: 13294:  17: 
18579: 15928: 13295:  18: ```typescript
18580: 15929: 13296:  19: const options = {
18581: 15930: 13297:  20:   max: 500,                // Maximum number of items
18582: 15931: 13298:  21:   ttl: 1000 * 60 * 60,    // Time to live: 1 hour
18583: 15932: 13299:  22: };
18584: 15933: 13300:  23: 
18585: 15934: 13301:  24: export const cardCache = new LRUCache<string, CardProduct>(options);
18586: 15935: 13302:  25: ```
18587: 15936: 13303:  26: 
18588: 15937: 13304:  27: ### Basic Key Generation
18589: 15938: 13305:  28: 
18590: 15939: 13306:  29: ```typescript
18591: 15940: 13307:  30: export type CacheType = "card" | "price" | "image";
18592: 15941: 13308:  31: 
18593: 15942: 13309:  32: export const getCacheKey = (type: CacheType, id: number): string => {
18594: 15943: 13310:  33:   return `${type}:${id}`;
18595: 15944: 13311:  34: };
18596: 15945: 13312:  35: ```
18597: 15946: 13313:  36: 
18598: 15947: 13314:  37: ## Image Cache Implementation
18599: 15948: 13315:  38: 
18600: 15949: 13316:  39: ### Class Structure
18601: 15950: 13317:  40: 
18602: 15951: 13318:  41: ```typescript
18603: 15952: 13319:  42: export class ImageCache {
18604: 15953: 13320:  43:   private metadataCache: LRUCache<string, ImageMetadata>;
18605: 15954: 13321:  44:   private bufferCache: LRUCache<string, Buffer>;
18606: 15955: 13322:  45:   private existsCache: LRUCache<string, boolean>;
18607: 15956: 13323:  46:   private stats: CacheStats;
18608: 15957: 13324:  47: }
18609: 15958: 13325:  48: ```
18610: 15959: 13326:  49: 
18611: 15960: 13327:  50: ### Cache Configuration
18612: 15961: 13328:  51: 
18613: 15962: 13329:  52: ```typescript
18614: 15963: 13330:  53: constructor() {
18615: 15964: 13331:  54:   this.metadataCache = new LRUCache<string, ImageMetadata>({
18616: 15965: 13332:  55:     max: 1000,
18617: 15966: 13333:  56:     ttl: 1000 * 60 * 60,  // 1 hour
18618: 15967: 13334:  57:     updateAgeOnGet: true,
18619: 15968: 13335:  58:   });
18620: 15969: 13336:  59: 
18621: 15970: 13337:  60:   this.bufferCache = new LRUCache<string, Buffer>({
18622: 15971: 13338:  61:     max: 100,
18623: 15972: 13339:  62:     ttl: 1000 * 60 * 5,   // 5 minutes
18624: 15973: 13340:  63:     updateAgeOnGet: true,
18625: 15974: 13341:  64:     maxSize: 50 * 1024 * 1024,  // 50MB max cache size
18626: 15975: 13342:  65:     sizeCalculation: (buffer) => buffer.length,
18627: 15976: 13343:  66:   });
18628: 15977: 13344:  67: 
18629: 15978: 13345:  68:   this.existsCache = new LRUCache<string, boolean>({
18630: 15979: 13346:  69:     max: 1000,
18631: 15980: 13347:  70:     ttl: 1000 * 60 * 60,  // 1 hour
18632: 15981: 13348:  71:     updateAgeOnGet: true,
18633: 15982: 13349:  72:   });
18634: 15983: 13350:  73: }
18635: 15984: 13351:  74: ```
18636: 15985: 13352:  75: 
18637: 15986: 13353:  76: ## Usage Examples
18638: 15987: 13354:  77: 
18639: 15988: 13355:  78: ### Basic Cache Usage
18640: 15989: 13356:  79: 
18641: 15990: 13357:  80: ```typescript
18642: 15991: 13358:  81: // Store card data
18643: 15992: 13359:  82: const cardId = 477236;
18644: 15993: 13360:  83: const cacheKey = getCacheKey("card", cardId);
18645: 15994: 13361:  84: cardCache.set(cacheKey, cardData);
18646: 15995: 13362:  85: 
18647: 15996: 13363:  86: // Retrieve card data
18648: 15997: 13364:  87: const cachedCard = cardCache.get(cacheKey);
18649: 15998: 13365:  88: if (cachedCard) {
18650: 15999: 13366:  89:   return cachedCard;
18651: 16000: 13367:  90: }
18652: 16001: 13368:  91: ```
18653: 16002: 13369:  92: 
18654: 16003: 13370:  93: ### Image Cache Usage
18655: 16004: 13371:  94: 
18656: 16005: 13372:  95: ```typescript
18657: 16006: 13373:  96: const imageCache = new ImageCache();
18658: 16007: 13374:  97: 
18659: 16008: 13375:  98: // Get metadata
18660: 16009: 13376:  99: const metadataKey = imageCache.getMetadataCacheKey(groupId, productId, false);
18661: 16010: 13377: 100: const metadata = await imageCache.getMetadata(metadataKey);
18662: 16011: 13378: 101: 
18663: 16012: 13379: 102: // Get image buffer
18664: 16013: 13380: 103: const bufferKey = imageCache.getBufferCacheKey(imageUrl);
18665: 16014: 13381: 104: const buffer = await imageCache.getBuffer(bufferKey);
18666: 16015: 13382: 105: 
18667: 16016: 13383: 106: // Check existence
18668: 16017: 13384: 107: const existsKey = imageCache.getExistsCacheKey(groupId, productId, false);
18669: 16018: 13385: 108: const exists = imageCache.getExists(existsKey);
18670: 16019: 13386: 109: ```
18671: 16020: 13387: 110: 
18672: 16021: 13388: 111: ## Image Cache Key Types
18673: 16022: 13389: 112: 
18674: 16023: 13390: 113: ### Metadata Keys
18675: 16024: 13391: 114: 
18676: 16025: 13392: 115: ```typescript
18677: 16026: 13393: 116: getMetadataCacheKey(
18678: 16027: 13394: 117:   groupId: string,
18679: 16028: 13395: 118:   productId: number,
18680: 16029: 13396: 119:   isHighRes: boolean
18681: 16030: 13397: 120: ): string {
18682: 16031: 13398: 121:   return `metadata:${groupId}:${productId}:${isHighRes ? "high" : "original"}`;
18683: 16032: 13399: 122: }
18684: 16033: 13400: 123: ```
18685: 16034: 13401: 124: 
18686: 16035: 13402: 125: ### Buffer Keys
18687: 16036: 13403: 126: 
18688: 16037: 13404: 127: ```typescript
18689: 16038: 13405: 128: getBufferCacheKey(url: string): string {
18690: 16039: 13406: 129:   return `buffer:${url}`;
18691: 16040: 13407: 130: }
18692: 16041: 13408: 131: ```
18693: 16042: 13409: 132: 
18694: 16043: 13410: 133: ### Existence Check Keys
18695: 16044: 13411: 134: 
18696: 16045: 13412: 135: ```typescript
18697: 16046: 13413: 136: getExistsCacheKey(
18698: 16047: 13414: 137:   groupId: string,
18699: 16048: 13415: 138:   productId: number,
18700: 16049: 13416: 139:   isHighRes: boolean
18701: 16050: 13417: 140: ): string {
18702: 16051: 13418: 141:   return `exists:${groupId}:${productId}:${isHighRes ? "high" : "original"}`;
18703: 16052: 13419: 142: }
18704: 16053: 13420: 143: ```
18705: 16054: 13421: 144: 
18706: 16055: 13422: 145: ## Statistics Tracking
18707: 16056: 13423: 146: 
18708: 16057: 13424: 147: ```typescript
18709: 16058: 13425: 148: interface CacheStats {
18710: 16059: 13426: 149:   hits: number;
18711: 16060: 13427: 150:   misses: number;
18712: 16061: 13428: 151:   totalRequests: number;
18713: 16062: 13429: 152: }
18714: 16063: 13430: 153: 
18715: 16064: 13431: 154: getStats(): CacheStats {
18716: 16065: 13432: 155:   return {...this.stats};
18717: 16066: 13433: 156: }
18718: 16067: 13434: 157: ```
18719: 16068: 13435: 158: 
18720: 16069: 13436: 159: ## Cache Management
18721: 16070: 13437: 160: 
18722: 16071: 13438: 161: ### Clearing Cache
18723: 16072: 13439: 162: 
18724: 16073: 13440: 163: ```typescript
18725: 16074: 13441: 164: clear(): void {
18726: 16075: 13442: 165:   this.metadataCache.clear();
18727: 16076: 13443: 166:   this.bufferCache.clear();
18728: 16077: 13444: 167:   this.existsCache.clear();
18729: 16078: 13445: 168:   this.stats = {
18730: 16079: 13446: 169:     hits: 0,
18731: 16080: 13447: 170:     misses: 0,
18732: 16081: 13448: 171:     totalRequests: 0,
18733: 16082: 13449: 172:   };
18734: 16083: 13450: 173: }
18735: 16084: 13451: 174: ```
18736: 16085: 13452: 175: 
18737: 16086: 13453: 176: ### Performance Monitoring
18738: 16087: 13454: 177: 
18739: 16088: 13455: 178: ```typescript
18740: 16089: 13456: 179: async getMetadata(key: string): Promise<ImageMetadata | undefined> {
18741: 16090: 13457: 180:   this.stats.totalRequests++;
18742: 16091: 13458: 181:   const value = this.metadataCache.get(key);
18743: 16092: 13459: 182:   if (value) {
18744: 16093: 13460: 183:     this.stats.hits++;
18745: 16094: 13461: 184:     await logInfo("Cache hit: metadata", {
18746: 16095: 13462: 185:       key,
18747: 16096: 13463: 186:       timestamp: new Date().toISOString(),
18748: 16097: 13464: 187:     });
18749: 16098: 13465: 188:   } else {
18750: 16099: 13466: 189:     this.stats.misses++;
18751: 16100: 13467: 190:   }
18752: 16101: 13468: 191:   return value;
18753: 16102: 13469: 192: }
18754: 16103: 13470: 193: ```
18755: 16104: 13471: 194: 
18756: 16105: 13472: 195: ## Best Practices
18757: 16106: 13473: 196: 
18758: 16107: 13474: 197: 1. **Memory Management**:
18759: 16108: 13475: 198:    - Set appropriate cache sizes
18760: 16109: 13476: 199:    - Monitor memory usage
18761: 16110: 13477: 200:    - Implement TTL for all cached items
18762: 16111: 13478: 201: 
18763: 16112: 13479: 202: 2. **Performance Optimization**:
18764: 16113: 13480: 203:    - Use buffer cache for frequently accessed images
18765: 16114: 13481: 204:    - Implement size limits for buffer cache
18766: 16115: 13482: 205:    - Track cache statistics
18767: 16116: 13483: 206: 
18768: 16117: 13484: 207: 3. **Error Handling**:
18769: 16118: 13485: 208:    - Graceful degradation on cache misses
18770: 16119: 13486: 209:    - Monitor cache hit rates
18771: 16120: 13487: 210:    - Log cache operations
18772: 16121: 13488: 211: 
18773: 16122: 13489: 212: ## Troubleshooting
18774: 16123: 13490: 213: 
18775: 16124: 13491: 214: ### Common Issues
18776: 16125: 13492: 215: 
18777: 16126: 13493: 216: 1. Memory Usage:
18778: 16127: 13494: 217:    - Monitor cache size
18779: 16128: 13495: 218:    - Adjust max entries
18780: 16129: 13496: 219:    - Check TTL settings
18781: 16130: 13497: 220: 
18782: 16131: 13498: 221: 2. Cache Misses:
18783: 16132: 13499: 222:    - Verify key generation
18784: 16133: 13500: 223:    - Check TTL values
18785: 16134: 13501: 224:    - Monitor hit rates
18786: 16135: 13502: 225: 
18787: 16136: 13503: 226: 3. Performance:
18788: 16137: 13504: 227:    - Analyze cache stats
18789: 16138: 13505: 228:    - Adjust cache sizes
18790: 16139: 13506: 229:    - Optimize key generation
18791: 16140: 13507: 230: 
18792: 16141: 13508: 231: ## Related Components
18793: 16142: 13509: 232: 
18794: 16143: 13510: 233: - [Image Handler](./image-handler)
18795: 16144: 13511: 234: - [Logger](./logging)
18796: 16145: 13512: 235: - [Error Handling](./error-handling)
18797: 16146: 13513: </file>
18798: 16147: 13514: 
18799: 16148: 13515: <file path="utils/error-handling.md">
18800: 16149: 13516:   1: # Error Handling System
18801: 16150: 13517:   2: 
18802: 16151: 13518:   3: ## Overview
18803: 16152: 13519:   4: 
18804: 16153: 13520:   5: The Error Handling system (`error.ts`) provides a standardized approach to error management across the application. It includes error classification, detailed logging, and integration with the logging system for comprehensive error tracking.
18805: 16154: 13521:   6: 
18806: 16155: 13522:   7: ## Features
18807: 16156: 13523:   8: 
18808: 16157: 13524:   9: - Custom error types
18809: 16158: 13525:  10: - Detailed error reporting
18810: 16159: 13526:  11: - Error severity levels
18811: 16160: 13527:  12: - Metadata support
18812: 16161: 13528:  13: - Firestore integration
18813: 16162: 13529:  14: - Stack trace preservation
18814: 16163: 13530:  15: 
18815: 16164: 13531:  16: ## Core Components
18816: 16165: 13532:  17: 
18817: 16166: 13533:  18: ### Error Types
18818: 16167: 13534:  19: 
18819: 16168: 13535:  20: ```typescript
18820: 16169: 13536:  21: export interface ErrorReport {
18821: 16170: 13537:  22:   timestamp: Date;
18822: 16171: 13538:  23:   context: string;
18823: 16172: 13539:  24:   error: string;
18824: 16173: 13540:  25:   stackTrace?: string;
18825: 16174: 13541:  26:   metadata?: Record<string, unknown>;
18826: 16175: 13542:  27:   severity: "ERROR" | "WARNING" | "CRITICAL";
18827: 16176: 13543:  28: }
18828: 16177: 13544:  29: 
18829: 16178: 13545:  30: export class DetailedError extends Error {
18830: 16179: 13546:  31:   constructor(
18831: 16180: 13547:  32:     message: string,
18832: 16181: 13548:  33:     public context: string,
18833: 16182: 13549:  34:     public metadata?: Record<string, unknown>,
18834: 16183: 13550:  35:     public severity: "ERROR" | "WARNING" | "CRITICAL" = "ERROR"
18835: 16184: 13551:  36:   ) {
18836: 16185: 13552:  37:     super(message);
18837: 16186: 13553:  38:     this.name = "DetailedError";
18838: 16187: 13554:  39:   }
18839: 16188: 13555:  40: }
18840: 16189: 13556:  41: ```
18841: 16190: 13557:  42: 
18842: 16191: 13558:  43: ## Error Logging
18843: 16192: 13559:  44: 
18844: 16193: 13560:  45: ### Basic Error Logging
18845: 16194: 13561:  46: 
18846: 16195: 13562:  47: ```typescript
18847: 16196: 13563:  48: export async function logDetailedError(
18848: 16197: 13564:  49:   error: Error,
18849: 16198: 13565:  50:   context: string,
18850: 16199: 13566:  51:   metadata?: Record<string, unknown>,
18851: 16200: 13567:  52:   severity: "ERROR" | "WARNING" | "CRITICAL" = "ERROR"
18852: 16201: 13568:  53: ): Promise<void> {
18853: 16202: 13569:  54:   const report: ErrorReport = {
18854: 16203: 13570:  55:     timestamp: new Date(),
18855: 16204: 13571:  56:     context,
18856: 16205: 13572:  57:     error: error.message,
18857: 16206: 13573:  58:     stackTrace: error.stack,
18858: 16207: 13574:  59:     metadata,
18859: 16208: 13575:  60:     severity,
18860: 16209: 13576:  61:   };
18861: 16210: 13577:  62: 
18862: 16211: 13578:  63:   await db.collection(COLLECTION.LOGS).add(report);
18863: 16212: 13579:  64:   await logError(error, context);
18864: 16213: 13580:  65: }
18865: 16214: 13581:  66: ```
18866: 16215: 13582:  67: 
18867: 16216: 13583:  68: ## Usage Examples
18868: 16217: 13584:  69: 
18869: 16218: 13585:  70: ### Basic Error Handling
18870: 16219: 13586:  71: 
18871: 16220: 13587:  72: ```typescript
18872: 16221: 13588:  73: try {
18873: 16222: 13589:  74:   await processImage(imageUrl);
18874: 16223: 13590:  75: } catch (error) {
18875: 16224: 13591:  76:   await logDetailedError(
18876: 16225: 13592:  77:     error as Error,
18877: 16226: 13593:  78:     "imageProcessing",
18878: 16227: 13594:  79:     { imageUrl, timestamp: new Date() },
18879: 16228: 13595:  80:     "ERROR"
18880: 16229: 13596:  81:   );
18881: 16230: 13597:  82: }
18882: 16231: 13598:  83: ```
18883: 16232: 13599:  84: 
18884: 16233: 13600:  85: ### Custom Error Creation
18885: 16234: 13601:  86: 
18886: 16235: 13602:  87: ```typescript
18887: 16236: 13603:  88: const handleImageError = async (error: unknown, imageUrl: string) => {
18888: 16237: 13604:  89:   const detailedError = new DetailedError(
18889: 16238: 13605:  90:     "Image processing failed",
18890: 16239: 13606:  91:     "imageHandler:process",
18891: 16240: 13607:  92:     {
18892: 16241: 13608:  93:       imageUrl,
18893: 16242: 13609:  94:       originalError: error instanceof Error ? error.message : "Unknown error",
18894: 16243: 13610:  95:       timestamp: new Date().toISOString()
18895: 16244: 13611:  96:     },
18896: 16245: 13612:  97:     "ERROR"
18897: 16246: 13613:  98:   );
18898: 16247: 13614:  99: 
18899: 16248: 13615: 100:   await logDetailedError(detailedError, detailedError.context);
18900: 16249: 13616: 101: };
18901: 16250: 13617: 102: ```
18902: 16251: 13618: 103: 
18903: 16252: 13619: 104: ## Error Classification
18904: 16253: 13620: 105: 
18905: 16254: 13621: 106: ### Severity Levels
18906: 16255: 13622: 107: 
18907: 16256: 13623: 108: ```typescript
18908: 16257: 13624: 109: type ErrorSeverity = "ERROR" | "WARNING" | "CRITICAL";
18909: 16258: 13625: 110: 
18910: 16259: 13626: 111: const determineSeverity = (error: Error): ErrorSeverity => {
18911: 16260: 13627: 112:   if (error instanceof NetworkError) return "WARNING";
18912: 16261: 13628: 113:   if (error instanceof DataCorruptionError) return "CRITICAL";
18913: 16262: 13629: 114:   return "ERROR";
18914: 16263: 13630: 115: };
18915: 16264: 13631: 116: ```
18916: 16265: 13632: 117: 
18917: 16266: 13633: 118: ### Context Management
18918: 16267: 13634: 119: 
18919: 16268: 13635: 120: ```typescript
18920: 16269: 13636: 121: interface ErrorContext {
18921: 16270: 13637: 122:   component: string;
18922: 16271: 13638: 123:   operation: string;
18923: 16272: 13639: 124:   metadata?: Record<string, unknown>;
18924: 16273: 13640: 125: }
18925: 16274: 13641: 126: 
18926: 16275: 13642: 127: const createErrorContext = (
18927: 16276: 13643: 128:   component: string,
18928: 16277: 13644: 129:   operation: string,
18929: 16278: 13645: 130:   metadata?: Record<string, unknown>
18930: 16279: 13646: 131: ): ErrorContext => ({
18931: 16280: 13647: 132:   component,
18932: 16281: 13648: 133:   operation,
18933: 16282: 13649: 134:   metadata
18934: 16283: 13650: 135: });
18935: 16284: 13651: 136: ```
18936: 16285: 13652: 137: 
18937: 16286: 13653: 138: ## Best Practices
18938: 16287: 13654: 139: 
18939: 16288: 13655: 140: ### 1. Error Wrapping
18940: 16289: 13656: 141: 
18941: 16290: 13657: 142: ```typescript
18942: 16291: 13658: 143: try {
18943: 16292: 13659: 144:   await externalOperation();
18944: 16293: 13660: 145: } catch (error) {
18945: 16294: 13661: 146:   const wrappedError = new DetailedError(
18946: 16295: 13662: 147:     "External operation failed",
18947: 16296: 13663: 148:     "externalService:operation",
18948: 16297: 13664: 149:     {
18949: 16298: 13665: 150:       originalError: error instanceof Error ? error.message : "Unknown error",
18950: 16299: 13666: 151:       timestamp: new Date().toISOString()
18951: 16300: 13667: 152:     }
18952: 16301: 13668: 153:   );
18953: 16302: 13669: 154:   throw wrappedError;
18954: 16303: 13670: 155: }
18955: 16304: 13671: 156: ```
18956: 16305: 13672: 157: 
18957: 16306: 13673: 158: ### 2. Error Recovery
18958: 16307: 13674: 159: 
18959: 16308: 13675: 160: ```typescript
18960: 16309: 13676: 161: async function withErrorRecovery<T>(
18961: 16310: 13677: 162:   operation: () => Promise<T>,
18962: 16311: 13678: 163:   fallback: T,
18963: 16312: 13679: 164:   context: string
18964: 16313: 13680: 165: ): Promise<T> {
18965: 16314: 13681: 166:   try {
18966: 16315: 13682: 167:     return await operation();
18967: 16316: 13683: 168:   } catch (error) {
18968: 16317: 13684: 169:     await logDetailedError(
18969: 16318: 13685: 170:       error as Error,
18970: 16319: 13686: 171:       context,
18971: 16320: 13687: 172:       { recoveryAction: "using fallback" }
18972: 16321: 13688: 173:     );
18973: 16322: 13689: 174:     return fallback;
18974: 16323: 13690: 175:   }
18975: 16324: 13691: 176: }
18976: 16325: 13692: 177: ```
18977: 16326: 13693: 178: 
18978: 16327: 13694: 179: ### 3. Batch Error Handling
18979: 16328: 13695: 180: 
18980: 16329: 13696: 181: ```typescript
18981: 16330: 13697: 182: interface BatchError {
18982: 16331: 13698: 183:   index: number;
18983: 16332: 13699: 184:   error: Error;
18984: 16333: 13700: 185:   item: unknown;
18985: 16334: 13701: 186: }
18986: 16335: 13702: 187: 
18987: 16336: 13703: 188: async function processBatchWithErrors<T>(
18988: 16337: 13704: 189:   items: T[],
18989: 16338: 13705: 190:   processor: (item: T) => Promise<void>
18990: 16339: 13706: 191: ): Promise<BatchError[]> {
18991: 16340: 13707: 192:   const errors: BatchError[] = [];
18992: 16341: 13708: 193: 
18993: 16342: 13709: 194:   for (let i = 0; i < items.length; i++) {
18994: 16343: 13710: 195:     try {
18995: 16344: 13711: 196:       await processor(items[i]);
18996: 16345: 13712: 197:     } catch (error) {
18997: 16346: 13713: 198:       errors.push({
18998: 16347: 13714: 199:         index: i,
18999: 16348: 13715: 200:         error: error as Error,
19000: 16349: 13716: 201:         item: items[i]
19001: 16350: 13717: 202:       });
19002: 16351: 13718: 203:     }
19003: 16352: 13719: 204:   }
19004: 16353: 13720: 205: 
19005: 16354: 13721: 206:   return errors;
19006: 16355: 13722: 207: }
19007: 16356: 13723: 208: ```
19008: 16357: 13724: 209: 
19009: 16358: 13725: 210: ## Error Monitoring
19010: 16359: 13726: 211: 
19011: 16360: 13727: 212: ### Error Aggregation
19012: 16361: 13728: 213: 
19013: 16362: 13729: 214: ```typescript
19014: 16363: 13730: 215: interface ErrorAggregate {
19015: 16364: 13731: 216:   count: number;
19016: 16365: 13732: 217:   lastOccurrence: Date;
19017: 16366: 13733: 218:   contexts: string[];
19018: 16367: 13734: 219: }
19019: 16368: 13735: 220: 
19020: 16369: 13736: 221: const aggregateErrors = async (
19021: 16370: 13737: 222:   timeWindow: number
19022: 16371: 13738: 223: ): Promise<Map<string, ErrorAggregate>> => {
19023: 16372: 13739: 224:   const now = new Date();
19024: 16373: 13740: 225:   const windowStart = new Date(now.getTime() - timeWindow);
19025: 16374: 13741: 226: 
19026: 16375: 13742: 227:   const errors = await db
19027: 16376: 13743: 228:     .collection(COLLECTION.LOGS)
19028: 16377: 13744: 229:     .where("timestamp", ">=", windowStart)
19029: 16378: 13745: 230:     .where("level", "==", "ERROR")
19030: 16379: 13746: 231:     .get();
19031: 16380: 13747: 232: 
19032: 16381: 13748: 233:   return errors.docs.reduce((acc, doc) => {
19033: 16382: 13749: 234:     const data = doc.data();
19034: 16383: 13750: 235:     const key = data.error;
19035: 16384: 13751: 236:     const existing = acc.get(key) || {
19036: 16385: 13752: 237:       count: 0,
19037: 16386: 13753: 238:       lastOccurrence: windowStart,
19038: 16387: 13754: 239:       contexts: []
19039: 16388: 13755: 240:     };
19040: 16389: 13756: 241: 
19041: 16390: 13757: 242:     existing.count++;
19042: 16391: 13758: 243:     existing.lastOccurrence = data.timestamp.toDate();
19043: 16392: 13759: 244:     if (!existing.contexts.includes(data.context)) {
19044: 16393: 13760: 245:       existing.contexts.push(data.context);
19045: 16394: 13761: 246:     }
19046: 16395: 13762: 247: 
19047: 16396: 13763: 248:     acc.set(key, existing);
19048: 16397: 13764: 249:     return acc;
19049: 16398: 13765: 250:   }, new Map<string, ErrorAggregate>());
19050: 16399: 13766: 251: };
19051: 16400: 13767: 252: ```
19052: 16401: 13768: 253: 
19053: 16402: 13769: 254: ## Error Resolution
19054: 16403: 13770: 255: 
19055: 16404: 13771: 256: ### Automatic Recovery
19056: 16405: 13772: 257: 
19057: 16406: 13773: 258: ```typescript
19058: 16407: 13774: 259: async function attemptRecovery(
19059: 16408: 13775: 260:   error: DetailedError,
19060: 16409: 13776: 261:   maxAttempts: number = 3
19061: 16410: 13777: 262: ): Promise<boolean> {
19062: 16411: 13778: 263:   let attempts = 0;
19063: 16412: 13779: 264:   let recovered = false;
19064: 16413: 13780: 265: 
19065: 16414: 13781: 266:   while (attempts < maxAttempts && !recovered) {
19066: 16415: 13782: 267:     try {
19067: 16416: 13783: 268:       await recoveryStrategies[error.name]?.(error);
19068: 16417: 13784: 269:       recovered = true;
19069: 16418: 13785: 270:     } catch (recoveryError) {
19070: 16419: 13786: 271:       attempts++;
19071: 16420: 13787: 272:       await logWarning(
19072: 16421: 13788: 273:         `Recovery attempt ${attempts} failed`,
19073: 16422: 13789: 274:         { error: recoveryError }
19074: 16423: 13790: 275:       );
19075: 16424: 13791: 276:     }
19076: 16425: 13792: 277:   }
19077: 16426: 13793: 278: 
19078: 16427: 13794: 279:   return recovered;
19079: 16428: 13795: 280: }
19080: 16429: 13796: 281: ```
19081: 16430: 13797: 282: 
19082: 16431: 13798: 283: ## Related Components
19083: 16432: 13799: 284: 
19084: 16433: 13800: 285: - [Logger](./logging)
19085: 16434: 13801: 286: - [Sync Logger](./sync-logger)
19086: 16435: 13802: 287: - [Image Handler](./image-handler)
19087: 16436: 13803: 288: 
19088: 16437: 13804: 289: ## Troubleshooting
19089: 16438: 13805: 290: 
19090: 16439: 13806: 291: ### Common Issues
19091: 16440: 13807: 292: 
19092: 16441: 13808: 293: 1. Missing Error Context:
19093: 16442: 13809: 294:    - Ensure proper error wrapping
19094: 16443: 13810: 295:    - Include relevant metadata
19095: 16444: 13811: 296:    - Use appropriate error types
19096: 16445: 13812: 297: 
19097: 16446: 13813: 298: 2. Error Recovery:
19098: 16447: 13814: 299:    - Implement fallback mechanisms
19099: 16448: 13815: 300:    - Use appropriate retry strategies
19100: 16449: 13816: 301:    - Monitor recovery success rates
19101: 16450: 13817: 302: 
19102: 16451: 13818: 303: 3. Performance Impact:
19103: 16452: 13819: 304:    - Balance logging detail with performance
19104: 16453: 13820: 305:    - Implement error aggregation
19105: 16454: 13821: 306:    - Use appropriate severity levels
19106: 16455: 13822: </file>
19107: 16456: 13823: 
19108: 16457: 13824: <file path="utils/image-compressor.md">
19109: 16458: 13825:   1: # Image Compressor Utility
19110: 16459: 13826:   2: 
19111: 16460: 13827:   3: ## Overview
19112: 16461: 13828:   4: 
19113: 16462: 13829:   5: The Image Compressor (`imageCompressor.ts`) handles image optimization and compression for card images. It provides configurable compression settings for both standard and high-resolution images while maintaining image quality.
19114: 16463: 13830:   6: 
19115: 16464: 13831:   7: ## Core Features
19116: 16465: 13832:   8: 
19117: 16466: 13833:   9: - Dual resolution support (200w/400w)
19118: 16467: 13834:  10: - Quality-preserving compression
19119: 16468: 13835:  11: - Dimension optimization
19120: 16469: 13836:  12: - Progressive JPEG support
19121: 16470: 13837:  13: - Metadata preservation
19122: 16471: 13838:  14: - Compression statistics
19123: 16472: 13839:  15: 
19124: 16473: 13840:  16: ## Configuration
19125: 16474: 13841:  17: 
19126: 16475: 13842:  18: ### Quality Settings
19127: 16476: 13843:  19: 
19128: 16477: 13844:  20: ```typescript
19129: 16478: 13845:  21: private static readonly QUALITY = {
19130: 16479: 13846:  22:   HIGH_RES: 90,
19131: 16480: 13847:  23:   LOW_RES: 85,
19132: 16481: 13848:  24: };
19133: 16482: 13849:  25: ```
19134: 16483: 13850:  26: 
19135: 16484: 13851:  27: ### Dimension Settings
19136: 16485: 13852:  28: 
19137: 16486: 13853:  29: ```typescript
19138: 16487: 13854:  30: private static readonly DIMENSIONS = {
19139: 16488: 13855:  31:   HIGH_RES: 400,
19140: 16489: 13856:  32:   LOW_RES: 200,
19141: 16490: 13857:  33: };
19142: 16491: 13858:  34: ```
19143: 16492: 13859:  35: 
19144: 16493: 13860:  36: ## Main Interfaces
19145: 16494: 13861:  37: 
19146: 16495: 13862:  38: ### Compression Result
19147: 16496: 13863:  39: 
19148: 16497: 13864:  40: ```typescript
19149: 16498: 13865:  41: export interface CompressionResult {
19150: 16499: 13866:  42:   buffer: Buffer;
19151: 16500: 13867:  43:   info: {
19152: 16501: 13868:  44:     width: number;
19153: 16502: 13869:  45:     height: number;
19154: 16503: 13870:  46:     size: number;
19155: 16504: 13871:  47:     format: string;
19156: 16505: 13872:  48:     quality: number;
19157: 16506: 13873:  49:   };
19158: 16507: 13874:  50: }
19159: 16508: 13875:  51: ```
19160: 16509: 13876:  52: 
19161: 16510: 13877:  53: ## Primary Methods
19162: 16511: 13878:  54: 
19163: 16512: 13879:  55: ### Compression Method
19164: 16513: 13880:  56: 
19165: 16514: 13881:  57: ```typescript
19166: 16515: 13882:  58: static async compress(
19167: 16516: 13883:  59:   buffer: Buffer,
19168: 16517: 13884:  60:   isHighRes: boolean = false
19169: 16518: 13885:  61: ): Promise<CompressionResult>
19170: 16519: 13886:  62: ```
19171: 16520: 13887:  63: 
19172: 16521: 13888:  64: ### Format Validation
19173: 16522: 13889:  65: 
19174: 16523: 13890:  66: ```typescript
19175: 16524: 13891:  67: static async isCompressible(buffer: Buffer): Promise<boolean>
19176: 16525: 13892:  68: ```
19177: 16526: 13893:  69: 
19178: 16527: 13894:  70: ## Implementation Examples
19179: 16528: 13895:  71: 
19180: 16529: 13896:  72: ### Basic Compression
19181: 16530: 13897:  73: 
19182: 16531: 13898:  74: ```typescript
19183: 16532: 13899:  75: const imageBuffer = await fetchImage(url);
19184: 16533: 13900:  76: const result = await ImageCompressor.compress(imageBuffer, false);
19185: 16534: 13901:  77: 
19186: 16535: 13902:  78: console.log("Compression stats:", {
19187: 16536: 13903:  79:   originalSize: imageBuffer.length,
19188: 16537: 13904:  80:   compressedSize: result.buffer.length,
19189: 16538: 13905:  81:   dimensions: `${result.info.width}x${result.info.height}`,
19190: 16539: 13906:  82:   quality: result.info.quality
19191: 16540: 13907:  83: });
19192: 16541: 13908:  84: ```
19193: 16542: 13909:  85: 
19194: 16543: 13910:  86: ### High-Resolution Processing
19195: 16544: 13911:  87: 
19196: 16545: 13912:  88: ```typescript
19197: 16546: 13913:  89: const highResResult = await ImageCompressor.compress(buffer, true);
19198: 16547: 13914:  90: await logInfo("High-res compression complete", {
19199: 16548: 13915:  91:   originalSize: buffer.length,
19200: 16549: 13916:  92:   compressedSize: highResResult.buffer.length,
19201: 16550: 13917:  93:   dimensions: `${highResResult.info.width}x${highResResult.info.height}`,
19202: 16551: 13918:  94:   quality: highResResult.info.quality
19203: 16552: 13919:  95: });
19204: 16553: 13920:  96: ```
19205: 16554: 13921:  97: 
19206: 16555: 13922:  98: ## Compression Pipeline
19207: 16556: 13923:  99: 
19208: 16557: 13924: 100: ### Image Analysis
19209: 16558: 13925: 101: 
19210: 16559: 13926: 102: ```typescript
19211: 16560: 13927: 103: const originalInfo = await sharp(buffer).metadata();
19212: 16561: 13928: 104: const originalSize = buffer.length;
19213: 16562: 13929: 105: ```
19214: 16563: 13930: 106: 
19215: 16564: 13931: 107: ### Optimization Process
19216: 16565: 13932: 108: 
19217: 16566: 13933: 109: ```typescript
19218: 16567: 13934: 110: const image = sharp(buffer).jpeg({
19219: 16568: 13935: 111:   quality,
19220: 16569: 13936: 112:   progressive: true,
19221: 16570: 13937: 113:   mozjpeg: true,
19222: 16571: 13938: 114: });
19223: 16572: 13939: 115: 
19224: 16573: 13940: 116: if (originalInfo.width && originalInfo.width > targetWidth) {
19225: 16574: 13941: 117:   image.resize(targetWidth, null, {
19226: 16575: 13942: 118:     fit: "inside",
19227: 16576: 13943: 119:     withoutEnlargement: true,
19228: 16577: 13944: 120:   });
19229: 16578: 13945: 121: }
19230: 16579: 13946: 122: ```
19231: 16580: 13947: 123: 
19232: 16581: 13948: 124: ## Performance Monitoring
19233: 16582: 13949: 125: 
19234: 16583: 13950: 126: ### Size Reduction Tracking
19235: 16584: 13951: 127: 
19236: 16585: 13952: 128: ```typescript
19237: 16586: 13953: 129: const compressionStats = {
19238: 16587: 13954: 130:   originalSize: buffer.length,
19239: 16588: 13955: 131:   compressedSize: compressedBuffer.length,
19240: 16589: 13956: 132:   reductionPercent: (
19241: 16590: 13957: 133:     (buffer.length - compressedBuffer.length) / 
19242: 16591: 13958: 134:     buffer.length * 100
19243: 16592: 13959: 135:   ).toFixed(2)
19244: 16593: 13960: 136: };
19245: 16594: 13961: 137: ```
19246: 16595: 13962: 138: 
19247: 16596: 13963: 139: ### Quality Metrics
19248: 16597: 13964: 140: 
19249: 16598: 13965: 141: ```typescript
19250: 16599: 13966: 142: const qualityMetrics = {
19251: 16600: 13967: 143:   dimensions: `${compressedInfo.width}x${compressedInfo.height}`,
19252: 16601: 13968: 144:   format: compressedInfo.format,
19253: 16602: 13969: 145:   quality: isHighRes ? QUALITY.HIGH_RES : QUALITY.LOW_RES
19254: 16603: 13970: 146: };
19255: 16604: 13971: 147: ```
19256: 16605: 13972: 148: 
19257: 16606: 13973: 149: ## Best Practices
19258: 16607: 13974: 150: 
19259: 16608: 13975: 151: ### Memory Management
19260: 16609: 13976: 152: 
19261: 16610: 13977: 153: - Process one image at a time
19262: 16611: 13978: 154: - Release buffers after processing
19263: 16612: 13979: 155: - Monitor memory usage
19264: 16613: 13980: 156: 
19265: 16614: 13981: 157: ### Quality Control
19266: 16615: 13982: 158: 
19267: 16616: 13983: 159: - Use appropriate quality settings
19268: 16617: 13984: 160: - Validate output dimensions
19269: 16618: 13985: 161: - Check compression ratios
19270: 16619: 13986: 162: 
19271: 16620: 13987: 163: ### Error Prevention
19272: 16621: 13988: 164: 
19273: 16622: 13989: 165: - Validate input formats
19274: 16623: 13990: 166: - Check buffer integrity
19275: 16624: 13991: 167: - Monitor compression results
19276: 16625: 13992: 168: 
19277: 16626: 13993: 169: ## Usage Guidelines
19278: 16627: 13994: 170: 
19279: 16628: 13995: 171: ### Standard Resolution
19280: 16629: 13996: 172: 
19281: 16630: 13997: 173: ```typescript
19282: 16631: 13998: 174: const standardResult = await ImageCompressor.compress(buffer);
19283: 16632: 13999: 175: if (standardResult.buffer.length > buffer.length) {
19284: 16633: 14000: 176:   // Use original if compression didn't help
19285: 16634: 14001: 177:   return buffer;
19286: 16635: 14002: 178: }
19287: 16636: 14003: 179: ```
19288: 16637: 14004: 180: 
19289: 16638: 14005: 181: ### High Resolution
19290: 16639: 14006: 182: 
19291: 16640: 14007: 183: ```typescript
19292: 16641: 14008: 184: const highResResult = await ImageCompressor.compress(buffer, true);
19293: 16642: 14009: 185: if (!highResResult.info.width || highResResult.info.width < 400) {
19294: 16643: 14010: 186:   throw new Error("High-res compression failed to meet size requirements");
19295: 16644: 14011: 187: }
19296: 16645: 14012: 188: ```
19297: 16646: 14013: 189: 
19298: 16647: 14014: 190: ## Error Handling
19299: 16648: 14015: 191: 
19300: 16649: 14016: 192: ### Input Validation
19301: 16650: 14017: 193: 
19302: 16651: 14018: 194: ```typescript
19303: 16652: 14019: 195: if (!buffer || buffer.length === 0) {
19304: 16653: 14020: 196:   throw new Error("Invalid input buffer");
19305: 16654: 14021: 197: }
19306: 16655: 14022: 198: 
19307: 16656: 14023: 199: if (!await ImageCompressor.isCompressible(buffer)) {
19308: 16657: 14024: 200:   throw new Error("Unsupported image format");
19309: 16658: 14025: 201: }
19310: 16659: 14026: 202: ```
19311: 16660: 14027: 203: 
19312: 16661: 14028: 204: ### Processing Errors
19313: 16662: 14029: 205: 
19314: 16663: 14030: 206: ```typescript
19315: 16664: 14031: 207: try {
19316: 16665: 14032: 208:   return await ImageCompressor.compress(buffer);
19317: 16666: 14033: 209: } catch (error) {
19318: 16667: 14034: 210:   throw new Error(
19319: 16668: 14035: 211:     `Image compression failed: ${
19320: 16669: 14036: 212:       error instanceof Error ? error.message : "Unknown error"
19321: 16670: 14037: 213:     }`
19322: 16671: 14038: 214:   );
19323: 16672: 14039: 215: }
19324: 16673: 14040: 216: ```
19325: 16674: 14041: 217: 
19326: 16675: 14042: 218: ## Related Components
19327: 16676: 14043: 219: 
19328: 16677: 14044: 220: - [Image Handler](./image-handler)
19329: 16678: 14045: 221: - [Image Validator](./image-validator)
19330: 16679: 14046: 222: - [Logger](./logging)
19331: 16680: 14047: 223: 
19332: 16681: 14048: 224: ## Troubleshooting
19333: 16682: 14049: 225: 
19334: 16683: 14050: 226: ### Common Issues
19335: 16684: 14051: 227: 
19336: 16685: 14052: 228: 1. Memory Constraints:
19337: 16686: 14053: 229:    - Monitor buffer sizes
19338: 16687: 14054: 230:    - Process images sequentially
19339: 16688: 14055: 231:    - Implement garbage collection
19340: 16689: 14056: 232: 
19341: 16690: 14057: 233: 2. Quality Problems:
19342: 16691: 14058: 234:    - Verify quality settings
19343: 16692: 14059: 235:    - Check dimension constraints
19344: 16693: 14060: 236:    - Validate output formats
19345: 16694: 14061: 237: 
19346: 16695: 14062: 238: 3. Performance Issues:
19347: 16696: 14063: 239:    - Monitor processing times
19348: 16697: 14064: 240:    - Track compression ratios
19349: 16698: 14065: 241:    - Optimize batch processing
19350: 16699: 14066: </file>
19351: 16700: 14067: 
19352: 16701: 14068: <file path="utils/image-handler.md">
19353: 16702: 14069:   1: # Image Handler Utility
19354: 16703: 14070:   2: 
19355: 16704: 14071:   3: ## Overview
19356: 16705: 14072:   4: 
19357: 16706: 14073:   5: The Image Handler (`imageHandler.ts`) is a comprehensive utility for managing card images. It handles downloading, processing, compression, caching, and storage of both standard and high-resolution card images in Firebase Storage.
19358: 16707: 14074:   6: 
19359: 16708: 14075:   7: ## Features
19360: 16709: 14076:   8: 
19361: 16710: 14077:   9: - Dual resolution support (200w and 400w)
19362: 16711: 14078:  10: - Image compression and optimization
19363: 16712: 14079:  11: - Caching system
19364: 16713: 14080:  12: - Hash-based change detection
19365: 16714: 14081:  13: - Error handling and retry logic
19366: 16715: 14082:  14: - Storage path management
19367: 16716: 14083:  15: - Metadata tracking
19368: 16717: 14084:  16: 
19369: 16718: 14085:  17: ## Class Structure
19370: 16719: 14086:  18: 
19371: 16720: 14087:  19: ```typescript
19372: 16721: 14088:  20: export class ImageHandler {
19373: 16722: 14089:  21:   private bucket = storage.bucket(STORAGE.BUCKETS.CARD_IMAGES);
19374: 16723: 14090:  22:  
19375: 16724: 14091:  23:   // Main method
19376: 16725: 14092:  24:   async processImage(
19377: 16726: 14093:  25:     imageUrl: string,
19378: 16727: 14094:  26:     groupId: string,
19379: 16728: 14095:  27:     productId: number
19380: 16729: 14096:  28:   ): Promise<ImageProcessingResult>
19381: 16730: 14097:  29: }
19382: 16731: 14098:  30: ```
19383: 16732: 14099:  31: 
19384: 16733: 14100:  32: ## Core Methods
19385: 16734: 14101:  33: 
19386: 16735: 14102:  34: ### Process Image
19387: 16736: 14103:  35: 
19388: 16737: 14104:  36: ```typescript
19389: 16738: 14105:  37: async processImage(
19390: 16739: 14106:  38:   imageUrl: string,
19391: 16740: 14107:  39:   groupId: string,
19392: 16741: 14108:  40:   productId: number
19393: 16742: 14109:  41: ): Promise<ImageProcessingResult>
19394: 16743: 14110:  42: ```
19395: 16744: 14111:  43: 
19396: 16745: 14112:  44: #### Parameters
19397: 16746: 14113:  45: 
19398: 16747: 14114:  46: - `imageUrl`: Source URL of the card image
19399: 16748: 14115:  47: - `groupId`: Card group identifier
19400: 16749: 14116:  48: - `productId`: Unique card identifier
19401: 16750: 14117:  49: 
19402: 16751: 14118:  50: #### Returns
19403: 16752: 14119:  51: 
19404: 16753: 14120:  52: ```typescript
19405: 16754: 14121:  53: interface ImageProcessingResult {
19406: 16755: 14122:  54:   originalUrl: string;      // URL of standard resolution image
19407: 16756: 14123:  55:   highResUrl: string;       // URL of high resolution image
19408: 16757: 14124:  56:   metadata: ImageMetadata;  // Image processing metadata
19409: 16758: 14125:  57:   updated: boolean;         // Whether image was updated
19410: 16759: 14126:  58: }
19411: 16760: 14127:  59: ```
19412: 16761: 14128:  60: 
19413: 16762: 14129:  61: ### Image Processing Pipeline
19414: 16763: 14130:  62: 
19415: 16764: 14131:  63: 1. **URL Processing**:
19416: 16765: 14132:  64: 
19417: 16766: 14133:  65: ```typescript
19418: 16767: 14134:  66: private getHighResUrl(imageUrl: string): string {
19419: 16768: 14135:  67:   return imageUrl.replace(/_200w\.jpg$/, "_400w.jpg");
19420: 16769: 14136:  68: }
19421: 16770: 14137:  69: ```
19422: 16771: 14138:  70: 
19423: 16772: 14139:  71: 1. **Storage Path Management**:
19424: 16773: 14140:  72: 
19425: 16774: 14141:  73: ```typescript
19426: 16775: 14142:  74: private getStoragePath(
19427: 16776: 14143:  75:   groupId: string,
19428: 16777: 14144:  76:   productId: number,
19429: 16778: 14145:  77:   isHighRes: boolean = false
19430: 16779: 14146:  78: ): string {
19431: 16780: 14147:  79:   const suffix = isHighRes ? "_400w" : "_200w";
19432: 16781: 14148:  80:   return `${STORAGE.PATHS.IMAGES}/${groupId}/${productId}${suffix}.jpg`;
19433: 16782: 14149:  81: }
19434: 16783: 14150:  82: ```
19435: 16784: 14151:  83: 
19436: 16785: 14152:  84: 1. **Image Download**:
19437: 16786: 14153:  85: 
19438: 16787: 14154:  86: ```typescript
19439: 16788: 14155:  87: private async downloadImage(url: string): Promise<Buffer>
19440: 16789: 14156:  88: ```
19441: 16790: 14157:  89: 
19442: 16791: 14158:  90: 1. **Image Compression**:
19443: 16792: 14159:  91: 
19444: 16793: 14160:  92: ```typescript
19445: 16794: 14161:  93: private async compressImage(
19446: 16795: 14162:  94:   buffer: Buffer,
19447: 16796: 14163:  95:   isHighRes: boolean
19448: 16797: 14164:  96: ): Promise<Buffer>
19449: 16798: 14165:  97: ```
19450: 16799: 14166:  98: 
19451: 16800: 14167:  99: ## Configuration
19452: 16801: 14168: 100: 
19453: 16802: 14169: 101: ### Storage Settings
19454: 16803: 14170: 102: 
19455: 16804: 14171: 103: ```typescript
19456: 16805: 14172: 104: export const STORAGE = {
19457: 16806: 14173: 105:   BUCKETS: {
19458: 16807: 14174: 106:     CARD_IMAGES: "fftcg-sync-service.firebasestorage.app",
19459: 16808: 14175: 107:   },
19460: 16809: 14176: 108:   PATHS: {
19461: 16810: 14177: 109:     IMAGES: "card-images",
19462: 16811: 14178: 110:   },
19463: 16812: 14179: 111: };
19464: 16813: 14180: 112: ```
19465: 16814: 14181: 113: 
19466: 16815: 14182: 114: ### Compression Settings
19467: 16816: 14183: 115: 
19468: 16817: 14184: 116: ```typescript
19469: 16818: 14185: 117: private static readonly QUALITY = {
19470: 16819: 14186: 118:   HIGH_RES: 90,
19471: 16820: 14187: 119:   LOW_RES: 85,
19472: 16821: 14188: 120: };
19473: 16822: 14189: 121: 
19474: 16823: 14190: 122: private static readonly DIMENSIONS = {
19475: 16824: 14191: 123:   HIGH_RES: 400,
19476: 16825: 14192: 124:   LOW_RES: 200,
19477: 16826: 14193: 125: };
19478: 16827: 14194: 126: ```
19479: 16828: 14195: 127: 
19480: 16829: 14196: 128: ## Usage Examples
19481: 16830: 14197: 129: 
19482: 16831: 14198: 130: ### Basic Image Processing
19483: 16832: 14199: 131: 
19484: 16833: 14200: 132: ```typescript
19485: 16834: 14201: 133: const imageHandler = new ImageHandler();
19486: 16835: 14202: 134: 
19487: 16836: 14203: 135: const result = await imageHandler.processImage(
19488: 16837: 14204: 136:   "https://tcgplayer-cdn.tcgplayer.com/product/477236_200w.jpg",
19489: 16838: 14205: 137:   "23783",
19490: 16839: 14206: 138:   477236
19491: 16840: 14207: 139: );
19492: 16841: 14208: 140: 
19493: 16842: 14209: 141: console.log("Image URLs:", {
19494: 16843: 14210: 142:   original: result.originalUrl,
19495: 16844: 14211: 143:   highRes: result.highResUrl
19496: 16845: 14212: 144: });
19497: 16846: 14213: 145: ```
19498: 16847: 14214: 146: 
19499: 16848: 14215: 147: ### With Error Handling
19500: 16849: 14216: 148: 
19501: 16850: 14217: 149: ```typescript
19502: 16851: 14218: 150: try {
19503: 16852: 14219: 151:   const imageHandler = new ImageHandler();
19504: 16853: 14220: 152:   const result = await imageHandler.processImage(imageUrl, groupId, productId);
19505: 16854: 14221: 153:  
19506: 16855: 14222: 154:   if (result.updated) {
19507: 16856: 14223: 155:     console.log("Image updated successfully");
19508: 16857: 14224: 156:     console.log("Metadata:", result.metadata);
19509: 16858: 14225: 157:   }
19510: 16859: 14226: 158: } catch (error) {
19511: 16860: 14227: 159:   console.error("Image processing failed:", error);
19512: 16861: 14228: 160: }
19513: 16862: 14229: 161: ```
19514: 16863: 14230: 162: 
19515: 16864: 14231: 163: ## Metadata Management
19516: 16865: 14232: 164: 
19517: 16866: 14233: 165: ### Metadata Structure
19518: 16867: 14234: 166: 
19519: 16868: 14235: 167: ```typescript
19520: 16869: 14236: 168: interface ImageMetadata {
19521: 16870: 14237: 169:   contentType: string;
19522: 16871: 14238: 170:   size: number;
19523: 16872: 14239: 171:   updated: Date;
19524: 16873: 14240: 172:   hash: string;
19525: 16874: 14241: 173:   originalUrl: string;
19526: 16875: 14242: 174:   highResUrl: string;
19527: 16876: 14243: 175:   originalSize?: number;
19528: 16877: 14244: 176:   highResSize?: number;
19529: 16878: 14245: 177: }
19530: 16879: 14246: 178: ```
19531: 16880: 14247: 179: 
19532: 16881: 14248: 180: ### Saving Metadata
19533: 16882: 14249: 181: 
19534: 16883: 14250: 182: ```typescript
19535: 16884: 14251: 183: private async saveMetadata(
19536: 16885: 14252: 184:   groupId: string,
19537: 16886: 14253: 185:   productId: number,
19538: 16887: 14254: 186:   metadata: ImageMetadata
19539: 16888: 14255: 187: ): Promise<void>
19540: 16889: 14256: 188: ```
19541: 16890: 14257: 189: 
19542: 16891: 14258: 190: ## Cache Integration
19543: 16892: 14259: 191: 
19544: 16893: 14260: 192: The Image Handler integrates with the caching system for improved performance:
19545: 16894: 14261: 193: 
19546: 16895: 14262: 194: ```typescript
19547: 16896: 14263: 195: const cacheKey = imageCache.getBufferCacheKey(url);
19548: 16897: 14264: 196: const cachedBuffer = await imageCache.getBuffer(cacheKey);
19549: 16898: 14265: 197: 
19550: 16899: 14266: 198: if (cachedBuffer) {
19551: 16900: 14267: 199:   return cachedBuffer;
19552: 16901: 14268: 200: }
19553: 16902: 14269: 201: ```
19554: 16903: 14270: 202: 
19555: 16904: 14271: 203: ## Error Handling
19556: 16905: 14272: 204: 
19557: 16906: 14273: 205: ### Error Types
19558: 16907: 14274: 206: 
19559: 16908: 14275: 207: ```typescript
19560: 16909: 14276: 208: interface ImageProcessingError extends GenericError {
19561: 16910: 14277: 209:   productId: number;
19562: 16911: 14278: 210:   groupId: string;
19563: 16912: 14279: 211:   originalUrl: string;
19564: 16913: 14280: 212:   type: "download" | "upload" | "metadata" | "unknown";
19565: 16914: 14281: 213: }
19566: 16915: 14282: 214: ```
19567: 16916: 14283: 215: 
19568: 16917: 14284: 216: ### Error Recovery
19569: 16918: 14285: 217: 
19570: 16919: 14286: 218: ```typescript
19571: 16920: 14287: 219: catch (error) {
19572: 16921: 14288: 220:   return {
19573: 16922: 14289: 221:     originalUrl: imageUrl,
19574: 16923: 14290: 222:     highResUrl: this.getHighResUrl(imageUrl),
19575: 16924: 14291: 223:     metadata: {
19576: 16925: 14292: 224:       contentType: "image/jpeg",
19577: 16926: 14293: 225:       size: 0,
19578: 16927: 14294: 226:       updated: new Date(),
19579: 16928: 14295: 227:       hash: "",
19580: 16929: 14296: 228:       originalUrl: imageUrl,
19581: 16930: 14297: 229:       highResUrl: this.getHighResUrl(imageUrl),
19582: 16931: 14298: 230:     },
19583: 16932: 14299: 231:     updated: false,
19584: 16933: 14300: 232:   };
19585: 16934: 14301: 233: }
19586: 16935: 14302: 234: ```
19587: 16936: 14303: 235: 
19588: 16937: 14304: 236: ## Best Practices
19589: 16938: 14305: 237: 
19590: 16939: 14306: 238: 1. **Memory Management**:
19591: 16940: 14307: 239:    - Process one resolution at a time
19592: 16941: 14308: 240:    - Use streams for large files
19593: 16942: 14309: 241:    - Implement proper cleanup
19594: 16943: 14310: 242: 
19595: 16944: 14311: 243: 2. **Error Handling**:
19596: 16945: 14312: 244:    - Implement retries for transient failures
19597: 16946: 14313: 245:    - Log detailed error information
19598: 16947: 14314: 246:    - Maintain fallback URLs
19599: 16948: 14315: 247: 
19600: 16949: 14316: 248: 3. **Performance**:
19601: 16950: 14317: 249:    - Utilize caching effectively
19602: 16951: 14318: 250:    - Implement batch processing
19603: 16952: 14319: 251:    - Monitor storage quotas
19604: 16953: 14320: 252: 
19605: 16954: 14321: 253: ## Related Components
19606: 16955: 14322: 254: 
19607: 16956: 14323: 255: - [Image Cache](./cache)
19608: 16957: 14324: 256: - [Image Compressor](./image-compressor)
19609: 16958: 14325: 257: - [Image Validator](./image-validator)
19610: 16959: 14326: 258: - [Logger](./logging)
19611: 16960: 14327: </file>
19612: 16961: 14328: 
19613: 16962: 14329: <file path="utils/image-validator.md">
19614: 16963: 14330:   1: # Image Validator Utility
19615: 16964: 14331:   2: 
19616: 16965: 14332:   3: ## Overview
19617: 16966: 14333:   4: 
19618: 16967: 14334:   5: The Image Validator (`imageValidator.ts`) ensures image integrity and conformance to required specifications before processing. It validates format, dimensions, file size, and other critical image attributes.
19619: 16968: 14335:   6: 
19620: 16969: 14336:   7: ## Core Features
19621: 16970: 14337:   8: 
19622: 16971: 14338:   9: - Format validation
19623: 16972: 14339:  10: - Dimension verification
19624: 16973: 14340:  11: - Size limit enforcement
19625: 16974: 14341:  12: - Metadata validation
19626: 16975: 14342:  13: - URL structure validation
19627: 16976: 14343:  14: - MIME type checking
19628: 16977: 14344:  15: 
19629: 16978: 14345:  16: ## Configuration
19630: 16979: 14346:  17: 
19631: 16980: 14347:  18: ### Size Limits
19632: 16981: 14348:  19: 
19633: 16982: 14349:  20: ```typescript
19634: 16983: 14350:  21: export const IMAGE_LIMITS = {
19635: 16984: 14351:  22:   MAX_SIZE: 10 * 1024 * 1024,  // 10MB
19636: 16985: 14352:  23:   MIN_SIZE: 1024,              // 1KB
19637: 16986: 14353:  24:   MAX_WIDTH: 2048,
19638: 16987: 14354:  25:   MAX_HEIGHT: 2048,
19639: 16988: 14355:  26:   MIN_WIDTH: 100,
19640: 16989: 14356:  27:   MIN_HEIGHT: 100,
19641: 16990: 14357:  28: };
19642: 16991: 14358:  29: ```
19643: 16992: 14359:  30: 
19644: 16993: 14360:  31: ### Format Settings
19645: 16994: 14361:  32: 
19646: 16995: 14362:  33: ```typescript
19647: 16996: 14363:  34: export const SUPPORTED_FORMATS = [
19648: 16997: 14364:  35:   "image/jpeg",
19649: 16998: 14365:  36:   "image/jpg",
19650: 16999: 14366:  37:   "image/png"
19651: 17000: 14367:  38: ] as const;
19652: 17001: 14368:  39: 
19653: 17002: 14369:  40: export const REQUIRED_DIMENSIONS = {
19654: 17003: 14370:  41:   STANDARD: {
19655: 17004: 14371:  42:     width: 200,
19656: 17005: 14372:  43:     height: 200
19657: 17006: 14373:  44:   },
19658: 17007: 14374:  45:   HIGH_RES: {
19659: 17008: 14375:  46:     width: 400,
19660: 17009: 14376:  47:     height: 400
19661: 17010: 14377:  48:   }
19662: 17011: 14378:  49: };
19663: 17012: 14379:  50: ```
19664: 17013: 14380:  51: 
19665: 17014: 14381:  52: ## Validation Methods
19666: 17015: 14382:  53: 
19667: 17016: 14383:  54: ### URL Pattern Check
19668: 17017: 14384:  55: 
19669: 17018: 14385:  56: ```typescript
19670: 17019: 14386:  57: export function isValidImageUrl(url: string): boolean {
19671: 17020: 14387:  58:   const pattern = /^https:\/\/.*\.(jpg|jpeg|png)(\?.*)?$/i;
19672: 17021: 14388:  59:   return pattern.test(url);
19673: 17022: 14389:  60: }
19674: 17023: 14390:  61: ```
19675: 17024: 14391:  62: 
19676: 17025: 14392:  63: ### Format Verification
19677: 17026: 14393:  64: 
19678: 17027: 14394:  65: ```typescript
19679: 17028: 14395:  66: export async function isValidFormat(
19680: 17029: 14396:  67:   buffer: Buffer
19681: 17030: 14397:  68: ): Promise<boolean> {
19682: 17031: 14398:  69:   try {
19683: 17032: 14399:  70:     const metadata = await sharp(buffer).metadata();
19684: 17033: 14400:  71:     return SUPPORTED_FORMATS.includes(
19685: 17034: 14401:  72:       `image/${metadata.format}` as typeof SUPPORTED_FORMATS[number]
19686: 17035: 14402:  73:     );
19687: 17036: 14403:  74:   } catch {
19688: 17037: 14404:  75:     return false;
19689: 17038: 14405:  76:   }
19690: 17039: 14406:  77: }
19691: 17040: 14407:  78: ```
19692: 17041: 14408:  79: 
19693: 17042: 14409:  80: ## Implementation Examples
19694: 17043: 14410:  81: 
19695: 17044: 14411:  82: ### Basic Validation
19696: 17045: 14412:  83: 
19697: 17046: 14413:  84: ```typescript
19698: 17047: 14414:  85: const validator = new ImageValidator();
19699: 17048: 14415:  86: 
19700: 17049: 14416:  87: try {
19701: 17050: 14417:  88:   await validator.validate(imageBuffer);
19702: 17051: 14418:  89:   console.log("Image validation successful");
19703: 17052: 14419:  90: } catch (error) {
19704: 17053: 14420:  91:   console.error("Validation failed:", error.message);
19705: 17054: 14421:  92: }
19706: 17055: 14422:  93: ```
19707: 17056: 14423:  94: 
19708: 17057: 14424:  95: ### URL Validation
19709: 17058: 14425:  96: 
19710: 17059: 14426:  97: ```typescript
19711: 17060: 14427:  98: const isValid = validator.validateUrl(imageUrl);
19712: 17061: 14428:  99: if (!isValid) {
19713: 17062: 14429: 100:   throw new Error(`Invalid image URL: ${imageUrl}`);
19714: 17063: 14430: 101: }
19715: 17064: 14431: 102: ```
19716: 17065: 14432: 103: 
19717: 17066: 14433: 104: ## Validation Pipeline
19718: 17067: 14434: 105: 
19719: 17068: 14435: 106: ### Size Check
19720: 17069: 14436: 107: 
19721: 17070: 14437: 108: ```typescript
19722: 17071: 14438: 109: private async validateSize(buffer: Buffer): Promise<void> {
19723: 17072: 14439: 110:   const size = buffer.length;
19724: 17073: 14440: 111:  
19725: 17074: 14441: 112:   if (size > IMAGE_LIMITS.MAX_SIZE) {
19726: 17075: 14442: 113:     throw new Error(
19727: 17076: 14443: 114:       `Image size ${size} exceeds maximum limit of ${IMAGE_LIMITS.MAX_SIZE}`
19728: 17077: 14444: 115:     );
19729: 17078: 14445: 116:   }
19730: 17079: 14446: 117:  
19731: 17080: 14447: 118:   if (size < IMAGE_LIMITS.MIN_SIZE) {
19732: 17081: 14448: 119:     throw new Error(
19733: 17082: 14449: 120:       `Image size ${size} below minimum requirement of ${IMAGE_LIMITS.MIN_SIZE}`
19734: 17083: 14450: 121:     );
19735: 17084: 14451: 122:   }
19736: 17085: 14452: 123: }
19737: 17086: 14453: 124: ```
19738: 17087: 14454: 125: 
19739: 17088: 14455: 126: ### Dimension Check
19740: 17089: 14456: 127: 
19741: 17090: 14457: 128: ```typescript
19742: 17091: 14458: 129: private async validateDimensions(
19743: 17092: 14459: 130:   metadata: sharp.Metadata
19744: 17093: 14460: 131: ): Promise<void> {
19745: 17094: 14461: 132:   const { width, height } = metadata;
19746: 17095: 14462: 133:  
19747: 17096: 14463: 134:   if (!width || !height) {
19748: 17097: 14464: 135:     throw new Error("Unable to determine image dimensions");
19749: 17098: 14465: 136:   }
19750: 17099: 14466: 137:  
19751: 17100: 14467: 138:   if (width > IMAGE_LIMITS.MAX_WIDTH || height > IMAGE_LIMITS.MAX_HEIGHT) {
19752: 17101: 14468: 139:     throw new Error("Image dimensions exceed maximum limits");
19753: 17102: 14469: 140:   }
19754: 17103: 14470: 141:  
19755: 17104: 14471: 142:   if (width < IMAGE_LIMITS.MIN_WIDTH || height < IMAGE_LIMITS.MIN_HEIGHT) {
19756: 17105: 14472: 143:     throw new Error("Image dimensions below minimum requirements");
19757: 17106: 14473: 144:   }
19758: 17107: 14474: 145: }
19759: 17108: 14475: 146: ```
19760: 17109: 14476: 147: 
19761: 17110: 14477: 148: ## Utility Functions
19762: 17111: 14478: 149: 
19763: 17112: 14479: 150: ### Metadata Extraction
19764: 17113: 14480: 151: 
19765: 17114: 14481: 152: ```typescript
19766: 17115: 14482: 153: async function getImageMetadata(
19767: 17116: 14483: 154:   buffer: Buffer
19768: 17117: 14484: 155: ): Promise<sharp.Metadata> {
19769: 17118: 14485: 156:   try {
19770: 17119: 14486: 157:     return await sharp(buffer).metadata();
19771: 17120: 14487: 158:   } catch (error) {
19772: 17121: 14488: 159:     throw new Error("Failed to extract image metadata");
19773: 17122: 14489: 160:   }
19774: 17123: 14490: 161: }
19775: 17124: 14491: 162: ```
19776: 17125: 14492: 163: 
19777: 17126: 14493: 164: ### Resolution Check
19778: 17127: 14494: 165: 
19779: 17128: 14495: 166: ```typescript
19780: 17129: 14496: 167: function isValidResolution(
19781: 17130: 14497: 168:   width: number,
19782: 17131: 14498: 169:   height: number,
19783: 17132: 14499: 170:   isHighRes: boolean
19784: 17133: 14500: 171: ): boolean {
19785: 17134: 14501: 172:   const requirements = isHighRes ? 
19786: 17135: 14502: 173:     REQUIRED_DIMENSIONS.HIGH_RES : 
19787: 17136: 14503: 174:     REQUIRED_DIMENSIONS.STANDARD;
19788: 17137: 14504: 175:    
19789: 17138: 14505: 176:   return width >= requirements.width && 
19790: 17139: 14506: 177:          height >= requirements.height;
19791: 17140: 14507: 178: }
19792: 17141: 14508: 179: ```
19793: 17142: 14509: 180: 
19794: 17143: 14510: 181: ## Error Messages
19795: 17144: 14511: 182: 
19796: 17145: 14512: 183: ### Custom Validation Errors
19797: 17146: 14513: 184: 
19798: 17147: 14514: 185: ```typescript
19799: 17148: 14515: 186: export class ImageValidationError extends Error {
19800: 17149: 14516: 187:   constructor(
19801: 17150: 14517: 188:     message: string,
19802: 17151: 14518: 189:     public code: string,
19803: 17152: 14519: 190:     public details?: Record<string, unknown>
19804: 17153: 14520: 191:   ) {
19805: 17154: 14521: 192:     super(message);
19806: 17155: 14522: 193:     this.name = "ImageValidationError";
19807: 17156: 14523: 194:   }
19808: 17157: 14524: 195: }
19809: 17158: 14525: 196: ```
19810: 17159: 14526: 197: 
19811: 17160: 14527: 198: ### Error Codes
19812: 17161: 14528: 199: 
19813: 17162: 14529: 200: ```typescript
19814: 17163: 14530: 201: export const VALIDATION_ERRORS = {
19815: 17164: 14531: 202:   INVALID_FORMAT: "INVALID_FORMAT",
19816: 17165: 14532: 203:   INVALID_SIZE: "INVALID_SIZE",
19817: 17166: 14533: 204:   INVALID_DIMENSIONS: "INVALID_DIMENSIONS",
19818: 17167: 14534: 205:   INVALID_URL: "INVALID_URL",
19819: 17168: 14535: 206:   METADATA_ERROR: "METADATA_ERROR"
19820: 17169: 14536: 207: } as const;
19821: 17170: 14537: 208: ```
19822: 17171: 14538: 209: 
19823: 17172: 14539: 210: ## Best Practices
19824: 17173: 14540: 211: 
19825: 17174: 14541: 212: ### Input Validation
19826: 17175: 14542: 213: 
19827: 17176: 14543: 214: - Check buffer integrity
19828: 17177: 14544: 215: - Validate URL structure
19829: 17178: 14545: 216: - Verify MIME types
19830: 17179: 14546: 217: 
19831: 17180: 14547: 218: ### Performance Optimization
19832: 17181: 14548: 219: 
19833: 17182: 14549: 220: - Cache validation results
19834: 17183: 14550: 221: - Implement early returns
19835: 17184: 14551: 222: - Use efficient checks
19836: 17185: 14552: 223: 
19837: 17186: 14553: 224: ### Error Handling
19838: 17187: 14554: 225: 
19839: 17188: 14555: 226: - Provide detailed error messages
19840: 17189: 14556: 227: - Include validation context
19841: 17190: 14557: 228: - Log validation failures
19842: 17191: 14558: 229: 
19843: 17192: 14559: 230: ## Usage Guidelines
19844: 17193: 14560: 231: 
19845: 17194: 14561: 232: ### Standard Validation
19846: 17195: 14562: 233: 
19847: 17196: 14563: 234: ```typescript
19848: 17197: 14564: 235: const validateImage = async (buffer: Buffer): Promise<void> => {
19849: 17198: 14565: 236:   const validator = new ImageValidator();
19850: 17199: 14566: 237:  
19851: 17200: 14567: 238:   try {
19852: 17201: 14568: 239:     await validator.validate(buffer);
19853: 17202: 14569: 240:   } catch (error) {
19854: 17203: 14570: 241:     await logError(error, "imageValidation");
19855: 17204: 14571: 242:     throw error;
19856: 17205: 14572: 243:   }
19857: 17206: 14573: 244: };
19858: 17207: 14574: 245: ```
19859: 17208: 14575: 246: 
19860: 17209: 14576: 247: ### URL Pattern Validation
19861: 17210: 14577: 248: 
19862: 17211: 14578: 249: ```typescript
19863: 17212: 14579: 250: const validateImageUrl = (url: string): void => {
19864: 17213: 14580: 251:   if (!isValidImageUrl(url)) {
19865: 17214: 14581: 252:     throw new ImageValidationError(
19866: 17215: 14582: 253:       `Invalid image URL: ${url}`,
19867: 17216: 14583: 254:       VALIDATION_ERRORS.INVALID_URL,
19868: 17217: 14584: 255:       { url }
19869: 17218: 14585: 256:     );
19870: 17219: 14586: 257:   }
19871: 17220: 14587: 258: };
19872: 17221: 14588: 259: ```
19873: 17222: 14589: 260: 
19874: 17223: 14590: 261: ## Related Components
19875: 17224: 14591: 262: 
19876: 17225: 14592: 263: - [Image Compressor](./image-compressor)
19877: 17226: 14593: 264: - [Image Handler](./image-handler)
19878: 17227: 14594: 265: - [Error Handling](./error-handling)
19879: 17228: 14595: 266: 
19880: 17229: 14596: 267: ## Troubleshooting
19881: 17230: 14597: 268: 
19882: 17231: 14598: 269: ### Common Issues
19883: 17232: 14599: 270: 
19884: 17233: 14600: 271: 1. Format Problems:
19885: 17234: 14601: 272:    - Check file extensions
19886: 17235: 14602: 273:    - Verify MIME types
19887: 17236: 14603: 274:    - Validate image headers
19888: 17237: 14604: 275: 
19889: 17238: 14605: 276: 2. Size Issues:
19890: 17239: 14606: 277:    - Monitor file sizes
19891: 17240: 14607: 278:    - Check compression settings
19892: 17241: 14608: 279:    - Verify buffer integrity
19893: 17242: 14609: 280: 
19894: 17243: 14610: 281: 3. Dimension Errors:
19895: 17244: 14611: 282:    - Validate aspect ratios
19896: 17245: 14612: 283:    - Check resolution requirements
19897: 17246: 14613: 284:    - Monitor scaling issues
19898: 17247: 14614: </file>
19899: 17248: 14615: 
19900: 17249: 14616: <file path="utils/logging.md">
19901: 17250: 14617:   1: # Logging System
19902: 17251: 14618:   2: 
19903: 17252: 14619:   3: ## Overview
19904: 17253: 14620:   4: 
19905: 17254: 14621:   5: The Logging System (`logger.ts`) provides comprehensive logging functionality across the application. It integrates with Firebase Functions logger and Firestore for persistent log storage, supporting multiple log levels and structured logging data.
19906: 17255: 14622:   6: 
19907: 17256: 14623:   7: ## Features
19908: 17257: 14624:   8: 
19909: 17258: 14625:   9: - Multiple log levels (INFO, WARNING, ERROR)
19910: 17259: 14626:  10: - Structured logging with metadata
19911: 17260: 14627:  11: - Firestore integration for log persistence
19912: 17261: 14628:  12: - Data cleaning and sanitization
19913: 17262: 14629:  13: - Flexible context tracking
19914: 17263: 14630:  14: - Type-safe logging interfaces
19915: 17264: 14631:  15: 
19916: 17265: 14632:  16: ## Basic Usage
19917: 17266: 14633:  17: 
19918: 17267: 14634:  18: ### Importing the Logger
19919: 17268: 14635:  19: 
19920: 17269: 14636:  20: ```typescript
19921: 17270: 14637:  21: import { logInfo, logWarning, logError } from "../utils/logger";
19922: 17271: 14638:  22: import { logger } from "firebase-functions";
19923: 17272: 14639:  23: ```
19924: 17273: 14640:  24: 
19925: 17274: 14641:  25: ### Log Levels
19926: 17275: 14642:  26: 
19927: 17276: 14643:  27: ```typescript
19928: 17277: 14644:  28: // Info level logging
19929: 17278: 14645:  29: await logInfo("Processing started", {
19930: 17279: 14646:  30:   timestamp: new Date().toISOString(),
19931: 17280: 14647:  31:   operation: "syncCards"
19932: 17281: 14648:  32: });
19933: 17282: 14649:  33: 
19934: 17283: 14650:  34: // Warning level logging
19935: 17284: 14651:  35: await logWarning("Retry attempt required", {
19936: 17285: 14652:  36:   attempt: 2,
19937: 17286: 14653:  37:   maxRetries: 3
19938: 17287: 14654:  38: });
19939: 17288: 14655:  39: 
19940: 17289: 14656:  40: // Error level logging
19941: 17290: 14657:  41: await logError(error, "syncCards:main");
19942: 17291: 14658:  42: ```
19943: 17292: 14659:  43: 
19944: 17293: 14660:  44: ## Data Structures
19945: 17294: 14661:  45: 
19946: 17295: 14662:  46: ### Log Entry Interface
19947: 17296: 14663:  47: 
19948: 17297: 14664:  48: ```typescript
19949: 17298: 14665:  49: interface LogEntry {
19950: 17299: 14666:  50:   timestamp: Date;
19951: 17300: 14667:  51:   level: "INFO" | "WARNING" | "ERROR";
19952: 17301: 14668:  52:   message: string;
19953: 17302: 14669:  53:   context?: string;
19954: 17303: 14670:  54:   data?: Record<string, unknown>;
19955: 17304: 14671:  55: }
19956: 17305: 14672:  56: ```
19957: 17306: 14673:  57: 
19958: 17307: 14674:  58: ### Error Logging Interface
19959: 17308: 14675:  59: 
19960: 17309: 14676:  60: ```typescript
19961: 17310: 14677:  61: interface GenericError {
19962: 17311: 14678:  62:   message: string;
19963: 17312: 14679:  63:   name: string;
19964: 17313: 14680:  64:   code?: string;
19965: 17314: 14681:  65:   stack?: string;
19966: 17315: 14682:  66: }
19967: 17316: 14683:  67: ```
19968: 17317: 14684:  68: 
19969: 17318: 14685:  69: ## Core Functions
19970: 17319: 14686:  70: 
19971: 17320: 14687:  71: ### Info Logging
19972: 17321: 14688:  72: 
19973: 17322: 14689:  73: ```typescript
19974: 17323: 14690:  74: export const logInfo = async (
19975: 17324: 14691:  75:   message: string,
19976: 17325: 14692:  76:   data?: LogData
19977: 17326: 14693:  77: ) => {
19978: 17327: 14694:  78:   const cleanedData = data ? cleanLogData({
19979: 17328: 14695:  79:     ...data,
19980: 17329: 14696:  80:     timestamp: new Date().toISOString(),
19981: 17330: 14697:  81:   }) : undefined;
19982: 17331: 14698:  82: 
19983: 17332: 14699:  83:   const entry: LogEntry = {
19984: 17333: 14700:  84:     timestamp: new Date(),
19985: 17334: 14701:  85:     level: "INFO",
19986: 17335: 14702:  86:     message,
19987: 17336: 14703:  87:     ...(cleanedData && {data: cleanedData}),
19988: 17337: 14704:  88:   };
19989: 17338: 14705:  89: 
19990: 17339: 14706:  90:   logger.info(message, cleanedData);
19991: 17340: 14707:  91:   await saveLogEntry(entry);
19992: 17341: 14708:  92: };
19993: 17342: 14709:  93: ```
19994: 17343: 14710:  94: 
19995: 17344: 14711:  95: ### Error Logging
19996: 17345: 14712:  96: 
19997: 17346: 14713:  97: ```typescript
19998: 17347: 14714:  98: export const logError = async (
19999: 17348: 14715:  99:   error: GenericError | GenericObject,
20000: 17349: 14716: 100:   context: string
20001: 17350: 14717: 101: ) => {
20002: 17351: 14718: 102:   const errorData = cleanLogData({
20003: 17352: 14719: 103:     stack: error.stack,
20004: 17353: 14720: 104:     code: error.code,
20005: 17354: 14721: 105:     ...(error as GenericObject),
20006: 17355: 14722: 106:     timestamp: new Date().toISOString(),
20007: 17356: 14723: 107:   });
20008: 17357: 14724: 108: 
20009: 17358: 14725: 109:   const entry: LogEntry = {
20010: 17359: 14726: 110:     timestamp: new Date(),
20011: 17360: 14727: 111:     level: "ERROR",
20012: 17361: 14728: 112:     message: error.message || "Unknown error",
20013: 17362: 14729: 113:     context,
20014: 17363: 14730: 114:     data: errorData,
20015: 17364: 14731: 115:   };
20016: 17365: 14732: 116: 
20017: 17366: 14733: 117:   logger.error(entry.message, errorData);
20018: 17367: 14734: 118:   await saveLogEntry(entry);
20019: 17368: 14735: 119: };
20020: 17369: 14736: 120: ```
20021: 17370: 14737: 121: 
20022: 17371: 14738: 122: ## Data Cleaning
20023: 17372: 14739: 123: 
20024: 17373: 14740: 124: ### Clean Log Data Function
20025: 17374: 14741: 125: 
20026: 17375: 14742: 126: ```typescript
20027: 17376: 14743: 127: function cleanLogData(
20028: 17377: 14744: 128:   data: Record<string, unknown>
20029: 17378: 14745: 129: ): Record<string, unknown> {
20030: 17379: 14746: 130:   return Object.entries(data).reduce((acc, [key, value]) => {
20031: 17380: 14747: 131:     if (value !== undefined && value !== null) {
20032: 17381: 14748: 132:       if (value && typeof value === "object") {
20033: 17382: 14749: 133:         const cleaned = cleanLogData(value as Record<string, unknown>);
20034: 17383: 14750: 134:         if (Object.keys(cleaned).length > 0) {
20035: 17384: 14751: 135:           acc[key] = cleaned;
20036: 17385: 14752: 136:         }
20037: 17386: 14753: 137:       } else {
20038: 17387: 14754: 138:         acc[key] = value instanceof Date ? value.toISOString() : value;
20039: 17388: 14755: 139:       }
20040: 17389: 14756: 140:     }
20041: 17390: 14757: 141:     return acc;
20042: 17391: 14758: 142:   }, {} as Record<string, unknown>);
20043: 17392: 14759: 143: }
20044: 17393: 14760: 144: ```
20045: 17394: 14761: 145: 
20046: 17395: 14762: 146: ## Firestore Integration
20047: 17396: 14763: 147: 
20048: 17397: 14764: 148: ### Save Log Entry
20049: 17398: 14765: 149: 
20050: 17399: 14766: 150: ```typescript
20051: 17400: 14767: 151: async function saveLogEntry(entry: LogEntry): Promise<void> {
20052: 17401: 14768: 152:   const cleanEntry = {
20053: 17402: 14769: 153:     timestamp: entry.timestamp,
20054: 17403: 14770: 154:     level: entry.level,
20055: 17404: 14771: 155:     message: entry.message,
20056: 17405: 14772: 156:     ...(entry.context && {context: entry.context}),
20057: 17406: 14773: 157:     ...(entry.data && {data: cleanLogData(entry.data)}),
20058: 17407: 14774: 158:   };
20059: 17408: 14775: 159: 
20060: 17409: 14776: 160:   await db.collection(COLLECTION.LOGS).add(cleanEntry);
20061: 17410: 14777: 161: }
20062: 17411: 14778: 162: ```
20063: 17412: 14779: 163: 
20064: 17413: 14780: 164: ## Best Practices
20065: 17414: 14781: 165: 
20066: 17415: 14782: 166: 1. **Structured Logging**:
20067: 17416: 14783: 167: 
20068: 17417: 14784: 168:    ```typescript
20069: 17418: 14785: 169:    await logInfo("Card sync completed", {
20070: 17419: 14786: 170:      cardsProcessed: 50,
20071: 17420: 14787: 171:      updatedCount: 10,
20072: 17421: 14788: 172:      duration: "5m30s",
20073: 17422: 14789: 173:      timestamp: new Date().toISOString()
20074: 17423: 14790: 174:    });
20075: 17424: 14791: 175:    ```
20076: 17425: 14792: 176: 
20077: 17426: 14793: 177: 2. **Error Context**:
20078: 17427: 14794: 178: 
20079: 17428: 14795: 179:    ```typescript
20080: 17429: 14796: 180:    await logError(error, "cardSync:processGroup", {
20081: 17430: 14797: 181:      groupId: "23783",
20082: 17431: 14798: 182:      attempt: 2,
20083: 17432: 14799: 183:      operation: "imageProcessing"
20084: 17433: 14800: 184:    });
20085: 17434: 14801: 185:    ```
20086: 17435: 14802: 186: 
20087: 17436: 14803: 187: 3. **Performance Monitoring**:
20088: 17437: 14804: 188: 
20089: 17438: 14805: 189:    ```typescript
20090: 17439: 14806: 190:    await logInfo("Operation timing", {
20091: 17440: 14807: 191:      operation: "imageCompression",
20092: 17441: 14808: 192:      duration: endTime - startTime,
20093: 17442: 14809: 193:      size: {
20094: 17443: 14810: 194:        before: originalSize,
20095: 17444: 14811: 195:        after: compressedSize
20096: 17445: 14812: 196:      }
20097: 17446: 14813: 197:    });
20098: 17447: 14814: 198:    ```
20099: 17448: 14815: 199: 
20100: 17449: 14816: 200: ## Error Handling
20101: 17450: 14817: 201: 
20102: 17451: 14818: 202: ### Common Patterns
20103: 17452: 14819: 203: 
20104: 17453: 14820: 204: ```typescript
20105: 17454: 14821: 205: try {
20106: 17455: 14822: 206:   // Operation code
20107: 17456: 14823: 207: } catch (error) {
20108: 17457: 14824: 208:   await logError(
20109: 17458: 14825: 209:     error instanceof Error ? error : new Error("Unknown error"),
20110: 17459: 14826: 210:     "operationName",
20111: 17460: 14827: 211:     { contextData: "relevant info" }
20112: 17461: 14828: 212:   );
20113: 17462: 14829: 213:   throw error;
20114: 17463: 14830: 214: }
20115: 17464: 14831: 215: ```
20116: 17465: 14832: 216: 
20117: 17466: 14833: 217: ### Error with Context
20118: 17467: 14834: 218: 
20119: 17468: 14835: 219: ```typescript
20120: 17469: 14836: 220: class DetailedError extends Error {
20121: 17470: 14837: 221:   constructor(
20122: 17471: 14838: 222:     message: string,
20123: 17472: 14839: 223:     public context: string,
20124: 17473: 14840: 224:     public metadata?: Record<string, unknown>
20125: 17474: 14841: 225:   ) {
20126: 17475: 14842: 226:     super(message);
20127: 17476: 14843: 227:     this.name = "DetailedError";
20128: 17477: 14844: 228:   }
20129: 17478: 14845: 229: }
20130: 17479: 14846: 230: ```
20131: 17480: 14847: 231: 
20132: 17481: 14848: 232: ## Query Examples
20133: 17482: 14849: 233: 
20134: 17483: 14850: 234: ### Firestore Queries
20135: 17484: 14851: 235: 
20136: 17485: 14852: 236: ```typescript
20137: 17486: 14853: 237: // Get recent errors
20138: 17487: 14854: 238: const recentErrors = await db
20139: 17488: 14855: 239:   .collection(COLLECTION.LOGS)
20140: 17489: 14856: 240:   .where("level", "==", "ERROR")
20141: 17490: 14857: 241:   .orderBy("timestamp", "desc")
20142: 17491: 14858: 242:   .limit(10)
20143: 17492: 14859: 243:   .get();
20144: 17493: 14860: 244: 
20145: 17494: 14861: 245: // Get logs by context
20146: 17495: 14862: 246: const contextLogs = await db
20147: 17496: 14863: 247:   .collection(COLLECTION.LOGS)
20148: 17497: 14864: 248:   .where("context", "==", "cardSync:processGroup")
20149: 17498: 14865: 249:   .get();
20150: 17499: 14866: 250: ```
20151: 17500: 14867: 251: 
20152: 17501: 14868: 252: ## Related Components
20153: 17502: 14869: 253: 
20154: 17503: 14870: 254: - [Error Handling](./error-handling)
20155: 17504: 14871: 255: - [Sync Logger](./sync-logger)
20156: 17505: 14872: 256: - [Progress Tracking](./progress)
20157: 17506: 14873: 257: 
20158: 17507: 14874: 258: ## Troubleshooting
20159: 17508: 14875: 259: 
20160: 17509: 14876: 260: ### Common Issues
20161: 17510: 14877: 261: 
20162: 17511: 14878: 262: 1. Missing Logs:
20163: 17512: 14879: 263:    - Check log level configuration
20164: 17513: 14880: 264:    - Verify Firestore permissions
20165: 17514: 14881: 265:    - Check error handling implementation
20166: 17515: 14882: 266: 
20167: 17516: 14883: 267: 2. Performance Impact:
20168: 17517: 14884: 268:    - Use appropriate log levels
20169: 17518: 14885: 269:    - Implement log batching for high-volume operations
20170: 17519: 14886: 270:    - Monitor Firestore usage
20171: 17520: 14887: 271: 
20172: 17521: 14888: 272: 3. Data Size:
20173: 17522: 14889: 273:    - Implement log rotation
20174: 17523: 14890: 274:    - Clean sensitive data
20175: 17524: 14891: 275:    - Monitor storage usage
20176: 17525: 14892: </file>
20177: 17526: 14893: 
20178: 17527: 14894: <file path="utils/progress.md">
20179: 17528: 14895:   1: # Progress Tracking Utility
20180: 17529: 14896:   2: 
20181: 17530: 14897:   3: ## Overview
20182: 17531: 14898:   4: 
20183: 17532: 14899:   5: The Progress Tracker (`progress.ts`) provides real-time monitoring and reporting of long-running operations, particularly during synchronization processes. It handles progress calculation, ETA estimation, and status updates.
20184: 17533: 14900:   6: 
20185: 17534: 14901:   7: ## Core Features
20186: 17535: 14902:   8: 
20187: 17536: 14903:   9: - Real-time progress tracking
20188: 17537: 14904:  10: - ETA calculations
20189: 17538: 14905:  11: - Operation statistics
20190: 17539: 14906:  12: - Progress bar visualization
20191: 17540: 14907:  13: - Step-by-step monitoring
20192: 17541: 14908:  14: - Batch progress tracking
20193: 17542: 14909:  15: 
20194: 17543: 14910:  16: ## Main Interfaces
20195: 17544: 14911:  17: 
20196: 17545: 14912:  18: ### Progress Options
20197: 17546: 14913:  19: 
20198: 17547: 14914:  20: ```typescript
20199: 17548: 14915:  21: interface ProgressOptions {
20200: 17549: 14916:  22:   total: number;
20201: 17550: 14917:  23:   title?: string;
20202: 17551: 14918:  24:   showBar?: boolean;
20203: 17552: 14919:  25:   showEta?: boolean;
20204: 17553: 14920:  26:   batchSize?: number;
20205: 17554: 14921:  27: }
20206: 17555: 14922:  28: ```
20207: 17556: 14923:  29: 
20208: 17557: 14924:  30: ### Progress State
20209: 17558: 14925:  31: 
20210: 17559: 14926:  32: ```typescript
20211: 17560: 14927:  33: interface ProgressState {
20212: 17561: 14928:  34:   current: number;
20213: 17562: 14929:  35:   total: number;
20214: 17563: 14930:  36:   startTime: Date;
20215: 17564: 14931:  37:   lastUpdateTime: Date;
20216: 17565: 14932:  38:   completed: boolean;
20217: 17566: 14933:  39:   eta?: Date;
20218: 17567: 14934:  40:   rate?: number;
20219: 17568: 14935:  41: }
20220: 17569: 14936:  42: ```
20221: 17570: 14937:  43: 
20222: 17571: 14938:  44: ## Implementation Examples
20223: 17572: 14939:  45: 
20224: 17573: 14940:  46: ### Basic Usage
20225: 17574: 14941:  47: 
20226: 17575: 14942:  48: ```typescript
20227: 17576: 14943:  49: const progress = new ProgressTracker({
20228: 17577: 14944:  50:   total: totalItems,
20229: 17578: 14945:  51:   title: "Processing Cards",
20230: 17579: 14946:  52:   showBar: true,
20231: 17580: 14947:  53:   showEta: true
20232: 17581: 14948:  54: });
20233: 17582: 14949:  55: 
20234: 17583: 14950:  56: progress.start();
20235: 17584: 14951:  57: 
20236: 17585: 14952:  58: for (const item of items) {
20237: 17586: 14953:  59:   await processItem(item);
20238: 17587: 14954:  60:   progress.increment();
20239: 17588: 14955:  61: }
20240: 17589: 14956:  62: 
20241: 17590: 14957:  63: progress.finish();
20242: 17591: 14958:  64: ```
20243: 17592: 14959:  65: 
20244: 17593: 14960:  66: ### Batch Processing
20245: 17594: 14961:  67: 
20246: 17595: 14962:  68: ```typescript
20247: 17596: 14963:  69: const tracker = new ProgressTracker({
20248: 17597: 14964:  70:   total: totalGroups,
20249: 17598: 14965:  71:   title: "Syncing Groups",
20250: 17599: 14966:  72:   batchSize: 25
20251: 17600: 14967:  73: });
20252: 17601: 14968:  74: 
20253: 17602: 14969:  75: tracker.start();
20254: 17603: 14970:  76: 
20255: 17604: 14971:  77: for (const batch of batches) {
20256: 17605: 14972:  78:   await processBatch(batch);
20257: 17606: 14973:  79:   tracker.incrementBatch(batch.length);
20258: 17607: 14974:  80: }
20259: 17608: 14975:  81: 
20260: 17609: 14976:  82: tracker.finish();
20261: 17610: 14977:  83: ```
20262: 17611: 14978:  84: 
20263: 17612: 14979:  85: ## Progress Visualization
20264: 17613: 14980:  86: 
20265: 17614: 14981:  87: ### Progress Bar
20266: 17615: 14982:  88: 
20267: 17616: 14983:  89: ```typescript
20268: 17617: 14984:  90: private renderBar(
20269: 17618: 14985:  91:   percentage: number,
20270: 17619: 14986:  92:   width: number = 30
20271: 17620: 14987:  93: ): string {
20272: 17621: 14988:  94:   const filled = Math.floor(width * (percentage / 100));
20273: 17622: 14989:  95:   const empty = width - filled;
20274: 17623: 14990:  96:  
20275: 17624: 14991:  97:   return '[' + 
20276: 17625: 14992:  98:     '='.repeat(filled) + 
20277: 17626: 14993:  99:     ' '.repeat(empty) + 
20278: 17627: 14994: 100:     ']';
20279: 17628: 14995: 101: }
20280: 17629: 14996: 102: ```
20281: 17630: 14997: 103: 
20282: 17631: 14998: 104: ### Status Line
20283: 17632: 14999: 105: 
20284: 17633: 15000: 106: ```typescript
20285: 17634: 15001: 107: private renderStatus(): string {
20286: 17635: 15002: 108:   const percentage = this.getPercentage();
20287: 17636: 15003: 109:   const current = this.state.current;
20288: 17637: 15004: 110:   const total = this.state.total;
20289: 17638: 15005: 111:  
20290: 17639: 15006: 112:   return `${this.options.title || 'Progress'}: ` +
20291: 17640: 15007: 113:     `${current}/${total} ` +
20292: 17641: 15008: 114:     `(${percentage.toFixed(1)}%)`;
20293: 17642: 15009: 115: }
20294: 17643: 15010: 116: ```
20295: 17644: 15011: 117: 
20296: 17645: 15012: 118: ## Time Calculations
20297: 17646: 15013: 119: 
20298: 17647: 15014: 120: ### ETA Estimation
20299: 17648: 15015: 121: 
20300: 17649: 15016: 122: ```typescript
20301: 17650: 15017: 123: private calculateEta(): Date | undefined {
20302: 17651: 15018: 124:   if (this.state.current === 0) return undefined;
20303: 17652: 15019: 125:  
20304: 17653: 15020: 126:   const elapsed = Date.now() - this.state.startTime.getTime();
20305: 17654: 15021: 127:   const rate = this.state.current / (elapsed / 1000);
20306: 17655: 15022: 128:   const remaining = this.state.total - this.state.current;
20307: 17656: 15023: 129:  
20308: 17657: 15024: 130:   return new Date(
20309: 17658: 15025: 131:     Date.now() + (remaining / rate) * 1000
20310: 17659: 15026: 132:   );
20311: 17660: 15027: 133: }
20312: 17661: 15028: 134: ```
20313: 17662: 15029: 135: 
20314: 17663: 15030: 136: ### Processing Rate
20315: 17664: 15031: 137: 
20316: 17665: 15032: 138: ```typescript
20317: 17666: 15033: 139: private calculateRate(): number {
20318: 17667: 15034: 140:   const elapsed = (
20319: 17668: 15035: 141:     this.state.lastUpdateTime.getTime() - 
20320: 17669: 15036: 142:     this.state.startTime.getTime()
20321: 17670: 15037: 143:   ) / 1000;
20322: 17671: 15038: 144:  
20323: 17672: 15039: 145:   return this.state.current / elapsed;
20324: 17673: 15040: 146: }
20325: 17674: 15041: 147: ```
20326: 17675: 15042: 148: 
20327: 17676: 15043: 149: ## Event Handling
20328: 17677: 15044: 150: 
20329: 17678: 15045: 151: ### Progress Updates
20330: 17679: 15046: 152: 
20331: 17680: 15047: 153: ```typescript
20332: 17681: 15048: 154: onProgress(callback: ProgressCallback): void {
20333: 17682: 15049: 155:   this.progressCallbacks.push(callback);
20334: 17683: 15050: 156: }
20335: 17684: 15051: 157: 
20336: 17685: 15052: 158: private emitProgress(): void {
20337: 17686: 15053: 159:   const progress = {
20338: 17687: 15054: 160:     current: this.state.current,
20339: 17688: 15055: 161:     total: this.state.total,
20340: 17689: 15056: 162:     percentage: this.getPercentage(),
20341: 17690: 15057: 163:     eta: this.state.eta,
20342: 17691: 15058: 164:     rate: this.state.rate
20343: 17692: 15059: 165:   };
20344: 17693: 15060: 166:  
20345: 17694: 15061: 167:   this.progressCallbacks.forEach(callback => callback(progress));
20346: 17695: 15062: 168: }
20347: 17696: 15063: 169: ```
20348: 17697: 15064: 170: 
20349: 17698: 15065: 171: ### Completion Events
20350: 17699: 15066: 172: 
20351: 17700: 15067: 173: ```typescript
20352: 17701: 15068: 174: onComplete(callback: CompleteCallback): void {
20353: 17702: 15069: 175:   this.completeCallbacks.push(callback);
20354: 17703: 15070: 176: }
20355: 17704: 15071: 177: 
20356: 17705: 15072: 178: private emitComplete(): void {
20357: 17706: 15073: 179:   const summary = {
20358: 17707: 15074: 180:     total: this.state.total,
20359: 17708: 15075: 181:     duration: this.getDuration(),
20360: 17709: 15076: 182:     averageRate: this.calculateAverageRate()
20361: 17710: 15077: 183:   };
20362: 17711: 15078: 184:  
20363: 17712: 15079: 185:   this.completeCallbacks.forEach(callback => callback(summary));
20364: 17713: 15080: 186: }
20365: 17714: 15081: 187: ```
20366: 17715: 15082: 188: 
20367: 17716: 15083: 189: ## Usage Patterns
20368: 17717: 15084: 190: 
20369: 17718: 15085: 191: ### With Async Operations
20370: 17719: 15086: 192: 
20371: 17720: 15087: 193: ```typescript
20372: 17721: 15088: 194: const processWithProgress = async (
20373: 17722: 15089: 195:   items: any[],
20374: 17723: 15090: 196:   processor: (item: any) => Promise<void>
20375: 17724: 15091: 197: ): Promise<void> => {
20376: 17725: 15092: 198:   const progress = new ProgressTracker({
20377: 17726: 15093: 199:     total: items.length,
20378: 17727: 15094: 200:     title: "Processing Items",
20379: 17728: 15095: 201:     showBar: true
20380: 17729: 15096: 202:   });
20381: 17730: 15097: 203:  
20382: 17731: 15098: 204:   progress.start();
20383: 17732: 15099: 205:  
20384: 17733: 15100: 206:   for (const item of items) {
20385: 17734: 15101: 207:     await processor(item);
20386: 17735: 15102: 208:     progress.increment();
20387: 17736: 15103: 209:     await new Promise(resolve => setTimeout(resolve, 10));
20388: 17737: 15104: 210:   }
20389: 17738: 15105: 211:  
20390: 17739: 15106: 212:   progress.finish();
20391: 17740: 15107: 213: };
20392: 17741: 15108: 214: ```
20393: 17742: 15109: 215: 
20394: 17743: 15110: 216: ### With Batch Processing
20395: 17744: 15111: 217: 
20396: 17745: 15112: 218: ```typescript
20397: 17746: 15113: 219: const processBatchWithProgress = async (
20398: 17747: 15114: 220:   batches: any[][],
20399: 17748: 15115: 221:   processor: (batch: any[]) => Promise<void>
20400: 17749: 15116: 222: ): Promise<void> => {
20401: 17750: 15117: 223:   const totalItems = batches.reduce(
20402: 17751: 15118: 224:     (sum, batch) => sum + batch.length, 
20403: 17752: 15119: 225:     0
20404: 17753: 15120: 226:   );
20405: 17754: 15121: 227:  
20406: 17755: 15122: 228:   const progress = new ProgressTracker({
20407: 17756: 15123: 229:     total: totalItems,
20408: 17757: 15124: 230:     title: "Processing Batches",
20409: 17758: 15125: 231:     batchSize: batches[0].length
20410: 17759: 15126: 232:   });
20411: 17760: 15127: 233:  
20412: 17761: 15128: 234:   progress.start();
20413: 17762: 15129: 235:  
20414: 17763: 15130: 236:   for (const batch of batches) {
20415: 17764: 15131: 237:     await processor(batch);
20416: 17765: 15132: 238:     progress.incrementBatch(batch.length);
20417: 17766: 15133: 239:   }
20418: 17767: 15134: 240:  
20419: 17768: 15135: 241:   progress.finish();
20420: 17769: 15136: 242: };
20421: 17770: 15137: 243: ```
20422: 17771: 15138: 244: 
20423: 17772: 15139: 245: ## Best Practices
20424: 17773: 15140: 246: 
20425: 17774: 15141: 247: ### Memory Efficiency
20426: 17775: 15142: 248: 
20427: 17776: 15143: 249: - Clear callbacks after completion
20428: 17777: 15144: 250: - Limit status update frequency
20429: 17778: 15145: 251: - Manage event listener count
20430: 17779: 15146: 252: 
20431: 17780: 15147: 253: ### Accuracy
20432: 17781: 15148: 254: 
20433: 17782: 15149: 255: - Update progress immediately
20434: 17783: 15150: 256: - Calculate rates periodically
20435: 17784: 15151: 257: - Maintain precise counters
20436: 17785: 15152: 258: 
20437: 17786: 15153: 259: ### User Experience
20438: 17787: 15154: 260: 
20439: 17788: 15155: 261: - Show meaningful titles
20440: 17789: 15156: 262: - Provide accurate ETAs
20441: 17790: 15157: 263: - Update status consistently
20442: 17791: 15158: 264: 
20443: 17792: 15159: 265: ## Related Components
20444: 17793: 15160: 266: 
20445: 17794: 15161: 267: - [Sync Logger](./sync-logger)
20446: 17795: 15162: 268: - [Batch Processor](./batch)
20447: 17796: 15163: 269: - [Logger](./logging)
20448: 17797: 15164: 270: 
20449: 17798: 15165: 271: ## Troubleshooting
20450: 17799: 15166: 272: 
20451: 17800: 15167: 273: ### Common Issues
20452: 17801: 15168: 274: 
20453: 17802: 15169: 275: 1. Performance Impact:
20454: 17803: 15170: 276:    - Limit update frequency
20455: 17804: 15171: 277:    - Optimize calculations
20456: 17805: 15172: 278:    - Monitor memory usage
20457: 17806: 15173: 279: 
20458: 17807: 15174: 280: 2. Accuracy Problems:
20459: 17808: 15175: 281:    - Verify counter updates
20460: 17809: 15176: 282:    - Check time calculations
20461: 17810: 15177: 283:    - Validate batch sizes
20462: 17811: 15178: 284: 
20463: 17812: 15179: 285: 3. Display Issues:
20464: 17813: 15180: 286:    - Check terminal width
20465: 17814: 15181: 287:    - Verify output formatting
20466: 17815: 15182: 288:    - Monitor update rates
20467: 17816: 15183: </file>
20468: 17817: 15184: 
20469: 17818: 15185: <file path="utils/request.md">
20470: 17819: 15186:   1: # Request Handler Utility
20471: 17820: 15187:   2: 
20472: 17821: 15188:   3: ## Overview
20473: 17822: 15189:   4: 
20474: 17823: 15190:   5: The Request Handler (`request.ts`) manages HTTP requests with built-in retry logic, rate limiting, and error handling. It provides a robust foundation for external API communications, particularly with TCGplayer's API.
20475: 17824: 15191:   6: 
20476: 17825: 15192:   7: ## Core Features
20477: 17826: 15193:   8: 
20478: 17827: 15194:   9: - Configurable retry logic
20479: 17828: 15195:  10: - Rate limiting
20480: 17829: 15196:  11: - Request queuing
20481: 17830: 15197:  12: - Response caching
20482: 17831: 15198:  13: - Error standardization
20483: 17832: 15199:  14: - Request logging
20484: 17833: 15200:  15: 
20485: 17834: 15201:  16: ## Configuration
20486: 17835: 15202:  17: 
20487: 17836: 15203:  18: ### Request Settings
20488: 17837: 15204:  19: 
20489: 17838: 15205:  20: ```typescript
20490: 17839: 15206:  21: interface RequestOptions {
20491: 17840: 15207:  22:   baseURL?: string;
20492: 17841: 15208:  23:   timeout?: number;
20493: 17842: 15209:  24:   retries?: number;
20494: 17843: 15210:  25:   backoff?: number;
20495: 17844: 15211:  26:   headers?: Record<string, string>;
20496: 17845: 15212:  27:   cache?: boolean;
20497: 17846: 15213:  28:   validateStatus?: (status: number) => boolean;
20498: 17847: 15214:  29: }
20499: 17848: 15215:  30: ```
20500: 17849: 15216:  31: 
20501: 17850: 15217:  32: ### Default Configuration
20502: 17851: 15218:  33: 
20503: 17852: 15219:  34: ```typescript
20504: 17853: 15220:  35: const DEFAULT_OPTIONS: RequestOptions = {
20505: 17854: 15221:  36:   timeout: 10000,
20506: 17855: 15222:  37:   retries: 3,
20507: 17856: 15223:  38:   backoff: 1000,
20508: 17857: 15224:  39:   cache: true,
20509: 17858: 15225:  40:   validateStatus: (status: number) => status >= 200 && status < 300
20510: 17859: 15226:  41: };
20511: 17860: 15227:  42: ```
20512: 17861: 15228:  43: 
20513: 17862: 15229:  44: ## Main Methods
20514: 17863: 15230:  45: 
20515: 17864: 15231:  46: ### HTTP Methods
20516: 17865: 15232:  47: 
20517: 17866: 15233:  48: ```typescript
20518: 17867: 15234:  49: class RequestHandler {
20519: 17868: 15235:  50:   async get<T>(
20520: 17869: 15236:  51:     url: string, 
20521: 17870: 15237:  52:     options?: RequestOptions
20522: 17871: 15238:  53:   ): Promise<T>
20523: 17872: 15239:  54: 
20524: 17873: 15240:  55:   async post<T>(
20525: 17874: 15241:  56:     url: string, 
20526: 17875: 15242:  57:     data: unknown, 
20527: 17876: 15243:  58:     options?: RequestOptions
20528: 17877: 15244:  59:   ): Promise<T>
20529: 17878: 15245:  60: 
20530: 17879: 15246:  61:   async put<T>(
20531: 17880: 15247:  62:     url: string, 
20532: 17881: 15248:  63:     data: unknown, 
20533: 17882: 15249:  64:     options?: RequestOptions
20534: 17883: 15250:  65:   ): Promise<T>
20535: 17884: 15251:  66: 
20536: 17885: 15252:  67:   async delete<T>(
20537: 17886: 15253:  68:     url: string, 
20538: 17887: 15254:  69:     options?: RequestOptions
20539: 17888: 15255:  70:   ): Promise<T>
20540: 17889: 15256:  71: }
20541: 17890: 15257:  72: ```
20542: 17891: 15258:  73: 
20543: 17892: 15259:  74: ## Implementation Examples
20544: 17893: 15260:  75: 
20545: 17894: 15261:  76: ### Basic Request
20546: 17895: 15262:  77: 
20547: 17896: 15263:  78: ```typescript
20548: 17897: 15264:  79: const requestHandler = new RequestHandler({
20549: 17898: 15265:  80:   baseURL: "https://api.tcgplayer.com",
20550: 17899: 15266:  81:   headers: {
20551: 17900: 15267:  82:     "Authorization": `Bearer ${token}`,
20552: 17901: 15268:  83:     "Content-Type": "application/json"
20553: 17902: 15269:  84:   }
20554: 17903: 15270:  85: });
20555: 17904: 15271:  86: 
20556: 17905: 15272:  87: const data = await requestHandler.get<CardResponse>(
20557: 17906: 15273:  88:   `/catalog/products/${productId}`
20558: 17907: 15274:  89: );
20559: 17908: 15275:  90: ```
20560: 17909: 15276:  91: 
20561: 17910: 15277:  92: ### With Retry Logic
20562: 17911: 15278:  93: 
20563: 17912: 15279:  94: ```typescript
20564: 17913: 15280:  95: const fetchWithRetry = async <T>(
20565: 17914: 15281:  96:   url: string,
20566: 17915: 15282:  97:   options: RequestOptions = {}
20567: 17916: 15283:  98: ): Promise<T> => {
20568: 17917: 15284:  99:   let attempt = 0;
20569: 17918: 15285: 100:  
20570: 17919: 15286: 101:   while (attempt < (options.retries || DEFAULT_OPTIONS.retries)) {
20571: 17920: 15287: 102:     try {
20572: 17921: 15288: 103:       return await requestHandler.get<T>(url, options);
20573: 17922: 15289: 104:     } catch (error) {
20574: 17923: 15290: 105:       attempt++;
20575: 17924: 15291: 106:       if (attempt === options.retries) throw error;
20576: 17925: 15292: 107:      
20577: 17926: 15293: 108:       const delay = Math.pow(2, attempt) * options.backoff;
20578: 17927: 15294: 109:       await new Promise(resolve => setTimeout(resolve, delay));
20579: 17928: 15295: 110:     }
20580: 17929: 15296: 111:   }
20581: 17930: 15297: 112:  
20582: 17931: 15298: 113:   throw new Error("Max retries exceeded");
20583: 17932: 15299: 114: };
20584: 17933: 15300: 115: ```
20585: 17934: 15301: 116: 
20586: 17935: 15302: 117: ## Error Handling
20587: 17936: 15303: 118: 
20588: 17937: 15304: 119: ### Request Error
20589: 17938: 15305: 120: 
20590: 17939: 15306: 121: ```typescript
20591: 17940: 15307: 122: export class RequestError extends Error {
20592: 17941: 15308: 123:   constructor(
20593: 17942: 15309: 124:     message: string,
20594: 17943: 15310: 125:     public status?: number,
20595: 17944: 15311: 126:     public code?: string,
20596: 17945: 15312: 127:     public response?: unknown
20597: 17946: 15313: 128:   ) {
20598: 17947: 15314: 129:     super(message);
20599: 17948: 15315: 130:     this.name = "RequestError";
20600: 17949: 15316: 131:   }
20601: 17950: 15317: 132: }
20602: 17951: 15318: 133: ```
20603: 17952: 15319: 134: 
20604: 17953: 15320: 135: ### Error Processing
20605: 17954: 15321: 136: 
20606: 17955: 15322: 137: ```typescript
20607: 17956: 15323: 138: private processError(error: unknown): never {
20608: 17957: 15324: 139:   if (axios.isAxiosError(error)) {
20609: 17958: 15325: 140:     throw new RequestError(
20610: 17959: 15326: 141:       error.message,
20611: 17960: 15327: 142:       error.response?.status,
20612: 17961: 15328: 143:       error.code,
20613: 17962: 15329: 144:       error.response?.data
20614: 17963: 15330: 145:     );
20615: 17964: 15331: 146:   }
20616: 17965: 15332: 147:  
20617: 17966: 15333: 148:   throw error;
20618: 17967: 15334: 149: }
20619: 17968: 15335: 150: ```
20620: 17969: 15336: 151: 
20621: 17970: 15337: 152: ## Rate Limiting
20622: 17971: 15338: 153: 
20623: 17972: 15339: 154: ### Rate Limiter
20624: 17973: 15340: 155: 
20625: 17974: 15341: 156: ```typescript
20626: 17975: 15342: 157: class RateLimiter {
20627: 17976: 15343: 158:   private queue: Array<() => Promise<void>> = [];
20628: 17977: 15344: 159:   private processing = false;
20629: 17978: 15345: 160:  
20630: 17979: 15346: 161:   async add<T>(
20631: 17980: 15347: 162:     request: () => Promise<T>
20632: 17981: 15348: 163:   ): Promise<T> {
20633: 17982: 15349: 164:     return new Promise((resolve, reject) => {
20634: 17983: 15350: 165:       this.queue.push(async () => {
20635: 17984: 15351: 166:         try {
20636: 17985: 15352: 167:           const result = await request();
20637: 17986: 15353: 168:           resolve(result);
20638: 17987: 15354: 169:         } catch (error) {
20639: 17988: 15355: 170:           reject(error);
20640: 17989: 15356: 171:         }
20641: 17990: 15357: 172:       });
20642: 17991: 15358: 173:      
20643: 17992: 15359: 174:       if (!this.processing) {
20644: 17993: 15360: 175:         this.processQueue();
20645: 17994: 15361: 176:       }
20646: 17995: 15362: 177:     });
20647: 17996: 15363: 178:   }
20648: 17997: 15364: 179: }
20649: 17998: 15365: 180: ```
20650: 17999: 15366: 181: 
20651: 18000: 15367: 182: ### Queue Processing
20652: 18001: 15368: 183: 
20653: 18002: 15369: 184: ```typescript
20654: 18003: 15370: 185: private async processQueue(): Promise<void> {
20655: 18004: 15371: 186:   if (this.queue.length === 0) {
20656: 18005: 15372: 187:     this.processing = false;
20657: 18006: 15373: 188:     return;
20658: 18007: 15374: 189:   }
20659: 18008: 15375: 190:  
20660: 18009: 15376: 191:   this.processing = true;
20661: 18010: 15377: 192:   const request = this.queue.shift();
20662: 18011: 15378: 193:  
20663: 18012: 15379: 194:   if (request) {
20664: 18013: 15380: 195:     await request();
20665: 18014: 15381: 196:     await new Promise(resolve => 
20666: 18015: 15382: 197:       setTimeout(resolve, this.requestDelay)
20667: 18016: 15383: 198:     );
20668: 18017: 15384: 199:     await this.processQueue();
20669: 18018: 15385: 200:   }
20670: 18019: 15386: 201: }
20671: 18020: 15387: 202: ```
20672: 18021: 15388: 203: 
20673: 18022: 15389: 204: ## Response Caching
20674: 18023: 15390: 205: 
20675: 18024: 15391: 206: ### Cache Implementation
20676: 18025: 15392: 207: 
20677: 18026: 15393: 208: ```typescript
20678: 18027: 15394: 209: class ResponseCache {
20679: 18028: 15395: 210:   private cache = new Map<string, CacheEntry>();
20680: 18029: 15396: 211:  
20681: 18030: 15397: 212:   set(key: string, value: unknown, ttl: number): void {
20682: 18031: 15398: 213:     this.cache.set(key, {
20683: 18032: 15399: 214:       value,
20684: 18033: 15400: 215:       expiry: Date.now() + ttl
20685: 18034: 15401: 216:     });
20686: 18035: 15402: 217:   }
20687: 18036: 15403: 218:  
20688: 18037: 15404: 219:   get(key: string): unknown | undefined {
20689: 18038: 15405: 220:     const entry = this.cache.get(key);
20690: 18039: 15406: 221:     if (!entry) return undefined;
20691: 18040: 15407: 222:    
20692: 18041: 15408: 223:     if (Date.now() > entry.expiry) {
20693: 18042: 15409: 224:       this.cache.delete(key);
20694: 18043: 15410: 225:       return undefined;
20695: 18044: 15411: 226:     }
20696: 18045: 15412: 227:    
20697: 18046: 15413: 228:     return entry.value;
20698: 18047: 15414: 229:   }
20699: 18048: 15415: 230: }
20700: 18049: 15416: 231: ```
20701: 18050: 15417: 232: 
20702: 18051: 15418: 233: ## Usage Guidelines
20703: 18052: 15419: 234: 
20704: 18053: 15420: 235: ### Basic Usage
20705: 18054: 15421: 236: 
20706: 18055: 15422: 237: ```typescript
20707: 18056: 15423: 238: const handler = new RequestHandler();
20708: 18057: 15424: 239: 
20709: 18058: 15425: 240: // GET request
20710: 18059: 15426: 241: const data = await handler.get<DataType>(url);
20711: 18060: 15427: 242: 
20712: 18061: 15428: 243: // POST request
20713: 18062: 15429: 244: const response = await handler.post<ResponseType>(
20714: 18063: 15430: 245:   url,
20715: 18064: 15431: 246:   requestData
20716: 18065: 15432: 247: );
20717: 18066: 15433: 248: ```
20718: 18067: 15434: 249: 
20719: 18068: 15435: 250: ### With Options
20720: 18069: 15436: 251: 
20721: 18070: 15437: 252: ```typescript
20722: 18071: 15438: 253: const response = await handler.get<CardData>(url, {
20723: 18072: 15439: 254:   timeout: 5000,
20724: 18073: 15440: 255:   retries: 2,
20725: 18074: 15441: 256:   cache: true,
20726: 18075: 15442: 257:   headers: {
20727: 18076: 15443: 258:     "Authorization": `Bearer ${token}`
20728: 18077: 15444: 259:   }
20729: 18078: 15445: 260: });
20730: 18079: 15446: 261: ```
20731: 18080: 15447: 262: 
20732: 18081: 15448: 263: ## Best Practices
20733: 18082: 15449: 264: 
20734: 18083: 15450: 265: ### Error Management
20735: 18084: 15451: 266: 
20736: 18085: 15452: 267: - Implement proper error handling
20737: 18086: 15453: 268: - Use retry logic appropriately
20738: 18087: 15454: 269: - Log failed requests
20739: 18088: 15455: 270: 
20740: 18089: 15456: 271: ### Performance
20741: 18090: 15457: 272: 
20742: 18091: 15458: 273: - Enable caching when appropriate
20743: 18092: 15459: 274: - Use rate limiting
20744: 18093: 15460: 275: - Monitor response times
20745: 18094: 15461: 276: 
20746: 18095: 15462: 277: ### Security
20747: 18096: 15463: 278: 
20748: 18097: 15464: 279: - Validate URLs
20749: 18098: 15465: 280: - Secure sensitive headers
20750: 18099: 15466: 281: - Monitor request patterns
20751: 18100: 15467: 282: 
20752: 18101: 15468: 283: ## Related Components
20753: 18102: 15469: 284: 
20754: 18103: 15470: 285: - [Error Handler](./error-handling)
20755: 18104: 15471: 286: - [Logger](./logging)
20756: 18105: 15472: 287: - [Cache System](./cache)
20757: 18106: 15473: 288: 
20758: 18107: 15474: 289: ## Troubleshooting
20759: 18108: 15475: 290: 
20760: 18109: 15476: 291: ### Common Issues
20761: 18110: 15477: 292: 
20762: 18111: 15478: 293: 1. Request Timeouts:
20763: 18112: 15479: 294:    - Check network connectivity
20764: 18113: 15480: 295:    - Verify timeout settings
20765: 18114: 15481: 296:    - Monitor server response times
20766: 18115: 15482: 297: 
20767: 18116: 15483: 298: 2. Rate Limiting:
20768: 18117: 15484: 299:    - Review rate limit settings
20769: 18118: 15485: 300:    - Check queue processing
20770: 18119: 15486: 301:    - Monitor request patterns
20771: 18120: 15487: 302: 
20772: 18121: 15488: 303: 3. Cache Issues:
20773: 18122: 15489: 304:    - Verify cache configuration
20774: 18123: 15490: 305:    - Check TTL settings
20775: 18124: 15491: 306:    - Monitor cache hit rates
20776: 18125: 15492: </file>
20777: 18126: 15493: 
20778: 18127: 15494: <file path="utils/sync-logger.md">
20779: 18128: 15495:   1: # Sync Logger Utility
20780: 18129: 15496:   2: 
20781: 18130: 15497:   3: ## Overview
20782: 18131: 15498:   4: 
20783: 18132: 15499:   5: The Sync Logger (`syncLogger.ts`) provides specialized logging functionality for synchronization operations. It offers detailed tracking of card and price synchronization processes, including group details, card information, and sync results.
20784: 18133: 15500:   6: 
20785: 18134: 15501:   7: ## Features
20786: 18135: 15502:   8: 
20787: 18136: 15503:   9: - Detailed sync operation logging
20788: 18137: 15504:  10: - Card and price details tracking
20789: 18138: 15505:  11: - Group processing information
20790: 18139: 15506:  12: - Progress monitoring
20791: 18140: 15507:  13: - Results summarization
20792: 18141: 15508:  14: - Support for dry run operations
20793: 18142: 15509:  15: 
20794: 18143: 15510:  16: ## Core Interfaces
20795: 18144: 15511:  17: 
20796: 18145: 15512:  18: ### Logger Options
20797: 18146: 15513:  19: 
20798: 18147: 15514:  20: ```typescript
20799: 18148: 15515:  21: interface SyncLoggerOptions {
20800: 18149: 15516:  22:   type: "manual" | "scheduled" | "both";
20801: 18150: 15517:  23:   limit?: number;
20802: 18151: 15518:  24:   dryRun?: boolean;
20803: 18152: 15519:  25:   groupId?: string;
20804: 18153: 15520:  26:   batchSize?: number;
20805: 18154: 15521:  27: }
20806: 18155: 15522:  28: ```
20807: 18156: 15523:  29: 
20808: 18157: 15524:  30: ### Card Details
20809: 18158: 15525:  31: 
20810: 18159: 15526:  32: ```typescript
20811: 18160: 15527:  33: interface CardDetails {
20812: 18161: 15528:  34:   id: number;
20813: 18162: 15529:  35:   name: string;
20814: 18163: 15530:  36:   groupId: string;
20815: 18164: 15531:  37:   normalPrice?: number;
20816: 18165: 15532:  38:   foilPrice?: number;
20817: 18166: 15533:  39:   rawPrices: Array<{
20818: 18167: 15534:  40:     type: "Normal" | "Foil";
20819: 18168: 15535:  41:     price: number;
20820: 18169: 15536:  42:     groupId: string;
20821: 18170: 15537:  43:   }>;
20822: 18171: 15538:  44:   imageUrl?: string;
20823: 18172: 15539:  45:   storageImageUrl?: string;
20824: 18173: 15540:  46: }
20825: 18174: 15541:  47: ```
20826: 18175: 15542:  48: 
20827: 18176: 15543:  49: ### Sync Results
20828: 18177: 15544:  50: 
20829: 18178: 15545:  51: ```typescript
20830: 18179: 15546:  52: interface SyncResults {
20831: 18180: 15547:  53:   success: number;
20832: 18181: 15548:  54:   failures: number;
20833: 18182: 15549:  55:   groupId?: string;
20834: 18183: 15550:  56:   type: "Manual" | "Scheduled";
20835: 18184: 15551:  57:   imagesProcessed?: number;
20836: 18185: 15552:  58:   imagesUpdated?: number;
20837: 18186: 15553:  59: }
20838: 18187: 15554:  60: ```
20839: 18188: 15555:  61: 
20840: 18189: 15556:  62: ## Usage Examples
20841: 18190: 15557:  63: 
20842: 18191: 15558:  64: ### Basic Usage
20843: 18192: 15559:  65: 
20844: 18193: 15560:  66: ```typescript
20845: 18194: 15561:  67: const logger = new SyncLogger({
20846: 18195: 15562:  68:   type: "manual",
20847: 18196: 15563:  69:   dryRun: true,
20848: 18197: 15564:  70:   limit: 10,
20849: 18198: 15565:  71:   batchSize: 25
20850: 18199: 15566:  72: });
20851: 18200: 15567:  73: 
20852: 18201: 15568:  74: await logger.start();
20853: 18202: 15569:  75: await logger.logGroupFound(totalGroups);
20854: 18203: 15570:  76: await logger.logCardDetails(cardDetails);
20855: 18204: 15571:  77: await logger.finish();
20856: 18205: 15572:  78: ```
20857: 18206: 15573:  79: 
20858: 18207: 15574:  80: ### Sync Process Logging
20859: 18208: 15575:  81: 
20860: 18209: 15576:  82: ```typescript
20861: 18210: 15577:  83: // Initialize logger
20862: 18211: 15578:  84: const logger = new SyncLogger({
20863: 18212: 15579:  85:   type: options.dryRun ? "manual" : "scheduled",
20864: 18213: 15580:  86:   limit: options.limit,
20865: 18214: 15581:  87:   dryRun: options.dryRun,
20866: 18215: 15582:  88:   groupId: options.groupId
20867: 18216: 15583:  89: });
20868: 18217: 15584:  90: 
20869: 18218: 15585:  91: // Start logging
20870: 18219: 15586:  92: await logger.start();
20871: 18220: 15587:  93: 
20872: 18221: 15588:  94: // Log group information
20873: 18222: 15589:  95: await logger.logGroupDetails(groupId, products.length, prices.length);
20874: 18223: 15590:  96: 
20875: 18224: 15591:  97: // Log individual card details
20876: 18225: 15592:  98: await logger.logCardDetails({
20877: 18226: 15593:  99:   id: product.productId,
20878: 18227: 15594: 100:   name: product.name,
20879: 18228: 15595: 101:   groupId: product.groupId.toString(),
20880: 18229: 15596: 102:   normalPrice: normalPrice,
20881: 18230: 15597: 103:   foilPrice: foilPrice,
20882: 18231: 15598: 104:   rawPrices: pricesArray
20883: 18232: 15599: 105: });
20884: 18233: 15600: 106: 
20885: 18234: 15601: 107: // Log final results
20886: 18235: 15602: 108: await logger.logSyncResults({
20887: 18236: 15603: 109:   success: processedCount,
20888: 18237: 15604: 110:   failures: errorCount,
20889: 18238: 15605: 111:   type: "Manual",
20890: 18239: 15606: 112:   imagesProcessed: 100,
20891: 18240: 15607: 113:   imagesUpdated: 25
20892: 18241: 15608: 114: });
20893: 18242: 15609: 115: ```
20894: 18243: 15610: 116: 
20895: 18244: 15611: 117: ## Core Methods
20896: 18245: 15612: 118: 
20897: 18246: 15613: 119: ### Start Logging
20898: 18247: 15614: 120: 
20899: 18248: 15615: 121: ```typescript
20900: 18249: 15616: 122: async start(): Promise<void> {
20901: 18250: 15617: 123:   console.log("\nStarting sync test...");
20902: 18251: 15618: 124:   console.log(`Type: ${this.options.type}`);
20903: 18252: 15619: 125:   if (this.options.limit) console.log(`Limit: ${this.options.limit} cards`);
20904: 18253: 15620: 126:   console.log(`Dry Run: ${this.options.dryRun ? "true" : "false"}`);
20905: 18254: 15621: 127:   console.log("\n=== Fetching Raw Data ===");
20906: 18255: 15622: 128: }
20907: 18256: 15623: 129: ```
20908: 18257: 15624: 130: 
20909: 18258: 15625: 131: ### Group Logging
20910: 18259: 15626: 132: 
20911: 18260: 15627: 133: ```typescript
20912: 18261: 15628: 134: async logGroupDetails(
20913: 18262: 15629: 135:   groupId: string,
20914: 18263: 15630: 136:   products: number,
20915: 18264: 15631: 137:   prices: number
20916: 18265: 15632: 138: ): Promise<void> {
20917: 18266: 15633: 139:   this.groups.set(groupId, {products, prices});
20918: 18267: 15634: 140:   console.log(
20919: 18268: 15635: 141:     `Group ${groupId} has ${products} products and ${prices} prices`
20920: 18269: 15636: 142:   );
20921: 18270: 15637: 143: }
20922: 18271: 15638: 144: ```
20923: 18272: 15639: 145: 
20924: 18273: 15640: 146: ### Card Details Logging
20925: 18274: 15641: 147: 
20926: 18275: 15642: 148: ```typescript
20927: 18276: 15643: 149: async logCardDetails(details: CardDetails): Promise<void> {
20928: 18277: 15644: 150:   this.cards.push(details);
20929: 18278: 15645: 151:   if (this.cards.length === 1) {
20930: 18279: 15646: 152:     console.log("\n=== Card Details ===");
20931: 18280: 15647: 153:   }
20932: 18281: 15648: 154: 
20933: 18282: 15649: 155:   console.log(`Card: ${details.name} (${details.groupId || "UNKNOWN"})`);
20934: 18283: 15650: 156:   console.log(`- ID: ${details.id}`);
20935: 18284: 15651: 157:   console.log(`- Group ID: ${details.groupId || "UNKNOWN"}`);
20936: 18285: 15652: 158: 
20937: 18286: 15653: 159:   if (details.rawPrices.length > 0) {
20938: 18287: 15654: 160:     console.log("- Raw Prices:");
20939: 18288: 15655: 161:     details.rawPrices.forEach((price) => {
20940: 18289: 15656: 162:       console.log(
20941: 18290: 15657: 163:         `  > ${price.type}: $${price.price.toFixed(2)} ` +
20942: 18291: 15658: 164:         `(Group: ${price.groupId})`
20943: 18292: 15659: 165:       );
20944: 18293: 15660: 166:     });
20945: 18294: 15661: 167:   }
20946: 18295: 15662: 168: }
20947: 18296: 15663: 169: ```
20948: 18297: 15664: 170: 
20949: 18298: 15665: 171: ## Output Examples
20950: 18299: 15666: 172: 
20951: 18300: 15667: 173: ### Sync Start
20952: 18301: 15668: 174: 
20953: 18302: 15669: 175: ```text
20954: 18303: 15670: 176: Starting sync test...
20955: 18304: 15671: 177: Type: manual
20956: 18305: 15672: 178: Limit: 10 cards
20957: 18306: 15673: 179: Dry Run: true
20958: 18307: 15674: 180: 
20959: 18308: 15675: 181: === Fetching Raw Data ===
20960: 18309: 15676: 182: ```
20961: 18310: 15677: 183: 
20962: 18311: 15678: 184: ### Group Information
20963: 18312: 15679: 185: 
20964: 18313: 15680: 186: ```text
20965: 18314: 15681: 187: Found 15 groups
20966: 18315: 15682: 188: Group 23783 has 100 products and 200 prices
20967: 18316: 15683: 189: ```
20968: 18317: 15684: 190: 
20969: 18318: 15685: 191: ### Card Details Output Example
20970: 18319: 15686: 192: 
20971: 18320: 15687: 193: ```text
20972: 18321: 15688: 194: === Card Details ===
20973: 18322: 15689: 195: Card: Cloud (23783)
20974: 18323: 15690: 196: - ID: 477236
20975: 18324: 15691: 197: - Group ID: 23783
20976: 18325: 15692: 198: - Raw Prices:
20977: 18326: 15693: 199:   > Normal: $1.99 (Group: 23783)
20978: 18327: 15694: 200:   > Foil: $5.99 (Group: 23783)
20979: 18328: 15695: 201: - Image URL: https://example.com/image.jpg
20980: 18329: 15696: 202: - Storage URL: gs://bucket/image.jpg
20981: 18330: 15697: 203: ```
20982: 18331: 15698: 204: 
20983: 18332: 15699: 205: ## Best Practices
20984: 18333: 15700: 206: 
20985: 18334: 15701: 207: 1. **Consistent Usage**:
20986: 18335: 15702: 208: 
20987: 18336: 15703: 209:    ```typescript
20988: 18337: 15704: 210:    const logger = new SyncLogger(options);
20989: 18338: 15705: 211:    await logger.start();
20990: 18339: 15706: 212:    try {
20991: 18340: 15707: 213:      // Sync operations
20992: 18341: 15708: 214:    } finally {
20993: 18342: 15709: 215:      await logger.finish();
20994: 18343: 15710: 216:    }
20995: 18344: 15711: 217:    ```
20996: 18345: 15712: 218: 
20997: 18346: 15713: 219: 2. **Detailed Logging**:
20998: 18347: 15714: 220: 
20999: 18348: 15715: 221:    ```typescript
21000: 18349: 15716: 222:    await logger.logCardDetails({
21001: 18350: 15717: 223:      id: product.id,
21002: 18351: 15718: 224:      name: product.name,
21003: 18352: 15719: 225:      groupId: product.groupId,
21004: 18353: 15720: 226:      normalPrice: product.prices.normal,
21005: 18354: 15721: 227:      foilPrice: product.prices.foil,
21006: 18355: 15722: 228:      rawPrices: product.allPrices,
21007: 18356: 15723: 229:      imageUrl: product.imageUrl,
21008: 18357: 15724: 230:      storageImageUrl: product.storageUrl
21009: 18358: 15725: 231:    });
21010: 18359: 15726: 232:    ```
21011: 18360: 15727: 233: 
21012: 18361: 15728: 234: 3. **Error Tracking**:
21013: 18362: 15729: 235: 
21014: 18363: 15730: 236:    ```typescript
21015: 18364: 15731: 237:    try {
21016: 18365: 15732: 238:      await processGroup(group);
21017: 18366: 15733: 239:    } catch (error) {
21018: 18367: 15734: 240:      await logger.logSyncResults({
21019: 18368: 15735: 241:        success: processed,
21020: 18369: 15736: 242:        failures: failures + 1,
21021: 18370: 15737: 243:        type: "Manual"
21022: 18371: 15738: 244:      });
21023: 18372: 15739: 245:    }
21024: 18373: 15740: 246:    ```
21025: 18374: 15741: 247: 
21026: 18375: 15742: 248: ## Related Components
21027: 18376: 15743: 249: 
21028: 18377: 15744: 250: - [Logger](./logging)
21029: 18378: 15745: 251: - [Error Handling](./error-handling)
21030: 18379: 15746: 252: - [Progress Tracking](./progress)
21031: 18380: 15747: 253: 
21032: 18381: 15748: 254: ## Troubleshooting
21033: 18382: 15749: 255: 
21034: 18383: 15750: 256: ### Common Issues
21035: 18384: 15751: 257: 
21036: 18385: 15752: 258: 1. Missing Information:
21037: 18386: 15753: 259:    - Verify all required fields are provided
21038: 18387: 15754: 260:    - Check logging options configuration
21039: 18388: 15755: 261:    - Ensure proper error handling
21040: 18389: 15756: 262: 
21041: 18390: 15757: 263: 2. Performance Impact:
21042: 18391: 15758: 264:    - Use appropriate batch sizes
21043: 18392: 15759: 265:    - Monitor memory usage
21044: 18393: 15760: 266:    - Implement log rotation
21045: 18394: 15761: 267: 
21046: 18395: 15762: 268: 3. Output Formatting:
21047: 18396: 15763: 269:    - Verify console output formatting
21048: 18397: 15764: 270:    - Check price formatting
21049: 18398: 15765: 271:    - Validate date/time formats
21050: 18399: 15766: </file>
21051: 18400: 15767: 
21052: 18401: 15768: </repository_files>
21053: 18402: </file>
21054: 18403: 
21055: 18404: <file path="faq.md">
21056: 18405:   1: # Frequently Asked Questions
21057: 18406:   2: 
21058: 18407:   3: ## General
21059: 18408:   4: 
21060: 18409:   5: ### What is FFTCG Sync Service?
21061: 18410:   6: 
21062: 18411:   7: A Firebase-based service that synchronizes Final Fantasy Trading Card Game data from TCGplayer, including card information, prices, and images.
21063: 18412:   8: 
21064: 18413:   9: ### What are the system requirements?
21065: 18414:  10: 
21066: 18415:  11: - Node.js 18 or higher
21067: 18416:  12: - Firebase CLI
21068: 18417:  13: - Firebase project with Firestore and Storage enabled
21069: 18418:  14: - 1GB minimum memory allocation
21070: 18419:  15: - Sufficient storage quota for card images
21071: 18420:  16: 
21072: 18421:  17: ### How often does the service sync data?
21073: 18422:  18: 
21074: 18423:  19: - Cards: Daily at 21:00 UTC
21075: 18424:  20: - Prices: Daily at 21:30 UTC
21076: 18425:  21: - Images: During card synchronization
21077: 18426:  22: 
21078: 18427:  23: ## Synchronization
21079: 18428:  24: 
21080: 18429:  25: ### How do I manually trigger a sync?
21081: 18430:  26: 
21082: 18431:  27: ```typescript
21083: 18432:  28: // For cards
21084: 18433:  29: await syncCards({
21085: 18434:  30:   dryRun: false,
21086: 18435:  31:   limit: undefined,
21087: 18436:  32:   groupId: undefined
21088: 18437:  33: });
21089: 18438:  34: 
21090: 18439:  35: // For prices
21091: 18440:  36: await syncPrices({
21092: 18441:  37:   dryRun: false,
21093: 18442:  38:   limit: undefined,
21094: 18443:  39:   groupId: undefined
21095: 18444:  40: });
21096: 18445:  41: ```
21097: 18446:  42: 
21098: 18447:  43: ### What is dry run mode?
21099: 18448:  44: 
21100: 18449:  45: Dry run mode (`dryRun: true`) allows you to test synchronization without making any changes to the database. It's useful for:
21101: 18450:  46: 
21102: 18451:  47: - Validating data before actual sync
21103: 18452:  48: - Testing configuration changes
21104: 18453:  49: - Debugging sync issues
21105: 18454:  50: 
21106: 18455:  51: ### How do I sync specific card groups?
21107: 18456:  52: 
21108: 18457:  53: ```typescript
21109: 18458:  54: const options = {
21110: 18459:  55:   groupId: "23783",  // Specific group ID
21111: 18460:  56:   dryRun: false
21112: 18461:  57: };
21113: 18462:  58: await syncCards(options);
21114: 18463:  59: ```
21115: 18464:  60: 
21116: 18465:  61: ### Why are some syncs skipped?
21117: 18466:  62: 
21118: 18467:  63: Syncs may be skipped when:
21119: 18468:  64: 
21120: 18469:  65: - Data hasn't changed (verified via hash comparison)
21121: 18470:  66: - Rate limits are reached
21122: 18471:  67: - Previous sync is still in progress
21123: 18472:  68: - Network issues occur
21124: 18473:  69: 
21125: 18474:  70: ## Image Processing
21126: 18475:  71: 
21127: 18476:  72: ### What image formats are supported?
21128: 18477:  73: 
21129: 18478:  74: Currently, only JPEG images are supported. The service:
21130: 18479:  75: 
21131: 18480:  76: - Validates JPEG format
21132: 18481:  77: - Checks file signatures
21133: 18482:  78: - Enforces size limits (5MB max)
21134: 18483:  79: 
21135: 18484:  80: ### How are images optimized?
21136: 18485:  81: 
21137: 18486:  82: Images are processed in two ways:
21138: 18487:  83: 
21139: 18488:  84: - Standard resolution (200px width)
21140: 18489:  85: - High resolution (400px width)
21141: 18490:  86: 
21142: 18491:  87: Both versions are:
21143: 18492:  88: 
21144: 18493:  89: - Compressed using mozjpeg
21145: 18494:  90: - Progressive loading enabled
21146: 18495:  91: - Quality optimized (85-90%)
21147: 18496:  92: 
21148: 18497:  93: ### Why are some images not updating?
21149: 18498:  94: 
21150: 18499:  95: Images might not update if:
21151: 18500:  96: 
21152: 18501:  97: - Hash matches existing image
21153: 18502:  98: - Validation fails
21154: 18503:  99: - Storage quota is exceeded
21155: 18504: 100: - Network errors occur
21156: 18505: 101: 
21157: 18506: 102: ## Firebase Integration
21158: 18507: 103: 
21159: 18508: 104: ### How is data stored in Firestore?
21160: 18509: 105: 
21161: 18510: 106: Data is organized in collections:
21162: 18511: 107: 
21163: 18512: 108: - `cards`: Card information
21164: 18513: 109: - `prices`: Price history
21165: 18514: 110: - `cardHashes`: Change detection
21166: 18515: 111: - `priceHashes`: Price updates
21167: 18516: 112: - `imageMetadata`: Image information
21168: 18517: 113: - `syncMetadata`: Sync status
21169: 18518: 114: - `logs`: System logs
21170: 18519: 115: 
21171: 18520: 116: ### How are images stored?
21172: 18521: 117: 
21173: 18522: 118: Images are stored in Firebase Storage:
21174: 18523: 119: 
21175: 18524: 120: - Path format: `card-images/{groupId}/{productId}_{resolution}.jpg`
21176: 18525: 121: - Metadata includes hash and timestamp
21177: 18526: 122: - URLs are signed for long-term access
21178: 18527: 123: 
21179: 18528: 124: ### What happens if Firebase quotas are exceeded?
21180: 18529: 125: 
21181: 18530: 126: The service will:
21182: 18531: 127: 
21183: 18532: 128: 1. Log the quota error
21184: 18533: 129: 2. Pause operations
21185: 18534: 130: 3. Retry with exponential backoff
21186: 18535: 131: 4. Skip non-critical updates
21187: 18536: 132: 
21188: 18537: 133: ## Rate Limiting
21189: 18538: 134: 
21190: 18539: 135: ### How does rate limiting work?
21191: 18540: 136: 
21192: 18541: 137: ```typescript
21193: 18542: 138: const rateLimiter = {
21194: 18543: 139:   tokens: 100,
21195: 18544: 140:   refillRate: 10,
21196: 18545: 141:   interval: 1000
21197: 18546: 142: };
21198: 18547: 143: ```
21199: 18548: 144: 
21200: 18549: 145: - Token bucket algorithm
21201: 18550: 146: - Configurable limits
21202: 18551: 147: - Automatic retry handling
21203: 18552: 148: 
21204: 18553: 149: ### What are the default rate limits?
21205: 18554: 150: 
21206: 18555: 151: - API requests: 100 per minute
21207: 18556: 152: - Image processing: 25 concurrent operations
21208: 18557: 153: - Database writes: Batch size of 500
21209: 18558: 154: - Storage operations: 10 concurrent uploads
21210: 18559: 155: 
21211: 18560: 156: ### How do I adjust rate limits?
21212: 18561: 157: 
21213: 18562: 158: Modify the configuration in your environment:
21214: 18563: 159: 
21215: 18564: 160: ```typescript
21216: 18565: 161: const runtimeOpts = {
21217: 18566: 162:   timeoutSeconds: 540,
21218: 18567: 163:   memory: "1GiB",
21219: 18568: 164: } as const;
21220: 18569: 165: ```
21221: 18570: 166: 
21222: 18571: 167: ## Caching
21223: 18572: 168: 
21224: 18573: 169: ### What is cached?
21225: 18574: 170: 
21226: 18575: 171: - Card data: 1 hour TTL
21227: 18576: 172: - Image metadata: 1 hour TTL
21228: 18577: 173: - Image buffers: 5 minutes TTL
21229: 18578: 174: - API responses: Request-specific TTL
21230: 18579: 175: 
21231: 18580: 176: ### How does the cache hierarchy work?
21232: 18581: 177: 
21233: 18582: 178: 1. Memory cache (L1)
21234: 18583: 179: 2. LRU cache (L2)
21235: 18584: 180: 3. Firestore (persistent)
21236: 18585: 181: 
21237: 18586: 182: ### How do I clear the cache?
21238: 18587: 183: 
21239: 18588: 184: ```typescript
21240: 18589: 185: // Clear specific cache
21241: 18590: 186: imageCache.clear();
21242: 18591: 187: cardCache.clear();
21243: 18592: 188: 
21244: 18593: 189: // Clear all caches
21245: 18594: 190: await clearAllCaches();
21246: 18595: 191: ```
21247: 18596: 192: 
21248: 18597: 193: ## Error Handling
21249: 18598: 194: 
21250: 18599: 195: ### How are errors logged?
21251: 18600: 196: 
21252: 18601: 197: ```typescript
21253: 18602: 198: // Error logging with context
21254: 18603: 199: await logDetailedError(
21255: 18604: 200:   error,
21256: 18605: 201:   "operationContext",
21257: 18606: 202:   { metadata: "details" },
21258: 18607: 203:   "ERROR"
21259: 18608: 204: );
21260: 18609: 205: ```
21261: 18610: 206: 
21262: 18611: 207: ### What retry mechanisms are in place?
21263: 18612: 208: 
21264: 18613: 209: - Maximum 3 retries
21265: 18614: 210: - Exponential backoff
21266: 18615: 211: - Configurable delay
21267: 18616: 212: - Operation-specific handling
21268: 18617: 213: 
21269: 18618: 214: ### How do I debug sync failures?
21270: 18619: 215: 
21271: 18620: 216: 1. Check sync metadata collection
21272: 18621: 217: 2. Review error logs
21273: 18622: 218: 3. Use dry run mode
21274: 18623: 219: 4. Monitor rate limits
21275: 18624: 220: 
21276: 18625: 221: ## Deployment
21277: 18626: 222: 
21278: 18627: 223: ### How do I deploy updates?
21279: 18628: 224: 
21280: 18629: 225: ```bash
21281: 18630: 226: # Deploy all functions
21282: 18631: 227: npm run deploy
21283: 18632: 228: 
21284: 18633: 229: # Deploy specific function
21285: 18634: 230: firebase deploy --only functions:functionName
21286: 18635: 231: ```
21287: 18636: 232: 
21288: 18637: 233: ### How do I test before deployment?
21289: 18638: 234: 
21290: 18639: 235: ```bash
21291: 18640: 236: # Run tests
21292: 18641: 237: npm run test:images
21293: 18642: 238: 
21294: 18643: 239: # Validate sync
21295: 18644: 240: npm run validate-sync
21296: 18645: 241: 
21297: 18646: 242: # Local emulation
21298: 18647: 243: npm run serve
21299: 18648: 244: ```
21300: 18649: 245: 
21301: 18650: 246: ### What's the deployment rollback process?
21302: 18651: 247: 
21303: 18652: 248: 1. Use Firebase Console
21304: 18653: 249: 2. Select previous version
21305: 18654: 250: 3. Click "Rollback"
21306: 18655: 251: 4. Verify functionality
21307: 18656: 252: 
21308: 18657: 253: ## Monitoring
21309: 18658: 254: 
21310: 18659: 255: ### How do I monitor sync status?
21311: 18660: 256: 
21312: 18661: 257: 1. Check sync metadata collection
21313: 18662: 258: 2. Review logging dashboard
21314: 18663: 259: 3. Use health check endpoint
21315: 18664: 260: 4. Monitor performance metrics
21316: 18665: 261: 
21317: 18666: 262: ### What metrics are available?
21318: 18667: 263: 
21319: 18668: 264: - Sync completion rates
21320: 18669: 265: - Processing times
21321: 18670: 266: - Error rates
21322: 18671: 267: - Cache hit rates
21323: 18672: 268: - Storage usage
21324: 18673: 269: - API response times
21325: 18674: 270: 
21326: 18675: 271: ### How do I set up alerts?
21327: 18676: 272: 
21328: 18677: 273: Configure Firebase Alert conditions for:
21329: 18678: 274: 
21330: 18679: 275: - Function failures
21331: 18680: 276: - High error rates
21332: 18681: 277: - Quota approaching limits
21333: 18682: 278: - Sync failures
21334: 18683: 279: - Performance degradation
21335: 18684: </file>
21336: 18685: 
21337: 18686: <file path="index.md">
21338: 18687:  1: ---
21339: 18688:  2: layout: home
21340: 18689:  3: hero:
21341: 18690:  4:   name: FFTCG Sync Service
21342: 18691:  5:   text: Card and Price Synchronization Service
21343: 18692:  6:   tagline: Automated synchronization and management of FFTCG card data and prices
21344: 18693:  7:   actions:
21345: 18694:  8:     - theme: brand
21346: 18695:  9:       text: Get Started
21347: 18696: 10:       link: /introduction
21348: 18697: 11:     - theme: alt
21349: 18698: 12:       text: View API
21350: 18699: 13:       link: /api/
21351: 18700: 14: features:
21352: 18701: 15:   - title: Card Synchronization
21353: 18702: 16:     details: Automatically sync card information from external sources
21354: 18703: 17:   - title: Price Tracking
21355: 18704: 18:     details: Monitor and update card prices in real-time
21356: 18705: 19:   - title: Image Processing
21357: 18706: 20:     details: Automated image downloading, optimization, and storage
21358: 18707: 21:   - title: Caching System
21359: 18708: 22:     details: Efficient caching mechanism for improved performance
21360: 18709: 23: ---
21361: 18710: </file>
21362: 18711: 
21363: 18712: <file path="introduction.md">
21364: 18713:  1: # FFTCG Sync Service Documentation
21365: 18714:  2: 
21366: 18715:  3: ## Overview
21367: 18716:  4: 
21368: 18717:  5: FFTCG Sync Service is a specialized Firebase application designed to synchronize Final Fantasy Trading Card Game (FFTCG) card data, prices, and images. The service provides automated synchronization of card information, price tracking, and image optimization through Firebase Functions.
21369: 18718:  6: 
21370: 18719:  7: ## Core Features
21371: 18720:  8: 
21372: 18721:  9: ### Card Synchronization
21373: 18722: 10: 
21374: 18723: 11: - Automated card data synchronization from TCGPlayer
21375: 18724: 12: - Batch processing for efficient data handling
21376: 18725: 13: - Data validation and error handling
21377: 18726: 14: - Support for dry-run operations
21378: 18727: 15: 
21379: 18728: 16: ### Price Tracking
21380: 18729: 17: 
21381: 18730: 18: - Real-time price monitoring
21382: 18731: 19: - Support for both normal and foil card prices
21383: 18732: 20: - Price history tracking
21384: 18733: 21: - Configurable sync intervals
21385: 18734: 22: 
21386: 18735: 23: ### Image Processing
21387: 18736: 24: 
21388: 18737: 25: - Automatic image downloading and optimization
21389: 18738: 26: - Multiple resolution support (200w and 400w)
21390: 18739: 27: - Image compression with quality preservation
21391: 18740: 28: - Efficient caching system
21392: 18741: 29: - Firebase Storage integration
21393: 18742: 30: 
21394: 18743: 31: ### System Architecture
21395: 18744: 32: 
21396: 18745: 33: - Firebase Functions for serverless operation
21397: 18746: 34: - Firestore for data storage
21398: 18747: 35: - Firebase Storage for image management
21399: 18748: 36: - LRU caching for performance optimization
21400: 18749: 37: 
21401: 18750: 38: ## Technical Stack
21402: 18751: 39: 
21403: 18752: 40: - **Runtime**: Node.js 18
21404: 18753: 41: - **Framework**: Firebase Functions v6
21405: 18754: 42: - **Database**: Firestore
21406: 18755: 43: - **Storage**: Firebase Storage
21407: 18756: 44: - **Image Processing**: Sharp
21408: 18757: 45: - **HTTP Client**: Axios
21409: 18758: 46: - **Caching**: LRU Cache
21410: 18759: 47: - **Language**: TypeScript
21411: 18760: 48: 
21412: 18761: 49: ## Key Components
21413: 18762: 50: 
21414: 18763: 51: ### Services
21415: 18764: 52: 
21416: 18765: 53: - `cardSync`: Manages card data synchronization
21417: 18766: 54: - `priceSync`: Handles price updates and tracking
21418: 18767: 55: 
21419: 18768: 56: ### Utilities
21420: 18769: 57: 
21421: 18770: 58: - `ImageHandler`: Manages image processing and storage
21422: 18771: 59: - `ImageCompressor`: Handles image optimization
21423: 18772: 60: - `ImageCache`: Provides caching functionality
21424: 18773: 61: - `Logger`: Manages application logging
21425: 18774: 62: - `BatchProcessor`: Handles batch operations
21426: 18775: 63: 
21427: 18776: 64: ## Getting Started
21428: 18777: 65: 
21429: 18778: 66: To get started with the FFTCG Sync Service, see:
21430: 18779: 67: 
21431: 18780: 68: - [Installation Guide](./setup/installation)
21432: 18781: 69: - [Configuration Guide](./setup/configuration)
21433: 18782: 70: - [API Documentation](./api/)
21434: 18783: </file>
21435: 18784: 
21436: 18785: <file path="package.json">
21437: 18786:  1: {
21438: 18787:  2:   "name": "fftcg-sync-docs",
21439: 18788:  3:   "version": "1.0.0",
21440: 18789:  4:   "description": "Documentation for FFTCG Sync Service",
21441: 18790:  5:   "type": "module",
21442: 18791:  6:   "scripts": {
21443: 18792:  7:     "docs:dev": "vitepress dev",
21444: 18793:  8:     "docs:build": "vitepress build",
21445: 18794:  9:     "docs:preview": "vitepress preview"
21446: 18795: 10:   },
21447: 18796: 11:   "keywords": [],
21448: 18797: 12:   "author": "",
21449: 18798: 13:   "license": "ISC",
21450: 18799: 14:   "devDependencies": {
21451: 18800: 15:     "@vueuse/core": "^10.7.0",
21452: 18801: 16:     "firebase": "^10.7.0",
21453: 18802: 17:     "vitepress": "^1.0.0-rc.31",
21454: 18803: 18:     "vue": "^3.3.8"
21455: 18804: 19:   }
21456: 18805: 20: }
21457: 18806: </file>
21458: 18807: 
21459: 18808: <file path="performance.md">
21460: 18809:   1: # Performance Guide
21461: 18810:   2: 
21462: 18811:   3: ## Optimization Overview
21463: 18812:   4: 
21464: 18813:   5: This guide covers performance optimization strategies implemented in the FFTCG Sync Service, including caching, batch processing, memory management, and monitoring.
21465: 18814:   6: 
21466: 18815:   7: ## Resource Management
21467: 18816:   8: 
21468: 18817:   9: ### Memory Allocation
21469: 18818:  10: 
21470: 18819:  11: ```typescript
21471: 18820:  12: // Default runtime options
21472: 18821:  13: const runtimeOpts = {
21473: 18822:  14:   timeoutSeconds: 540,
21474: 18823:  15:   memory: "1GiB"
21475: 18824:  16: } as const;
21476: 18825:  17: ```
21477: 18826:  18: 
21478: 18827:  19: Memory optimization techniques:
21479: 18828:  20: 
21480: 18829:  21: - Batch processing to control memory usage
21481: 18830:  22: - Automatic garbage collection
21482: 18831:  23: - Resource cleanup after operations
21483: 18832:  24: - Stream processing for large datasets
21484: 18833:  25: 
21485: 18834:  26: ### Resource Cleanup
21486: 18835:  27: 
21487: 18836:  28: ```typescript
21488: 18837:  29: async function cleanupResources(): Promise<void> {
21489: 18838:  30:   // Clear image cache
21490: 18839:  31:   await imageCache.clear();
21491: 18840:  32:  
21492: 18841:  33:   // Force garbage collection if available
21493: 18842:  34:   global.gc && global.gc();
21494: 18843:  35:  
21495: 18844:  36:   // Clear other caches
21496: 18845:  37:   cardCache.clear();
21497: 18846:  38: }
21498: 18847:  39: ```
21499: 18848:  40: 
21500: 18849:  41: ## Caching Strategy
21501: 18850:  42: 
21502: 18851:  43: ### Multi-Level Caching
21503: 18852:  44: 
21504: 18853:  45: ```typescript
21505: 18854:  46: // L1 Cache (Memory)
21506: 18855:  47: private l1Cache = new Map<string, T>();
21507: 18856:  48: 
21508: 18857:  49: // L2 Cache (LRU)
21509: 18858:  50: private l2Cache: LRUCache<string, T> = new LRUCache<string, T>({
21510: 18859:  51:   max: options.maxSize,
21511: 18860:  52:   ttl: options.ttl
21512: 18861:  53: });
21513: 18862:  54: ```
21514: 18863:  55: 
21515: 18864:  56: Cache hierarchy:
21516: 18865:  57: 
21517: 18866:  58: 1. In-memory cache for frequent access
21518: 18867:  59: 2. LRU cache for larger datasets
21519: 18868:  60: 3. Persistent storage for backups
21520: 18869:  61: 
21521: 18870:  62: ### Cache Configuration
21522: 18871:  63: 
21523: 18872:  64: ```typescript
21524: 18873:  65: const cacheOptions = {
21525: 18874:  66:   // Card cache settings
21526: 18875:  67:   cardCache: {
21527: 18876:  68:     max: 500,
21528: 18877:  69:     ttl: 1000 * 60 * 60 // 1 hour
21529: 18878:  70:   },
21530: 18879:  71:  
21531: 18880:  72:   // Image cache settings
21532: 18881:  73:   imageCache: {
21533: 18882:  74:     metadata: {
21534: 18883:  75:       max: 1000,
21535: 18884:  76:       ttl: 1000 * 60 * 60 // 1 hour
21536: 18885:  77:     },
21537: 18886:  78:     buffer: {
21538: 18887:  79:       max: 100,
21539: 18888:  80:       ttl: 1000 * 60 * 5, // 5 minutes
21540: 18889:  81:       maxSize: 50 * 1024 * 1024 // 50MB
21541: 18890:  82:     }
21542: 18891:  83:   }
21543: 18892:  84: };
21544: 18893:  85: ```
21545: 18894:  86: 
21546: 18895:  87: ## Batch Processing
21547: 18896:  88: 
21548: 18897:  89: ### Adaptive Batch Processing
21549: 18898:  90: 
21550: 18899:  91: ```typescript
21551: 18900:  92: class AdaptiveBatchProcessor {
21552: 18901:  93:   private optimalBatchSize: number = 100;
21553: 18902:  94:   private processingTimes: number[] = [];
21554: 18903:  95: 
21555: 18904:  96:   async processBatch<T>(
21556: 18905:  97:     items: T[],
21557: 18906:  98:     processor: (batch: T[]) => Promise<void>
21558: 18907:  99:   ): Promise<void> {
21559: 18908: 100:     for (let i = 0; i < items.length; i += this.optimalBatchSize) {
21560: 18909: 101:       const start = Date.now();
21561: 18910: 102:       const batch = items.slice(i, i + this.optimalBatchSize);
21562: 18911: 103:      
21563: 18912: 104:       await processor(batch);
21564: 18913: 105:      
21565: 18914: 106:       this.adjustBatchSize(Date.now() - start);
21566: 18915: 107:     }
21567: 18916: 108:   }
21568: 18917: 109: 
21569: 18918: 110:   private adjustBatchSize(lastProcessingTime: number): void {
21570: 18919: 111:     // Dynamically adjust batch size based on processing time
21571: 18920: 112:     if (lastProcessingTime > 1000) {
21572: 18921: 113:       this.optimalBatchSize = Math.max(10, this.optimalBatchSize * 0.8);
21573: 18922: 114:     } else if (lastProcessingTime < 500) {
21574: 18923: 115:       this.optimalBatchSize = Math.min(1000, this.optimalBatchSize * 1.2);
21575: 18924: 116:     }
21576: 18925: 117:   }
21577: 18926: 118: }
21578: 18927: 119: ```
21579: 18928: 120: 
21580: 18929: 121: ### Batch Size Optimization
21581: 18930: 122: 
21582: 18931: 123: ```typescript
21583: 18932: 124: const batchOptions = {
21584: 18933: 125:   batchSize: 100,
21585: 18934: 126:   delayBetweenBatches: 1000,
21586: 18935: 127:   onBatchComplete: async (stats) => {
21587: 18936: 128:     console.log(`Processed: ${stats.processed}/${stats.total}`);
21588: 18937: 129:   }
21589: 18938: 130: };
21590: 18939: 131: ```
21591: 18940: 132: 
21592: 18941: 133: ## Image Processing Optimization
21593: 18942: 134: 
21594: 18943: 135: ### Compression Settings
21595: 18944: 136: 
21596: 18945: 137: ```typescript
21597: 18946: 138: const compressionOptions = {
21598: 18947: 139:   quality: {
21599: 18948: 140:     HIGH_RES: 90,
21600: 18949: 141:     LOW_RES: 85
21601: 18950: 142:   },
21602: 18951: 143:   dimensions: {
21603: 18952: 144:     HIGH_RES: 400,
21604: 18953: 145:     LOW_RES: 200
21605: 18954: 146:   }
21606: 18955: 147: };
21607: 18956: 148: ```
21608: 18957: 149: 
21609: 18958: 150: ### Progressive Loading
21610: 18959: 151: 
21611: 18960: 152: ```typescript
21612: 18961: 153: const imageProcessingOptions = {
21613: 18962: 154:   progressive: true,
21614: 18963: 155:   mozjpeg: true,
21615: 18964: 156:   optimizationLevel: 3
21616: 18965: 157: };
21617: 18966: 158: ```
21618: 18967: 159: 
21619: 18968: 160: ## Database Optimization
21620: 18969: 161: 
21621: 18970: 162: ### Batch Operations
21622: 18971: 163: 
21623: 18972: 164: ```typescript
21624: 18973: 165: async function batchWrite(updates: any[]): Promise<void> {
21625: 18974: 166:   const batch = db.batch();
21626: 18975: 167:   updates.forEach(update => {
21627: 18976: 168:     const ref = db.collection('cards').doc(update.id);
21628: 18977: 169:     batch.update(ref, update.data);
21629: 18978: 170:   });
21630: 18979: 171:   await batch.commit();
21631: 18980: 172: }
21632: 18981: 173: ```
21633: 18982: 174: 
21634: 18983: 175: ### Index Optimization
21635: 18984: 176: 
21636: 18985: 177: ```json
21637: 18986: 178: {
21638: 18987: 179:   "indexes": [
21639: 18988: 180:     {
21640: 18989: 181:       "collectionGroup": "cards",
21641: 18990: 182:       "queryScope": "COLLECTION",
21642: 18991: 183:       "fields": [
21643: 18992: 184:         { "fieldPath": "groupId", "order": "ASCENDING" },
21644: 18993: 185:         { "fieldPath": "lastUpdated", "order": "DESCENDING" }
21645: 18994: 186:       ]
21646: 18995: 187:     }
21647: 18996: 188:   ]
21648: 18997: 189: }
21649: 18998: 190: ```
21650: 18999: 191: 
21651: 19000: 192: ## Rate Limiting
21652: 19001: 193: 
21653: 19002: 194: ### Token Bucket Implementation
21654: 19003: 195: 
21655: 19004: 196: ```typescript
21656: 19005: 197: const rateLimiter = {
21657: 19006: 198:   tokens: 100,
21658: 19007: 199:   refillRate: 10,
21659: 19008: 200:   interval: 1000,
21660: 19009: 201: 
21661: 19010: 202:   async acquire(): Promise<boolean> {
21662: 19011: 203:     if (this.tokens > 0) {
21663: 19012: 204:       this.tokens--;
21664: 19013: 205:       return true;
21665: 19014: 206:     }
21666: 19015: 207:     return false;
21667: 19016: 208:   }
21668: 19017: 209: };
21669: 19018: 210: ```
21670: 19019: 211: 
21671: 19020: 212: ### Request Throttling
21672: 19021: 213: 
21673: 19022: 214: ```typescript
21674: 19023: 215: async function makeThrottledRequest<T>(
21675: 19024: 216:   endpoint: string,
21676: 19025: 217:   options: RequestOptions = {}
21677: 19026: 218: ): Promise<T> {
21678: 19027: 219:   if (!await rateLimiter.acquire()) {
21679: 19028: 220:     throw new Error("Rate limit exceeded");
21680: 19029: 221:   }
21681: 19030: 222:   return makeRequest<T>(endpoint, options);
21682: 19031: 223: }
21683: 19032: 224: ```
21684: 19033: 225: 
21685: 19034: 226: ## Performance Monitoring
21686: 19035: 227: 
21687: 19036: 228: ### Progress Tracking
21688: 19037: 229: 
21689: 19038: 230: ```typescript
21690: 19039: 231: export class EnhancedProgressTracker {
21691: 19040: 232:   private calculateStats(): ProgressStats {
21692: 19041: 233:     const now = Date.now();
21693: 19042: 234:     const elapsed = (now - this.startTime) / 1000;
21694: 19043: 235:     const percent = (this.current / this.total) * 100;
21695: 19044: 236:     const rate = this.current / elapsed;
21696: 19045: 237:    
21697: 19046: 238:     return {
21698: 19047: 239:       current: this.current,
21699: 19048: 240:       total: this.total,
21700: 19049: 241:       percent,
21701: 19050: 242:       elapsed,
21702: 19051: 243:       rate,
21703: 19052: 244:       remaining: this.total - this.current,
21704: 19053: 245:       eta: (this.total - this.current) / rate
21705: 19054: 246:     };
21706: 19055: 247:   }
21707: 19056: 248: }
21708: 19057: 249: ```
21709: 19058: 250: 
21710: 19059: 251: ### Performance Metrics
21711: 19060: 252: 
21712: 19061: 253: ```typescript
21713: 19062: 254: interface PerformanceMetrics {
21714: 19063: 255:   timestamp: Date;
21715: 19064: 256:   operation: string;
21716: 19065: 257:   duration: number;
21717: 19066: 258:   memory: {
21718: 19067: 259:     heapUsed: number;
21719: 19068: 260:     heapTotal: number;
21720: 19069: 261:   };
21721: 19070: 262:   success: boolean;
21722: 19071: 263: }
21723: 19072: 264: 
21724: 19073: 265: async function trackPerformance(
21725: 19074: 266:   operation: string,
21726: 19075: 267:   task: () => Promise<void>
21727: 19076: 268: ): Promise<void> {
21728: 19077: 269:   const start = Date.now();
21729: 19078: 270:   const startMemory = process.memoryUsage();
21730: 19079: 271:  
21731: 19080: 272:   try {
21732: 19081: 273:     await task();
21733: 19082: 274:     const endMemory = process.memoryUsage();
21734: 19083: 275:    
21735: 19084: 276:     await logInfo("Performance metrics", {
21736: 19085: 277:       operation,
21737: 19086: 278:       duration: Date.now() - start,
21738: 19087: 279:       memoryDelta: {
21739: 19088: 280:         heapUsed: endMemory.heapUsed - startMemory.heapUsed,
21740: 19089: 281:         heapTotal: endMemory.heapTotal - startMemory.heapTotal
21741: 19090: 282:       }
21742: 19091: 283:     });
21743: 19092: 284:   } catch (error) {
21744: 19093: 285:     await logError(error, "performanceTracking");
21745: 19094: 286:     throw error;
21746: 19095: 287:   }
21747: 19096: 288: }
21748: 19097: 289: ```
21749: 19098: 290: 
21750: 19099: 291: ## Best Practices
21751: 19100: 292: 
21752: 19101: 293: ### Memory Management
21753: 19102: 294: 
21754: 19103: 295: 1. Use streams for large file operations
21755: 19104: 296: 2. Implement cleanup routines
21756: 19105: 297: 3. Monitor memory usage
21757: 19106: 298: 4. Set appropriate cache limits
21758: 19107: 299: 5. Use batch processing
21759: 19108: 300: 
21760: 19109: 301: ### Network Optimization
21761: 19110: 302: 
21762: 19111: 303: 1. Implement request caching
21763: 19112: 304: 2. Use compression
21764: 19113: 305: 3. Batch API requests
21765: 19114: 306: 4. Handle rate limits
21766: 19115: 307: 5. Implement retry strategies
21767: 19116: 308: 
21768: 19117: 309: ### Database Efficiency
21769: 19118: 310: 
21770: 19119: 311: 1. Use batch operations
21771: 19120: 312: 2. Optimize indexes
21772: 19121: 313: 3. Implement caching
21773: 19122: 314: 4. Monitor query performance
21774: 19123: 315: 5. Use appropriate batch sizes
21775: 19124: 316: 
21776: 19125: 317: ### Image Processing
21777: 19126: 318: 
21778: 19127: 319: 1. Use progressive loading
21779: 19128: 320: 2. Implement size limits
21780: 19129: 321: 3. Optimize compression
21781: 19130: 322: 4. Cache processed images
21782: 19131: 323: 5. Use appropriate quality settings
21783: 19132: 324: 
21784: 19133: 325: ## Monitoring and Alerts
21785: 19134: 326: 
21786: 19135: 327: ### Key Metrics
21787: 19136: 328: 
21788: 19137: 329: ```typescript
21789: 19138: 330: interface SystemMetrics {
21790: 19139: 331:   syncDuration: number;
21791: 19140: 332:   memoryUsage: number;
21792: 19141: 333:   processedItems: number;
21793: 19142: 334:   errorRate: number;
21794: 19143: 335:   cacheHitRate: number;
21795: 19144: 336: }
21796: 19145: 337: 
21797: 19146: 338: async function monitorSystem(): Promise<SystemMetrics> {
21798: 19147: 339:   return {
21799: 19148: 340:     syncDuration: calculateSyncDuration(),
21800: 19149: 341:     memoryUsage: process.memoryUsage().heapUsed,
21801: 19150: 342:     processedItems: getProcessedCount(),
21802: 19151: 343:     errorRate: calculateErrorRate(),
21803: 19152: 344:     cacheHitRate: calculateCacheHitRate()
21804: 19153: 345:   };
21805: 19154: 346: }
21806: 19155: 347: ```
21807: 19156: 348: 
21808: 19157: 349: ### Alert Thresholds
21809: 19158: 350: 
21810: 19159: 351: ```typescript
21811: 19160: 352: const alertThresholds = {
21812: 19161: 353:   syncDuration: 1000 * 60 * 30, // 30 minutes
21813: 19162: 354:   memoryUsage: 900 * 1024 * 1024, // 900MB
21814: 19163: 355:   errorRate: 0.05, // 5%
21815: 19164: 356:   cacheHitRate: 0.7 // 70%
21816: 19165: 357: };
21817: 19166: 358: ```
21818: 19167: </file>
21819: 19168: 
21820: 19169: <file path="security.md">
21821: 19170:   1: # Security Guidelines
21822: 19171:   2: 
21823: 19172:   3: ## Overview
21824: 19173:   4: 
21825: 19174:   5: This guide outlines security best practices and implementations for the FFTCG Sync Service, covering authentication, data validation, rate limiting, and other security considerations.
21826: 19175:   6: 
21827: 19176:   7: ## Authentication
21828: 19177:   8: 
21829: 19178:   9: ### Firebase Authentication
21830: 19179:  10: 
21831: 19180:  11: ```typescript
21832: 19181:  12: // Verify Firebase authentication token
21833: 19182:  13: async function verifyAuth(req: Request): Promise<void> {
21834: 19183:  14:   const token = req.headers.authorization?.split("Bearer ")[1];
21835: 19184:  15:   if (!token) {
21836: 19185:  16:     throw new Error("No authentication token provided");
21837: 19186:  17:   }
21838: 19187:  18: 
21839: 19188:  19:   try {
21840: 19189:  20:     await admin.auth().verifyIdToken(token);
21841: 19190:  21:   } catch (error) {
21842: 19191:  22:     throw new Error("Invalid authentication token");
21843: 19192:  23:   }
21844: 19193:  24: }
21845: 19194:  25: ```
21846: 19195:  26: 
21847: 19196:  27: ### Service Account Security
21848: 19197:  28: 
21849: 19198:  29: ```typescript
21850: 19199:  30: // Service account initialization
21851: 19200:  31: async function initializeFirebase(): Promise<FirebaseFirestore.Firestore> {
21852: 19201:  32:   try {
21853: 19202:  33:     const serviceAccountPath = path.resolve(__dirname, "../../../service_account_key.json");
21854: 19203:  34:     const serviceAccount = JSON.parse(await fs.readFile(serviceAccountPath, "utf8"));
21855: 19204:  35: 
21856: 19205:  36:     if (!admin.apps.length) {
21857: 19206:  37:       admin.initializeApp({
21858: 19207:  38:         credential: admin.credential.cert(serviceAccount)
21859: 19208:  39:       });
21860: 19209:  40:     }
21861: 19210:  41: 
21862: 19211:  42:     return admin.firestore();
21863: 19212:  43:   } catch (error) {
21864: 19213:  44:     throw new Error("Failed to initialize Firebase: " + error);
21865: 19214:  45:   }
21866: 19215:  46: }
21867: 19216:  47: ```
21868: 19217:  48: 
21869: 19218:  49: ## Input Validation
21870: 19219:  50: 
21871: 19220:  51: ### Request Validation
21872: 19221:  52: 
21873: 19222:  53: ```typescript
21874: 19223:  54: // Validate sync options
21875: 19224:  55: function validateSyncOptions(options: unknown): asserts options is SyncOptions {
21876: 19225:  56:   if (!options || typeof options !== "object") {
21877: 19226:  57:     throw new Error("Invalid options object");
21878: 19227:  58:   }
21879: 19228:  59: 
21880: 19229:  60:   const opts = options as Record<string, unknown>;
21881: 19230:  61:  
21882: 19231:  62:   if (opts.limit && typeof opts.limit !== "number") {
21883: 19232:  63:     throw new Error("Limit must be a number");
21884: 19233:  64:   }
21885: 19234:  65: 
21886: 19235:  66:   if (opts.groupId && typeof opts.groupId !== "string") {
21887: 19236:  67:     throw new Error("GroupId must be a string");
21888: 19237:  68:   }
21889: 19238:  69: }
21890: 19239:  70: ```
21891: 19240:  71: 
21892: 19241:  72: ### Image Validation
21893: 19242:  73: 
21894: 19243:  74: ```typescript
21895: 19244:  75: class ImageValidator {
21896: 19245:  76:   private static readonly MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
21897: 19246:  77: 
21898: 19247:  78:   static async validateImage(buffer: Buffer): Promise<ImageValidationError | null> {
21899: 19248:  79:     // Check file size
21900: 19249:  80:     if (buffer.length > this.MAX_FILE_SIZE) {
21901: 19250:  81:       return {
21902: 19251:  82:         code: "FILE_TOO_LARGE",
21903: 19252:  83:         message: `Image exceeds maximum size of ${this.MAX_FILE_SIZE / 1024 / 1024}MB`
21904: 19253:  84:       };
21905: 19254:  85:     }
21906: 19255:  86: 
21907: 19256:  87:     // Verify file signature
21908: 19257:  88:     if (!this.isJpeg(buffer)) {
21909: 19258:  89:       return {
21910: 19259:  90:         code: "INVALID_FORMAT",
21911: 19260:  91:         message: "Image must be in JPEG format"
21912: 19261:  92:       };
21913: 19262:  93:     }
21914: 19263:  94: 
21915: 19264:  95:     return null;
21916: 19265:  96:   }
21917: 19266:  97: }
21918: 19267:  98: ```
21919: 19268:  99: 
21920: 19269: 100: ## Rate Limiting
21921: 19270: 101: 
21922: 19271: 102: ### API Rate Limiting
21923: 19272: 103: 
21924: 19273: 104: ```typescript
21925: 19274: 105: const rateLimiter = {
21926: 19275: 106:   tokens: 100,
21927: 19276: 107:   refillRate: 10,
21928: 19277: 108:   interval: 1000,
21929: 19278: 109: 
21930: 19279: 110:   async acquire(): Promise<boolean> {
21931: 19280: 111:     if (this.tokens > 0) {
21932: 19281: 112:       this.tokens--;
21933: 19282: 113:       return true;
21934: 19283: 114:     }
21935: 19284: 115:     return false;
21936: 19285: 116:   }
21937: 19286: 117: };
21938: 19287: 118: ```
21939: 19288: 119: 
21940: 19289: 120: ### Function Concurrency Control
21941: 19290: 121: 
21942: 19291: 122: ```typescript
21943: 19292: 123: // Configure function instance limits
21944: 19293: 124: exports.syncCards = onRequest({
21945: 19294: 125:   timeoutSeconds: runtimeOpts.timeoutSeconds,
21946: 19295: 126:   memory: runtimeOpts.memory,
21947: 19296: 127:   maxInstances: 1
21948: 19297: 128: }, async (req: Request, res: Response) => {
21949: 19298: 129:   // Function implementation
21950: 19299: 130: });
21951: 19300: 131: ```
21952: 19301: 132: 
21953: 19302: 133: ## Data Protection
21954: 19303: 134: 
21955: 19304: 135: ### Data Encryption
21956: 19305: 136: 
21957: 19306: 137: ```typescript
21958: 19307: 138: // Hash sensitive data
21959: 19308: 139: function getDataHash(data: any): string {
21960: 19309: 140:   return crypto.createHash("md5")
21961: 19310: 141:     .update(JSON.stringify(data, Object.keys(data).sort()))
21962: 19311: 142:     .digest("hex");
21963: 19312: 143: }
21964: 19313: 144: ```
21965: 19314: 145: 
21966: 19315: 146: ### Secure Storage Access
21967: 19316: 147: 
21968: 19317: 148: ```typescript
21969: 19318: 149: // Secure URL generation
21970: 19319: 150: async function getSecureImageUrl(path: string): Promise<string> {
21971: 19320: 151:   const [url] = await storage
21972: 19321: 152:     .bucket(STORAGE.BUCKETS.CARD_IMAGES)
21973: 19322: 153:     .file(path)
21974: 19323: 154:     .getSignedUrl({
21975: 19324: 155:       action: "read",
21976: 19325: 156:       expires: "03-01-2500"
21977: 19326: 157:     });
21978: 19327: 158:   return url;
21979: 19328: 159: }
21980: 19329: 160: ```
21981: 19330: 161: 
21982: 19331: 162: ## Error Handling
21983: 19332: 163: 
21984: 19333: 164: ### Secure Error Logging
21985: 19334: 165: 
21986: 19335: 166: ```typescript
21987: 19336: 167: export async function logDetailedError(
21988: 19337: 168:   error: Error,
21989: 19338: 169:   context: string,
21990: 19339: 170:   metadata?: Record<string, unknown>,
21991: 19340: 171:   severity: "ERROR" | "WARNING" | "CRITICAL" = "ERROR"
21992: 19341: 172: ): Promise<void> {
21993: 19342: 173:   const report: ErrorReport = {
21994: 19343: 174:     timestamp: new Date(),
21995: 19344: 175:     context,
21996: 19345: 176:     error: error.message,
21997: 19346: 177:     stackTrace: error.stack,
21998: 19347: 178:     metadata,
21999: 19348: 179:     severity
22000: 19349: 180:   };
22001: 19350: 181: 
22002: 19351: 182:   // Sanitize sensitive information before logging
22003: 19352: 183:   const sanitizedReport = sanitizeErrorReport(report);
22004: 19353: 184:   await db.collection(COLLECTION.LOGS).add(sanitizedReport);
22005: 19354: 185: }
22006: 19355: 186: ```
22007: 19356: 187: 
22008: 19357: 188: ### Error Response Sanitization
22009: 19358: 189: 
22010: 19359: 190: ```typescript
22011: 19360: 191: function sanitizeErrorMessage(error: Error): string {
22012: 19361: 192:   // Remove sensitive information from error messages
22013: 19362: 193:   return error.message.replace(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)/gi, '[EMAIL]')
22014: 19363: 194:     .replace(/\b\d{4}\b/g, '[ID]');
22015: 19364: 195: }
22016: 19365: 196: ```
22017: 19366: 197: 
22018: 19367: 198: ## Network Security
22019: 19368: 199: 
22020: 19369: 200: ### Request Configuration
22021: 19370: 201: 
22022: 19371: 202: ```typescript
22023: 19372: 203: const secureRequestConfig = {
22024: 19373: 204:   timeout: 30000,
22025: 19374: 205:   headers: {
22026: 19375: 206:     "Accept": "application/json",
22027: 19376: 207:     "User-Agent": "FFTCG-Sync-Service/1.0"
22028: 19377: 208:   },
22029: 19378: 209:   validateStatus: (status: number) => status < 400
22030: 19379: 210: };
22031: 19380: 211: ```
22032: 19381: 212: 
22033: 19382: 213: ### HTTPS Enforcement
22034: 19383: 214: 
22035: 19384: 215: ```typescript
22036: 19385: 216: // Ensure HTTPS usage
22037: 19386: 217: const BASE_URL = "https://tcgcsv.com";
22038: 19387: 218: const SECURE_STORAGE_URL = "https://storage.googleapis.com";
22039: 19388: 219: ```
22040: 19389: 220: 
22041: 19390: 221: ## Firestore Security Rules
22042: 19391: 222: 
22043: 19392: 223: ```typescript
22044: 19393: 224: // firestore.rules
22045: 19394: 225: rules_version = '2';
22046: 19395: 226: service cloud.firestore {
22047: 19396: 227:   match /databases/{database}/documents {
22048: 19397: 228:     // Card collection rules
22049: 19398: 229:     match /cards/{cardId} {
22050: 19399: 230:       allow read: if true;
22051: 19400: 231:       allow write: if request.auth != null 
22052: 19401: 232:         && request.auth.token.admin == true;
22053: 19402: 233:     }
22054: 19403: 234: 
22055: 19404: 235:     // Price collection rules
22056: 19405: 236:     match /prices/{priceId} {
22057: 19406: 237:       allow read: if true;
22058: 19407: 238:       allow write: if request.auth != null 
22059: 19408: 239:         && request.auth.token.admin == true;
22060: 19409: 240:     }
22061: 19410: 241: 
22062: 19411: 242:     // Sync metadata rules
22063: 19412: 243:     match /syncMetadata/{docId} {
22064: 19413: 244:       allow read: if request.auth != null;
22065: 19414: 245:       allow write: if request.auth != null 
22066: 19415: 246:         && request.auth.token.admin == true;
22067: 19416: 247:     }
22068: 19417: 248:   }
22069: 19418: 249: }
22070: 19419: 250: ```
22071: 19420: 251: 
22072: 19421: 252: ## Storage Security Rules
22073: 19422: 253: 
22074: 19423: 254: ```typescript
22075: 19424: 255: // storage.rules
22076: 19425: 256: rules_version = '2';
22077: 19426: 257: service firebase.storage {
22078: 19427: 258:   match /b/{bucket}/o {
22079: 19428: 259:     match /card-images/{groupId}/{imageId} {
22080: 19429: 260:       allow read: if true;
22081: 19430: 261:       allow write: if request.auth != null 
22082: 19431: 262:         && request.auth.token.admin == true
22083: 19432: 263:         && request.resource.size < 5 * 1024 * 1024
22084: 19433: 264:         && request.resource.contentType.matches('image/jpeg');
22085: 19434: 265:     }
22086: 19435: 266:   }
22087: 19436: 267: }
22088: 19437: 268: ```
22089: 19438: 269: 
22090: 19439: 270: ## Best Practices
22091: 19440: 271: 
22092: 19441: 272: ### API Security
22093: 19442: 273: 
22094: 19443: 274: 1. Use HTTPS for all requests
22095: 19444: 275: 2. Implement proper authentication
22096: 19445: 276: 3. Validate all inputs
22097: 19446: 277: 4. Rate limit requests
22098: 19447: 278: 5. Monitor for suspicious activity
22099: 19448: 279: 
22100: 19449: 280: ### Data Security
22101: 19450: 281: 
22102: 19451: 282: 1. Minimize sensitive data storage
22103: 19452: 283: 2. Encrypt sensitive information
22104: 19453: 284: 3. Implement proper access controls
22105: 19454: 285: 4. Regular security audits
22106: 19455: 286: 5. Secure backup procedures
22107: 19456: 287: 
22108: 19457: 288: ### Error Management
22109: 19458: 289: 
22110: 19459: 290: 1. Sanitize error messages
22111: 19460: 291: 2. Avoid exposing internal details
22112: 19461: 292: 3. Log security events
22113: 19462: 293: 4. Monitor error patterns
22114: 19463: 294: 5. Implement proper error recovery
22115: 19464: 295: 
22116: 19465: 296: ### Function Security
22117: 19466: 297: 
22118: 19467: 298: 1. Use minimal permissions
22119: 19468: 299: 2. Implement request validation
22120: 19469: 300: 3. Control function concurrency
22121: 19470: 301: 4. Monitor function execution
22122: 19471: 302: 5. Regular security updates
22123: 19472: 303: 
22124: 19473: 304: ## Security Monitoring
22125: 19474: 305: 
22126: 19475: 306: ### Logging Security Events
22127: 19476: 307: 
22128: 19477: 308: ```typescript
22129: 19478: 309: interface SecurityEvent {
22130: 19479: 310:   timestamp: Date;
22131: 19480: 311:   eventType: "AUTH" | "ACCESS" | "ERROR" | "MODIFICATION";
22132: 19481: 312:   severity: "LOW" | "MEDIUM" | "HIGH" | "CRITICAL";
22133: 19482: 313:   details: Record<string, unknown>;
22134: 19483: 314: }
22135: 19484: 315: 
22136: 19485: 316: async function logSecurityEvent(event: SecurityEvent): Promise<void> {
22137: 19486: 317:   await db.collection("securityLogs").add({
22138: 19487: 318:     ...event,
22139: 19488: 319:     timestamp: new Date()
22140: 19489: 320:   });
22141: 19490: 321: }
22142: 19491: 322: ```
22143: 19492: 323: 
22144: 19493: 324: ### Audit Trail
22145: 19494: 325: 
22146: 19495: 326: ```typescript
22147: 19496: 327: interface AuditLog {
22148: 19497: 328:   timestamp: Date;
22149: 19498: 329:   userId: string;
22150: 19499: 330:   action: string;
22151: 19500: 331:   resource: string;
22152: 19501: 332:   changes: Record<string, unknown>;
22153: 19502: 333: }
22154: 19503: 334: 
22155: 19504: 335: async function createAuditLog(
22156: 19505: 336:   action: string,
22157: 19506: 337:   resource: string,
22158: 19507: 338:   changes: Record<string, unknown>
22159: 19508: 339: ): Promise<void> {
22160: 19509: 340:   await db.collection("auditLogs").add({
22161: 19510: 341:     timestamp: new Date(),
22162: 19511: 342:     action,
22163: 19512: 343:     resource,
22164: 19513: 344:     changes
22165: 19514: 345:   });
22166: 19515: 346: }
22167: 19516: 347: ```
22168: 19517: 348: 
22169: 19518: 349: ### Security Metrics
22170: 19519: 350: 
22171: 19520: 351: ```typescript
22172: 19521: 352: interface SecurityMetrics {
22173: 19522: 353:   failedAuthAttempts: number;
22174: 19523: 354:   rateLimitExceeded: number;
22175: 19524: 355:   suspiciousRequests: number;
22176: 19525: 356:   securityEvents: number;
22177: 19526: 357: }
22178: 19527: 358: 
22179: 19528: 359: async function trackSecurityMetrics(): Promise<SecurityMetrics> {
22180: 19529: 360:   // Implementation of security metrics tracking
22181: 19530: 361:   return {
22182: 19531: 362:     failedAuthAttempts: 0,
22183: 19532: 363:     rateLimitExceeded: 0,
22184: 19533: 364:     suspiciousRequests: 0,
22185: 19534: 365:     securityEvents: 0
22186: 19535: 366:   };
22187: 19536: 367: }
22188: 19537: 368: ```
22189: 19538: </file>
22190: 19539: 
22191: 19540: <file path="services/card-sync.md">
22192: 19541:   1: # Card Synchronization Service
22193: 19542:   2: 
22194: 19543:   3: ## Overview
22195: 19544:   4: 
22196: 19545:   5: The Card Synchronization service (`cardSync.ts`) manages the automated synchronization of FFTCG card data from TCGPlayer's API. It handles card information updates, image processing, and maintains data consistency through hash-based versioning.
22197: 19546:   6: 
22198: 19547:   7: ## Core Features
22199: 19548:   8: 
22200: 19549:   9: - Automated card data synchronization
22201: 19550:  10: - Image processing and storage
22202: 19551:  11: - Batch processing
22203: 19552:  12: - Error handling and retry logic
22204: 19553:  13: - Dry run capability for testing
22205: 19554:  14: - Progress tracking and logging
22206: 19555:  15: 
22207: 19556:  16: ## API Reference
22208: 19557:  17: 
22209: 19558:  18: ### Main Function
22210: 19559:  19: 
22211: 19560:  20: ```typescript
22212: 19561:  21: async function syncCards(options: SyncOptions = {}): Promise<SyncMetadata>
22213: 19562:  22: ```
22214: 19563:  23: 
22215: 19564:  24: #### Options
22216: 19565:  25: 
22217: 19566:  26: ```typescript
22218: 19567:  27: interface SyncOptions {
22219: 19568:  28:   dryRun?: boolean;      // Run without making changes
22220: 19569:  29:   limit?: number;        // Limit number of cards processed
22221: 19570:  30:   groupId?: string;      // Process specific group only
22222: 19571:  31:   skipImages?: boolean;  // Skip image processing
22223: 19572:  32: }
22224: 19573:  33: ```
22225: 19574:  34: 
22226: 19575:  35: #### Response
22227: 19576:  36: 
22228: 19577:  37: ```typescript
22229: 19578:  38: interface SyncMetadata {
22230: 19579:  39:   lastSync: Date;
22231: 19580:  40:   status: "in_progress" | "success" | "failed" | "completed_with_errors";
22232: 19581:  41:   cardCount: number;
22233: 19582:  42:   type: "manual" | "scheduled";
22234: 19583:  43:   groupsProcessed: number;
22235: 19584:  44:   groupsUpdated: number;
22236: 19585:  45:   errors: string[];
22237: 19586:  46:   duration?: number;
22238: 19587:  47:   imagesProcessed?: number;
22239: 19588:  48:   imagesUpdated?: number;
22240: 19589:  49: }
22241: 19590:  50: ```
22242: 19591:  51: 
22243: 19592:  52: ## Usage Examples
22244: 19593:  53: 
22245: 19594:  54: ### Scheduled Sync
22246: 19595:  55: 
22247: 19596:  56: The service runs automatically on a daily schedule:
22248: 19597:  57: 
22249: 19598:  58: ```typescript
22250: 19599:  59: exports.scheduledCardSync = onSchedule({
22251: 19600:  60:   schedule: "0 21 * * *", // Daily at 21:00 UTC
22252: 19601:  61:   timeZone: "UTC",
22253: 19602:  62:   memory: runtimeOpts.memory,
22254: 19603:  63:   timeoutSeconds: runtimeOpts.timeoutSeconds,
22255: 19604:  64:   retryCount: 3,
22256: 19605:  65: });
22257: 19606:  66: ```
22258: 19607:  67: 
22259: 19608:  68: ### Manual Sync
22260: 19609:  69: 
22261: 19610:  70: Test specific groups or cards:
22262: 19611:  71: 
22263: 19612:  72: ```typescript
22264: 19613:  73: // Test sync with limits
22265: 19614:  74: await syncCards({
22266: 19615:  75:   dryRun: true,
22267: 19616:  76:   limit: 5,
22268: 19617:  77:   groupId: "23783"
22269: 19618:  78: });
22270: 19619:  79: 
22271: 19620:  80: // Full manual sync
22272: 19621:  81: await syncCards({
22273: 19622:  82:   dryRun: false
22274: 19623:  83: });
22275: 19624:  84: ```
22276: 19625:  85: 
22277: 19626:  86: ## Error Handling
22278: 19627:  87: 
22279: 19628:  88: The service implements comprehensive error handling:
22280: 19629:  89: 
22281: 19630:  90: ```typescript
22282: 19631:  91: class SyncError extends Error implements GenericError {
22283: 19632:  92:   constructor(
22284: 19633:  93:     message: string,
22285: 19634:  94:     code?: string,
22286: 19635:  95:     public details?: Record<string, unknown>
22287: 19636:  96:   ) {
22288: 19637:  97:     super(message);
22289: 19638:  98:     this.name = "SyncError";
22290: 19639:  99:     this.code = code;
22291: 19640: 100:   }
22292: 19641: 101: }
22293: 19642: 102: ```
22294: 19643: 103: 
22295: 19644: 104: ### Retry Logic
22296: 19645: 105: 
22297: 19646: 106: ```typescript
22298: 19647: 107: const MAX_RETRIES = 3;
22299: 19648: 108: const BASE_DELAY = 1000; // 1 second
22300: 19649: 109: 
22301: 19650: 110: // Exponential backoff
22302: 19651: 111: const delay = Math.pow(2, retryCount) * BASE_DELAY;
22303: 19652: 112: ```
22304: 19653: 113: 
22305: 19654: 114: ## Data Processing
22306: 19655: 115: 
22307: 19656: 116: ### Batch Processing
22308: 19657: 117: 
22309: 19658: 118: ```typescript
22310: 19659: 119: async function processBatch<T>(
22311: 19660: 120:   items: T[],
22312: 19661: 121:   processor: (batch: T[]) => Promise<void>,
22313: 19662: 122:   options: BatchOptions = {}
22314: 19663: 123: ): Promise<void>
22315: 19664: 124: ```
22316: 19665: 125: 
22317: 19666: 126: ### Hash Generation
22318: 19667: 127: 
22319: 19668: 128: ```typescript
22320: 19669: 129: function getDataHash(data: any): string {
22321: 19670: 130:   return crypto.createHash("md5")
22322: 19671: 131:     .update(JSON.stringify(data, Object.keys(data).sort()))
22323: 19672: 132:     .digest("hex");
22324: 19673: 133: }
22325: 19674: 134: ```
22326: 19675: 135: 
22327: 19676: 136: ## Monitoring
22328: 19677: 137: 
22329: 19678: 138: ### Progress Tracking
22330: 19679: 139: 
22331: 19680: 140: The service logs detailed progress information:
22332: 19681: 141: 
22333: 19682: 142: - Groups processed
22334: 19683: 143: - Cards updated
22335: 19684: 144: - Images processed
22336: 19685: 145: - Processing duration
22337: 19686: 146: - Error counts
22338: 19687: 147: 
22339: 19688: 148: ### Success Metrics
22340: 19689: 149: 
22341: 19690: 150: - Number of groups updated
22342: 19691: 151: - Number of cards processed
22343: 19692: 152: - Number of images updated
22344: 19693: 153: - Processing duration
22345: 19694: 154: - Error rate
22346: 19695: 155: 
22347: 19696: 156: ## Best Practices
22348: 19697: 157: 
22349: 19698: 158: 1. Testing Changes:
22350: 19699: 159: 
22351: 19700: 160: ```typescript
22352: 19701: 161: // Always test with dry run first
22353: 19702: 162: await syncCards({
22354: 19703: 163:   dryRun: true,
22355: 19704: 164:   limit: 5
22356: 19705: 165: });
22357: 19706: 166: ```
22358: 19707: 167: 
22359: 19708: 168: 1. Error Monitoring:
22360: 19709: 169: 
22361: 19710: 170: ```typescript
22362: 19711: 171: // Check sync metadata for errors
22363: 19712: 172: const metadata = await syncCards();
22364: 19713: 173: if (metadata.errors.length > 0) {
22365: 19714: 174:   console.error("Sync completed with errors:", metadata.errors);
22366: 19715: 175: }
22367: 19716: 176: ```
22368: 19717: 177: 
22369: 19718: 178: 1. Resource Management:
22370: 19719: 179: 
22371: 19720: 180: ```typescript
22372: 19721: 181: // Use limits when testing
22373: 19722: 182: const options: SyncOptions = {
22374: 19723: 183:   limit: 10,
22375: 19724: 184:   dryRun: true
22376: 19725: 185: };
22377: 19726: 186: ```
22378: 19727: 187: 
22379: 19728: 188: ## Troubleshooting
22380: 19729: 189: 
22381: 19730: 190: ### Common Issues
22382: 19731: 191: 
22383: 19732: 192: 1. Rate Limiting:
22384: 19733: 193:    - Implement proper delays between requests
22385: 19734: 194:    - Use batch processing
22386: 19735: 195:    - Follow exponential backoff
22387: 19736: 196: 
22388: 19737: 197: 2. Image Processing:
22389: 19738: 198:    - Verify storage permissions
22390: 19739: 199:    - Check image URLs
22391: 19740: 200:    - Monitor storage quotas
22392: 19741: 201: 
22393: 19742: 202: 3. Data Consistency:
22394: 19743: 203:    - Use hash verification
22395: 19744: 204:    - Implement proper error handling
22396: 19745: 205:    - Monitor sync metadata
22397: 19746: 206: 
22398: 19747: 207: ### Debug Mode
22399: 19748: 208: 
22400: 19749: 209: Enable detailed logging:
22401: 19750: 210: 
22402: 19751: 211: ```typescript
22403: 19752: 212: // Enable debug logging
22404: 19753: 213: await syncCards({
22405: 19754: 214:   dryRun: true,
22406: 19755: 215:   debug: true
22407: 19756: 216: });
22408: 19757: 217: ```
22409: 19758: 218: 
22410: 19759: 219: ## Related Components
22411: 19760: 220: 
22412: 19761: 221: - [Price Sync Service](./price-sync)
22413: 19762: 222: - [Image Handler](../utils/image-handler)
22414: 19763: 223: - [Cache System](../utils/cache)
22415: 19764: 224: - [Error Handling](../utils/error-handling)
22416: 19765: </file>
22417: 19766: 
22418: 19767: <file path="services/price-sync.md">
22419: 19768:   1: # Price Synchronization Service
22420: 19769:   2: 
22421: 19770:   3: ## Overview
22422: 19771:   4: 
22423: 19772:   5: The Price Synchronization service (`priceSync.ts`) manages automated price updates for FFTCG cards. It handles both normal and foil price variants, implements version control through hashing, and provides detailed logging of price changes.
22424: 19773:   6: 
22425: 19774:   7: ## Core Features
22426: 19775:   8: 
22427: 19776:   9: - Real-time price synchronization
22428: 19777:  10: - Support for multiple price variants (Normal/Foil)
22429: 19778:  11: - Hash-based version control
22430: 19779:  12: - Batch processing
22431: 19780:  13: - Detailed price change logging
22432: 19781:  14: - Configurable sync intervals
22433: 19782:  15: 
22434: 19783:  16: ## API Reference
22435: 19784:  17: 
22436: 19785:  18: ### Main Function
22437: 19786:  19: 
22438: 19787:  20: ```typescript
22439: 19788:  21: async function syncPrices(options: SyncOptions = {}): Promise<SyncMetadata>
22440: 19789:  22: ```
22441: 19790:  23: 
22442: 19791:  24: #### Options
22443: 19792:  25: 
22444: 19793:  26: ```typescript
22445: 19794:  27: interface SyncOptions {
22446: 19795:  28:   dryRun?: boolean;      // Run without making changes
22447: 19796:  29:   limit?: number;        // Limit number of prices processed
22448: 19797:  30:   groupId?: string;      // Process specific group only
22449: 19798:  31:   productId?: number;    // Process specific product only
22450: 19799:  32:   showAll?: boolean;     // Show all prices, including unchanged
22451: 19800:  33: }
22452: 19801:  34: ```
22453: 19802:  35: 
22454: 19803:  36: #### Price Data Structure
22455: 19804:  37: 
22456: 19805:  38: ```typescript
22457: 19806:  39: interface CardPrice {
22458: 19807:  40:   productId: number;
22459: 19808:  41:   lowPrice: number;
22460: 19809:  42:   midPrice: number;
22461: 19810:  43:   highPrice: number;
22462: 19811:  44:   marketPrice: number | null;
22463: 19812:  45:   directLowPrice: number | null;
22464: 19813:  46:   subTypeName: "Normal" | "Foil";
22465: 19814:  47: }
22466: 19815:  48: 
22467: 19816:  49: interface PriceData {
22468: 19817:  50:   normal?: CardPrice;
22469: 19818:  51:   foil?: CardPrice;
22470: 19819:  52:   lastUpdated: Date;
22471: 19820:  53: }
22472: 19821:  54: ```
22473: 19822:  55: 
22474: 19823:  56: ## Usage Examples
22475: 19824:  57: 
22476: 19825:  58: ### Scheduled Sync
22477: 19826:  59: 
22478: 19827:  60: Automated daily price updates:
22479: 19828:  61: 
22480: 19829:  62: ```typescript
22481: 19830:  63: exports.scheduledPriceSync = onSchedule({
22482: 19831:  64:   schedule: "30 21 * * *", // Daily at 21:30 UTC
22483: 19832:  65:   timeZone: "UTC",
22484: 19833:  66:   memory: runtimeOpts.memory,
22485: 19834:  67:   timeoutSeconds: runtimeOpts.timeoutSeconds,
22486: 19835:  68:   retryCount: 3,
22487: 19836:  69: });
22488: 19837:  70: ```
22489: 19838:  71: 
22490: 19839:  72: ### Manual Price Checks
22491: 19840:  73: 
22492: 19841:  74: ```typescript
22493: 19842:  75: // Test specific product
22494: 19843:  76: await syncPrices({
22495: 19844:  77:   dryRun: true,
22496: 19845:  78:   productId: 477236,
22497: 19846:  79:   showAll: true
22498: 19847:  80: });
22499: 19848:  81: 
22500: 19849:  82: // Check specific group
22501: 19850:  83: await syncPrices({
22502: 19851:  84:   dryRun: true,
22503: 19852:  85:   groupId: "23783",
22504: 19853:  86:   limit: 10
22505: 19854:  87: });
22506: 19855:  88: ```
22507: 19856:  89: 
22508: 19857:  90: ## Price Processing
22509: 19858:  91: 
22510: 19859:  92: ### Price Data Processing
22511: 19860:  93: 
22512: 19861:  94: ```typescript
22513: 19862:  95: function processPrices(prices: CardPrice[]): Record<number, PriceData> {
22514: 19863:  96:   const priceMap: Record<number, PriceData> = {};
22515: 19864:  97: 
22516: 19865:  98:   prices.forEach((price) => {
22517: 19866:  99:     if (!priceMap[price.productId]) {
22518: 19867: 100:       priceMap[price.productId] = {
22519: 19868: 101:         lastUpdated: new Date(),
22520: 19869: 102:       };
22521: 19870: 103:     }
22522: 19871: 104: 
22523: 19872: 105:     if (price.subTypeName === "Normal") {
22524: 19873: 106:       priceMap[price.productId].normal = price;
22525: 19874: 107:     } else {
22526: 19875: 108:       priceMap[price.productId].foil = price;
22527: 19876: 109:     }
22528: 19877: 110:   });
22529: 19878: 111: 
22530: 19879: 112:   return priceMap;
22531: 19880: 113: }
22532: 19881: 114: ```
22533: 19882: 115: 
22534: 19883: 116: ### Batch Processing
22535: 19884: 117: 
22536: 19885: 118: ```typescript
22537: 19886: 119: async function processBatch<T>(
22538: 19887: 120:   items: T[],
22539: 19888: 121:   processor: (batch: T[]) => Promise<void>,
22540: 19889: 122:   batchSize: number = 500
22541: 19890: 123: ): Promise<void>
22542: 19891: 124: ```
22543: 19892: 125: 
22544: 19893: 126: ## Error Handling
22545: 19894: 127: 
22546: 19895: 128: ### Error Types
22547: 19896: 129: 
22548: 19897: 130: ```typescript
22549: 19898: 131: class SyncError extends Error implements GenericError {
22550: 19899: 132:   code?: string;
22551: 19900: 133: 
22552: 19901: 134:   constructor(
22553: 19902: 135:     message: string,
22554: 19903: 136:     code?: string,
22555: 19904: 137:     public details?: Record<string, unknown>
22556: 19905: 138:   ) {
22557: 19906: 139:     super(message);
22558: 19907: 140:     this.name = "SyncError";
22559: 19908: 141:     this.code = code;
22560: 19909: 142:   }
22561: 19910: 143: }
22562: 19911: 144: ```
22563: 19912: 145: 
22564: 19913: 146: ### Request Retry Logic
22565: 19914: 147: 
22566: 19915: 148: ```typescript
22567: 19916: 149: const MAX_RETRIES = 3;
22568: 19917: 150: const BASE_DELAY = 1000; // 1 second base delay
22569: 19918: 151: 
22570: 19919: 152: // Exponential backoff implementation
22571: 19920: 153: if (retryCount < MAX_RETRIES - 1) {
22572: 19921: 154:   const delay = Math.pow(2, retryCount) * BASE_DELAY;
22573: 19922: 155:   await logWarning(`Request failed, retrying in ${delay}ms...`);
22574: 19923: 156: }
22575: 19924: 157: ```
22576: 19925: 158: 
22577: 19926: 159: ## Monitoring
22578: 19927: 160: 
22579: 19928: 161: ### Price Change Tracking
22580: 19929: 162: 
22581: 19930: 163: The service tracks:
22582: 19931: 164: 
22583: 19932: 165: - Price updates per group
22584: 19933: 166: - Number of cards processed
22585: 19934: 167: - Processing duration
22586: 19935: 168: - Error rates
22587: 19936: 169: - Price change percentages
22588: 19937: 170: 
22589: 19938: 171: ### Success Metrics
22590: 19939: 172: 
22591: 19940: 173: ```typescript
22592: 19941: 174: interface SyncMetadata {
22593: 19942: 175:   lastSync: Date;
22594: 19943: 176:   status: "in_progress" | "success" | "failed" | "completed_with_errors";
22595: 19944: 177:   cardCount: number;
22596: 19945: 178:   type: "manual" | "scheduled";
22597: 19946: 179:   groupsProcessed: number;
22598: 19947: 180:   groupsUpdated: number;
22599: 19948: 181:   errors: string[];
22600: 19949: 182:   duration?: number;
22601: 19950: 183: }
22602: 19951: 184: 
22603: 19952: 185: 
22604: 19953: 186: ## Best Practices
22605: 19954: 187: 
22606: 19955: 188: 1. Regular Monitoring:
22607: 19956: 189:    - Check sync metadata regularly
22608: 19957: 190:    - Monitor price change patterns
22609: 19958: 191:    - Track error rates
22610: 19959: 192: 
22611: 19960: 193: 1. Testing Changes:
22612: 19961: 194: 
22613: 19962: 195: ```typescript
22614: 19963: 196: // Always test with dry run
22615: 19964: 197: const testSync = await syncPrices({
22616: 19965: 198:   dryRun: true,
22617: 19966: 199:   limit: 5,
22618: 19967: 200:   showAll: true
22619: 19968: 201: });
22620: 19969: 202: ```
22621: 19970: 203: 
22622: 19971: 204: 1. Error Handling:
22623: 19972: 205: 
22624: 19973: 206: ```typescript
22625: 19974: 207: // Implement proper error checking
22626: 19975: 208: const sync = await syncPrices(options);
22627: 19976: 209: if (sync.status === "completed_with_errors") {
22628: 19977: 210:   console.error("Sync errors:", sync.errors);
22629: 19978: 211: }
22630: 19979: 212: ```
22631: 19980: 213: 
22632: 19981: 214: ## Troubleshooting
22633: 19982: 215: 
22634: 19983: 216: ### Common Issues
22635: 19984: 217: 
22636: 19985: 218: 1. Price Discrepancies:
22637: 19986: 219:    - Verify data source connection
22638: 19987: 220:    - Check price format consistency
22639: 19988: 221:    - Monitor exchange rate impacts
22640: 19989: 222: 
22641: 19990: 223: 2. Sync Failures:
22642: 19991: 224:    - Check network connectivity
22643: 19992: 225:    - Verify API rate limits
22644: 19993: 226:    - Monitor service quotas
22645: 19994: 227: 
22646: 19995: 228: 3. Performance Issues:
22647: 19996: 229:    - Use appropriate batch sizes
22648: 19997: 230:    - Implement proper delays
22649: 19998: 231:    - Monitor memory usage
22650: 19999: 232: 
22651: 20000: 233: ### Validation
22652: 20001: 234: 
22653: 20002: 235: ```typescript
22654: 20003: 236: // Validate price data
22655: 20004: 237: if (price.midPrice < 0 || price.lowPrice < 0) {
22656: 20005: 238:   throw new Error("Invalid price values detected");
22657: 20006: 239: }
22658: 20007: 240: ```
22659: 20008: 241: 
22660: 20009: 242: ## Related Components
22661: 20010: 243: 
22662: 20011: 244: - [Card Sync Service](./card-sync)
22663: 20012: 245: - [Cache System](../utils/cache)
22664: 20013: 246: - [Error Handling](../utils/error-handling)
22665: 20014: 247: - [Logger](../utils/logging)
22666: 20015: </file>
22667: 20016: 
22668: 20017: <file path="setup/configuration.md">
22669: 20018:   1: # Configuration Guide
22670: 20019:   2: 
22671: 20020:   3: ## Firebase Configuration
22672: 20021:   4: 
22673: 20022:   5: ### Environment Variables
22674: 20023:   6: 
22675: 20024:   7: Create a `.env.local` file in your project root:
22676: 20025:   8: 
22677: 20026:   9: ```env
22678: 20027:  10: FIREBASE_PROJECT_ID=your-project-id
22679: 20028:  11: FIREBASE_STORAGE_BUCKET=your-storage-bucket
22680: 20029:  12: ```
22681: 20030:  13: 
22682: 20031:  14: ### Firebase Console Settings
22683: 20032:  15: 
22684: 20033:  16: 1. Firestore Database:
22685: 20034:  17: 
22686: 20035:  18: - Collection structure:
22687: 20036:  19:   - `cards`: Stores card information
22688: 20037:  20:   - `prices`: Stores price data
22689: 20038:  21:   - `syncMetadata`: Stores sync operation logs
22690: 20039:  22:   - `logs`: System logs
22691: 20040:  23:   - `cardHashes`: Card data version control
22692: 20041:  24:   - `priceHashes`: Price data version control
22693: 20042:  25:   - `imageMetadata`: Image processing metadata
22694: 20043:  26: 
22695: 20044:  27: 1. Storage:
22696: 20045:  28: 
22697: 20046:  29: - Bucket structure:
22698: 20047:  30:   - `/card-images/{groupId}/{productId}_200w.jpg`
22699: 20048:  31:   - `/card-images/{groupId}/{productId}_400w.jpg`
22700: 20049:  32: 
22701: 20050:  33: ## Application Configuration
22702: 20051:  34: 
22703: 20052:  35: ### Runtime Options
22704: 20053:  36: 
22705: 20054:  37: Located in `src/config/firebase.ts`:
22706: 20055:  38: 
22707: 20056:  39: ```typescript
22708: 20057:  40: export const runtimeOpts = {
22709: 20058:  41:   timeoutSeconds: 540,
22710: 20059:  42:   memory: "1GiB",
22711: 20060:  43: } as const;
22712: 20061:  44: ```
22713: 20062:  45: 
22714: 20063:  46: ### API Configuration
22715: 20064:  47: 
22716: 20065:  48: Base URL and category settings:
22717: 20066:  49: 
22718: 20067:  50: ```typescript
22719: 20068:  51: export const BASE_URL = "https://tcgcsv.com";
22720: 20069:  52: export const FFTCG_CATEGORY_ID = "24";
22721: 20070:  53: ```
22722: 20071:  54: 
22723: 20072:  55: ### Collection Names
22724: 20073:  56: 
22725: 20074:  57: ```typescript
22726: 20075:  58: export const COLLECTION = {
22727: 20076:  59:   CARDS: "cards",
22728: 20077:  60:   PRICES: "prices",
22729: 20078:  61:   SYNC_METADATA: "syncMetadata",
22730: 20079:  62:   LOGS: "logs",
22731: 20080:  63:   CARD_HASHES: "cardHashes",
22732: 20081:  64:   PRICE_HASHES: "priceHashes",
22733: 20082:  65:   IMAGE_METADATA: "imageMetadata",
22734: 20083:  66: };
22735: 20084:  67: ```
22736: 20085:  68: 
22737: 20086:  69: ## Sync Configuration
22738: 20087:  70: 
22739: 20088:  71: ### Card Sync Schedule
22740: 20089:  72: 
22741: 20090:  73: ```typescript
22742: 20091:  74: exports.scheduledCardSync = onSchedule({
22743: 20092:  75:   schedule: "0 21 * * *", // Daily at 21:00 UTC
22744: 20093:  76:   timeZone: "UTC",
22745: 20094:  77:   memory: runtimeOpts.memory,
22746: 20095:  78:   timeoutSeconds: runtimeOpts.timeoutSeconds,
22747: 20096:  79:   retryCount: 3,
22748: 20097:  80: });
22749: 20098:  81: ```
22750: 20099:  82: 
22751: 20100:  83: ### Price Sync Schedule
22752: 20101:  84: 
22753: 20102:  85: ```typescript
22754: 20103:  86: exports.scheduledPriceSync = onSchedule({
22755: 20104:  87:   schedule: "30 21 * * *", // Daily at 21:30 UTC
22756: 20105:  88:   timeZone: "UTC",
22757: 20106:  89:   memory: runtimeOpts.memory,
22758: 20107:  90:   timeoutSeconds: runtimeOpts.timeoutSeconds,
22759: 20108:  91:   retryCount: 3,
22760: 20109:  92: });
22761: 20110:  93: ```
22762: 20111:  94: 
22763: 20112:  95: ## Image Processing Configuration
22764: 20113:  96: 
22765: 20114:  97: ### Compression Settings
22766: 20115:  98: 
22767: 20116:  99: ```typescript
22768: 20117: 100: private static readonly QUALITY = {
22769: 20118: 101:   HIGH_RES: 90,
22770: 20119: 102:   LOW_RES: 85,
22771: 20120: 103: };
22772: 20121: 104: 
22773: 20122: 105: private static readonly DIMENSIONS = {
22774: 20123: 106:   HIGH_RES: 400,
22775: 20124: 107:   LOW_RES: 200,
22776: 20125: 108: };
22777: 20126: 109: ```
22778: 20127: 110: 
22779: 20128: 111: ### Cache Settings
22780: 20129: 112: 
22781: 20130: 113: ```typescript
22782: 20131: 114: const options = {
22783: 20132: 115:   max: 500,
22784: 20133: 116:   ttl: 1000 * 60 * 60, // 1 hour
22785: 20134: 117: };
22786: 20135: 118: ```
22787: 20136: 119: 
22788: 20137: 120: ## Testing Configuration
22789: 20138: 121: 
22790: 20139: 122: ### Test Cases
22791: 20140: 123: 
22792: 20141: 124: ```typescript
22793: 20142: 125: const TEST_CASES = [
22794: 20143: 126:   {
22795: 20144: 127:     imageUrl: "https://tcgplayer-cdn.tcgplayer.com/product/477236_200w.jpg",
22796: 20145: 128:     groupId: "23783",
22797: 20146: 129:     productId: 477236,
22798: 20147: 130:     description: "FFVII Boss Deck",
22799: 20148: 131:   },
22800: 20149: 132: ];
22801: 20150: 133: ```
22802: 20151: 134: 
22803: 20152: 135: ## Error Handling Configuration
22804: 20153: 136: 
22805: 20154: 137: ### Log Levels
22806: 20155: 138: 
22807: 20156: 139: ```typescript
22808: 20157: 140: export interface ErrorReport {
22809: 20158: 141:   timestamp: Date;
22810: 20159: 142:   context: string;
22811: 20160: 143:   error: string;
22812: 20161: 144:   stackTrace?: string;
22813: 20162: 145:   metadata?: Record<string, unknown>;
22814: 20163: 146:   severity: "ERROR" | "WARNING" | "CRITICAL";
22815: 20164: 147: }
22816: 20165: 148: ```
22817: 20166: </file>
22818: 20167: 
22819: 20168: <file path="setup/installation.md">
22820: 20169:  1: # Installation Guide
22821: 20170:  2: 
22822: 20171:  3: ## Prerequisites
22823: 20172:  4: 
22824: 20173:  5: - Node.js 18 or higher
22825: 20174:  6: - Firebase CLI
22826: 20175:  7: - Git (for version control)
22827: 20176:  8: - A Firebase project with Firestore and Storage enabled
22828: 20177:  9: 
22829: 20178: 10: ## Firebase Project Setup
22830: 20179: 11: 
22831: 20180: 12: 1. Create or select a Firebase project:
22832: 20181: 13: 
22833: 20182: 14: - Visit the [Firebase Console](https://console.firebase.google.com/)
22834: 20183: 15: - Create a new project or select an existing one
22835: 20184: 16: - Note your project ID for later use
22836: 20185: 17: 
22837: 20186: 18: 1. Enable required services:
22838: 20187: 19: 
22839: 20188: 20: - Firestore Database
22840: 20189: 21: - Cloud Storage
22841: 20190: 22: - Cloud Functions
22842: 20191: 23: 
22843: 20192: 24: 1. Configure Firebase Authentication:
22844: 20193: 25: 
22845: 20194: 26: - Enable Google Authentication
22846: 20195: 27: - Add authorized domains if needed
22847: 20196: 28: - Set up authorized email addresses for admin access
22848: 20197: 29: 
22849: 20198: 30: ## Local Development Setup
22850: 20199: 31: 
22851: 20200: 32: 1. Clone the repository:
22852: 20201: 33: 
22853: 20202: 34: ```bash
22854: 20203: 35: git clone <repository-url>
22855: 20204: 36: cd fftcg-sync-service
22856: 20205: </file>
22857: 20206: 
22858: 20207: <file path="troubleshooting.md">
22859: 20208:   1: # Troubleshooting Guide
22860: 20209:   2: 
22861: 20210:   3: ## Quick Diagnosis
22862: 20211:   4: 
22863: 20212:   5: ### System Status Check
22864: 20213:   6: 
22865: 20214:   7: ```bash
22866: 20215:   8: # Check service health
22867: 20216:   9: curl https://${REGION}-${PROJECT_ID}.cloudfunctions.net/healthCheck
22868: 20217:  10: 
22869: 20218:  11: # Expected Response
22870: 20219:  12: {
22871: 20220:  13:   "status": "healthy",
22872: 20221:  14:   "timestamp": "2024-11-22T01:47:16.617Z",
22873: 20222:  15:   "version": "1.0.0"
22874: 20223:  16: }
22875: 20224:  17: ```
22876: 20225:  18: 
22877: 20226:  19: ### Log Analysis
22878: 20227:  20: 
22879: 20228:  21: ```typescript
22880: 20229:  22: // View recent logs
22881: 20230:  23: firebase functions:log
22882: 20231:  24: 
22883: 20232:  25: // Filter for errors
22884: 20233:  26: firebase functions:log --only errors
22885: 20234:  27: 
22886: 20235:  28: // View specific function logs
22887: 20236:  29: firebase functions:log --only syncCards
22888: 20237:  30: ```
22889: 20238:  31: 
22890: 20239:  32: ## Common Issues
22891: 20240:  33: 
22892: 20241:  34: ### Synchronization Failures
22893: 20242:  35: 
22894: 20243:  36: #### Cards Not Syncing
22895: 20244:  37: 
22896: 20245:  38: **Symptoms:**
22897: 20246:  39: 
22898: 20247:  40: - Missing card data
22899: 20248:  41: - Outdated information
22900: 20249:  42: - Sync operation completes without updates
22901: 20250:  43: 
22902: 20251:  44: **Solutions:**
22903: 20252:  45: 
22904: 20253:  46: 1. Check API access:
22905: 20254:  47: 
22906: 20255:  48: ```typescript
22907: 20256:  49: // Test API connection
22908: 20257:  50: const response = await makeRequest<{ results: any[] }>(
22909: 20258:  51:   `${FFTCG_CATEGORY_ID}/groups`,
22910: 20259:  52:   {metadata: {operation: "fetchGroups"}}
22911: 20260:  53: );
22912: 20261:  54: ```
22913: 20262:  55: 
22914: 20263:  56: 1. Verify hash comparison:
22915: 20264:  57: 
22916: 20265:  58: ```typescript
22917: 20266:  59: // Force sync by clearing hashes
22918: 20267:  60: await db.collection(COLLECTION.CARD_HASHES).doc(groupId).delete();
22919: 20268:  61: ```
22920: 20269:  62: 
22921: 20270:  63: 1. Check rate limits:
22922: 20271:  64: 
22923: 20272:  65: ```typescript
22924: 20273:  66: // Monitor rate limit logs
22925: 20274:  67: await logInfo("Rate limit status", {
22926: 20275:  68:   remaining: rateLimiter.tokens,
22927: 20276:  69:   nextRefill: rateLimiter.nextRefillTime
22928: 20277:  70: });
22929: 20278:  71: ```
22930: 20279:  72: 
22931: 20280:  73: #### Price Updates Failed
22932: 20281:  74: 
22933: 20282:  75: **Symptoms:**
22934: 20283:  76: 
22935: 20284:  77: - Outdated prices
22936: 20285:  78: - Partial updates
22937: 20286:  79: - Sync metadata shows errors
22938: 20287:  80: 
22939: 20288:  81: **Solutions:**
22940: 20289:  82: 
22941: 20290:  83: 1. Validate price data:
22942: 20291:  84: 
22943: 20292:  85: ```typescript
22944: 20293:  86: const priceResult = await validateCollection(
22945: 20294:  87:   db,
22946: 20295:  88:   COLLECTION.PRICES,
22947: 20296:  89:   (data) => {
22948: 20297:  90:     return (
22949: 20298:  91:       data.lastUpdated instanceof Timestamp &&
22950: 20299:  92:       (!data.normal || typeof data.normal.midPrice === "number") &&
22951: 20300:  93:       (!data.foil || typeof data.foil.midPrice === "number")
22952: 20301:  94:     );
22953: 20302:  95:   }
22954: 20303:  96: );
22955: 20304:  97: ```
22956: 20305:  98: 
22957: 20306:  99: 1. Force price sync:
22958: 20307: 100: 
22959: 20308: 101: ```typescript
22960: 20309: 102: await syncPrices({
22961: 20310: 103:   dryRun: false,
22962: 20311: 104:   groupId: specificGroupId,
22963: 20312: 105:   forceUpdate: true
22964: 20313: 106: });
22965: 20314: 107: ```
22966: 20315: 108: 
22967: 20316: 109: ### Image Processing Issues
22968: 20317: 110: 
22969: 20318: 111: #### Image Upload Failures
22970: 20319: 112: 
22971: 20320: 113: **Symptoms:**
22972: 20321: 114: 
22973: 20322: 115: - Missing images in storage
22974: 20323: 116: - Failed compression attempts
22975: 20324: 117: - Storage quota errors
22976: 20325: 118: 
22977: 20326: 119: **Solutions:**
22978: 20327: 120: 
22979: 20328: 121: 1. Check image validation:
22980: 20329: 122: 
22981: 20330: 123: ```typescript
22982: 20331: 124: const validationResult = await ImageValidator.validateImage(buffer);
22983: 20332: 125: if (validationResult) {
22984: 20333: 126:   console.error("Validation failed:", validationResult.message);
22985: 20334: 127: }
22986: 20335: 128: ```
22987: 20336: 129: 
22988: 20337: 130: 1. Verify storage permissions:
22989: 20338: 131: 
22990: 20339: 132: ```typescript
22991: 20340: 133: try {
22992: 20341: 134:   await storage.bucket(STORAGE.BUCKETS.CARD_IMAGES).file(path).save(buffer);
22993: 20342: 135: } catch (error) {
22994: 20343: 136:   console.error("Storage access error:", error);
22995: 20344: 137: }
22996: 20345: 138: ```
22997: 20346: 139: 
22998: 20347: 140: 1. Monitor storage quota:
22999: 20348: 141: 
23000: 20349: 142: ```typescript
23001: 20350: 143: const [usage] = await storage.bucket().getMetadata();
23002: 20351: 144: console.log("Storage usage:", usage.size);
23003: 20352: 145: ```
23004: 20353: 146: 
23005: 20354: 147: #### Image Compression Problems
23006: 20355: 148: 
23007: 20356: 149: **Symptoms:**
23008: 20357: 150: 
23009: 20358: 151: - Large file sizes
23010: 20359: 152: - Poor image quality
23011: 20360: 153: - Processing timeouts
23012: 20361: 154: 
23013: 20362: 155: **Solutions:**
23014: 20363: 156: 
23015: 20364: 157: 1. Adjust compression settings:
23016: 20365: 158: 
23017: 20366: 159: ```typescript
23018: 20367: 160: const compressionOptions = {
23019: 20368: 161:   quality: ImageCompressor.QUALITY.HIGH_RES,
23020: 20369: 162:   progressive: true,
23021: 20370: 163:   mozjpeg: true
23022: 20371: 164: };
23023: 20372: 165: ```
23024: 20373: 166: 
23025: 20374: 167: 1. Debug compression process:
23026: 20375: 168: 
23027: 20376: 169: ```typescript
23028: 20377: 170: const result = await ImageCompressor.compress(buffer, false);
23029: 20378: 171: console.log("Compression results:", {
23030: 20379: 172:   originalSize: buffer.length,
23031: 20380: 173:   compressedSize: result.buffer.length,
23032: 20381: 174:   ratio: result.buffer.length / buffer.length
23033: 20382: 175: });
23034: 20383: 176: ```
23035: 20384: 177: 
23036: 20385: 178: ### Database Issues
23037: 20386: 179: 
23038: 20387: 180: #### Write Operations Failed
23039: 20388: 181: 
23040: 20389: 182: **Symptoms:**
23041: 20390: 183: 
23042: 20391: 184: - Timeout errors
23043: 20392: 185: - Batch operation failures
23044: 20393: 186: - Inconsistent data state
23045: 20394: 187: 
23046: 20395: 188: **Solutions:**
23047: 20396: 189: 
23048: 20397: 190: 1. Check batch size:
23049: 20398: 191: 
23050: 20399: 192: ```typescript
23051: 20400: 193: // Reduce batch size
23052: 20401: 194: const batchOptions = {
23053: 20402: 195:   batchSize: 100,  // Decrease from default 500
23054: 20403: 196:   delayBetweenBatches: 1000
23055: 20404: 197: };
23056: 20405: 198: ```
23057: 20406: 199: 
23058: 20407: 200: 1. Monitor write operations:
23059: 20408: 201: 
23060: 20409: 202: ```typescript
23061: 20410: 203: const stats = {
23062: 20411: 204:   attempted: 0,
23063: 20412: 205:   successful: 0,
23064: 20413: 206:   failed: 0
23065: 20414: 207: };
23066: 20415: 208: 
23067: 20416: 209: await processBatch(items, async (batch) => {
23068: 20417: 210:   try {
23069: 20418: 211:     await writeBatch.commit();
23070: 20419: 212:     stats.successful += batch.length;
23071: 20420: 213:   } catch (error) {
23072: 20421: 214:     stats.failed += batch.length;
23073: 20422: 215:     await logError(error, "writeBatch");
23074: 20423: 216:   }
23075: 20424: 217:   stats.attempted += batch.length;
23076: 20425: 218: });
23077: 20426: 219: ```
23078: 20427: 220: 
23079: 20428: 221: #### Cache Inconsistency
23080: 20429: 222: 
23081: 20430: 223: **Symptoms:**
23082: 20431: 224: 
23083: 20432: 225: - Stale data
23084: 20433: 226: - Memory usage spikes
23085: 20434: 227: - Inconsistent results
23086: 20435: 228: 
23087: 20436: 229: **Solutions:**
23088: 20437: 230: 
23089: 20438: 231: 1. Clear caches:
23090: 20439: 232: 
23091: 20440: 233: ```typescript
23092: 20441: 234: // Clear specific cache
23093: 20442: 235: imageCache.clear();
23094: 20443: 236: cardCache.clear();
23095: 20444: 237: 
23096: 20445: 238: // Clear all caches
23097: 20446: 239: await Promise.all([
23098: 20447: 240:   imageCache.clear(),
23099: 20448: 241:   cardCache.clear(),
23100: 20449: 242:   db.clearPersistence()
23101: 20450: 243: ]);
23102: 20451: 244: ```
23103: 20452: 245: 
23104: 20453: 246: 1. Verify cache settings:
23105: 20454: 247: 
23106: 20455: 248: ```typescript
23107: 20456: 249: const cacheOptions = {
23108: 20457: 250:   max: 500,
23109: 20458: 251:   ttl: 1000 * 60 * 60, // 1 hour
23110: 20459: 252:   updateAgeOnGet: true
23111: 20460: 253: };
23112: 20461: 254: ```
23113: 20462: 255: 
23114: 20463: 256: ### Performance Issues
23115: 20464: 257: 
23116: 20465: 258: #### High Memory Usage
23117: 20466: 259: 
23118: 20467: 260: **Symptoms:**
23119: 20468: 261: 
23120: 20469: 262: - Function timeouts
23121: 20470: 263: - Out of memory errors
23122: 20471: 264: - Slow processing
23123: 20472: 265: 
23124: 20473: 266: **Solutions:**
23125: 20474: 267: 
23126: 20475: 268: 1. Monitor memory usage:
23127: 20476: 269: 
23128: 20477: 270: ```typescript
23129: 20478: 271: const used = process.memoryUsage();
23130: 20479: 272: await logInfo("Memory usage", {
23131: 20480: 273:   heapUsed: `${Math.round(used.heapUsed / 1024 / 1024 * 100) / 100} MB`,
23132: 20481: 274:   heapTotal: `${Math.round(used.heapTotal / 1024 / 1024 * 100) / 100} MB`,
23133: 20482: 275: });
23134: 20483: 276: ```
23135: 20484: 277: 
23136: 20485: 278: 1. Implement cleanup:
23137: 20486: 279: 
23138: 20487: 280: ```typescript
23139: 20488: 281: async function cleanupResources(): Promise<void> {
23140: 20489: 282:   await imageCache.clear();
23141: 20490: 283:   global.gc && global.gc();
23142: 20491: 284: }
23143: 20492: 285: ```
23144: 20493: 286: 
23145: 20494: 287: #### Slow Synchronization
23146: 20495: 288: 
23147: 20496: 289: **Symptoms:**
23148: 20497: 290: 
23149: 20498: 291: - Long sync duration
23150: 20499: 292: - Timeout errors
23151: 20500: 293: - Queue buildup
23152: 20501: 294: 
23153: 20502: 295: **Solutions:**
23154: 20503: 296: 
23155: 20504: 297: 1. Enable progress tracking:
23156: 20505: 298: 
23157: 20506: 299: ```typescript
23158: 20507: 300: const progress = new EnhancedProgressTracker(
23159: 20508: 301:   totalItems,
23160: 20509: 302:   "Processing Cards",
23161: 20510: 303:   { updateInterval: 1000 }
23162: 20511: 304: );
23163: 20512: 305: 
23164: 20513: 306: // Monitor progress
23165: 20514: 307: progress.update(1);
23166: 20515: 308: const stats = progress.getProgress();
23167: 20516: 309: ```
23168: 20517: 310: 
23169: 20518: 311: 1. Optimize batch processing:
23170: 20519: 312: 
23171: 20520: 313: ```typescript
23172: 20521: 314: const optimizedBatch = new AdaptiveBatchProcessor();
23173: 20522: 315: await optimizedBatch.processBatch(items, processor);
23174: 20523: 316: ```
23175: 20524: 317: 
23176: 20525: 318: ### Network Issues
23177: 20526: 319: 
23178: 20527: 320: #### API Connection Failures
23179: 20528: 321: 
23180: 20529: 322: **Symptoms:**
23181: 20530: 323: 
23182: 20531: 324: - Request timeouts
23183: 20532: 325: - Connection refused
23184: 20533: 326: - DNS resolution failed
23185: 20534: 327: 
23186: 20535: 328: **Solutions:**
23187: 20536: 329: 
23188: 20537: 330: 1. Implement retry logic:
23189: 20538: 331: 
23190: 20539: 332: ```typescript
23191: 20540: 333: const requestWithRetry = async () => {
23192: 20541: 334:   const retryStrategy = new RetryStrategy();
23193: 20542: 335:   return retryStrategy.executeWithRetry(
23194: 20543: 336:     operation,
23195: 20544: 337:     "API_REQUEST"
23196: 20545: 338:   );
23197: 20546: 339: };
23198: 20547: 340: ```
23199: 20548: 341: 
23200: 20549: 342: 1. Check network status:
23201: 20550: 343: 
23202: 20551: 344: ```typescript
23203: 20552: 345: async function checkConnectivity(): Promise<boolean> {
23204: 20553: 346:   try {
23205: 20554: 347:     await axios.get(BASE_URL, { timeout: 5000 });
23206: 20555: 348:     return true;
23207: 20556: 349:   } catch (error) {
23208: 20557: 350:     await logError(error, "connectivityCheck");
23209: 20558: 351:     return false;
23210: 20559: 352:   }
23211: 20560: 353: }
23212: 20561: 354: ```
23213: 20562: 355: 
23214: 20563: 356: ## Debugging Tools
23215: 20564: 357: 
23216: 20565: 358: ### Logging and Diagnostics
23217: 20566: 359: 
23218: 20567: 360: ```typescript
23219: 20568: 361: // Enable detailed logging
23220: 20569: 362: const logger = new SyncLogger({
23221: 20570: 363:   type: "manual",
23222: 20571: 364:   limit: 10,
23223: 20572: 365:   dryRun: true,
23224: 20573: 366:   verbose: true
23225: 20574: 367: });
23226: 20575: 368: 
23227: 20576: 369: // Track specific operations
23228: 20577: 370: await logger.logGroupDetails(groupId, products.length, prices.length);
23229: 20578: 371: ```
23230: 20579: 372: 
23231: 20580: 373: ### Validation Tools
23232: 20581: 374: 
23233: 20582: 375: ```typescript
23234: 20583: 376: // Validate sync state
23235: 20584: 377: await validateSync({
23236: 20585: 378:   limit: 100,
23237: 20586: 379:   verbose: true,
23238: 20587: 380:   groupId: "test_group"
23239: 20588: 381: });
23240: 20589: 382: 
23241: 20590: 383: // Check data integrity
23242: 20591: 384: const integrityCheck = await validateCollection(db, COLLECTION.CARDS);
23243: 20592: 385: console.log("Integrity check results:", integrityCheck);
23244: 20593: 386: ```
23245: 20594: 387: 
23246: 20595: 388: ### Performance Monitoring
23247: 20596: 389: 
23248: 20597: 390: ```typescript
23249: 20598: 391: // Track operation timing
23250: 20599: 392: const timer = {
23251: 20600: 393:   start: Date.now(),
23252: 20601: 394:   checkPoint(operation: string) {
23253: 20602: 395:     const duration = Date.now() - this.start;
23254: 20603: 396:     console.log(`${operation}: ${duration}ms`);
23255: 20604: 397:   }
23256: 20605: 398: };
23257: 20606: 399: 
23258: 20607: 400: // Monitor async operations
23259: 20608: 401: async function trackAsyncOperation<T>(
23260: 20609: 402:   operation: () => Promise<T>,
23261: 20610: 403:   name: string
23262: 20611: 404: ): Promise<T> {
23263: 20612: 405:   const start = Date.now();
23264: 20613: 406:   try {
23265: 20614: 407:     const result = await operation();
23266: 20615: 408:     const duration = Date.now() - start;
23267: 20616: 409:     await logInfo(`${name} completed`, { duration });
23268: 20617: 410:     return result;
23269: 20618: 411:   } catch (error) {
23270: 20619: 412:     await logError(error, name);
23271: 20620: 413:     throw error;
23272: 20621: 414:   }
23273: 20622: 415: }
23274: 20623: 416: ```
23275: 20624: 417: 
23276: 20625: 418: ## Recovery Procedures
23277: 20626: 419: 
23278: 20627: 420: ### Data Recovery
23279: 20628: 421: 
23280: 20629: 422: 1. Backup verification:
23281: 20630: 423: 
23282: 20631: 424: ```typescript
23283: 20632: 425: async function verifyBackups(): Promise<boolean> {
23284: 20633: 426:   const backups = await db.collection('backups').get();
23285: 20634: 427:   return backups.size > 0;
23286: 20635: 428: }
23287: 20636: 429: ```
23288: 20637: 430: 
23289: 20638: 431: 1. Restore procedure:
23290: 20639: 432: 
23291: 20640: 433: ```typescript
23292: 20641: 434: async function restoreData(timestamp: Date): Promise<void> {
23293: 20642: 435:   const backup = await db.collection('backups')
23294: 20643: 436:     .where('timestamp', '<=', timestamp)
23295: 20644: 437:     .orderBy('timestamp', 'desc')
23296: 20645: 438:     .limit(1)
23297: 20646: 439:     .get();
23298: 20647: 440:    
23299: 20648: 441:   if (!backup.empty) {
23300: 20649: 442:     await restoreFromBackup(backup.docs[0]);
23301: 20650: 443:   }
23302: 20651: 444: }
23303: 20652: 445: ```
23304: 20653: 446: 
23305: 20654: 447: ### Error Recovery
23306: 20655: 448: 
23307: 20656: 449: 1. Clear error state:
23308: 20657: 450: 
23309: 20658: 451: ```typescript
23310: 20659: 452: async function clearErrorState(): Promise<void> {
23311: 20660: 453:   await db.collection(COLLECTION.SYNC_METADATA)
23312: 20661: 454:     .where('status', '==', 'failed')
23313: 20662: 455:     .get()
23314: 20663: 456:     .then(snapshot => {
23315: 20664: 457:       const batch = db.batch();
23316: 20665: 458:       snapshot.forEach(doc => {
23317: 20666: 459:         batch.update(doc.ref, { status: 'ready' });
23318: 20667: 460:       });
23319: 20668: 461:       return batch.commit();
23320: 20669: 462:     });
23321: 20670: 463: }
23322: 20671: 464: ```
23323: 20672: 465: 
23324: 20673: 466: 1. Reset sync state:
23325: 20674: 467: 
23326: 20675: 468: ```typescript
23327: 20676: 469: async function resetSyncState(): Promise<void> {
23328: 20677: 470:   await Promise.all([
23329: 20678: 471:     db.collection(COLLECTION.CARD_HASHES).get()
23330: 20679: 472:       .then(snapshot => {
23331: 20680: 473:         const batch = db.batch();
23332: 20681: 474:         snapshot.forEach(doc => batch.delete(doc.ref));
23333: 20682: 475:         return batch.commit();
23334: 20683: 476:       }),
23335: 20684: 477:     db.collection(COLLECTION.PRICE_HASHES).get()
23336: 20685: 478:       .then(snapshot => {
23337: 20686: 479:         const batch = db.batch();
23338: 20687: 480:         snapshot.forEach(doc => batch.delete(doc.ref));
23339: 20688: 481:         return batch.commit();
23340: 20689: 482:       })
23341: 20690: 483:   ]);
23342: 20691: 484: }
23343: 20692: 485: ```
23344: 20693: </file>
23345: 20694: 
23346: 20695: <file path="usage-guide.md">
23347: 20696:   1: # FFTCG Sync Service Usage Guide
23348: 20697:   2: 
23349: 20698:   3: ## Overview
23350: 20699:   4: 
23351: 20700:   5: This guide provides comprehensive instructions for using the FFTCG Sync Service, including setup, operations, and best practices.
23352: 20701:   6: 
23353: 20702:   7: ## Quick Start
23354: 20703:   8: 
23355: 20704:   9: ### Prerequisites
23356: 20705:  10: 
23357: 20706:  11: - Node.js 18 or higher
23358: 20707:  12: - Firebase CLI installed (`npm install -g firebase-tools`)
23359: 20708:  13: - Firebase project created
23360: 20709:  14: - Service account key configured
23361: 20710:  15: 
23362: 20711:  16: ### Initial Setup
23363: 20712:  17: 
23364: 20713:  18: 1. Clone the repository
23365: 20714:  19: 
23366: 20715:  20: ```bash
23367: 20716:  21: git clone https://github.com/yourusername/fftcg-sync-service.git
23368: 20717:  22: cd fftcg-sync-service
23369: 20718:  23: ```
23370: 20719:  24: 
23371: 20720:  25: 1. Install dependencies
23372: 20721:  26: 
23373: 20722:  27: ```bash
23374: 20723:  28: npm install
23375: 20724:  29: ```
23376: 20725:  30: 
23377: 20726:  31: 1. Initialize Firebase
23378: 20727:  32: 
23379: 20728:  33: ```bash
23380: 20729:  34: firebase login
23381: 20730:  35: firebase init
23382: 20731:  36: ```
23383: 20732:  37: 
23384: 20733:  38: ## API Reference
23385: 20734:  39: 
23386: 20735:  40: ### Card Management Endpoints
23387: 20736:  41: 
23388: 20737:  42: #### Test Card Sync
23389: 20738:  43: 
23390: 20739:  44: ```http
23391: 20740:  45: GET /testCardSync?limit=5&dryRun=true&groupId=23783
23392: 20741:  46: ```
23393: 20742:  47: 
23394: 20743:  48: #### Manual Card Sync
23395: 20744:  49: 
23396: 20745:  50: ```http
23397: 20746:  51: GET /manualCardSync
23398: 20747:  52: ```
23399: 20748:  53: 
23400: 20749:  54: ### Price Management Endpoints
23401: 20750:  55: 
23402: 20751:  56: #### Test Price Sync
23403: 20752:  57: 
23404: 20753:  58: ```http
23405: 20754:  59: GET /testPriceSync?limit=5&dryRun=true&groupId=23783
23406: 20755:  60: ```
23407: 20756:  61: 
23408: 20757:  62: #### Manual Price Sync
23409: 20758:  63: 
23410: 20759:  64: ```http
23411: 20760:  65: GET /manualPriceSync
23412: 20761:  66: ```
23413: 20762:  67: 
23414: 20763:  68: ## Synchronization Features
23415: 20764:  69: 
23416: 20765:  70: ### Card Data Synchronization
23417: 20766:  71: 
23418: 20767:  72: ```typescript
23419: 20768:  73: // Test sync with limited cards
23420: 20769:  74: const options = {
23421: 20770:  75:   dryRun: true,
23422: 20771:  76:   limit: 5,
23423: 20772:  77:   groupId: "23783" // Optional: specific group
23424: 20773:  78: };
23425: 20774:  79: 
23426: 20775:  80: await syncCards(options);
23427: 20776:  81: ```
23428: 20777:  82: 
23429: 20778:  83: ### Price Data Synchronization
23430: 20779:  84: 
23431: 20780:  85: ```typescript
23432: 20781:  86: // Test price sync for specific cards
23433: 20782:  87: const options = {
23434: 20783:  88:   dryRun: true,
23435: 20784:  89:   limit: 10,
23436: 20785:  90:   groupId: "23783",
23437: 20786:  91:   productId: 477236 // Optional: specific card
23438: 20787:  92: };
23439: 20788:  93: 
23440: 20789:  94: await syncPrices(options);
23441: 20790:  95: ```
23442: 20791:  96: 
23443: 20792:  97: ## Image Management
23444: 20793:  98: 
23445: 20794:  99: ### Basic Image Processing
23446: 20795: 100: 
23447: 20796: 101: ```typescript
23448: 20797: 102: const imageHandler = new ImageHandler();
23449: 20798: 103: 
23450: 20799: 104: const result = await imageHandler.processImage(
23451: 20800: 105:   imageUrl,
23452: 20801: 106:   groupId,
23453: 20802: 107:   productId
23454: 20803: 108: );
23455: 20804: 109: ```
23456: 20805: 110: 
23457: 20806: 111: ### Image Processing Options
23458: 20807: 112: 
23459: 20808: 113: ```typescript
23460: 20809: 114: const options = {
23461: 20810: 115:   skipImages: false,    // Skip image processing
23462: 20811: 116:   retryFailedImages: true,    // Retry failed images
23463: 20812: 117:   batchSize: 25        // Batch size for processing
23464: 20813: 118: };
23465: 20814: 119: ```
23466: 20815: 120: 
23467: 20816: 121: ## Batch Operations
23468: 20817: 122: 
23469: 20818: 123: ### Standard Batch Processing
23470: 20819: 124: 
23471: 20820: 125: ```typescript
23472: 20821: 126: const batchOptions = {
23473: 20822: 127:   batchSize: 100,
23474: 20823: 128:   delayBetweenBatches: 1000,
23475: 20824: 129:   onBatchComplete: async (stats) => {
23476: 20825: 130:     console.log(`Processed: ${stats.processed}/${stats.total}`);
23477: 20826: 131:   }
23478: 20827: 132: };
23479: 20828: 133: 
23480: 20829: 134: await processBatch(items, processor, batchOptions);
23481: 20830: 135: ```
23482: 20831: 136: 
23483: 20832: 137: ## Logging System
23484: 20833: 138: 
23485: 20834: 139: ### Core Logging Operations
23486: 20835: 140: 
23487: 20836: 141: ```typescript
23488: 20837: 142: // Info logging
23489: 20838: 143: await logInfo("Operation started", {
23490: 20839: 144:   context: "syncOperation",
23491: 20840: 145:   timestamp: new Date()
23492: 20841: 146: });
23493: 20842: 147: 
23494: 20843: 148: // Warning logging
23495: 20844: 149: await logWarning("Retry required", {
23496: 20845: 150:   attempt: 2,
23497: 20846: 151:   maxRetries: 3
23498: 20847: 152: });
23499: 20848: 153: 
23500: 20849: 154: // Error logging
23501: 20850: 155: await logError(error, "operationName");
23502: 20851: 156: ```
23503: 20852: 157: 
23504: 20853: 158: ### Sync Status Logging
23505: 20854: 159: 
23506: 20855: 160: ```typescript
23507: 20856: 161: const logger = new SyncLogger({
23508: 20857: 162:   type: "manual",
23509: 20858: 163:   limit: 10,
23510: 20859: 164:   dryRun: true
23511: 20860: 165: });
23512: 20861: 166: 
23513: 20862: 167: await logger.start();
23514: 20863: 168: await logger.logGroupDetails(groupId, products.length, prices.length);
23515: 20864: 169: await logger.finish();
23516: 20865: 170: ```
23517: 20866: 171: 
23518: 20867: 172: ## Testing Infrastructure
23519: 20868: 173: 
23520: 20869: 174: ### Image System Testing
23521: 20870: 175: 
23522: 20871: 176: ```typescript
23523: 20872: 177: // Run the image processing test suite
23524: 20873: 178: npm run test:images
23525: 20874: 179: 
23526: 20875: 180: // Test specific image handling
23527: 20876: 181: const testCase = {
23528: 20877: 182:   imageUrl: "https://example.com/card.jpg",
23529: 20878: 183:   groupId: "23783",
23530: 20879: 184:   productId: 477236
23531: 20880: 185: };
23532: 20881: 186: 
23533: 20882: 187: await testImageProcessing(testCase);
23534: 20883: 188: ```
23535: 20884: 189: 
23536: 20885: 190: ### Sync System Testing
23537: 20886: 191: 
23538: 20887: 192: ```bash
23539: 20888: 193: # Basic validation
23540: 20889: 194: npm run validate-sync
23541: 20890: 195: 
23542: 20891: 196: # Advanced validation with options
23543: 20892: 197: npm run validate-sync -- --limit 10 --verbose --groupId 23783
23544: 20893: 198: ```
23545: 20894: 199: 
23546: 20895: 200: ## System Observation
23547: 20896: 201: 
23548: 20897: 202: ### Health Monitoring
23549: 20898: 203: 
23550: 20899: 204: ```typescript
23551: 20900: 205: // Endpoint: GET /healthCheck
23552: 20901: 206: const healthResponse = {
23553: 20902: 207:   status: "healthy",
23554: 20903: 208:   timestamp: "2024-11-22T01:47:16.617Z",
23555: 20904: 209:   version: "1.0.0"
23556: 20905: 210: };
23557: 20906: 211: ```
23558: 20907: 212: 
23559: 20908: 213: ### Runtime Monitoring
23560: 20909: 214: 
23561: 20910: 215: ```typescript
23562: 20911: 216: // Monitor sync operations
23563: 20912: 217: const syncStats = {
23564: 20913: 218:   processedItems: 0,
23565: 20914: 219:   totalItems: 100,
23566: 20915: 220:   startTime: Date.now(),
23567: 20916: 221:   errors: []
23568: 20917: 222: };
23569: 20918: 223: 
23570: 20919: 224: // Update monitoring stats
23571: 20920: 225: function updateStats(processed: number): void {
23572: 20921: 226:   syncStats.processedItems = processed;
23573: 20922: 227:   const elapsed = Date.now() - syncStats.startTime;
23574: 20923: 228:   const rate = processed / (elapsed / 1000);
23575: 20924: 229:   console.log(`Processing rate: ${rate.toFixed(2)} items/second`);
23576: 20925: 230: }
23577: 20926: 231: ```
23578: 20927: 232: 
23579: 20928: 233: ## Operational Procedures
23580: 20929: 234: 
23581: 20930: 235: ### Sync Process Workflow
23582: 20931: 236: 
23583: 20932: 237: 1. Initialize sync operation
23584: 20933: 238: 
23585: 20934: 239: ```typescript
23586: 20935: 240: const syncOptions = {
23587: 20936: 241:   dryRun: false,
23588: 20937: 242:   limit: undefined,
23589: 20938: 243:   groupId: undefined
23590: 20939: 244: };
23591: 20940: 245: ```
23592: 20941: 246: 
23593: 20942: 247: 1. Fetch and validate data
23594: 20943: 248: 
23595: 20944: 249: ```typescript
23596: 20945: 250: const rawData = await fetchData();
23597: 20946: 251: const validatedData = await validateData(rawData);
23598: 20947: 252: ```
23599: 20948: 253: 
23600: 20949: 254: 1. Process updates
23601: 20950: 255: 
23602: 20951: 256: ```typescript
23603: 20952: 257: await processBatch(validatedData, async (batch) => {
23604: 20953: 258:   await updateDatabase(batch);
23605: 20954: 259: });
23606: 20955: 260: ```
23607: 20956: 261: 
23608: 20957: 262: 1. Handle image processing
23609: 20958: 263: 
23610: 20959: 264: ```typescript
23611: 20960: 265: await processImages(validatedData, {
23612: 20961: 266:   compression: true,
23613: 20962: 267:   validateMetadata: true
23614: 20963: 268: });
23615: 20964: 269: ```
23616: 20965: 270: 
23617: 20966: 271: 1. Update cache system
23618: 20967: 272: 
23619: 20968: 273: ```typescript
23620: 20969: 274: await updateCacheEntries(processedData);
23621: 20970: 275: ```
23622: 20971: 276: 
23623: 20972: 277: ### Image Pipeline Workflow
23624: 20973: 278: 
23625: 20974: 279: #### Image Acquisition and Validation
23626: 20975: 280: 
23627: 20976: 281: ```typescript
23628: 20977: 282: const imageHandler = new ImageHandler();
23629: 20978: 283: const validator = new ImageValidator();
23630: 20979: 284: 
23631: 20980: 285: const buffer = await imageHandler.downloadImage(url);
23632: 20981: 286: const validationResult = await validator.validateImage(buffer);
23633: 20982: 287: ```
23634: 20983: 288: 
23635: 20984: 289: #### Image Processing and Storage
23636: 20985: 290: 
23637: 20986: 291: ```typescript
23638: 20987: 292: const compressor = new ImageCompressor();
23639: 20988: 293: const result = await compressor.compress(buffer, {
23640: 20989: 294:   quality: 85,
23641: 20990: 295:   maxWidth: 800
23642: 20991: 296: });
23643: 20992: 297: 
23644: 20993: 298: await storageService.uploadImage(result.buffer, {
23645: 20994: 299:   metadata: result.info
23646: 20995: 300: });
23647: 20996: 301: ```
23648: 20997: 302: 
23649: 20998: 303: ## System Optimization
23650: 20999: 304: 
23651: 21000: 305: ### Database Performance
23652: 21001: 306: 
23653: 21002: 307: ```typescript
23654: 21003: 308: // Use batch operations for multiple updates
23655: 21004: 309: const batch = db.batch();
23656: 21005: 310: updates.forEach(update => {
23657: 21006: 311:   const ref = db.collection('cards').doc(update.id);
23658: 21007: 312:   batch.update(ref, update.data);
23659: 21008: 313: });
23660: 21009: 314: await batch.commit();
23661: 21010: 315: ```
23662: 21011: 316: 
23663: 21012: 317: ### Resource Management
23664: 21013: 318: 
23665: 21014: 319: ```typescript
23666: 21015: 320: // Implement cleanup for large operations
23667: 21016: 321: async function cleanupResources(): Promise<void> {
23668: 21017: 322:   await imageCache.clear();
23669: 21018: 323:   global.gc && global.gc();
23670: 21019: 324: }
23671: 21020: 325: ```
23672: 21021: 326: 
23673: 21022: 327: ### Request Rate Management
23674: 21023: 328: 
23675: 21024: 329: ```typescript
23676: 21025: 330: const rateLimiter = {
23677: 21026: 331:   tokens: 100,
23678: 21027: 332:   refillRate: 10,
23679: 21028: 333:   interval: 1000,
23680: 21029: 334: 
23681: 21030: 335:   async acquire(): Promise<boolean> {
23682: 21031: 336:     if (this.tokens > 0) {
23683: 21032: 337:       this.tokens--;
23684: 21033: 338:       return true;
23685: 21034: 339:     }
23686: 21035: 340:     return false;
23687: 21036: 341:   }
23688: 21037: 342: };
23689: 21038: 343: ```
23690: 21039: 344: 
23691: 21040: 345: ## Security Controls
23692: 21041: 346: 
23693: 21042: 347: ### Input Validation
23694: 21043: 348: 
23695: 21044: 349: ```typescript
23696: 21045: 350: // Implement strict type checking
23697: 21046: 351: function validateSyncOptions(options: unknown): asserts options is SyncOptions {
23698: 21047: 352:   if (!options || typeof options !== "object") {
23699: 21048: 353:     throw new Error("Invalid options object");
23700: 21049: 354:   }
23701: 21050: 355: 
23702: 21051: 356:   const opts = options as Record<string, unknown>;
23703: 21052: 357:  
23704: 21053: 358:   if (opts.limit && typeof opts.limit !== "number") {
23705: 21054: 359:     throw new Error("Limit must be a number");
23706: 21055: 360:   }
23707: 21056: 361: 
23708: 21057: 362:   if (opts.groupId && typeof opts.groupId !== "string") {
23709: 21058: 363:     throw new Error("GroupId must be a string");
23710: 21059: 364:   }
23711: 21060: 365: }
23712: 21061: 366: ```
23713: 21062: 367: 
23714: 21063: 368: ### Authentication
23715: 21064: 369: 
23716: 21065: 370: ```typescript
23717: 21066: 371: // Verify Firebase authentication
23718: 21067: 372: async function verifyAuth(req: Request): Promise<void> {
23719: 21068: 373:   const token = req.headers.authorization?.split("Bearer ")[1];
23720: 21069: 374:   if (!token) {
23721: 21070: 375:     throw new Error("No authentication token provided");
23722: 21071: 376:   }
23723: 21072: 377: 
23724: 21073: 378:   try {
23725: 21074: 379:     await admin.auth().verifyIdToken(token);
23726: 21075: 380:   } catch (error) {
23727: 21076: 381:     throw new Error("Invalid authentication token");
23728: 21077: 382:   }
23729: 21078: 383: }
23730: 21079: 384: ```
23731: 21080: 385: 
23732: 21081: 386: ## Advanced Patterns
23733: 21082: 387: 
23734: 21083: 388: ### Custom Synchronization
23735: 21084: 389: 
23736: 21085: 390: ```typescript
23737: 21086: 391: // Implement custom sync logic
23738: 21087: 392: async function customSync<T extends BaseEntity>(
23739: 21088: 393:   fetcher: DataFetcher<T>,
23740: 21089: 394:   processor: DataProcessor<T>,
23741: 21090: 395:   options: SyncOptions
23742: 21091: 396: ): Promise<SyncMetadata> {
23743: 21092: 397:   const logger = new SyncLogger({
23744: 21093: 398:     type: "custom",
23745: 21094: 399:     ...options
23746: 21095: 400:   });
23747: 21096: 401: 
23748: 21097: 402:   await logger.start();
23749: 21098: 403:  
23750: 21099: 404:   try {
23751: 21100: 405:     const data = await fetcher.fetch();
23752: 21101: 406:     const processed = await processor.process(data);
23753: 21102: 407:     return {
23754: 21103: 408:       status: "success",
23755: 21104: 409:       processed: processed.length,
23756: 21105: 410:       timestamp: new Date()
23757: 21106: 411:     };
23758: 21107: 412:   } catch (error) {
23759: 21108: 413:     await logger.logError(error);
23760: 21109: 414:     throw error;
23761: 21110: 415:   } finally {
23762: 21111: 416:     await logger.finish();
23763: 21112: 417:   }
23764: 21113: 418: }
23765: 21114: 419: ```
23766: 21115: 420: 
23767: 21116: 421: ### Advanced Caching
23768: 21117: 422: 
23769: 21118: 423: ```typescript
23770: 21119: 424: // Implement hierarchical caching
23771: 21120: 425: class HierarchicalCache<T> {
23772: 21121: 426:   private l1Cache = new Map<string, T>();
23773: 21122: 427:   private l2Cache: LRUCache<string, T>;
23774: 21123: 428: 
23775: 21124: 429:   constructor(options: CacheOptions) {
23776: 21125: 430:     this.l2Cache = new LRUCache<string, T>({
23777: 21126: 431:       max: options.maxSize,
23778: 21127: 432:       ttl: options.ttl
23779: 21128: 433:     });
23780: 21129: 434:   }
23781: 21130: 435: 
23782: 21131: 436:   async get(key: string): Promise<T | undefined> {
23783: 21132: 437:     // Check L1 cache first
23784: 21133: 438:     const l1Result = this.l1Cache.get(key);
23785: 21134: 439:     if (l1Result) return l1Result;
23786: 21135: 440: 
23787: 21136: 441:     // Check L2 cache
23788: 21137: 442:     const l2Result = this.l2Cache.get(key);
23789: 21138: 443:     if (l2Result) {
23790: 21139: 444:       this.l1Cache.set(key, l2Result);
23791: 21140: 445:       return l2Result;
23792: 21141: 446:     }
23793: 21142: 447: 
23794: 21143: 448:     return undefined;
23795: 21144: 449:   }
23796: 21145: 450: }
23797: 21146: 451: ```
23798: 21147: 452: 
23799: 21148: 453: ### Advanced Batch Processing
23800: 21149: 454: 
23801: 21150: 455: ```typescript
23802: 21151: 456: // Implement adaptive batch sizing
23803: 21152: 457: class AdaptiveBatchProcessor {
23804: 21153: 458:   private optimalBatchSize: number = 100;
23805: 21154: 459:   private processingTimes: number[] = [];
23806: 21155: 460: 
23807: 21156: 461:   async processBatch<T>(
23808: 21157: 462:     items: T[],
23809: 21158: 463:     processor: (batch: T[]) => Promise<void>
23810: 21159: 464:   ): Promise<void> {
23811: 21160: 465:     for (let i = 0; i < items.length; i += this.optimalBatchSize) {
23812: 21161: 466:       const start = Date.now();
23813: 21162: 467:       const batch = items.slice(i, i + this.optimalBatchSize);
23814: 21163: 468:      
23815: 21164: 469:       await processor(batch);
23816: 21165: 470:      
23817: 21166: 471:       const duration = Date.now() - start;
23818: 21167: 472:       this.adjustBatchSize(duration);
23819: 21168: 473:     }
23820: 21169: 474:   }
23821: 21170: 475: 
23822: 21171: 476:   private adjustBatchSize(lastProcessingTime: number): void {
23823: 21172: 477:     this.processingTimes.push(lastProcessingTime);
23824: 21173: 478:     if (this.processingTimes.length >= 5) {
23825: 21174: 479:       const avgTime = this.calculateAverage(this.processingTimes);
23826: 21175: 480:       if (avgTime > 1000) {
23827: 21176: 481:         this.optimalBatchSize = Math.max(10, this.optimalBatchSize * 0.8);
23828: 21177: 482:       } else if (avgTime < 500) {
23829: 21178: 483:         this.optimalBatchSize = Math.min(1000, this.optimalBatchSize * 1.2);
23830: 21179: 484:       }
23831: 21180: 485:       this.processingTimes = [];
23832: 21181: 486:     }
23833: 21182: 487:   }
23834: 21183: 488: }
23835: 21184: 489: ```
23836: 21185: 490: 
23837: 21186: 491: ### Recovery Strategies
23838: 21187: 492: 
23839: 21188: 493: ```typescript
23840: 21189: 494: // Implement progressive retry with backoff
23841: 21190: 495: class RetryStrategy {
23842: 21191: 496:   private static readonly MAX_RETRIES = 3;
23843: 21192: 497:   private static readonly BASE_DELAY = 1000;
23844: 21193: 498: 
23845: 21194: 499:   async executeWithRetry<T>(
23846: 21195: 500:     operation: () => Promise<T>,
23847: 21196: 501:     context: string
23848: 21197: 502:   ): Promise<T> {
23849: 21198: 503:     let lastError: Error;
23850: 21199: 504:    
23851: 21200: 505:     for (let attempt = 0; attempt < RetryStrategy.MAX_RETRIES; attempt++) {
23852: 21201: 506:       try {
23853: 21202: 507:         return await operation();
23854: 21203: 508:       } catch (error) {
23855: 21204: 509:         lastError = error instanceof Error ? error : new Error(String(error));
23856: 21205: 510:         const delay = Math.pow(2, attempt) * RetryStrategy.BASE_DELAY;
23857: 21206: 511:        
23858: 21207: 512:         await logWarning(
23859: 21208: 513:           `Operation failed, attempting retry ${attempt + 1}/${RetryStrategy.MAX_RETRIES}`,
23860: 21209: 514:           { context, error: lastError.message }
23861: 21210: 515:         );
23862: 21211: 516:        
23863: 21212: 517:         await new Promise(resolve => setTimeout(resolve, delay));
23864: 21213: 518:       }
23865: 21214: 519:     }
23866: 21215: 520:    
23867: 21216: 521:     throw lastError!;
23868: 21217: 522:   }
23869: 21218: 523: }
23870: 21219: 524: ```
23871: 21220: 525: 
23872: 21221: 526: ## Reference Materials
23873: 21222: 527: 
23874: 21223: 528: ### CLI Commands
23875: 21224: 529: 
23876: 21225: 530: ```bash
23877: 21226: 531: # Build the project
23878: 21227: 532: npm run build
23879: 21228: 533: 
23880: 21229: 534: # Run linting
23881: 21230: 535: npm run lint
23882: 21231: 536: 
23883: 21232: 537: # Fix linting issues
23884: 21233: 538: npm run lint:fix
23885: 21234: 539: 
23886: 21235: 540: # Run tests
23887: 21236: 541: npm run test:images
23888: 21237: 542: 
23889: 21238: 543: # Deploy functions
23890: 21239: 544: npm run deploy
23891: 21240: 545: ```
23892: 21241: 546: 
23893: 21242: 547: ### Documentation Links
23894: 21243: 548: 
23895: 21244: 549: - [Architecture Overview](./architecture.md)
23896: 21245: 550: - [API Documentation](./api/index.md)
23897: 21246: 551: - [Troubleshooting Guide](./troubleshooting.md)
23898: 21247: 552: - [Security Guidelines](./security.md)
23899: 21248: 553: - [Performance Guide](./performance.md)
23900: 21249: </file>
23901: 21250: 
23902: 21251: <file path="utils/batch.md">
23903: 21252:   1: # Batch Processing Utility
23904: 21253:   2: 
23905: 21254:   3: ## Overview
23906: 21255:   4: 
23907: 21256:   5: The Batch Processor (`batch.ts`) manages efficient processing of large data sets through controlled batching. It provides configurable batch sizes, concurrent processing, and progress tracking for synchronization operations.
23908: 21257:   6: 
23909: 21258:   7: ## Core Features
23910: 21259:   8: 
23911: 21260:   9: - Configurable batch sizes
23912: 21261:  10: - Concurrent processing
23913: 21262:  11: - Progress tracking
23914: 21263:  12: - Error handling
23915: 21264:  13: - Memory management
23916: 21265:  14: - Rate limiting
23917: 21266:  15: 
23918: 21267:  16: ## Main Interfaces
23919: 21268:  17: 
23920: 21269:  18: ### Batch Options
23921: 21270:  19: 
23922: 21271:  20: ```typescript
23923: 21272:  21: interface BatchOptions {
23924: 21273:  22:   batchSize?: number;
23925: 21274:  23:   concurrency?: number;
23926: 21275:  24:   retries?: number;
23927: 21276:  25:   backoff?: number;
23928: 21277:  26:   onProgress?: (progress: BatchProgress) => void;
23929: 21278:  27:   abortSignal?: AbortSignal;
23930: 21279:  28: }
23931: 21280:  29: ```
23932: 21281:  30: 
23933: 21282:  31: ### Progress Interface
23934: 21283:  32: 
23935: 21284:  33: ```typescript
23936: 21285:  34: interface BatchProgress {
23937: 21286:  35:   total: number;
23938: 21287:  36:   processed: number;
23939: 21288:  37:   failed: number;
23940: 21289:  38:   currentBatch: number;
23941: 21290:  39:   totalBatches: number;
23942: 21291:  40:   percentage: number;
23943: 21292:  41:   estimatedTimeRemaining?: number;
23944: 21293:  42: }
23945: 21294:  43: ```
23946: 21295:  44: 
23947: 21296:  45: ## Core Methods
23948: 21297:  46: 
23949: 21298:  47: ### Batch Processing
23950: 21299:  48: 
23951: 21300:  49: ```typescript
23952: 21301:  50: export async function processBatch<T>(
23953: 21302:  51:   items: T[],
23954: 21303:  52:   processor: (batch: T[]) => Promise<void>,
23955: 21304:  53:   options: BatchOptions = {}
23956: 21305:  54: ): Promise<BatchResult> {
23957: 21306:  55:   const {
23958: 21307:  56:     batchSize = 100,
23959: 21308:  57:     concurrency = 1,
23960: 21309:  58:     retries = 3,
23961: 21310:  59:     onProgress
23962: 21311:  60:   } = options;
23963: 21312:  61: 
23964: 21313:  62:   const batches = chunk(items, batchSize);
23965: 21314:  63:   let processed = 0;
23966: 21315:  64:   let failed = 0;
23967: 21316:  65: 
23968: 21317:  66:   for (let i = 0; i < batches.length; i++) {
23969: 21318:  67:     try {
23970: 21319:  68:       await processor(batches[i]);
23971: 21320:  69:       processed += batches[i].length;
23972: 21321:  70:     } catch (error) {
23973: 21322:  71:       failed += batches[i].length;
23974: 21323:  72:       await handleBatchError(error, retries);
23975: 21324:  73:     }
23976: 21325:  74: 
23977: 21326:  75:     if (onProgress) {
23978: 21327:  76:       onProgress({
23979: 21328:  77:         total: items.length,
23980: 21329:  78:         processed,
23981: 21330:  79:         failed,
23982: 21331:  80:         currentBatch: i + 1,
23983: 21332:  81:         totalBatches: batches.length,
23984: 21333:  82:         percentage: (processed + failed) / items.length * 100
23985: 21334:  83:       });
23986: 21335:  84:     }
23987: 21336:  85:   }
23988: 21337:  86: 
23989: 21338:  87:   return { processed, failed };
23990: 21339:  88: }
23991: 21340:  89: ```
23992: 21341:  90: 
23993: 21342:  91: ## Implementation Examples
23994: 21343:  92: 
23995: 21344:  93: ### Basic Usage
23996: 21345:  94: 
23997: 21346:  95: ```typescript
23998: 21347:  96: const items = await fetchItems();
23999: 21348:  97: const result = await processBatch(
24000: 21349:  98:   items,
24001: 21350:  99:   async (batch) => {
24002: 21351: 100:     await processItems(batch);
24003: 21352: 101:   },
24004: 21353: 102:   {
24005: 21354: 103:     batchSize: 50,
24006: 21355: 104:     onProgress: (progress) => {
24007: 21356: 105:       console.log(
24008: 21357: 106:         `Processed ${progress.processed}/${progress.total} items`
24009: 21358: 107:       );
24010: 21359: 108:     }
24011: 21360: 109:   }
24012: 21361: 110: );
24013: 21362: 111: ```
24014: 21363: 112: 
24015: 21364: 113: ### With Concurrency
24016: 21365: 114: 
24017: 21366: 115: ```typescript
24018: 21367: 116: const processConcurrentBatches = async <T>(
24019: 21368: 117:   items: T[],
24020: 21369: 118:   processor: (item: T) => Promise<void>
24021: 21370: 119: ): Promise<void> => {
24022: 21371: 120:   await processBatch(items, async (batch) => {
24023: 21372: 121:     await Promise.all(
24024: 21373: 122:       batch.map(item => processor(item))
24025: 21374: 123:     );
24026: 21375: 124:   }, {
24027: 21376: 125:     batchSize: 25,
24028: 21377: 126:     concurrency: 3
24029: 21378: 127:   });
24030: 21379: 128: };
24031: 21380: 129: ```
24032: 21381: 130: 
24033: 21382: 131: ## Error Management
24034: 21383: 132: 
24035: 21384: 133: ### Retry Logic
24036: 21385: 134: 
24037: 21386: 135: ```typescript
24038: 21387: 136: async function handleBatchError(
24039: 21388: 137:   error: unknown,
24040: 21389: 138:   retriesLeft: number,
24041: 21390: 139:   backoff: number = 1000
24042: 21391: 140: ): Promise<void> {
24043: 21392: 141:   if (retriesLeft <= 0) {
24044: 21393: 142:     throw error;
24045: 21394: 143:   }
24046: 21395: 144: 
24047: 21396: 145:   await new Promise(resolve => 
24048: 21397: 146:     setTimeout(resolve, backoff * (4 - retriesLeft))
24049: 21398: 147:   );
24050: 21399: 148:  
24051: 21400: 149:   return handleBatchError(
24052: 21401: 150:     error,
24053: 21402: 151:     retriesLeft - 1,
24054: 21403: 152:     backoff
24055: 21404: 153:   );
24056: 21405: 154: }
24057: 21406: 155: ```
24058: 21407: 156: 
24059: 21408: 157: ### Error Collection
24060: 21409: 158: 
24061: 21410: 159: ```typescript
24062: 21411: 160: interface BatchError {
24063: 21412: 161:   batchIndex: number;
24064: 21413: 162:   items: unknown[];
24065: 21414: 163:   error: Error;
24066: 21415: 164: }
24067: 21416: 165: 
24068: 21417: 166: const collectErrors = async <T>(
24069: 21418: 167:   items: T[],
24070: 21419: 168:   processor: (batch: T[]) => Promise<void>
24071: 21420: 169: ): Promise<BatchError[]> => {
24072: 21421: 170:   const errors: BatchError[] = [];
24073: 21422: 171:  
24074: 21423: 172:   await processBatch(items, async (batch, index) => {
24075: 21424: 173:     try {
24076: 21425: 174:       await processor(batch);
24077: 21426: 175:     } catch (error) {
24078: 21427: 176:       errors.push({
24079: 21428: 177:         batchIndex: index,
24080: 21429: 178:         items: batch,
24081: 21430: 179:         error: error instanceof Error ? error : new Error(String(error))
24082: 21431: 180:       });
24083: 21432: 181:     }
24084: 21433: 182:   });
24085: 21434: 183: 
24086: 21435: 184:   return errors;
24087: 21436: 185: };
24088: 21437: 186: ```
24089: 21438: 187: 
24090: 21439: 188: ## Memory Management
24091: 21440: 189: 
24092: 21441: 190: ### Chunking Function
24093: 21442: 191: 
24094: 21443: 192: ```typescript
24095: 21444: 193: function chunk<T>(
24096: 21445: 194:   items: T[], 
24097: 21446: 195:   size: number
24098: 21447: 196: ): T[][] {
24099: 21448: 197:   const chunks: T[][] = [];
24100: 21449: 198:  
24101: 21450: 199:   for (let i = 0; i < items.length; i += size) {
24102: 21451: 200:     chunks.push(items.slice(i, i + size));
24103: 21452: 201:   }
24104: 21453: 202:  
24105: 21454: 203:   return chunks;
24106: 21455: 204: }
24107: 21456: 205: ```
24108: 21457: 206: 
24109: 21458: 207: ### Resource Cleanup
24110: 21459: 208: 
24111: 21460: 209: ```typescript
24112: 21461: 210: async function processWithCleanup<T>(
24113: 21462: 211:   items: T[],
24114: 21463: 212:   processor: (batch: T[]) => Promise<void>
24115: 21464: 213: ): Promise<void> {
24116: 21465: 214:   let currentBatch: T[] = [];
24117: 21466: 215:  
24118: 21467: 216:   try {
24119: 21468: 217:     await processBatch(items, async (batch) => {
24120: 21469: 218:       currentBatch = batch;
24121: 21470: 219:       await processor(batch);
24122: 21471: 220:       currentBatch = [];
24123: 21472: 221:     });
24124: 21473: 222:   } finally {
24125: 21474: 223:     currentBatch = [];
24126: 21475: 224:   }
24127: 21476: 225: }
24128: 21477: 226: ```
24129: 21478: 227: 
24130: 21479: 228: ## Progress Tracking
24131: 21480: 229: 
24132: 21481: 230: ### Progress Calculator
24133: 21482: 231: 
24134: 21483: 232: ```typescript
24135: 21484: 233: function calculateProgress(
24136: 21485: 234:   processed: number,
24137: 21486: 235:   total: number,
24138: 21487: 236:   startTime: number
24139: 21488: 237: ): BatchProgress {
24140: 21489: 238:   const elapsed = Date.now() - startTime;
24141: 21490: 239:   const rate = processed / (elapsed / 1000);
24142: 21491: 240:   const remaining = total - processed;
24143: 21492: 241:  
24144: 21493: 242:   return {
24145: 21494: 243:     processed,
24146: 21495: 244:     total,
24147: 21496: 245:     percentage: (processed / total) * 100,
24148: 21497: 246:     estimatedTimeRemaining: remaining / rate
24149: 21498: 247:   };
24150: 21499: 248: }
24151: 21500: 249: ```
24152: 21501: 250: 
24153: 21502: 251: ## Best Practices
24154: 21503: 252: 
24155: 21504: 253: ### Batch Size Selection
24156: 21505: 254: 
24157: 21506: 255: - Consider memory constraints
24158: 21507: 256: - Balance throughput and overhead
24159: 21508: 257: - Monitor processing times
24160: 21509: 258: 
24161: 21510: 259: ### Error Handling
24162: 21511: 260: 
24163: 21512: 261: - Implement proper retries
24164: 21513: 262: - Log batch failures
24165: 21514: 263: - Maintain item context
24166: 21515: 264: 
24167: 21516: 265: ### Resource Management
24168: 21517: 266: 
24169: 21518: 267: - Clean up after processing
24170: 21519: 268: - Monitor memory usage
24171: 21520: 269: - Handle aborted operations
24172: 21521: 270: 
24173: 21522: 271: ## Related Components
24174: 21523: 272: 
24175: 21524: 273: - [Progress Tracker](./progress)
24176: 21525: 274: - [Error Handler](./error-handling)
24177: 21526: 275: - [Logger](./logging)
24178: 21527: 276: 
24179: 21528: 277: ## Troubleshooting
24180: 21529: 278: 
24181: 21530: 279: ### Common Issues
24182: 21531: 280: 
24183: 21532: 281: 1. Memory Problems:
24184: 21533: 282:    - Reduce batch size
24185: 21534: 283:    - Implement cleanup
24186: 21535: 284:    - Monitor heap usage
24187: 21536: 285: 
24188: 21537: 286: 2. Performance Issues:
24189: 21538: 287:    - Adjust concurrency
24190: 21539: 288:    - Optimize batch size
24191: 21540: 289:    - Monitor processing rates
24192: 21541: 290: 
24193: 21542: 291: 3. Error Handling:
24194: 21543: 292:    - Check retry logic
24195: 21544: 293:    - Verify error collection
24196: 21545: 294:    - Monitor failure patterns
24197: 21546: </file>
24198: 21547: 
24199: 21548: <file path="utils/cache.md">
24200: 21549:   1: # Cache System
24201: 21550:   2: 
24202: 21551:   3: ## Overview
24203: 21552:   4: 
24204: 21553:   5: The Cache System provides efficient memory caching for card data, prices, and images. It implements an LRU (Least Recently Used) caching strategy and includes specialized caching for different data types.
24205: 21554:   6: 
24206: 21555:   7: ## Components
24207: 21556:   8: 
24208: 21557:   9: The system consists of two main cache implementations:
24209: 21558:  10: 
24210: 21559:  11: 1. Basic LRU Cache (`cache.ts`)
24211: 21560:  12: 2. Specialized Image Cache (`imageCache.ts`)
24212: 21561:  13: 
24213: 21562:  14: ## Basic Cache Implementation
24214: 21563:  15: 
24215: 21564:  16: ### Configuration
24216: 21565:  17: 
24217: 21566:  18: ```typescript
24218: 21567:  19: const options = {
24219: 21568:  20:   max: 500,                // Maximum number of items
24220: 21569:  21:   ttl: 1000 * 60 * 60,    // Time to live: 1 hour
24221: 21570:  22: };
24222: 21571:  23: 
24223: 21572:  24: export const cardCache = new LRUCache<string, CardProduct>(options);
24224: 21573:  25: ```
24225: 21574:  26: 
24226: 21575:  27: ### Basic Key Generation
24227: 21576:  28: 
24228: 21577:  29: ```typescript
24229: 21578:  30: export type CacheType = "card" | "price" | "image";
24230: 21579:  31: 
24231: 21580:  32: export const getCacheKey = (type: CacheType, id: number): string => {
24232: 21581:  33:   return `${type}:${id}`;
24233: 21582:  34: };
24234: 21583:  35: ```
24235: 21584:  36: 
24236: 21585:  37: ## Image Cache Implementation
24237: 21586:  38: 
24238: 21587:  39: ### Class Structure
24239: 21588:  40: 
24240: 21589:  41: ```typescript
24241: 21590:  42: export class ImageCache {
24242: 21591:  43:   private metadataCache: LRUCache<string, ImageMetadata>;
24243: 21592:  44:   private bufferCache: LRUCache<string, Buffer>;
24244: 21593:  45:   private existsCache: LRUCache<string, boolean>;
24245: 21594:  46:   private stats: CacheStats;
24246: 21595:  47: }
24247: 21596:  48: ```
24248: 21597:  49: 
24249: 21598:  50: ### Cache Configuration
24250: 21599:  51: 
24251: 21600:  52: ```typescript
24252: 21601:  53: constructor() {
24253: 21602:  54:   this.metadataCache = new LRUCache<string, ImageMetadata>({
24254: 21603:  55:     max: 1000,
24255: 21604:  56:     ttl: 1000 * 60 * 60,  // 1 hour
24256: 21605:  57:     updateAgeOnGet: true,
24257: 21606:  58:   });
24258: 21607:  59: 
24259: 21608:  60:   this.bufferCache = new LRUCache<string, Buffer>({
24260: 21609:  61:     max: 100,
24261: 21610:  62:     ttl: 1000 * 60 * 5,   // 5 minutes
24262: 21611:  63:     updateAgeOnGet: true,
24263: 21612:  64:     maxSize: 50 * 1024 * 1024,  // 50MB max cache size
24264: 21613:  65:     sizeCalculation: (buffer) => buffer.length,
24265: 21614:  66:   });
24266: 21615:  67: 
24267: 21616:  68:   this.existsCache = new LRUCache<string, boolean>({
24268: 21617:  69:     max: 1000,
24269: 21618:  70:     ttl: 1000 * 60 * 60,  // 1 hour
24270: 21619:  71:     updateAgeOnGet: true,
24271: 21620:  72:   });
24272: 21621:  73: }
24273: 21622:  74: ```
24274: 21623:  75: 
24275: 21624:  76: ## Usage Examples
24276: 21625:  77: 
24277: 21626:  78: ### Basic Cache Usage
24278: 21627:  79: 
24279: 21628:  80: ```typescript
24280: 21629:  81: // Store card data
24281: 21630:  82: const cardId = 477236;
24282: 21631:  83: const cacheKey = getCacheKey("card", cardId);
24283: 21632:  84: cardCache.set(cacheKey, cardData);
24284: 21633:  85: 
24285: 21634:  86: // Retrieve card data
24286: 21635:  87: const cachedCard = cardCache.get(cacheKey);
24287: 21636:  88: if (cachedCard) {
24288: 21637:  89:   return cachedCard;
24289: 21638:  90: }
24290: 21639:  91: ```
24291: 21640:  92: 
24292: 21641:  93: ### Image Cache Usage
24293: 21642:  94: 
24294: 21643:  95: ```typescript
24295: 21644:  96: const imageCache = new ImageCache();
24296: 21645:  97: 
24297: 21646:  98: // Get metadata
24298: 21647:  99: const metadataKey = imageCache.getMetadataCacheKey(groupId, productId, false);
24299: 21648: 100: const metadata = await imageCache.getMetadata(metadataKey);
24300: 21649: 101: 
24301: 21650: 102: // Get image buffer
24302: 21651: 103: const bufferKey = imageCache.getBufferCacheKey(imageUrl);
24303: 21652: 104: const buffer = await imageCache.getBuffer(bufferKey);
24304: 21653: 105: 
24305: 21654: 106: // Check existence
24306: 21655: 107: const existsKey = imageCache.getExistsCacheKey(groupId, productId, false);
24307: 21656: 108: const exists = imageCache.getExists(existsKey);
24308: 21657: 109: ```
24309: 21658: 110: 
24310: 21659: 111: ## Image Cache Key Types
24311: 21660: 112: 
24312: 21661: 113: ### Metadata Keys
24313: 21662: 114: 
24314: 21663: 115: ```typescript
24315: 21664: 116: getMetadataCacheKey(
24316: 21665: 117:   groupId: string,
24317: 21666: 118:   productId: number,
24318: 21667: 119:   isHighRes: boolean
24319: 21668: 120: ): string {
24320: 21669: 121:   return `metadata:${groupId}:${productId}:${isHighRes ? "high" : "original"}`;
24321: 21670: 122: }
24322: 21671: 123: ```
24323: 21672: 124: 
24324: 21673: 125: ### Buffer Keys
24325: 21674: 126: 
24326: 21675: 127: ```typescript
24327: 21676: 128: getBufferCacheKey(url: string): string {
24328: 21677: 129:   return `buffer:${url}`;
24329: 21678: 130: }
24330: 21679: 131: ```
24331: 21680: 132: 
24332: 21681: 133: ### Existence Check Keys
24333: 21682: 134: 
24334: 21683: 135: ```typescript
24335: 21684: 136: getExistsCacheKey(
24336: 21685: 137:   groupId: string,
24337: 21686: 138:   productId: number,
24338: 21687: 139:   isHighRes: boolean
24339: 21688: 140: ): string {
24340: 21689: 141:   return `exists:${groupId}:${productId}:${isHighRes ? "high" : "original"}`;
24341: 21690: 142: }
24342: 21691: 143: ```
24343: 21692: 144: 
24344: 21693: 145: ## Statistics Tracking
24345: 21694: 146: 
24346: 21695: 147: ```typescript
24347: 21696: 148: interface CacheStats {
24348: 21697: 149:   hits: number;
24349: 21698: 150:   misses: number;
24350: 21699: 151:   totalRequests: number;
24351: 21700: 152: }
24352: 21701: 153: 
24353: 21702: 154: getStats(): CacheStats {
24354: 21703: 155:   return {...this.stats};
24355: 21704: 156: }
24356: 21705: 157: ```
24357: 21706: 158: 
24358: 21707: 159: ## Cache Management
24359: 21708: 160: 
24360: 21709: 161: ### Clearing Cache
24361: 21710: 162: 
24362: 21711: 163: ```typescript
24363: 21712: 164: clear(): void {
24364: 21713: 165:   this.metadataCache.clear();
24365: 21714: 166:   this.bufferCache.clear();
24366: 21715: 167:   this.existsCache.clear();
24367: 21716: 168:   this.stats = {
24368: 21717: 169:     hits: 0,
24369: 21718: 170:     misses: 0,
24370: 21719: 171:     totalRequests: 0,
24371: 21720: 172:   };
24372: 21721: 173: }
24373: 21722: 174: ```
24374: 21723: 175: 
24375: 21724: 176: ### Performance Monitoring
24376: 21725: 177: 
24377: 21726: 178: ```typescript
24378: 21727: 179: async getMetadata(key: string): Promise<ImageMetadata | undefined> {
24379: 21728: 180:   this.stats.totalRequests++;
24380: 21729: 181:   const value = this.metadataCache.get(key);
24381: 21730: 182:   if (value) {
24382: 21731: 183:     this.stats.hits++;
24383: 21732: 184:     await logInfo("Cache hit: metadata", {
24384: 21733: 185:       key,
24385: 21734: 186:       timestamp: new Date().toISOString(),
24386: 21735: 187:     });
24387: 21736: 188:   } else {
24388: 21737: 189:     this.stats.misses++;
24389: 21738: 190:   }
24390: 21739: 191:   return value;
24391: 21740: 192: }
24392: 21741: 193: ```
24393: 21742: 194: 
24394: 21743: 195: ## Best Practices
24395: 21744: 196: 
24396: 21745: 197: 1. **Memory Management**:
24397: 21746: 198:    - Set appropriate cache sizes
24398: 21747: 199:    - Monitor memory usage
24399: 21748: 200:    - Implement TTL for all cached items
24400: 21749: 201: 
24401: 21750: 202: 2. **Performance Optimization**:
24402: 21751: 203:    - Use buffer cache for frequently accessed images
24403: 21752: 204:    - Implement size limits for buffer cache
24404: 21753: 205:    - Track cache statistics
24405: 21754: 206: 
24406: 21755: 207: 3. **Error Handling**:
24407: 21756: 208:    - Graceful degradation on cache misses
24408: 21757: 209:    - Monitor cache hit rates
24409: 21758: 210:    - Log cache operations
24410: 21759: 211: 
24411: 21760: 212: ## Troubleshooting
24412: 21761: 213: 
24413: 21762: 214: ### Common Issues
24414: 21763: 215: 
24415: 21764: 216: 1. Memory Usage:
24416: 21765: 217:    - Monitor cache size
24417: 21766: 218:    - Adjust max entries
24418: 21767: 219:    - Check TTL settings
24419: 21768: 220: 
24420: 21769: 221: 2. Cache Misses:
24421: 21770: 222:    - Verify key generation
24422: 21771: 223:    - Check TTL values
24423: 21772: 224:    - Monitor hit rates
24424: 21773: 225: 
24425: 21774: 226: 3. Performance:
24426: 21775: 227:    - Analyze cache stats
24427: 21776: 228:    - Adjust cache sizes
24428: 21777: 229:    - Optimize key generation
24429: 21778: 230: 
24430: 21779: 231: ## Related Components
24431: 21780: 232: 
24432: 21781: 233: - [Image Handler](./image-handler)
24433: 21782: 234: - [Logger](./logging)
24434: 21783: 235: - [Error Handling](./error-handling)
24435: 21784: </file>
24436: 21785: 
24437: 21786: <file path="utils/error-handling.md">
24438: 21787:   1: # Error Handling System
24439: 21788:   2: 
24440: 21789:   3: ## Overview
24441: 21790:   4: 
24442: 21791:   5: The Error Handling system (`error.ts`) provides a standardized approach to error management across the application. It includes error classification, detailed logging, and integration with the logging system for comprehensive error tracking.
24443: 21792:   6: 
24444: 21793:   7: ## Features
24445: 21794:   8: 
24446: 21795:   9: - Custom error types
24447: 21796:  10: - Detailed error reporting
24448: 21797:  11: - Error severity levels
24449: 21798:  12: - Metadata support
24450: 21799:  13: - Firestore integration
24451: 21800:  14: - Stack trace preservation
24452: 21801:  15: 
24453: 21802:  16: ## Core Components
24454: 21803:  17: 
24455: 21804:  18: ### Error Types
24456: 21805:  19: 
24457: 21806:  20: ```typescript
24458: 21807:  21: export interface ErrorReport {
24459: 21808:  22:   timestamp: Date;
24460: 21809:  23:   context: string;
24461: 21810:  24:   error: string;
24462: 21811:  25:   stackTrace?: string;
24463: 21812:  26:   metadata?: Record<string, unknown>;
24464: 21813:  27:   severity: "ERROR" | "WARNING" | "CRITICAL";
24465: 21814:  28: }
24466: 21815:  29: 
24467: 21816:  30: export class DetailedError extends Error {
24468: 21817:  31:   constructor(
24469: 21818:  32:     message: string,
24470: 21819:  33:     public context: string,
24471: 21820:  34:     public metadata?: Record<string, unknown>,
24472: 21821:  35:     public severity: "ERROR" | "WARNING" | "CRITICAL" = "ERROR"
24473: 21822:  36:   ) {
24474: 21823:  37:     super(message);
24475: 21824:  38:     this.name = "DetailedError";
24476: 21825:  39:   }
24477: 21826:  40: }
24478: 21827:  41: ```
24479: 21828:  42: 
24480: 21829:  43: ## Error Logging
24481: 21830:  44: 
24482: 21831:  45: ### Basic Error Logging
24483: 21832:  46: 
24484: 21833:  47: ```typescript
24485: 21834:  48: export async function logDetailedError(
24486: 21835:  49:   error: Error,
24487: 21836:  50:   context: string,
24488: 21837:  51:   metadata?: Record<string, unknown>,
24489: 21838:  52:   severity: "ERROR" | "WARNING" | "CRITICAL" = "ERROR"
24490: 21839:  53: ): Promise<void> {
24491: 21840:  54:   const report: ErrorReport = {
24492: 21841:  55:     timestamp: new Date(),
24493: 21842:  56:     context,
24494: 21843:  57:     error: error.message,
24495: 21844:  58:     stackTrace: error.stack,
24496: 21845:  59:     metadata,
24497: 21846:  60:     severity,
24498: 21847:  61:   };
24499: 21848:  62: 
24500: 21849:  63:   await db.collection(COLLECTION.LOGS).add(report);
24501: 21850:  64:   await logError(error, context);
24502: 21851:  65: }
24503: 21852:  66: ```
24504: 21853:  67: 
24505: 21854:  68: ## Usage Examples
24506: 21855:  69: 
24507: 21856:  70: ### Basic Error Handling
24508: 21857:  71: 
24509: 21858:  72: ```typescript
24510: 21859:  73: try {
24511: 21860:  74:   await processImage(imageUrl);
24512: 21861:  75: } catch (error) {
24513: 21862:  76:   await logDetailedError(
24514: 21863:  77:     error as Error,
24515: 21864:  78:     "imageProcessing",
24516: 21865:  79:     { imageUrl, timestamp: new Date() },
24517: 21866:  80:     "ERROR"
24518: 21867:  81:   );
24519: 21868:  82: }
24520: 21869:  83: ```
24521: 21870:  84: 
24522: 21871:  85: ### Custom Error Creation
24523: 21872:  86: 
24524: 21873:  87: ```typescript
24525: 21874:  88: const handleImageError = async (error: unknown, imageUrl: string) => {
24526: 21875:  89:   const detailedError = new DetailedError(
24527: 21876:  90:     "Image processing failed",
24528: 21877:  91:     "imageHandler:process",
24529: 21878:  92:     {
24530: 21879:  93:       imageUrl,
24531: 21880:  94:       originalError: error instanceof Error ? error.message : "Unknown error",
24532: 21881:  95:       timestamp: new Date().toISOString()
24533: 21882:  96:     },
24534: 21883:  97:     "ERROR"
24535: 21884:  98:   );
24536: 21885:  99: 
24537: 21886: 100:   await logDetailedError(detailedError, detailedError.context);
24538: 21887: 101: };
24539: 21888: 102: ```
24540: 21889: 103: 
24541: 21890: 104: ## Error Classification
24542: 21891: 105: 
24543: 21892: 106: ### Severity Levels
24544: 21893: 107: 
24545: 21894: 108: ```typescript
24546: 21895: 109: type ErrorSeverity = "ERROR" | "WARNING" | "CRITICAL";
24547: 21896: 110: 
24548: 21897: 111: const determineSeverity = (error: Error): ErrorSeverity => {
24549: 21898: 112:   if (error instanceof NetworkError) return "WARNING";
24550: 21899: 113:   if (error instanceof DataCorruptionError) return "CRITICAL";
24551: 21900: 114:   return "ERROR";
24552: 21901: 115: };
24553: 21902: 116: ```
24554: 21903: 117: 
24555: 21904: 118: ### Context Management
24556: 21905: 119: 
24557: 21906: 120: ```typescript
24558: 21907: 121: interface ErrorContext {
24559: 21908: 122:   component: string;
24560: 21909: 123:   operation: string;
24561: 21910: 124:   metadata?: Record<string, unknown>;
24562: 21911: 125: }
24563: 21912: 126: 
24564: 21913: 127: const createErrorContext = (
24565: 21914: 128:   component: string,
24566: 21915: 129:   operation: string,
24567: 21916: 130:   metadata?: Record<string, unknown>
24568: 21917: 131: ): ErrorContext => ({
24569: 21918: 132:   component,
24570: 21919: 133:   operation,
24571: 21920: 134:   metadata
24572: 21921: 135: });
24573: 21922: 136: ```
24574: 21923: 137: 
24575: 21924: 138: ## Best Practices
24576: 21925: 139: 
24577: 21926: 140: ### 1. Error Wrapping
24578: 21927: 141: 
24579: 21928: 142: ```typescript
24580: 21929: 143: try {
24581: 21930: 144:   await externalOperation();
24582: 21931: 145: } catch (error) {
24583: 21932: 146:   const wrappedError = new DetailedError(
24584: 21933: 147:     "External operation failed",
24585: 21934: 148:     "externalService:operation",
24586: 21935: 149:     {
24587: 21936: 150:       originalError: error instanceof Error ? error.message : "Unknown error",
24588: 21937: 151:       timestamp: new Date().toISOString()
24589: 21938: 152:     }
24590: 21939: 153:   );
24591: 21940: 154:   throw wrappedError;
24592: 21941: 155: }
24593: 21942: 156: ```
24594: 21943: 157: 
24595: 21944: 158: ### 2. Error Recovery
24596: 21945: 159: 
24597: 21946: 160: ```typescript
24598: 21947: 161: async function withErrorRecovery<T>(
24599: 21948: 162:   operation: () => Promise<T>,
24600: 21949: 163:   fallback: T,
24601: 21950: 164:   context: string
24602: 21951: 165: ): Promise<T> {
24603: 21952: 166:   try {
24604: 21953: 167:     return await operation();
24605: 21954: 168:   } catch (error) {
24606: 21955: 169:     await logDetailedError(
24607: 21956: 170:       error as Error,
24608: 21957: 171:       context,
24609: 21958: 172:       { recoveryAction: "using fallback" }
24610: 21959: 173:     );
24611: 21960: 174:     return fallback;
24612: 21961: 175:   }
24613: 21962: 176: }
24614: 21963: 177: ```
24615: 21964: 178: 
24616: 21965: 179: ### 3. Batch Error Handling
24617: 21966: 180: 
24618: 21967: 181: ```typescript
24619: 21968: 182: interface BatchError {
24620: 21969: 183:   index: number;
24621: 21970: 184:   error: Error;
24622: 21971: 185:   item: unknown;
24623: 21972: 186: }
24624: 21973: 187: 
24625: 21974: 188: async function processBatchWithErrors<T>(
24626: 21975: 189:   items: T[],
24627: 21976: 190:   processor: (item: T) => Promise<void>
24628: 21977: 191: ): Promise<BatchError[]> {
24629: 21978: 192:   const errors: BatchError[] = [];
24630: 21979: 193: 
24631: 21980: 194:   for (let i = 0; i < items.length; i++) {
24632: 21981: 195:     try {
24633: 21982: 196:       await processor(items[i]);
24634: 21983: 197:     } catch (error) {
24635: 21984: 198:       errors.push({
24636: 21985: 199:         index: i,
24637: 21986: 200:         error: error as Error,
24638: 21987: 201:         item: items[i]
24639: 21988: 202:       });
24640: 21989: 203:     }
24641: 21990: 204:   }
24642: 21991: 205: 
24643: 21992: 206:   return errors;
24644: 21993: 207: }
24645: 21994: 208: ```
24646: 21995: 209: 
24647: 21996: 210: ## Error Monitoring
24648: 21997: 211: 
24649: 21998: 212: ### Error Aggregation
24650: 21999: 213: 
24651: 22000: 214: ```typescript
24652: 22001: 215: interface ErrorAggregate {
24653: 22002: 216:   count: number;
24654: 22003: 217:   lastOccurrence: Date;
24655: 22004: 218:   contexts: string[];
24656: 22005: 219: }
24657: 22006: 220: 
24658: 22007: 221: const aggregateErrors = async (
24659: 22008: 222:   timeWindow: number
24660: 22009: 223: ): Promise<Map<string, ErrorAggregate>> => {
24661: 22010: 224:   const now = new Date();
24662: 22011: 225:   const windowStart = new Date(now.getTime() - timeWindow);
24663: 22012: 226: 
24664: 22013: 227:   const errors = await db
24665: 22014: 228:     .collection(COLLECTION.LOGS)
24666: 22015: 229:     .where("timestamp", ">=", windowStart)
24667: 22016: 230:     .where("level", "==", "ERROR")
24668: 22017: 231:     .get();
24669: 22018: 232: 
24670: 22019: 233:   return errors.docs.reduce((acc, doc) => {
24671: 22020: 234:     const data = doc.data();
24672: 22021: 235:     const key = data.error;
24673: 22022: 236:     const existing = acc.get(key) || {
24674: 22023: 237:       count: 0,
24675: 22024: 238:       lastOccurrence: windowStart,
24676: 22025: 239:       contexts: []
24677: 22026: 240:     };
24678: 22027: 241: 
24679: 22028: 242:     existing.count++;
24680: 22029: 243:     existing.lastOccurrence = data.timestamp.toDate();
24681: 22030: 244:     if (!existing.contexts.includes(data.context)) {
24682: 22031: 245:       existing.contexts.push(data.context);
24683: 22032: 246:     }
24684: 22033: 247: 
24685: 22034: 248:     acc.set(key, existing);
24686: 22035: 249:     return acc;
24687: 22036: 250:   }, new Map<string, ErrorAggregate>());
24688: 22037: 251: };
24689: 22038: 252: ```
24690: 22039: 253: 
24691: 22040: 254: ## Error Resolution
24692: 22041: 255: 
24693: 22042: 256: ### Automatic Recovery
24694: 22043: 257: 
24695: 22044: 258: ```typescript
24696: 22045: 259: async function attemptRecovery(
24697: 22046: 260:   error: DetailedError,
24698: 22047: 261:   maxAttempts: number = 3
24699: 22048: 262: ): Promise<boolean> {
24700: 22049: 263:   let attempts = 0;
24701: 22050: 264:   let recovered = false;
24702: 22051: 265: 
24703: 22052: 266:   while (attempts < maxAttempts && !recovered) {
24704: 22053: 267:     try {
24705: 22054: 268:       await recoveryStrategies[error.name]?.(error);
24706: 22055: 269:       recovered = true;
24707: 22056: 270:     } catch (recoveryError) {
24708: 22057: 271:       attempts++;
24709: 22058: 272:       await logWarning(
24710: 22059: 273:         `Recovery attempt ${attempts} failed`,
24711: 22060: 274:         { error: recoveryError }
24712: 22061: 275:       );
24713: 22062: 276:     }
24714: 22063: 277:   }
24715: 22064: 278: 
24716: 22065: 279:   return recovered;
24717: 22066: 280: }
24718: 22067: 281: ```
24719: 22068: 282: 
24720: 22069: 283: ## Related Components
24721: 22070: 284: 
24722: 22071: 285: - [Logger](./logging)
24723: 22072: 286: - [Sync Logger](./sync-logger)
24724: 22073: 287: - [Image Handler](./image-handler)
24725: 22074: 288: 
24726: 22075: 289: ## Troubleshooting
24727: 22076: 290: 
24728: 22077: 291: ### Common Issues
24729: 22078: 292: 
24730: 22079: 293: 1. Missing Error Context:
24731: 22080: 294:    - Ensure proper error wrapping
24732: 22081: 295:    - Include relevant metadata
24733: 22082: 296:    - Use appropriate error types
24734: 22083: 297: 
24735: 22084: 298: 2. Error Recovery:
24736: 22085: 299:    - Implement fallback mechanisms
24737: 22086: 300:    - Use appropriate retry strategies
24738: 22087: 301:    - Monitor recovery success rates
24739: 22088: 302: 
24740: 22089: 303: 3. Performance Impact:
24741: 22090: 304:    - Balance logging detail with performance
24742: 22091: 305:    - Implement error aggregation
24743: 22092: 306:    - Use appropriate severity levels
24744: 22093: </file>
24745: 22094: 
24746: 22095: <file path="utils/image-compressor.md">
24747: 22096:   1: # Image Compressor Utility
24748: 22097:   2: 
24749: 22098:   3: ## Overview
24750: 22099:   4: 
24751: 22100:   5: The Image Compressor (`imageCompressor.ts`) handles image optimization and compression for card images. It provides configurable compression settings for both standard and high-resolution images while maintaining image quality.
24752: 22101:   6: 
24753: 22102:   7: ## Core Features
24754: 22103:   8: 
24755: 22104:   9: - Dual resolution support (200w/400w)
24756: 22105:  10: - Quality-preserving compression
24757: 22106:  11: - Dimension optimization
24758: 22107:  12: - Progressive JPEG support
24759: 22108:  13: - Metadata preservation
24760: 22109:  14: - Compression statistics
24761: 22110:  15: 
24762: 22111:  16: ## Configuration
24763: 22112:  17: 
24764: 22113:  18: ### Quality Settings
24765: 22114:  19: 
24766: 22115:  20: ```typescript
24767: 22116:  21: private static readonly QUALITY = {
24768: 22117:  22:   HIGH_RES: 90,
24769: 22118:  23:   LOW_RES: 85,
24770: 22119:  24: };
24771: 22120:  25: ```
24772: 22121:  26: 
24773: 22122:  27: ### Dimension Settings
24774: 22123:  28: 
24775: 22124:  29: ```typescript
24776: 22125:  30: private static readonly DIMENSIONS = {
24777: 22126:  31:   HIGH_RES: 400,
24778: 22127:  32:   LOW_RES: 200,
24779: 22128:  33: };
24780: 22129:  34: ```
24781: 22130:  35: 
24782: 22131:  36: ## Main Interfaces
24783: 22132:  37: 
24784: 22133:  38: ### Compression Result
24785: 22134:  39: 
24786: 22135:  40: ```typescript
24787: 22136:  41: export interface CompressionResult {
24788: 22137:  42:   buffer: Buffer;
24789: 22138:  43:   info: {
24790: 22139:  44:     width: number;
24791: 22140:  45:     height: number;
24792: 22141:  46:     size: number;
24793: 22142:  47:     format: string;
24794: 22143:  48:     quality: number;
24795: 22144:  49:   };
24796: 22145:  50: }
24797: 22146:  51: ```
24798: 22147:  52: 
24799: 22148:  53: ## Primary Methods
24800: 22149:  54: 
24801: 22150:  55: ### Compression Method
24802: 22151:  56: 
24803: 22152:  57: ```typescript
24804: 22153:  58: static async compress(
24805: 22154:  59:   buffer: Buffer,
24806: 22155:  60:   isHighRes: boolean = false
24807: 22156:  61: ): Promise<CompressionResult>
24808: 22157:  62: ```
24809: 22158:  63: 
24810: 22159:  64: ### Format Validation
24811: 22160:  65: 
24812: 22161:  66: ```typescript
24813: 22162:  67: static async isCompressible(buffer: Buffer): Promise<boolean>
24814: 22163:  68: ```
24815: 22164:  69: 
24816: 22165:  70: ## Implementation Examples
24817: 22166:  71: 
24818: 22167:  72: ### Basic Compression
24819: 22168:  73: 
24820: 22169:  74: ```typescript
24821: 22170:  75: const imageBuffer = await fetchImage(url);
24822: 22171:  76: const result = await ImageCompressor.compress(imageBuffer, false);
24823: 22172:  77: 
24824: 22173:  78: console.log("Compression stats:", {
24825: 22174:  79:   originalSize: imageBuffer.length,
24826: 22175:  80:   compressedSize: result.buffer.length,
24827: 22176:  81:   dimensions: `${result.info.width}x${result.info.height}`,
24828: 22177:  82:   quality: result.info.quality
24829: 22178:  83: });
24830: 22179:  84: ```
24831: 22180:  85: 
24832: 22181:  86: ### High-Resolution Processing
24833: 22182:  87: 
24834: 22183:  88: ```typescript
24835: 22184:  89: const highResResult = await ImageCompressor.compress(buffer, true);
24836: 22185:  90: await logInfo("High-res compression complete", {
24837: 22186:  91:   originalSize: buffer.length,
24838: 22187:  92:   compressedSize: highResResult.buffer.length,
24839: 22188:  93:   dimensions: `${highResResult.info.width}x${highResResult.info.height}`,
24840: 22189:  94:   quality: highResResult.info.quality
24841: 22190:  95: });
24842: 22191:  96: ```
24843: 22192:  97: 
24844: 22193:  98: ## Compression Pipeline
24845: 22194:  99: 
24846: 22195: 100: ### Image Analysis
24847: 22196: 101: 
24848: 22197: 102: ```typescript
24849: 22198: 103: const originalInfo = await sharp(buffer).metadata();
24850: 22199: 104: const originalSize = buffer.length;
24851: 22200: 105: ```
24852: 22201: 106: 
24853: 22202: 107: ### Optimization Process
24854: 22203: 108: 
24855: 22204: 109: ```typescript
24856: 22205: 110: const image = sharp(buffer).jpeg({
24857: 22206: 111:   quality,
24858: 22207: 112:   progressive: true,
24859: 22208: 113:   mozjpeg: true,
24860: 22209: 114: });
24861: 22210: 115: 
24862: 22211: 116: if (originalInfo.width && originalInfo.width > targetWidth) {
24863: 22212: 117:   image.resize(targetWidth, null, {
24864: 22213: 118:     fit: "inside",
24865: 22214: 119:     withoutEnlargement: true,
24866: 22215: 120:   });
24867: 22216: 121: }
24868: 22217: 122: ```
24869: 22218: 123: 
24870: 22219: 124: ## Performance Monitoring
24871: 22220: 125: 
24872: 22221: 126: ### Size Reduction Tracking
24873: 22222: 127: 
24874: 22223: 128: ```typescript
24875: 22224: 129: const compressionStats = {
24876: 22225: 130:   originalSize: buffer.length,
24877: 22226: 131:   compressedSize: compressedBuffer.length,
24878: 22227: 132:   reductionPercent: (
24879: 22228: 133:     (buffer.length - compressedBuffer.length) / 
24880: 22229: 134:     buffer.length * 100
24881: 22230: 135:   ).toFixed(2)
24882: 22231: 136: };
24883: 22232: 137: ```
24884: 22233: 138: 
24885: 22234: 139: ### Quality Metrics
24886: 22235: 140: 
24887: 22236: 141: ```typescript
24888: 22237: 142: const qualityMetrics = {
24889: 22238: 143:   dimensions: `${compressedInfo.width}x${compressedInfo.height}`,
24890: 22239: 144:   format: compressedInfo.format,
24891: 22240: 145:   quality: isHighRes ? QUALITY.HIGH_RES : QUALITY.LOW_RES
24892: 22241: 146: };
24893: 22242: 147: ```
24894: 22243: 148: 
24895: 22244: 149: ## Best Practices
24896: 22245: 150: 
24897: 22246: 151: ### Memory Management
24898: 22247: 152: 
24899: 22248: 153: - Process one image at a time
24900: 22249: 154: - Release buffers after processing
24901: 22250: 155: - Monitor memory usage
24902: 22251: 156: 
24903: 22252: 157: ### Quality Control
24904: 22253: 158: 
24905: 22254: 159: - Use appropriate quality settings
24906: 22255: 160: - Validate output dimensions
24907: 22256: 161: - Check compression ratios
24908: 22257: 162: 
24909: 22258: 163: ### Error Prevention
24910: 22259: 164: 
24911: 22260: 165: - Validate input formats
24912: 22261: 166: - Check buffer integrity
24913: 22262: 167: - Monitor compression results
24914: 22263: 168: 
24915: 22264: 169: ## Usage Guidelines
24916: 22265: 170: 
24917: 22266: 171: ### Standard Resolution
24918: 22267: 172: 
24919: 22268: 173: ```typescript
24920: 22269: 174: const standardResult = await ImageCompressor.compress(buffer);
24921: 22270: 175: if (standardResult.buffer.length > buffer.length) {
24922: 22271: 176:   // Use original if compression didn't help
24923: 22272: 177:   return buffer;
24924: 22273: 178: }
24925: 22274: 179: ```
24926: 22275: 180: 
24927: 22276: 181: ### High Resolution
24928: 22277: 182: 
24929: 22278: 183: ```typescript
24930: 22279: 184: const highResResult = await ImageCompressor.compress(buffer, true);
24931: 22280: 185: if (!highResResult.info.width || highResResult.info.width < 400) {
24932: 22281: 186:   throw new Error("High-res compression failed to meet size requirements");
24933: 22282: 187: }
24934: 22283: 188: ```
24935: 22284: 189: 
24936: 22285: 190: ## Error Handling
24937: 22286: 191: 
24938: 22287: 192: ### Input Validation
24939: 22288: 193: 
24940: 22289: 194: ```typescript
24941: 22290: 195: if (!buffer || buffer.length === 0) {
24942: 22291: 196:   throw new Error("Invalid input buffer");
24943: 22292: 197: }
24944: 22293: 198: 
24945: 22294: 199: if (!await ImageCompressor.isCompressible(buffer)) {
24946: 22295: 200:   throw new Error("Unsupported image format");
24947: 22296: 201: }
24948: 22297: 202: ```
24949: 22298: 203: 
24950: 22299: 204: ### Processing Errors
24951: 22300: 205: 
24952: 22301: 206: ```typescript
24953: 22302: 207: try {
24954: 22303: 208:   return await ImageCompressor.compress(buffer);
24955: 22304: 209: } catch (error) {
24956: 22305: 210:   throw new Error(
24957: 22306: 211:     `Image compression failed: ${
24958: 22307: 212:       error instanceof Error ? error.message : "Unknown error"
24959: 22308: 213:     }`
24960: 22309: 214:   );
24961: 22310: 215: }
24962: 22311: 216: ```
24963: 22312: 217: 
24964: 22313: 218: ## Related Components
24965: 22314: 219: 
24966: 22315: 220: - [Image Handler](./image-handler)
24967: 22316: 221: - [Image Validator](./image-validator)
24968: 22317: 222: - [Logger](./logging)
24969: 22318: 223: 
24970: 22319: 224: ## Troubleshooting
24971: 22320: 225: 
24972: 22321: 226: ### Common Issues
24973: 22322: 227: 
24974: 22323: 228: 1. Memory Constraints:
24975: 22324: 229:    - Monitor buffer sizes
24976: 22325: 230:    - Process images sequentially
24977: 22326: 231:    - Implement garbage collection
24978: 22327: 232: 
24979: 22328: 233: 2. Quality Problems:
24980: 22329: 234:    - Verify quality settings
24981: 22330: 235:    - Check dimension constraints
24982: 22331: 236:    - Validate output formats
24983: 22332: 237: 
24984: 22333: 238: 3. Performance Issues:
24985: 22334: 239:    - Monitor processing times
24986: 22335: 240:    - Track compression ratios
24987: 22336: 241:    - Optimize batch processing
24988: 22337: </file>
24989: 22338: 
24990: 22339: <file path="utils/image-handler.md">
24991: 22340:   1: # Image Handler Utility
24992: 22341:   2: 
24993: 22342:   3: ## Overview
24994: 22343:   4: 
24995: 22344:   5: The Image Handler (`imageHandler.ts`) is a comprehensive utility for managing card images. It handles downloading, processing, compression, caching, and storage of both standard and high-resolution card images in Firebase Storage.
24996: 22345:   6: 
24997: 22346:   7: ## Features
24998: 22347:   8: 
24999: 22348:   9: - Dual resolution support (200w and 400w)
25000: 22349:  10: - Image compression and optimization
25001: 22350:  11: - Caching system
25002: 22351:  12: - Hash-based change detection
25003: 22352:  13: - Error handling and retry logic
25004: 22353:  14: - Storage path management
25005: 22354:  15: - Metadata tracking
25006: 22355:  16: 
25007: 22356:  17: ## Class Structure
25008: 22357:  18: 
25009: 22358:  19: ```typescript
25010: 22359:  20: export class ImageHandler {
25011: 22360:  21:   private bucket = storage.bucket(STORAGE.BUCKETS.CARD_IMAGES);
25012: 22361:  22:  
25013: 22362:  23:   // Main method
25014: 22363:  24:   async processImage(
25015: 22364:  25:     imageUrl: string,
25016: 22365:  26:     groupId: string,
25017: 22366:  27:     productId: number
25018: 22367:  28:   ): Promise<ImageProcessingResult>
25019: 22368:  29: }
25020: 22369:  30: ```
25021: 22370:  31: 
25022: 22371:  32: ## Core Methods
25023: 22372:  33: 
25024: 22373:  34: ### Process Image
25025: 22374:  35: 
25026: 22375:  36: ```typescript
25027: 22376:  37: async processImage(
25028: 22377:  38:   imageUrl: string,
25029: 22378:  39:   groupId: string,
25030: 22379:  40:   productId: number
25031: 22380:  41: ): Promise<ImageProcessingResult>
25032: 22381:  42: ```
25033: 22382:  43: 
25034: 22383:  44: #### Parameters
25035: 22384:  45: 
25036: 22385:  46: - `imageUrl`: Source URL of the card image
25037: 22386:  47: - `groupId`: Card group identifier
25038: 22387:  48: - `productId`: Unique card identifier
25039: 22388:  49: 
25040: 22389:  50: #### Returns
25041: 22390:  51: 
25042: 22391:  52: ```typescript
25043: 22392:  53: interface ImageProcessingResult {
25044: 22393:  54:   originalUrl: string;      // URL of standard resolution image
25045: 22394:  55:   highResUrl: string;       // URL of high resolution image
25046: 22395:  56:   metadata: ImageMetadata;  // Image processing metadata
25047: 22396:  57:   updated: boolean;         // Whether image was updated
25048: 22397:  58: }
25049: 22398:  59: ```
25050: 22399:  60: 
25051: 22400:  61: ### Image Processing Pipeline
25052: 22401:  62: 
25053: 22402:  63: 1. **URL Processing**:
25054: 22403:  64: 
25055: 22404:  65: ```typescript
25056: 22405:  66: private getHighResUrl(imageUrl: string): string {
25057: 22406:  67:   return imageUrl.replace(/_200w\.jpg$/, "_400w.jpg");
25058: 22407:  68: }
25059: 22408:  69: ```
25060: 22409:  70: 
25061: 22410:  71: 1. **Storage Path Management**:
25062: 22411:  72: 
25063: 22412:  73: ```typescript
25064: 22413:  74: private getStoragePath(
25065: 22414:  75:   groupId: string,
25066: 22415:  76:   productId: number,
25067: 22416:  77:   isHighRes: boolean = false
25068: 22417:  78: ): string {
25069: 22418:  79:   const suffix = isHighRes ? "_400w" : "_200w";
25070: 22419:  80:   return `${STORAGE.PATHS.IMAGES}/${groupId}/${productId}${suffix}.jpg`;
25071: 22420:  81: }
25072: 22421:  82: ```
25073: 22422:  83: 
25074: 22423:  84: 1. **Image Download**:
25075: 22424:  85: 
25076: 22425:  86: ```typescript
25077: 22426:  87: private async downloadImage(url: string): Promise<Buffer>
25078: 22427:  88: ```
25079: 22428:  89: 
25080: 22429:  90: 1. **Image Compression**:
25081: 22430:  91: 
25082: 22431:  92: ```typescript
25083: 22432:  93: private async compressImage(
25084: 22433:  94:   buffer: Buffer,
25085: 22434:  95:   isHighRes: boolean
25086: 22435:  96: ): Promise<Buffer>
25087: 22436:  97: ```
25088: 22437:  98: 
25089: 22438:  99: ## Configuration
25090: 22439: 100: 
25091: 22440: 101: ### Storage Settings
25092: 22441: 102: 
25093: 22442: 103: ```typescript
25094: 22443: 104: export const STORAGE = {
25095: 22444: 105:   BUCKETS: {
25096: 22445: 106:     CARD_IMAGES: "fftcg-sync-service.firebasestorage.app",
25097: 22446: 107:   },
25098: 22447: 108:   PATHS: {
25099: 22448: 109:     IMAGES: "card-images",
25100: 22449: 110:   },
25101: 22450: 111: };
25102: 22451: 112: ```
25103: 22452: 113: 
25104: 22453: 114: ### Compression Settings
25105: 22454: 115: 
25106: 22455: 116: ```typescript
25107: 22456: 117: private static readonly QUALITY = {
25108: 22457: 118:   HIGH_RES: 90,
25109: 22458: 119:   LOW_RES: 85,
25110: 22459: 120: };
25111: 22460: 121: 
25112: 22461: 122: private static readonly DIMENSIONS = {
25113: 22462: 123:   HIGH_RES: 400,
25114: 22463: 124:   LOW_RES: 200,
25115: 22464: 125: };
25116: 22465: 126: ```
25117: 22466: 127: 
25118: 22467: 128: ## Usage Examples
25119: 22468: 129: 
25120: 22469: 130: ### Basic Image Processing
25121: 22470: 131: 
25122: 22471: 132: ```typescript
25123: 22472: 133: const imageHandler = new ImageHandler();
25124: 22473: 134: 
25125: 22474: 135: const result = await imageHandler.processImage(
25126: 22475: 136:   "https://tcgplayer-cdn.tcgplayer.com/product/477236_200w.jpg",
25127: 22476: 137:   "23783",
25128: 22477: 138:   477236
25129: 22478: 139: );
25130: 22479: 140: 
25131: 22480: 141: console.log("Image URLs:", {
25132: 22481: 142:   original: result.originalUrl,
25133: 22482: 143:   highRes: result.highResUrl
25134: 22483: 144: });
25135: 22484: 145: ```
25136: 22485: 146: 
25137: 22486: 147: ### With Error Handling
25138: 22487: 148: 
25139: 22488: 149: ```typescript
25140: 22489: 150: try {
25141: 22490: 151:   const imageHandler = new ImageHandler();
25142: 22491: 152:   const result = await imageHandler.processImage(imageUrl, groupId, productId);
25143: 22492: 153:  
25144: 22493: 154:   if (result.updated) {
25145: 22494: 155:     console.log("Image updated successfully");
25146: 22495: 156:     console.log("Metadata:", result.metadata);
25147: 22496: 157:   }
25148: 22497: 158: } catch (error) {
25149: 22498: 159:   console.error("Image processing failed:", error);
25150: 22499: 160: }
25151: 22500: 161: ```
25152: 22501: 162: 
25153: 22502: 163: ## Metadata Management
25154: 22503: 164: 
25155: 22504: 165: ### Metadata Structure
25156: 22505: 166: 
25157: 22506: 167: ```typescript
25158: 22507: 168: interface ImageMetadata {
25159: 22508: 169:   contentType: string;
25160: 22509: 170:   size: number;
25161: 22510: 171:   updated: Date;
25162: 22511: 172:   hash: string;
25163: 22512: 173:   originalUrl: string;
25164: 22513: 174:   highResUrl: string;
25165: 22514: 175:   originalSize?: number;
25166: 22515: 176:   highResSize?: number;
25167: 22516: 177: }
25168: 22517: 178: ```
25169: 22518: 179: 
25170: 22519: 180: ### Saving Metadata
25171: 22520: 181: 
25172: 22521: 182: ```typescript
25173: 22522: 183: private async saveMetadata(
25174: 22523: 184:   groupId: string,
25175: 22524: 185:   productId: number,
25176: 22525: 186:   metadata: ImageMetadata
25177: 22526: 187: ): Promise<void>
25178: 22527: 188: ```
25179: 22528: 189: 
25180: 22529: 190: ## Cache Integration
25181: 22530: 191: 
25182: 22531: 192: The Image Handler integrates with the caching system for improved performance:
25183: 22532: 193: 
25184: 22533: 194: ```typescript
25185: 22534: 195: const cacheKey = imageCache.getBufferCacheKey(url);
25186: 22535: 196: const cachedBuffer = await imageCache.getBuffer(cacheKey);
25187: 22536: 197: 
25188: 22537: 198: if (cachedBuffer) {
25189: 22538: 199:   return cachedBuffer;
25190: 22539: 200: }
25191: 22540: 201: ```
25192: 22541: 202: 
25193: 22542: 203: ## Error Handling
25194: 22543: 204: 
25195: 22544: 205: ### Error Types
25196: 22545: 206: 
25197: 22546: 207: ```typescript
25198: 22547: 208: interface ImageProcessingError extends GenericError {
25199: 22548: 209:   productId: number;
25200: 22549: 210:   groupId: string;
25201: 22550: 211:   originalUrl: string;
25202: 22551: 212:   type: "download" | "upload" | "metadata" | "unknown";
25203: 22552: 213: }
25204: 22553: 214: ```
25205: 22554: 215: 
25206: 22555: 216: ### Error Recovery
25207: 22556: 217: 
25208: 22557: 218: ```typescript
25209: 22558: 219: catch (error) {
25210: 22559: 220:   return {
25211: 22560: 221:     originalUrl: imageUrl,
25212: 22561: 222:     highResUrl: this.getHighResUrl(imageUrl),
25213: 22562: 223:     metadata: {
25214: 22563: 224:       contentType: "image/jpeg",
25215: 22564: 225:       size: 0,
25216: 22565: 226:       updated: new Date(),
25217: 22566: 227:       hash: "",
25218: 22567: 228:       originalUrl: imageUrl,
25219: 22568: 229:       highResUrl: this.getHighResUrl(imageUrl),
25220: 22569: 230:     },
25221: 22570: 231:     updated: false,
25222: 22571: 232:   };
25223: 22572: 233: }
25224: 22573: 234: ```
25225: 22574: 235: 
25226: 22575: 236: ## Best Practices
25227: 22576: 237: 
25228: 22577: 238: 1. **Memory Management**:
25229: 22578: 239:    - Process one resolution at a time
25230: 22579: 240:    - Use streams for large files
25231: 22580: 241:    - Implement proper cleanup
25232: 22581: 242: 
25233: 22582: 243: 2. **Error Handling**:
25234: 22583: 244:    - Implement retries for transient failures
25235: 22584: 245:    - Log detailed error information
25236: 22585: 246:    - Maintain fallback URLs
25237: 22586: 247: 
25238: 22587: 248: 3. **Performance**:
25239: 22588: 249:    - Utilize caching effectively
25240: 22589: 250:    - Implement batch processing
25241: 22590: 251:    - Monitor storage quotas
25242: 22591: 252: 
25243: 22592: 253: ## Related Components
25244: 22593: 254: 
25245: 22594: 255: - [Image Cache](./cache)
25246: 22595: 256: - [Image Compressor](./image-compressor)
25247: 22596: 257: - [Image Validator](./image-validator)
25248: 22597: 258: - [Logger](./logging)
25249: 22598: </file>
25250: 22599: 
25251: 22600: <file path="utils/image-validator.md">
25252: 22601:   1: # Image Validator Utility
25253: 22602:   2: 
25254: 22603:   3: ## Overview
25255: 22604:   4: 
25256: 22605:   5: The Image Validator (`imageValidator.ts`) ensures image integrity and conformance to required specifications before processing. It validates format, dimensions, file size, and other critical image attributes.
25257: 22606:   6: 
25258: 22607:   7: ## Core Features
25259: 22608:   8: 
25260: 22609:   9: - Format validation
25261: 22610:  10: - Dimension verification
25262: 22611:  11: - Size limit enforcement
25263: 22612:  12: - Metadata validation
25264: 22613:  13: - URL structure validation
25265: 22614:  14: - MIME type checking
25266: 22615:  15: 
25267: 22616:  16: ## Configuration
25268: 22617:  17: 
25269: 22618:  18: ### Size Limits
25270: 22619:  19: 
25271: 22620:  20: ```typescript
25272: 22621:  21: export const IMAGE_LIMITS = {
25273: 22622:  22:   MAX_SIZE: 10 * 1024 * 1024,  // 10MB
25274: 22623:  23:   MIN_SIZE: 1024,              // 1KB
25275: 22624:  24:   MAX_WIDTH: 2048,
25276: 22625:  25:   MAX_HEIGHT: 2048,
25277: 22626:  26:   MIN_WIDTH: 100,
25278: 22627:  27:   MIN_HEIGHT: 100,
25279: 22628:  28: };
25280: 22629:  29: ```
25281: 22630:  30: 
25282: 22631:  31: ### Format Settings
25283: 22632:  32: 
25284: 22633:  33: ```typescript
25285: 22634:  34: export const SUPPORTED_FORMATS = [
25286: 22635:  35:   "image/jpeg",
25287: 22636:  36:   "image/jpg",
25288: 22637:  37:   "image/png"
25289: 22638:  38: ] as const;
25290: 22639:  39: 
25291: 22640:  40: export const REQUIRED_DIMENSIONS = {
25292: 22641:  41:   STANDARD: {
25293: 22642:  42:     width: 200,
25294: 22643:  43:     height: 200
25295: 22644:  44:   },
25296: 22645:  45:   HIGH_RES: {
25297: 22646:  46:     width: 400,
25298: 22647:  47:     height: 400
25299: 22648:  48:   }
25300: 22649:  49: };
25301: 22650:  50: ```
25302: 22651:  51: 
25303: 22652:  52: ## Validation Methods
25304: 22653:  53: 
25305: 22654:  54: ### URL Pattern Check
25306: 22655:  55: 
25307: 22656:  56: ```typescript
25308: 22657:  57: export function isValidImageUrl(url: string): boolean {
25309: 22658:  58:   const pattern = /^https:\/\/.*\.(jpg|jpeg|png)(\?.*)?$/i;
25310: 22659:  59:   return pattern.test(url);
25311: 22660:  60: }
25312: 22661:  61: ```
25313: 22662:  62: 
25314: 22663:  63: ### Format Verification
25315: 22664:  64: 
25316: 22665:  65: ```typescript
25317: 22666:  66: export async function isValidFormat(
25318: 22667:  67:   buffer: Buffer
25319: 22668:  68: ): Promise<boolean> {
25320: 22669:  69:   try {
25321: 22670:  70:     const metadata = await sharp(buffer).metadata();
25322: 22671:  71:     return SUPPORTED_FORMATS.includes(
25323: 22672:  72:       `image/${metadata.format}` as typeof SUPPORTED_FORMATS[number]
25324: 22673:  73:     );
25325: 22674:  74:   } catch {
25326: 22675:  75:     return false;
25327: 22676:  76:   }
25328: 22677:  77: }
25329: 22678:  78: ```
25330: 22679:  79: 
25331: 22680:  80: ## Implementation Examples
25332: 22681:  81: 
25333: 22682:  82: ### Basic Validation
25334: 22683:  83: 
25335: 22684:  84: ```typescript
25336: 22685:  85: const validator = new ImageValidator();
25337: 22686:  86: 
25338: 22687:  87: try {
25339: 22688:  88:   await validator.validate(imageBuffer);
25340: 22689:  89:   console.log("Image validation successful");
25341: 22690:  90: } catch (error) {
25342: 22691:  91:   console.error("Validation failed:", error.message);
25343: 22692:  92: }
25344: 22693:  93: ```
25345: 22694:  94: 
25346: 22695:  95: ### URL Validation
25347: 22696:  96: 
25348: 22697:  97: ```typescript
25349: 22698:  98: const isValid = validator.validateUrl(imageUrl);
25350: 22699:  99: if (!isValid) {
25351: 22700: 100:   throw new Error(`Invalid image URL: ${imageUrl}`);
25352: 22701: 101: }
25353: 22702: 102: ```
25354: 22703: 103: 
25355: 22704: 104: ## Validation Pipeline
25356: 22705: 105: 
25357: 22706: 106: ### Size Check
25358: 22707: 107: 
25359: 22708: 108: ```typescript
25360: 22709: 109: private async validateSize(buffer: Buffer): Promise<void> {
25361: 22710: 110:   const size = buffer.length;
25362: 22711: 111:  
25363: 22712: 112:   if (size > IMAGE_LIMITS.MAX_SIZE) {
25364: 22713: 113:     throw new Error(
25365: 22714: 114:       `Image size ${size} exceeds maximum limit of ${IMAGE_LIMITS.MAX_SIZE}`
25366: 22715: 115:     );
25367: 22716: 116:   }
25368: 22717: 117:  
25369: 22718: 118:   if (size < IMAGE_LIMITS.MIN_SIZE) {
25370: 22719: 119:     throw new Error(
25371: 22720: 120:       `Image size ${size} below minimum requirement of ${IMAGE_LIMITS.MIN_SIZE}`
25372: 22721: 121:     );
25373: 22722: 122:   }
25374: 22723: 123: }
25375: 22724: 124: ```
25376: 22725: 125: 
25377: 22726: 126: ### Dimension Check
25378: 22727: 127: 
25379: 22728: 128: ```typescript
25380: 22729: 129: private async validateDimensions(
25381: 22730: 130:   metadata: sharp.Metadata
25382: 22731: 131: ): Promise<void> {
25383: 22732: 132:   const { width, height } = metadata;
25384: 22733: 133:  
25385: 22734: 134:   if (!width || !height) {
25386: 22735: 135:     throw new Error("Unable to determine image dimensions");
25387: 22736: 136:   }
25388: 22737: 137:  
25389: 22738: 138:   if (width > IMAGE_LIMITS.MAX_WIDTH || height > IMAGE_LIMITS.MAX_HEIGHT) {
25390: 22739: 139:     throw new Error("Image dimensions exceed maximum limits");
25391: 22740: 140:   }
25392: 22741: 141:  
25393: 22742: 142:   if (width < IMAGE_LIMITS.MIN_WIDTH || height < IMAGE_LIMITS.MIN_HEIGHT) {
25394: 22743: 143:     throw new Error("Image dimensions below minimum requirements");
25395: 22744: 144:   }
25396: 22745: 145: }
25397: 22746: 146: ```
25398: 22747: 147: 
25399: 22748: 148: ## Utility Functions
25400: 22749: 149: 
25401: 22750: 150: ### Metadata Extraction
25402: 22751: 151: 
25403: 22752: 152: ```typescript
25404: 22753: 153: async function getImageMetadata(
25405: 22754: 154:   buffer: Buffer
25406: 22755: 155: ): Promise<sharp.Metadata> {
25407: 22756: 156:   try {
25408: 22757: 157:     return await sharp(buffer).metadata();
25409: 22758: 158:   } catch (error) {
25410: 22759: 159:     throw new Error("Failed to extract image metadata");
25411: 22760: 160:   }
25412: 22761: 161: }
25413: 22762: 162: ```
25414: 22763: 163: 
25415: 22764: 164: ### Resolution Check
25416: 22765: 165: 
25417: 22766: 166: ```typescript
25418: 22767: 167: function isValidResolution(
25419: 22768: 168:   width: number,
25420: 22769: 169:   height: number,
25421: 22770: 170:   isHighRes: boolean
25422: 22771: 171: ): boolean {
25423: 22772: 172:   const requirements = isHighRes ? 
25424: 22773: 173:     REQUIRED_DIMENSIONS.HIGH_RES : 
25425: 22774: 174:     REQUIRED_DIMENSIONS.STANDARD;
25426: 22775: 175:    
25427: 22776: 176:   return width >= requirements.width && 
25428: 22777: 177:          height >= requirements.height;
25429: 22778: 178: }
25430: 22779: 179: ```
25431: 22780: 180: 
25432: 22781: 181: ## Error Messages
25433: 22782: 182: 
25434: 22783: 183: ### Custom Validation Errors
25435: 22784: 184: 
25436: 22785: 185: ```typescript
25437: 22786: 186: export class ImageValidationError extends Error {
25438: 22787: 187:   constructor(
25439: 22788: 188:     message: string,
25440: 22789: 189:     public code: string,
25441: 22790: 190:     public details?: Record<string, unknown>
25442: 22791: 191:   ) {
25443: 22792: 192:     super(message);
25444: 22793: 193:     this.name = "ImageValidationError";
25445: 22794: 194:   }
25446: 22795: 195: }
25447: 22796: 196: ```
25448: 22797: 197: 
25449: 22798: 198: ### Error Codes
25450: 22799: 199: 
25451: 22800: 200: ```typescript
25452: 22801: 201: export const VALIDATION_ERRORS = {
25453: 22802: 202:   INVALID_FORMAT: "INVALID_FORMAT",
25454: 22803: 203:   INVALID_SIZE: "INVALID_SIZE",
25455: 22804: 204:   INVALID_DIMENSIONS: "INVALID_DIMENSIONS",
25456: 22805: 205:   INVALID_URL: "INVALID_URL",
25457: 22806: 206:   METADATA_ERROR: "METADATA_ERROR"
25458: 22807: 207: } as const;
25459: 22808: 208: ```
25460: 22809: 209: 
25461: 22810: 210: ## Best Practices
25462: 22811: 211: 
25463: 22812: 212: ### Input Validation
25464: 22813: 213: 
25465: 22814: 214: - Check buffer integrity
25466: 22815: 215: - Validate URL structure
25467: 22816: 216: - Verify MIME types
25468: 22817: 217: 
25469: 22818: 218: ### Performance Optimization
25470: 22819: 219: 
25471: 22820: 220: - Cache validation results
25472: 22821: 221: - Implement early returns
25473: 22822: 222: - Use efficient checks
25474: 22823: 223: 
25475: 22824: 224: ### Error Handling
25476: 22825: 225: 
25477: 22826: 226: - Provide detailed error messages
25478: 22827: 227: - Include validation context
25479: 22828: 228: - Log validation failures
25480: 22829: 229: 
25481: 22830: 230: ## Usage Guidelines
25482: 22831: 231: 
25483: 22832: 232: ### Standard Validation
25484: 22833: 233: 
25485: 22834: 234: ```typescript
25486: 22835: 235: const validateImage = async (buffer: Buffer): Promise<void> => {
25487: 22836: 236:   const validator = new ImageValidator();
25488: 22837: 237:  
25489: 22838: 238:   try {
25490: 22839: 239:     await validator.validate(buffer);
25491: 22840: 240:   } catch (error) {
25492: 22841: 241:     await logError(error, "imageValidation");
25493: 22842: 242:     throw error;
25494: 22843: 243:   }
25495: 22844: 244: };
25496: 22845: 245: ```
25497: 22846: 246: 
25498: 22847: 247: ### URL Pattern Validation
25499: 22848: 248: 
25500: 22849: 249: ```typescript
25501: 22850: 250: const validateImageUrl = (url: string): void => {
25502: 22851: 251:   if (!isValidImageUrl(url)) {
25503: 22852: 252:     throw new ImageValidationError(
25504: 22853: 253:       `Invalid image URL: ${url}`,
25505: 22854: 254:       VALIDATION_ERRORS.INVALID_URL,
25506: 22855: 255:       { url }
25507: 22856: 256:     );
25508: 22857: 257:   }
25509: 22858: 258: };
25510: 22859: 259: ```
25511: 22860: 260: 
25512: 22861: 261: ## Related Components
25513: 22862: 262: 
25514: 22863: 263: - [Image Compressor](./image-compressor)
25515: 22864: 264: - [Image Handler](./image-handler)
25516: 22865: 265: - [Error Handling](./error-handling)
25517: 22866: 266: 
25518: 22867: 267: ## Troubleshooting
25519: 22868: 268: 
25520: 22869: 269: ### Common Issues
25521: 22870: 270: 
25522: 22871: 271: 1. Format Problems:
25523: 22872: 272:    - Check file extensions
25524: 22873: 273:    - Verify MIME types
25525: 22874: 274:    - Validate image headers
25526: 22875: 275: 
25527: 22876: 276: 2. Size Issues:
25528: 22877: 277:    - Monitor file sizes
25529: 22878: 278:    - Check compression settings
25530: 22879: 279:    - Verify buffer integrity
25531: 22880: 280: 
25532: 22881: 281: 3. Dimension Errors:
25533: 22882: 282:    - Validate aspect ratios
25534: 22883: 283:    - Check resolution requirements
25535: 22884: 284:    - Monitor scaling issues
25536: 22885: </file>
25537: 22886: 
25538: 22887: <file path="utils/logging.md">
25539: 22888:   1: # Logging System
25540: 22889:   2: 
25541: 22890:   3: ## Overview
25542: 22891:   4: 
25543: 22892:   5: The Logging System (`logger.ts`) provides comprehensive logging functionality across the application. It integrates with Firebase Functions logger and Firestore for persistent log storage, supporting multiple log levels and structured logging data.
25544: 22893:   6: 
25545: 22894:   7: ## Features
25546: 22895:   8: 
25547: 22896:   9: - Multiple log levels (INFO, WARNING, ERROR)
25548: 22897:  10: - Structured logging with metadata
25549: 22898:  11: - Firestore integration for log persistence
25550: 22899:  12: - Data cleaning and sanitization
25551: 22900:  13: - Flexible context tracking
25552: 22901:  14: - Type-safe logging interfaces
25553: 22902:  15: 
25554: 22903:  16: ## Basic Usage
25555: 22904:  17: 
25556: 22905:  18: ### Importing the Logger
25557: 22906:  19: 
25558: 22907:  20: ```typescript
25559: 22908:  21: import { logInfo, logWarning, logError } from "../utils/logger";
25560: 22909:  22: import { logger } from "firebase-functions";
25561: 22910:  23: ```
25562: 22911:  24: 
25563: 22912:  25: ### Log Levels
25564: 22913:  26: 
25565: 22914:  27: ```typescript
25566: 22915:  28: // Info level logging
25567: 22916:  29: await logInfo("Processing started", {
25568: 22917:  30:   timestamp: new Date().toISOString(),
25569: 22918:  31:   operation: "syncCards"
25570: 22919:  32: });
25571: 22920:  33: 
25572: 22921:  34: // Warning level logging
25573: 22922:  35: await logWarning("Retry attempt required", {
25574: 22923:  36:   attempt: 2,
25575: 22924:  37:   maxRetries: 3
25576: 22925:  38: });
25577: 22926:  39: 
25578: 22927:  40: // Error level logging
25579: 22928:  41: await logError(error, "syncCards:main");
25580: 22929:  42: ```
25581: 22930:  43: 
25582: 22931:  44: ## Data Structures
25583: 22932:  45: 
25584: 22933:  46: ### Log Entry Interface
25585: 22934:  47: 
25586: 22935:  48: ```typescript
25587: 22936:  49: interface LogEntry {
25588: 22937:  50:   timestamp: Date;
25589: 22938:  51:   level: "INFO" | "WARNING" | "ERROR";
25590: 22939:  52:   message: string;
25591: 22940:  53:   context?: string;
25592: 22941:  54:   data?: Record<string, unknown>;
25593: 22942:  55: }
25594: 22943:  56: ```
25595: 22944:  57: 
25596: 22945:  58: ### Error Logging Interface
25597: 22946:  59: 
25598: 22947:  60: ```typescript
25599: 22948:  61: interface GenericError {
25600: 22949:  62:   message: string;
25601: 22950:  63:   name: string;
25602: 22951:  64:   code?: string;
25603: 22952:  65:   stack?: string;
25604: 22953:  66: }
25605: 22954:  67: ```
25606: 22955:  68: 
25607: 22956:  69: ## Core Functions
25608: 22957:  70: 
25609: 22958:  71: ### Info Logging
25610: 22959:  72: 
25611: 22960:  73: ```typescript
25612: 22961:  74: export const logInfo = async (
25613: 22962:  75:   message: string,
25614: 22963:  76:   data?: LogData
25615: 22964:  77: ) => {
25616: 22965:  78:   const cleanedData = data ? cleanLogData({
25617: 22966:  79:     ...data,
25618: 22967:  80:     timestamp: new Date().toISOString(),
25619: 22968:  81:   }) : undefined;
25620: 22969:  82: 
25621: 22970:  83:   const entry: LogEntry = {
25622: 22971:  84:     timestamp: new Date(),
25623: 22972:  85:     level: "INFO",
25624: 22973:  86:     message,
25625: 22974:  87:     ...(cleanedData && {data: cleanedData}),
25626: 22975:  88:   };
25627: 22976:  89: 
25628: 22977:  90:   logger.info(message, cleanedData);
25629: 22978:  91:   await saveLogEntry(entry);
25630: 22979:  92: };
25631: 22980:  93: ```
25632: 22981:  94: 
25633: 22982:  95: ### Error Logging
25634: 22983:  96: 
25635: 22984:  97: ```typescript
25636: 22985:  98: export const logError = async (
25637: 22986:  99:   error: GenericError | GenericObject,
25638: 22987: 100:   context: string
25639: 22988: 101: ) => {
25640: 22989: 102:   const errorData = cleanLogData({
25641: 22990: 103:     stack: error.stack,
25642: 22991: 104:     code: error.code,
25643: 22992: 105:     ...(error as GenericObject),
25644: 22993: 106:     timestamp: new Date().toISOString(),
25645: 22994: 107:   });
25646: 22995: 108: 
25647: 22996: 109:   const entry: LogEntry = {
25648: 22997: 110:     timestamp: new Date(),
25649: 22998: 111:     level: "ERROR",
25650: 22999: 112:     message: error.message || "Unknown error",
25651: 23000: 113:     context,
25652: 23001: 114:     data: errorData,
25653: 23002: 115:   };
25654: 23003: 116: 
25655: 23004: 117:   logger.error(entry.message, errorData);
25656: 23005: 118:   await saveLogEntry(entry);
25657: 23006: 119: };
25658: 23007: 120: ```
25659: 23008: 121: 
25660: 23009: 122: ## Data Cleaning
25661: 23010: 123: 
25662: 23011: 124: ### Clean Log Data Function
25663: 23012: 125: 
25664: 23013: 126: ```typescript
25665: 23014: 127: function cleanLogData(
25666: 23015: 128:   data: Record<string, unknown>
25667: 23016: 129: ): Record<string, unknown> {
25668: 23017: 130:   return Object.entries(data).reduce((acc, [key, value]) => {
25669: 23018: 131:     if (value !== undefined && value !== null) {
25670: 23019: 132:       if (value && typeof value === "object") {
25671: 23020: 133:         const cleaned = cleanLogData(value as Record<string, unknown>);
25672: 23021: 134:         if (Object.keys(cleaned).length > 0) {
25673: 23022: 135:           acc[key] = cleaned;
25674: 23023: 136:         }
25675: 23024: 137:       } else {
25676: 23025: 138:         acc[key] = value instanceof Date ? value.toISOString() : value;
25677: 23026: 139:       }
25678: 23027: 140:     }
25679: 23028: 141:     return acc;
25680: 23029: 142:   }, {} as Record<string, unknown>);
25681: 23030: 143: }
25682: 23031: 144: ```
25683: 23032: 145: 
25684: 23033: 146: ## Firestore Integration
25685: 23034: 147: 
25686: 23035: 148: ### Save Log Entry
25687: 23036: 149: 
25688: 23037: 150: ```typescript
25689: 23038: 151: async function saveLogEntry(entry: LogEntry): Promise<void> {
25690: 23039: 152:   const cleanEntry = {
25691: 23040: 153:     timestamp: entry.timestamp,
25692: 23041: 154:     level: entry.level,
25693: 23042: 155:     message: entry.message,
25694: 23043: 156:     ...(entry.context && {context: entry.context}),
25695: 23044: 157:     ...(entry.data && {data: cleanLogData(entry.data)}),
25696: 23045: 158:   };
25697: 23046: 159: 
25698: 23047: 160:   await db.collection(COLLECTION.LOGS).add(cleanEntry);
25699: 23048: 161: }
25700: 23049: 162: ```
25701: 23050: 163: 
25702: 23051: 164: ## Best Practices
25703: 23052: 165: 
25704: 23053: 166: 1. **Structured Logging**:
25705: 23054: 167: 
25706: 23055: 168:    ```typescript
25707: 23056: 169:    await logInfo("Card sync completed", {
25708: 23057: 170:      cardsProcessed: 50,
25709: 23058: 171:      updatedCount: 10,
25710: 23059: 172:      duration: "5m30s",
25711: 23060: 173:      timestamp: new Date().toISOString()
25712: 23061: 174:    });
25713: 23062: 175:    ```
25714: 23063: 176: 
25715: 23064: 177: 2. **Error Context**:
25716: 23065: 178: 
25717: 23066: 179:    ```typescript
25718: 23067: 180:    await logError(error, "cardSync:processGroup", {
25719: 23068: 181:      groupId: "23783",
25720: 23069: 182:      attempt: 2,
25721: 23070: 183:      operation: "imageProcessing"
25722: 23071: 184:    });
25723: 23072: 185:    ```
25724: 23073: 186: 
25725: 23074: 187: 3. **Performance Monitoring**:
25726: 23075: 188: 
25727: 23076: 189:    ```typescript
25728: 23077: 190:    await logInfo("Operation timing", {
25729: 23078: 191:      operation: "imageCompression",
25730: 23079: 192:      duration: endTime - startTime,
25731: 23080: 193:      size: {
25732: 23081: 194:        before: originalSize,
25733: 23082: 195:        after: compressedSize
25734: 23083: 196:      }
25735: 23084: 197:    });
25736: 23085: 198:    ```
25737: 23086: 199: 
25738: 23087: 200: ## Error Handling
25739: 23088: 201: 
25740: 23089: 202: ### Common Patterns
25741: 23090: 203: 
25742: 23091: 204: ```typescript
25743: 23092: 205: try {
25744: 23093: 206:   // Operation code
25745: 23094: 207: } catch (error) {
25746: 23095: 208:   await logError(
25747: 23096: 209:     error instanceof Error ? error : new Error("Unknown error"),
25748: 23097: 210:     "operationName",
25749: 23098: 211:     { contextData: "relevant info" }
25750: 23099: 212:   );
25751: 23100: 213:   throw error;
25752: 23101: 214: }
25753: 23102: 215: ```
25754: 23103: 216: 
25755: 23104: 217: ### Error with Context
25756: 23105: 218: 
25757: 23106: 219: ```typescript
25758: 23107: 220: class DetailedError extends Error {
25759: 23108: 221:   constructor(
25760: 23109: 222:     message: string,
25761: 23110: 223:     public context: string,
25762: 23111: 224:     public metadata?: Record<string, unknown>
25763: 23112: 225:   ) {
25764: 23113: 226:     super(message);
25765: 23114: 227:     this.name = "DetailedError";
25766: 23115: 228:   }
25767: 23116: 229: }
25768: 23117: 230: ```
25769: 23118: 231: 
25770: 23119: 232: ## Query Examples
25771: 23120: 233: 
25772: 23121: 234: ### Firestore Queries
25773: 23122: 235: 
25774: 23123: 236: ```typescript
25775: 23124: 237: // Get recent errors
25776: 23125: 238: const recentErrors = await db
25777: 23126: 239:   .collection(COLLECTION.LOGS)
25778: 23127: 240:   .where("level", "==", "ERROR")
25779: 23128: 241:   .orderBy("timestamp", "desc")
25780: 23129: 242:   .limit(10)
25781: 23130: 243:   .get();
25782: 23131: 244: 
25783: 23132: 245: // Get logs by context
25784: 23133: 246: const contextLogs = await db
25785: 23134: 247:   .collection(COLLECTION.LOGS)
25786: 23135: 248:   .where("context", "==", "cardSync:processGroup")
25787: 23136: 249:   .get();
25788: 23137: 250: ```
25789: 23138: 251: 
25790: 23139: 252: ## Related Components
25791: 23140: 253: 
25792: 23141: 254: - [Error Handling](./error-handling)
25793: 23142: 255: - [Sync Logger](./sync-logger)
25794: 23143: 256: - [Progress Tracking](./progress)
25795: 23144: 257: 
25796: 23145: 258: ## Troubleshooting
25797: 23146: 259: 
25798: 23147: 260: ### Common Issues
25799: 23148: 261: 
25800: 23149: 262: 1. Missing Logs:
25801: 23150: 263:    - Check log level configuration
25802: 23151: 264:    - Verify Firestore permissions
25803: 23152: 265:    - Check error handling implementation
25804: 23153: 266: 
25805: 23154: 267: 2. Performance Impact:
25806: 23155: 268:    - Use appropriate log levels
25807: 23156: 269:    - Implement log batching for high-volume operations
25808: 23157: 270:    - Monitor Firestore usage
25809: 23158: 271: 
25810: 23159: 272: 3. Data Size:
25811: 23160: 273:    - Implement log rotation
25812: 23161: 274:    - Clean sensitive data
25813: 23162: 275:    - Monitor storage usage
25814: 23163: </file>
25815: 23164: 
25816: 23165: <file path="utils/progress.md">
25817: 23166:   1: # Progress Tracking Utility
25818: 23167:   2: 
25819: 23168:   3: ## Overview
25820: 23169:   4: 
25821: 23170:   5: The Progress Tracker (`progress.ts`) provides real-time monitoring and reporting of long-running operations, particularly during synchronization processes. It handles progress calculation, ETA estimation, and status updates.
25822: 23171:   6: 
25823: 23172:   7: ## Core Features
25824: 23173:   8: 
25825: 23174:   9: - Real-time progress tracking
25826: 23175:  10: - ETA calculations
25827: 23176:  11: - Operation statistics
25828: 23177:  12: - Progress bar visualization
25829: 23178:  13: - Step-by-step monitoring
25830: 23179:  14: - Batch progress tracking
25831: 23180:  15: 
25832: 23181:  16: ## Main Interfaces
25833: 23182:  17: 
25834: 23183:  18: ### Progress Options
25835: 23184:  19: 
25836: 23185:  20: ```typescript
25837: 23186:  21: interface ProgressOptions {
25838: 23187:  22:   total: number;
25839: 23188:  23:   title?: string;
25840: 23189:  24:   showBar?: boolean;
25841: 23190:  25:   showEta?: boolean;
25842: 23191:  26:   batchSize?: number;
25843: 23192:  27: }
25844: 23193:  28: ```
25845: 23194:  29: 
25846: 23195:  30: ### Progress State
25847: 23196:  31: 
25848: 23197:  32: ```typescript
25849: 23198:  33: interface ProgressState {
25850: 23199:  34:   current: number;
25851: 23200:  35:   total: number;
25852: 23201:  36:   startTime: Date;
25853: 23202:  37:   lastUpdateTime: Date;
25854: 23203:  38:   completed: boolean;
25855: 23204:  39:   eta?: Date;
25856: 23205:  40:   rate?: number;
25857: 23206:  41: }
25858: 23207:  42: ```
25859: 23208:  43: 
25860: 23209:  44: ## Implementation Examples
25861: 23210:  45: 
25862: 23211:  46: ### Basic Usage
25863: 23212:  47: 
25864: 23213:  48: ```typescript
25865: 23214:  49: const progress = new ProgressTracker({
25866: 23215:  50:   total: totalItems,
25867: 23216:  51:   title: "Processing Cards",
25868: 23217:  52:   showBar: true,
25869: 23218:  53:   showEta: true
25870: 23219:  54: });
25871: 23220:  55: 
25872: 23221:  56: progress.start();
25873: 23222:  57: 
25874: 23223:  58: for (const item of items) {
25875: 23224:  59:   await processItem(item);
25876: 23225:  60:   progress.increment();
25877: 23226:  61: }
25878: 23227:  62: 
25879: 23228:  63: progress.finish();
25880: 23229:  64: ```
25881: 23230:  65: 
25882: 23231:  66: ### Batch Processing
25883: 23232:  67: 
25884: 23233:  68: ```typescript
25885: 23234:  69: const tracker = new ProgressTracker({
25886: 23235:  70:   total: totalGroups,
25887: 23236:  71:   title: "Syncing Groups",
25888: 23237:  72:   batchSize: 25
25889: 23238:  73: });
25890: 23239:  74: 
25891: 23240:  75: tracker.start();
25892: 23241:  76: 
25893: 23242:  77: for (const batch of batches) {
25894: 23243:  78:   await processBatch(batch);
25895: 23244:  79:   tracker.incrementBatch(batch.length);
25896: 23245:  80: }
25897: 23246:  81: 
25898: 23247:  82: tracker.finish();
25899: 23248:  83: ```
25900: 23249:  84: 
25901: 23250:  85: ## Progress Visualization
25902: 23251:  86: 
25903: 23252:  87: ### Progress Bar
25904: 23253:  88: 
25905: 23254:  89: ```typescript
25906: 23255:  90: private renderBar(
25907: 23256:  91:   percentage: number,
25908: 23257:  92:   width: number = 30
25909: 23258:  93: ): string {
25910: 23259:  94:   const filled = Math.floor(width * (percentage / 100));
25911: 23260:  95:   const empty = width - filled;
25912: 23261:  96:  
25913: 23262:  97:   return '[' + 
25914: 23263:  98:     '='.repeat(filled) + 
25915: 23264:  99:     ' '.repeat(empty) + 
25916: 23265: 100:     ']';
25917: 23266: 101: }
25918: 23267: 102: ```
25919: 23268: 103: 
25920: 23269: 104: ### Status Line
25921: 23270: 105: 
25922: 23271: 106: ```typescript
25923: 23272: 107: private renderStatus(): string {
25924: 23273: 108:   const percentage = this.getPercentage();
25925: 23274: 109:   const current = this.state.current;
25926: 23275: 110:   const total = this.state.total;
25927: 23276: 111:  
25928: 23277: 112:   return `${this.options.title || 'Progress'}: ` +
25929: 23278: 113:     `${current}/${total} ` +
25930: 23279: 114:     `(${percentage.toFixed(1)}%)`;
25931: 23280: 115: }
25932: 23281: 116: ```
25933: 23282: 117: 
25934: 23283: 118: ## Time Calculations
25935: 23284: 119: 
25936: 23285: 120: ### ETA Estimation
25937: 23286: 121: 
25938: 23287: 122: ```typescript
25939: 23288: 123: private calculateEta(): Date | undefined {
25940: 23289: 124:   if (this.state.current === 0) return undefined;
25941: 23290: 125:  
25942: 23291: 126:   const elapsed = Date.now() - this.state.startTime.getTime();
25943: 23292: 127:   const rate = this.state.current / (elapsed / 1000);
25944: 23293: 128:   const remaining = this.state.total - this.state.current;
25945: 23294: 129:  
25946: 23295: 130:   return new Date(
25947: 23296: 131:     Date.now() + (remaining / rate) * 1000
25948: 23297: 132:   );
25949: 23298: 133: }
25950: 23299: 134: ```
25951: 23300: 135: 
25952: 23301: 136: ### Processing Rate
25953: 23302: 137: 
25954: 23303: 138: ```typescript
25955: 23304: 139: private calculateRate(): number {
25956: 23305: 140:   const elapsed = (
25957: 23306: 141:     this.state.lastUpdateTime.getTime() - 
25958: 23307: 142:     this.state.startTime.getTime()
25959: 23308: 143:   ) / 1000;
25960: 23309: 144:  
25961: 23310: 145:   return this.state.current / elapsed;
25962: 23311: 146: }
25963: 23312: 147: ```
25964: 23313: 148: 
25965: 23314: 149: ## Event Handling
25966: 23315: 150: 
25967: 23316: 151: ### Progress Updates
25968: 23317: 152: 
25969: 23318: 153: ```typescript
25970: 23319: 154: onProgress(callback: ProgressCallback): void {
25971: 23320: 155:   this.progressCallbacks.push(callback);
25972: 23321: 156: }
25973: 23322: 157: 
25974: 23323: 158: private emitProgress(): void {
25975: 23324: 159:   const progress = {
25976: 23325: 160:     current: this.state.current,
25977: 23326: 161:     total: this.state.total,
25978: 23327: 162:     percentage: this.getPercentage(),
25979: 23328: 163:     eta: this.state.eta,
25980: 23329: 164:     rate: this.state.rate
25981: 23330: 165:   };
25982: 23331: 166:  
25983: 23332: 167:   this.progressCallbacks.forEach(callback => callback(progress));
25984: 23333: 168: }
25985: 23334: 169: ```
25986: 23335: 170: 
25987: 23336: 171: ### Completion Events
25988: 23337: 172: 
25989: 23338: 173: ```typescript
25990: 23339: 174: onComplete(callback: CompleteCallback): void {
25991: 23340: 175:   this.completeCallbacks.push(callback);
25992: 23341: 176: }
25993: 23342: 177: 
25994: 23343: 178: private emitComplete(): void {
25995: 23344: 179:   const summary = {
25996: 23345: 180:     total: this.state.total,
25997: 23346: 181:     duration: this.getDuration(),
25998: 23347: 182:     averageRate: this.calculateAverageRate()
25999: 23348: 183:   };
26000: 23349: 184:  
26001: 23350: 185:   this.completeCallbacks.forEach(callback => callback(summary));
26002: 23351: 186: }
26003: 23352: 187: ```
26004: 23353: 188: 
26005: 23354: 189: ## Usage Patterns
26006: 23355: 190: 
26007: 23356: 191: ### With Async Operations
26008: 23357: 192: 
26009: 23358: 193: ```typescript
26010: 23359: 194: const processWithProgress = async (
26011: 23360: 195:   items: any[],
26012: 23361: 196:   processor: (item: any) => Promise<void>
26013: 23362: 197: ): Promise<void> => {
26014: 23363: 198:   const progress = new ProgressTracker({
26015: 23364: 199:     total: items.length,
26016: 23365: 200:     title: "Processing Items",
26017: 23366: 201:     showBar: true
26018: 23367: 202:   });
26019: 23368: 203:  
26020: 23369: 204:   progress.start();
26021: 23370: 205:  
26022: 23371: 206:   for (const item of items) {
26023: 23372: 207:     await processor(item);
26024: 23373: 208:     progress.increment();
26025: 23374: 209:     await new Promise(resolve => setTimeout(resolve, 10));
26026: 23375: 210:   }
26027: 23376: 211:  
26028: 23377: 212:   progress.finish();
26029: 23378: 213: };
26030: 23379: 214: ```
26031: 23380: 215: 
26032: 23381: 216: ### With Batch Processing
26033: 23382: 217: 
26034: 23383: 218: ```typescript
26035: 23384: 219: const processBatchWithProgress = async (
26036: 23385: 220:   batches: any[][],
26037: 23386: 221:   processor: (batch: any[]) => Promise<void>
26038: 23387: 222: ): Promise<void> => {
26039: 23388: 223:   const totalItems = batches.reduce(
26040: 23389: 224:     (sum, batch) => sum + batch.length, 
26041: 23390: 225:     0
26042: 23391: 226:   );
26043: 23392: 227:  
26044: 23393: 228:   const progress = new ProgressTracker({
26045: 23394: 229:     total: totalItems,
26046: 23395: 230:     title: "Processing Batches",
26047: 23396: 231:     batchSize: batches[0].length
26048: 23397: 232:   });
26049: 23398: 233:  
26050: 23399: 234:   progress.start();
26051: 23400: 235:  
26052: 23401: 236:   for (const batch of batches) {
26053: 23402: 237:     await processor(batch);
26054: 23403: 238:     progress.incrementBatch(batch.length);
26055: 23404: 239:   }
26056: 23405: 240:  
26057: 23406: 241:   progress.finish();
26058: 23407: 242: };
26059: 23408: 243: ```
26060: 23409: 244: 
26061: 23410: 245: ## Best Practices
26062: 23411: 246: 
26063: 23412: 247: ### Memory Efficiency
26064: 23413: 248: 
26065: 23414: 249: - Clear callbacks after completion
26066: 23415: 250: - Limit status update frequency
26067: 23416: 251: - Manage event listener count
26068: 23417: 252: 
26069: 23418: 253: ### Accuracy
26070: 23419: 254: 
26071: 23420: 255: - Update progress immediately
26072: 23421: 256: - Calculate rates periodically
26073: 23422: 257: - Maintain precise counters
26074: 23423: 258: 
26075: 23424: 259: ### User Experience
26076: 23425: 260: 
26077: 23426: 261: - Show meaningful titles
26078: 23427: 262: - Provide accurate ETAs
26079: 23428: 263: - Update status consistently
26080: 23429: 264: 
26081: 23430: 265: ## Related Components
26082: 23431: 266: 
26083: 23432: 267: - [Sync Logger](./sync-logger)
26084: 23433: 268: - [Batch Processor](./batch)
26085: 23434: 269: - [Logger](./logging)
26086: 23435: 270: 
26087: 23436: 271: ## Troubleshooting
26088: 23437: 272: 
26089: 23438: 273: ### Common Issues
26090: 23439: 274: 
26091: 23440: 275: 1. Performance Impact:
26092: 23441: 276:    - Limit update frequency
26093: 23442: 277:    - Optimize calculations
26094: 23443: 278:    - Monitor memory usage
26095: 23444: 279: 
26096: 23445: 280: 2. Accuracy Problems:
26097: 23446: 281:    - Verify counter updates
26098: 23447: 282:    - Check time calculations
26099: 23448: 283:    - Validate batch sizes
26100: 23449: 284: 
26101: 23450: 285: 3. Display Issues:
26102: 23451: 286:    - Check terminal width
26103: 23452: 287:    - Verify output formatting
26104: 23453: 288:    - Monitor update rates
26105: 23454: </file>
26106: 23455: 
26107: 23456: <file path="utils/request.md">
26108: 23457:   1: # Request Handler Utility
26109: 23458:   2: 
26110: 23459:   3: ## Overview
26111: 23460:   4: 
26112: 23461:   5: The Request Handler (`request.ts`) manages HTTP requests with built-in retry logic, rate limiting, and error handling. It provides a robust foundation for external API communications, particularly with TCGplayer's API.
26113: 23462:   6: 
26114: 23463:   7: ## Core Features
26115: 23464:   8: 
26116: 23465:   9: - Configurable retry logic
26117: 23466:  10: - Rate limiting
26118: 23467:  11: - Request queuing
26119: 23468:  12: - Response caching
26120: 23469:  13: - Error standardization
26121: 23470:  14: - Request logging
26122: 23471:  15: 
26123: 23472:  16: ## Configuration
26124: 23473:  17: 
26125: 23474:  18: ### Request Settings
26126: 23475:  19: 
26127: 23476:  20: ```typescript
26128: 23477:  21: interface RequestOptions {
26129: 23478:  22:   baseURL?: string;
26130: 23479:  23:   timeout?: number;
26131: 23480:  24:   retries?: number;
26132: 23481:  25:   backoff?: number;
26133: 23482:  26:   headers?: Record<string, string>;
26134: 23483:  27:   cache?: boolean;
26135: 23484:  28:   validateStatus?: (status: number) => boolean;
26136: 23485:  29: }
26137: 23486:  30: ```
26138: 23487:  31: 
26139: 23488:  32: ### Default Configuration
26140: 23489:  33: 
26141: 23490:  34: ```typescript
26142: 23491:  35: const DEFAULT_OPTIONS: RequestOptions = {
26143: 23492:  36:   timeout: 10000,
26144: 23493:  37:   retries: 3,
26145: 23494:  38:   backoff: 1000,
26146: 23495:  39:   cache: true,
26147: 23496:  40:   validateStatus: (status: number) => status >= 200 && status < 300
26148: 23497:  41: };
26149: 23498:  42: ```
26150: 23499:  43: 
26151: 23500:  44: ## Main Methods
26152: 23501:  45: 
26153: 23502:  46: ### HTTP Methods
26154: 23503:  47: 
26155: 23504:  48: ```typescript
26156: 23505:  49: class RequestHandler {
26157: 23506:  50:   async get<T>(
26158: 23507:  51:     url: string, 
26159: 23508:  52:     options?: RequestOptions
26160: 23509:  53:   ): Promise<T>
26161: 23510:  54: 
26162: 23511:  55:   async post<T>(
26163: 23512:  56:     url: string, 
26164: 23513:  57:     data: unknown, 
26165: 23514:  58:     options?: RequestOptions
26166: 23515:  59:   ): Promise<T>
26167: 23516:  60: 
26168: 23517:  61:   async put<T>(
26169: 23518:  62:     url: string, 
26170: 23519:  63:     data: unknown, 
26171: 23520:  64:     options?: RequestOptions
26172: 23521:  65:   ): Promise<T>
26173: 23522:  66: 
26174: 23523:  67:   async delete<T>(
26175: 23524:  68:     url: string, 
26176: 23525:  69:     options?: RequestOptions
26177: 23526:  70:   ): Promise<T>
26178: 23527:  71: }
26179: 23528:  72: ```
26180: 23529:  73: 
26181: 23530:  74: ## Implementation Examples
26182: 23531:  75: 
26183: 23532:  76: ### Basic Request
26184: 23533:  77: 
26185: 23534:  78: ```typescript
26186: 23535:  79: const requestHandler = new RequestHandler({
26187: 23536:  80:   baseURL: "https://api.tcgplayer.com",
26188: 23537:  81:   headers: {
26189: 23538:  82:     "Authorization": `Bearer ${token}`,
26190: 23539:  83:     "Content-Type": "application/json"
26191: 23540:  84:   }
26192: 23541:  85: });
26193: 23542:  86: 
26194: 23543:  87: const data = await requestHandler.get<CardResponse>(
26195: 23544:  88:   `/catalog/products/${productId}`
26196: 23545:  89: );
26197: 23546:  90: ```
26198: 23547:  91: 
26199: 23548:  92: ### With Retry Logic
26200: 23549:  93: 
26201: 23550:  94: ```typescript
26202: 23551:  95: const fetchWithRetry = async <T>(
26203: 23552:  96:   url: string,
26204: 23553:  97:   options: RequestOptions = {}
26205: 23554:  98: ): Promise<T> => {
26206: 23555:  99:   let attempt = 0;
26207: 23556: 100:  
26208: 23557: 101:   while (attempt < (options.retries || DEFAULT_OPTIONS.retries)) {
26209: 23558: 102:     try {
26210: 23559: 103:       return await requestHandler.get<T>(url, options);
26211: 23560: 104:     } catch (error) {
26212: 23561: 105:       attempt++;
26213: 23562: 106:       if (attempt === options.retries) throw error;
26214: 23563: 107:      
26215: 23564: 108:       const delay = Math.pow(2, attempt) * options.backoff;
26216: 23565: 109:       await new Promise(resolve => setTimeout(resolve, delay));
26217: 23566: 110:     }
26218: 23567: 111:   }
26219: 23568: 112:  
26220: 23569: 113:   throw new Error("Max retries exceeded");
26221: 23570: 114: };
26222: 23571: 115: ```
26223: 23572: 116: 
26224: 23573: 117: ## Error Handling
26225: 23574: 118: 
26226: 23575: 119: ### Request Error
26227: 23576: 120: 
26228: 23577: 121: ```typescript
26229: 23578: 122: export class RequestError extends Error {
26230: 23579: 123:   constructor(
26231: 23580: 124:     message: string,
26232: 23581: 125:     public status?: number,
26233: 23582: 126:     public code?: string,
26234: 23583: 127:     public response?: unknown
26235: 23584: 128:   ) {
26236: 23585: 129:     super(message);
26237: 23586: 130:     this.name = "RequestError";
26238: 23587: 131:   }
26239: 23588: 132: }
26240: 23589: 133: ```
26241: 23590: 134: 
26242: 23591: 135: ### Error Processing
26243: 23592: 136: 
26244: 23593: 137: ```typescript
26245: 23594: 138: private processError(error: unknown): never {
26246: 23595: 139:   if (axios.isAxiosError(error)) {
26247: 23596: 140:     throw new RequestError(
26248: 23597: 141:       error.message,
26249: 23598: 142:       error.response?.status,
26250: 23599: 143:       error.code,
26251: 23600: 144:       error.response?.data
26252: 23601: 145:     );
26253: 23602: 146:   }
26254: 23603: 147:  
26255: 23604: 148:   throw error;
26256: 23605: 149: }
26257: 23606: 150: ```
26258: 23607: 151: 
26259: 23608: 152: ## Rate Limiting
26260: 23609: 153: 
26261: 23610: 154: ### Rate Limiter
26262: 23611: 155: 
26263: 23612: 156: ```typescript
26264: 23613: 157: class RateLimiter {
26265: 23614: 158:   private queue: Array<() => Promise<void>> = [];
26266: 23615: 159:   private processing = false;
26267: 23616: 160:  
26268: 23617: 161:   async add<T>(
26269: 23618: 162:     request: () => Promise<T>
26270: 23619: 163:   ): Promise<T> {
26271: 23620: 164:     return new Promise((resolve, reject) => {
26272: 23621: 165:       this.queue.push(async () => {
26273: 23622: 166:         try {
26274: 23623: 167:           const result = await request();
26275: 23624: 168:           resolve(result);
26276: 23625: 169:         } catch (error) {
26277: 23626: 170:           reject(error);
26278: 23627: 171:         }
26279: 23628: 172:       });
26280: 23629: 173:      
26281: 23630: 174:       if (!this.processing) {
26282: 23631: 175:         this.processQueue();
26283: 23632: 176:       }
26284: 23633: 177:     });
26285: 23634: 178:   }
26286: 23635: 179: }
26287: 23636: 180: ```
26288: 23637: 181: 
26289: 23638: 182: ### Queue Processing
26290: 23639: 183: 
26291: 23640: 184: ```typescript
26292: 23641: 185: private async processQueue(): Promise<void> {
26293: 23642: 186:   if (this.queue.length === 0) {
26294: 23643: 187:     this.processing = false;
26295: 23644: 188:     return;
26296: 23645: 189:   }
26297: 23646: 190:  
26298: 23647: 191:   this.processing = true;
26299: 23648: 192:   const request = this.queue.shift();
26300: 23649: 193:  
26301: 23650: 194:   if (request) {
26302: 23651: 195:     await request();
26303: 23652: 196:     await new Promise(resolve => 
26304: 23653: 197:       setTimeout(resolve, this.requestDelay)
26305: 23654: 198:     );
26306: 23655: 199:     await this.processQueue();
26307: 23656: 200:   }
26308: 23657: 201: }
26309: 23658: 202: ```
26310: 23659: 203: 
26311: 23660: 204: ## Response Caching
26312: 23661: 205: 
26313: 23662: 206: ### Cache Implementation
26314: 23663: 207: 
26315: 23664: 208: ```typescript
26316: 23665: 209: class ResponseCache {
26317: 23666: 210:   private cache = new Map<string, CacheEntry>();
26318: 23667: 211:  
26319: 23668: 212:   set(key: string, value: unknown, ttl: number): void {
26320: 23669: 213:     this.cache.set(key, {
26321: 23670: 214:       value,
26322: 23671: 215:       expiry: Date.now() + ttl
26323: 23672: 216:     });
26324: 23673: 217:   }
26325: 23674: 218:  
26326: 23675: 219:   get(key: string): unknown | undefined {
26327: 23676: 220:     const entry = this.cache.get(key);
26328: 23677: 221:     if (!entry) return undefined;
26329: 23678: 222:    
26330: 23679: 223:     if (Date.now() > entry.expiry) {
26331: 23680: 224:       this.cache.delete(key);
26332: 23681: 225:       return undefined;
26333: 23682: 226:     }
26334: 23683: 227:    
26335: 23684: 228:     return entry.value;
26336: 23685: 229:   }
26337: 23686: 230: }
26338: 23687: 231: ```
26339: 23688: 232: 
26340: 23689: 233: ## Usage Guidelines
26341: 23690: 234: 
26342: 23691: 235: ### Basic Usage
26343: 23692: 236: 
26344: 23693: 237: ```typescript
26345: 23694: 238: const handler = new RequestHandler();
26346: 23695: 239: 
26347: 23696: 240: // GET request
26348: 23697: 241: const data = await handler.get<DataType>(url);
26349: 23698: 242: 
26350: 23699: 243: // POST request
26351: 23700: 244: const response = await handler.post<ResponseType>(
26352: 23701: 245:   url,
26353: 23702: 246:   requestData
26354: 23703: 247: );
26355: 23704: 248: ```
26356: 23705: 249: 
26357: 23706: 250: ### With Options
26358: 23707: 251: 
26359: 23708: 252: ```typescript
26360: 23709: 253: const response = await handler.get<CardData>(url, {
26361: 23710: 254:   timeout: 5000,
26362: 23711: 255:   retries: 2,
26363: 23712: 256:   cache: true,
26364: 23713: 257:   headers: {
26365: 23714: 258:     "Authorization": `Bearer ${token}`
26366: 23715: 259:   }
26367: 23716: 260: });
26368: 23717: 261: ```
26369: 23718: 262: 
26370: 23719: 263: ## Best Practices
26371: 23720: 264: 
26372: 23721: 265: ### Error Management
26373: 23722: 266: 
26374: 23723: 267: - Implement proper error handling
26375: 23724: 268: - Use retry logic appropriately
26376: 23725: 269: - Log failed requests
26377: 23726: 270: 
26378: 23727: 271: ### Performance
26379: 23728: 272: 
26380: 23729: 273: - Enable caching when appropriate
26381: 23730: 274: - Use rate limiting
26382: 23731: 275: - Monitor response times
26383: 23732: 276: 
26384: 23733: 277: ### Security
26385: 23734: 278: 
26386: 23735: 279: - Validate URLs
26387: 23736: 280: - Secure sensitive headers
26388: 23737: 281: - Monitor request patterns
26389: 23738: 282: 
26390: 23739: 283: ## Related Components
26391: 23740: 284: 
26392: 23741: 285: - [Error Handler](./error-handling)
26393: 23742: 286: - [Logger](./logging)
26394: 23743: 287: - [Cache System](./cache)
26395: 23744: 288: 
26396: 23745: 289: ## Troubleshooting
26397: 23746: 290: 
26398: 23747: 291: ### Common Issues
26399: 23748: 292: 
26400: 23749: 293: 1. Request Timeouts:
26401: 23750: 294:    - Check network connectivity
26402: 23751: 295:    - Verify timeout settings
26403: 23752: 296:    - Monitor server response times
26404: 23753: 297: 
26405: 23754: 298: 2. Rate Limiting:
26406: 23755: 299:    - Review rate limit settings
26407: 23756: 300:    - Check queue processing
26408: 23757: 301:    - Monitor request patterns
26409: 23758: 302: 
26410: 23759: 303: 3. Cache Issues:
26411: 23760: 304:    - Verify cache configuration
26412: 23761: 305:    - Check TTL settings
26413: 23762: 306:    - Monitor cache hit rates
26414: 23763: </file>
26415: 23764: 
26416: 23765: <file path="utils/sync-logger.md">
26417: 23766:   1: # Sync Logger Utility
26418: 23767:   2: 
26419: 23768:   3: ## Overview
26420: 23769:   4: 
26421: 23770:   5: The Sync Logger (`syncLogger.ts`) provides specialized logging functionality for synchronization operations. It offers detailed tracking of card and price synchronization processes, including group details, card information, and sync results.
26422: 23771:   6: 
26423: 23772:   7: ## Features
26424: 23773:   8: 
26425: 23774:   9: - Detailed sync operation logging
26426: 23775:  10: - Card and price details tracking
26427: 23776:  11: - Group processing information
26428: 23777:  12: - Progress monitoring
26429: 23778:  13: - Results summarization
26430: 23779:  14: - Support for dry run operations
26431: 23780:  15: 
26432: 23781:  16: ## Core Interfaces
26433: 23782:  17: 
26434: 23783:  18: ### Logger Options
26435: 23784:  19: 
26436: 23785:  20: ```typescript
26437: 23786:  21: interface SyncLoggerOptions {
26438: 23787:  22:   type: "manual" | "scheduled" | "both";
26439: 23788:  23:   limit?: number;
26440: 23789:  24:   dryRun?: boolean;
26441: 23790:  25:   groupId?: string;
26442: 23791:  26:   batchSize?: number;
26443: 23792:  27: }
26444: 23793:  28: ```
26445: 23794:  29: 
26446: 23795:  30: ### Card Details
26447: 23796:  31: 
26448: 23797:  32: ```typescript
26449: 23798:  33: interface CardDetails {
26450: 23799:  34:   id: number;
26451: 23800:  35:   name: string;
26452: 23801:  36:   groupId: string;
26453: 23802:  37:   normalPrice?: number;
26454: 23803:  38:   foilPrice?: number;
26455: 23804:  39:   rawPrices: Array<{
26456: 23805:  40:     type: "Normal" | "Foil";
26457: 23806:  41:     price: number;
26458: 23807:  42:     groupId: string;
26459: 23808:  43:   }>;
26460: 23809:  44:   imageUrl?: string;
26461: 23810:  45:   storageImageUrl?: string;
26462: 23811:  46: }
26463: 23812:  47: ```
26464: 23813:  48: 
26465: 23814:  49: ### Sync Results
26466: 23815:  50: 
26467: 23816:  51: ```typescript
26468: 23817:  52: interface SyncResults {
26469: 23818:  53:   success: number;
26470: 23819:  54:   failures: number;
26471: 23820:  55:   groupId?: string;
26472: 23821:  56:   type: "Manual" | "Scheduled";
26473: 23822:  57:   imagesProcessed?: number;
26474: 23823:  58:   imagesUpdated?: number;
26475: 23824:  59: }
26476: 23825:  60: ```
26477: 23826:  61: 
26478: 23827:  62: ## Usage Examples
26479: 23828:  63: 
26480: 23829:  64: ### Basic Usage
26481: 23830:  65: 
26482: 23831:  66: ```typescript
26483: 23832:  67: const logger = new SyncLogger({
26484: 23833:  68:   type: "manual",
26485: 23834:  69:   dryRun: true,
26486: 23835:  70:   limit: 10,
26487: 23836:  71:   batchSize: 25
26488: 23837:  72: });
26489: 23838:  73: 
26490: 23839:  74: await logger.start();
26491: 23840:  75: await logger.logGroupFound(totalGroups);
26492: 23841:  76: await logger.logCardDetails(cardDetails);
26493: 23842:  77: await logger.finish();
26494: 23843:  78: ```
26495: 23844:  79: 
26496: 23845:  80: ### Sync Process Logging
26497: 23846:  81: 
26498: 23847:  82: ```typescript
26499: 23848:  83: // Initialize logger
26500: 23849:  84: const logger = new SyncLogger({
26501: 23850:  85:   type: options.dryRun ? "manual" : "scheduled",
26502: 23851:  86:   limit: options.limit,
26503: 23852:  87:   dryRun: options.dryRun,
26504: 23853:  88:   groupId: options.groupId
26505: 23854:  89: });
26506: 23855:  90: 
26507: 23856:  91: // Start logging
26508: 23857:  92: await logger.start();
26509: 23858:  93: 
26510: 23859:  94: // Log group information
26511: 23860:  95: await logger.logGroupDetails(groupId, products.length, prices.length);
26512: 23861:  96: 
26513: 23862:  97: // Log individual card details
26514: 23863:  98: await logger.logCardDetails({
26515: 23864:  99:   id: product.productId,
26516: 23865: 100:   name: product.name,
26517: 23866: 101:   groupId: product.groupId.toString(),
26518: 23867: 102:   normalPrice: normalPrice,
26519: 23868: 103:   foilPrice: foilPrice,
26520: 23869: 104:   rawPrices: pricesArray
26521: 23870: 105: });
26522: 23871: 106: 
26523: 23872: 107: // Log final results
26524: 23873: 108: await logger.logSyncResults({
26525: 23874: 109:   success: processedCount,
26526: 23875: 110:   failures: errorCount,
26527: 23876: 111:   type: "Manual",
26528: 23877: 112:   imagesProcessed: 100,
26529: 23878: 113:   imagesUpdated: 25
26530: 23879: 114: });
26531: 23880: 115: ```
26532: 23881: 116: 
26533: 23882: 117: ## Core Methods
26534: 23883: 118: 
26535: 23884: 119: ### Start Logging
26536: 23885: 120: 
26537: 23886: 121: ```typescript
26538: 23887: 122: async start(): Promise<void> {
26539: 23888: 123:   console.log("\nStarting sync test...");
26540: 23889: 124:   console.log(`Type: ${this.options.type}`);
26541: 23890: 125:   if (this.options.limit) console.log(`Limit: ${this.options.limit} cards`);
26542: 23891: 126:   console.log(`Dry Run: ${this.options.dryRun ? "true" : "false"}`);
26543: 23892: 127:   console.log("\n=== Fetching Raw Data ===");
26544: 23893: 128: }
26545: 23894: 129: ```
26546: 23895: 130: 
26547: 23896: 131: ### Group Logging
26548: 23897: 132: 
26549: 23898: 133: ```typescript
26550: 23899: 134: async logGroupDetails(
26551: 23900: 135:   groupId: string,
26552: 23901: 136:   products: number,
26553: 23902: 137:   prices: number
26554: 23903: 138: ): Promise<void> {
26555: 23904: 139:   this.groups.set(groupId, {products, prices});
26556: 23905: 140:   console.log(
26557: 23906: 141:     `Group ${groupId} has ${products} products and ${prices} prices`
26558: 23907: 142:   );
26559: 23908: 143: }
26560: 23909: 144: ```
26561: 23910: 145: 
26562: 23911: 146: ### Card Details Logging
26563: 23912: 147: 
26564: 23913: 148: ```typescript
26565: 23914: 149: async logCardDetails(details: CardDetails): Promise<void> {
26566: 23915: 150:   this.cards.push(details);
26567: 23916: 151:   if (this.cards.length === 1) {
26568: 23917: 152:     console.log("\n=== Card Details ===");
26569: 23918: 153:   }
26570: 23919: 154: 
26571: 23920: 155:   console.log(`Card: ${details.name} (${details.groupId || "UNKNOWN"})`);
26572: 23921: 156:   console.log(`- ID: ${details.id}`);
26573: 23922: 157:   console.log(`- Group ID: ${details.groupId || "UNKNOWN"}`);
26574: 23923: 158: 
26575: 23924: 159:   if (details.rawPrices.length > 0) {
26576: 23925: 160:     console.log("- Raw Prices:");
26577: 23926: 161:     details.rawPrices.forEach((price) => {
26578: 23927: 162:       console.log(
26579: 23928: 163:         `  > ${price.type}: $${price.price.toFixed(2)} ` +
26580: 23929: 164:         `(Group: ${price.groupId})`
26581: 23930: 165:       );
26582: 23931: 166:     });
26583: 23932: 167:   }
26584: 23933: 168: }
26585: 23934: 169: ```
26586: 23935: 170: 
26587: 23936: 171: ## Output Examples
26588: 23937: 172: 
26589: 23938: 173: ### Sync Start
26590: 23939: 174: 
26591: 23940: 175: ```text
26592: 23941: 176: Starting sync test...
26593: 23942: 177: Type: manual
26594: 23943: 178: Limit: 10 cards
26595: 23944: 179: Dry Run: true
26596: 23945: 180: 
26597: 23946: 181: === Fetching Raw Data ===
26598: 23947: 182: ```
26599: 23948: 183: 
26600: 23949: 184: ### Group Information
26601: 23950: 185: 
26602: 23951: 186: ```text
26603: 23952: 187: Found 15 groups
26604: 23953: 188: Group 23783 has 100 products and 200 prices
26605: 23954: 189: ```
26606: 23955: 190: 
26607: 23956: 191: ### Card Details Output Example
26608: 23957: 192: 
26609: 23958: 193: ```text
26610: 23959: 194: === Card Details ===
26611: 23960: 195: Card: Cloud (23783)
26612: 23961: 196: - ID: 477236
26613: 23962: 197: - Group ID: 23783
26614: 23963: 198: - Raw Prices:
26615: 23964: 199:   > Normal: $1.99 (Group: 23783)
26616: 23965: 200:   > Foil: $5.99 (Group: 23783)
26617: 23966: 201: - Image URL: https://example.com/image.jpg
26618: 23967: 202: - Storage URL: gs://bucket/image.jpg
26619: 23968: 203: ```
26620: 23969: 204: 
26621: 23970: 205: ## Best Practices
26622: 23971: 206: 
26623: 23972: 207: 1. **Consistent Usage**:
26624: 23973: 208: 
26625: 23974: 209:    ```typescript
26626: 23975: 210:    const logger = new SyncLogger(options);
26627: 23976: 211:    await logger.start();
26628: 23977: 212:    try {
26629: 23978: 213:      // Sync operations
26630: 23979: 214:    } finally {
26631: 23980: 215:      await logger.finish();
26632: 23981: 216:    }
26633: 23982: 217:    ```
26634: 23983: 218: 
26635: 23984: 219: 2. **Detailed Logging**:
26636: 23985: 220: 
26637: 23986: 221:    ```typescript
26638: 23987: 222:    await logger.logCardDetails({
26639: 23988: 223:      id: product.id,
26640: 23989: 224:      name: product.name,
26641: 23990: 225:      groupId: product.groupId,
26642: 23991: 226:      normalPrice: product.prices.normal,
26643: 23992: 227:      foilPrice: product.prices.foil,
26644: 23993: 228:      rawPrices: product.allPrices,
26645: 23994: 229:      imageUrl: product.imageUrl,
26646: 23995: 230:      storageImageUrl: product.storageUrl
26647: 23996: 231:    });
26648: 23997: 232:    ```
26649: 23998: 233: 
26650: 23999: 234: 3. **Error Tracking**:
26651: 24000: 235: 
26652: 24001: 236:    ```typescript
26653: 24002: 237:    try {
26654: 24003: 238:      await processGroup(group);
26655: 24004: 239:    } catch (error) {
26656: 24005: 240:      await logger.logSyncResults({
26657: 24006: 241:        success: processed,
26658: 24007: 242:        failures: failures + 1,
26659: 24008: 243:        type: "Manual"
26660: 24009: 244:      });
26661: 24010: 245:    }
26662: 24011: 246:    ```
26663: 24012: 247: 
26664: 24013: 248: ## Related Components
26665: 24014: 249: 
26666: 24015: 250: - [Logger](./logging)
26667: 24016: 251: - [Error Handling](./error-handling)
26668: 24017: 252: - [Progress Tracking](./progress)
26669: 24018: 253: 
26670: 24019: 254: ## Troubleshooting
26671: 24020: 255: 
26672: 24021: 256: ### Common Issues
26673: 24022: 257: 
26674: 24023: 258: 1. Missing Information:
26675: 24024: 259:    - Verify all required fields are provided
26676: 24025: 260:    - Check logging options configuration
26677: 24026: 261:    - Ensure proper error handling
26678: 24027: 262: 
26679: 24028: 263: 2. Performance Impact:
26680: 24029: 264:    - Use appropriate batch sizes
26681: 24030: 265:    - Monitor memory usage
26682: 24031: 266:    - Implement log rotation
26683: 24032: 267: 
26684: 24033: 268: 3. Output Formatting:
26685: 24034: 269:    - Verify console output formatting
26686: 24035: 270:    - Check price formatting
26687: 24036: 271:    - Validate date/time formats
26688: 24037: </file>
26689: 24038: 
26690: 24039: </repository_files>
26691: </file>
26692: 
26693: <file path="faq.md">
26694:   1: # Frequently Asked Questions
26695:   2: 
26696:   3: ## General
26697:   4: 
26698:   5: ### What is FFTCG Sync Service?
26699:   6: 
26700:   7: A Firebase-based service that synchronizes Final Fantasy Trading Card Game data from TCGplayer, including card information, prices, and images.
26701:   8: 
26702:   9: ### What are the system requirements?
26703:  10: 
26704:  11: - Node.js 18 or higher
26705:  12: - Firebase CLI
26706:  13: - Firebase project with Firestore and Storage enabled
26707:  14: - 1GB minimum memory allocation
26708:  15: - Sufficient storage quota for card images
26709:  16: 
26710:  17: ### How often does the service sync data?
26711:  18: 
26712:  19: - Cards: Daily at 21:00 UTC
26713:  20: - Prices: Daily at 21:30 UTC
26714:  21: - Images: During card synchronization
26715:  22: 
26716:  23: ## Synchronization
26717:  24: 
26718:  25: ### How do I manually trigger a sync?
26719:  26: 
26720:  27: ```typescript
26721:  28: // For cards
26722:  29: await syncCards({
26723:  30:   dryRun: false,
26724:  31:   limit: undefined,
26725:  32:   groupId: undefined
26726:  33: });
26727:  34: 
26728:  35: // For prices
26729:  36: await syncPrices({
26730:  37:   dryRun: false,
26731:  38:   limit: undefined,
26732:  39:   groupId: undefined
26733:  40: });
26734:  41: ```
26735:  42: 
26736:  43: ### What is dry run mode?
26737:  44: 
26738:  45: Dry run mode (`dryRun: true`) allows you to test synchronization without making any changes to the database. It's useful for:
26739:  46: 
26740:  47: - Validating data before actual sync
26741:  48: - Testing configuration changes
26742:  49: - Debugging sync issues
26743:  50: 
26744:  51: ### How do I sync specific card groups?
26745:  52: 
26746:  53: ```typescript
26747:  54: const options = {
26748:  55:   groupId: "23783",  // Specific group ID
26749:  56:   dryRun: false
26750:  57: };
26751:  58: await syncCards(options);
26752:  59: ```
26753:  60: 
26754:  61: ### Why are some syncs skipped?
26755:  62: 
26756:  63: Syncs may be skipped when:
26757:  64: 
26758:  65: - Data hasn't changed (verified via hash comparison)
26759:  66: - Rate limits are reached
26760:  67: - Previous sync is still in progress
26761:  68: - Network issues occur
26762:  69: 
26763:  70: ## Image Processing
26764:  71: 
26765:  72: ### What image formats are supported?
26766:  73: 
26767:  74: Currently, only JPEG images are supported. The service:
26768:  75: 
26769:  76: - Validates JPEG format
26770:  77: - Checks file signatures
26771:  78: - Enforces size limits (5MB max)
26772:  79: 
26773:  80: ### How are images optimized?
26774:  81: 
26775:  82: Images are processed in two ways:
26776:  83: 
26777:  84: - Standard resolution (200px width)
26778:  85: - High resolution (400px width)
26779:  86: 
26780:  87: Both versions are:
26781:  88: 
26782:  89: - Compressed using mozjpeg
26783:  90: - Progressive loading enabled
26784:  91: - Quality optimized (85-90%)
26785:  92: 
26786:  93: ### Why are some images not updating?
26787:  94: 
26788:  95: Images might not update if:
26789:  96: 
26790:  97: - Hash matches existing image
26791:  98: - Validation fails
26792:  99: - Storage quota is exceeded
26793: 100: - Network errors occur
26794: 101: 
26795: 102: ## Firebase Integration
26796: 103: 
26797: 104: ### How is data stored in Firestore?
26798: 105: 
26799: 106: Data is organized in collections:
26800: 107: 
26801: 108: - `cards`: Card information
26802: 109: - `prices`: Price history
26803: 110: - `cardHashes`: Change detection
26804: 111: - `priceHashes`: Price updates
26805: 112: - `imageMetadata`: Image information
26806: 113: - `syncMetadata`: Sync status
26807: 114: - `logs`: System logs
26808: 115: 
26809: 116: ### How are images stored?
26810: 117: 
26811: 118: Images are stored in Firebase Storage:
26812: 119: 
26813: 120: - Path format: `card-images/{groupId}/{productId}_{resolution}.jpg`
26814: 121: - Metadata includes hash and timestamp
26815: 122: - URLs are signed for long-term access
26816: 123: 
26817: 124: ### What happens if Firebase quotas are exceeded?
26818: 125: 
26819: 126: The service will:
26820: 127: 
26821: 128: 1. Log the quota error
26822: 129: 2. Pause operations
26823: 130: 3. Retry with exponential backoff
26824: 131: 4. Skip non-critical updates
26825: 132: 
26826: 133: ## Rate Limiting
26827: 134: 
26828: 135: ### How does rate limiting work?
26829: 136: 
26830: 137: ```typescript
26831: 138: const rateLimiter = {
26832: 139:   tokens: 100,
26833: 140:   refillRate: 10,
26834: 141:   interval: 1000
26835: 142: };
26836: 143: ```
26837: 144: 
26838: 145: - Token bucket algorithm
26839: 146: - Configurable limits
26840: 147: - Automatic retry handling
26841: 148: 
26842: 149: ### What are the default rate limits?
26843: 150: 
26844: 151: - API requests: 100 per minute
26845: 152: - Image processing: 25 concurrent operations
26846: 153: - Database writes: Batch size of 500
26847: 154: - Storage operations: 10 concurrent uploads
26848: 155: 
26849: 156: ### How do I adjust rate limits?
26850: 157: 
26851: 158: Modify the configuration in your environment:
26852: 159: 
26853: 160: ```typescript
26854: 161: const runtimeOpts = {
26855: 162:   timeoutSeconds: 540,
26856: 163:   memory: "1GiB",
26857: 164: } as const;
26858: 165: ```
26859: 166: 
26860: 167: ## Caching
26861: 168: 
26862: 169: ### What is cached?
26863: 170: 
26864: 171: - Card data: 1 hour TTL
26865: 172: - Image metadata: 1 hour TTL
26866: 173: - Image buffers: 5 minutes TTL
26867: 174: - API responses: Request-specific TTL
26868: 175: 
26869: 176: ### How does the cache hierarchy work?
26870: 177: 
26871: 178: 1. Memory cache (L1)
26872: 179: 2. LRU cache (L2)
26873: 180: 3. Firestore (persistent)
26874: 181: 
26875: 182: ### How do I clear the cache?
26876: 183: 
26877: 184: ```typescript
26878: 185: // Clear specific cache
26879: 186: imageCache.clear();
26880: 187: cardCache.clear();
26881: 188: 
26882: 189: // Clear all caches
26883: 190: await clearAllCaches();
26884: 191: ```
26885: 192: 
26886: 193: ## Error Handling
26887: 194: 
26888: 195: ### How are errors logged?
26889: 196: 
26890: 197: ```typescript
26891: 198: // Error logging with context
26892: 199: await logDetailedError(
26893: 200:   error,
26894: 201:   "operationContext",
26895: 202:   { metadata: "details" },
26896: 203:   "ERROR"
26897: 204: );
26898: 205: ```
26899: 206: 
26900: 207: ### What retry mechanisms are in place?
26901: 208: 
26902: 209: - Maximum 3 retries
26903: 210: - Exponential backoff
26904: 211: - Configurable delay
26905: 212: - Operation-specific handling
26906: 213: 
26907: 214: ### How do I debug sync failures?
26908: 215: 
26909: 216: 1. Check sync metadata collection
26910: 217: 2. Review error logs
26911: 218: 3. Use dry run mode
26912: 219: 4. Monitor rate limits
26913: 220: 
26914: 221: ## Deployment
26915: 222: 
26916: 223: ### How do I deploy updates?
26917: 224: 
26918: 225: ```bash
26919: 226: # Deploy all functions
26920: 227: npm run deploy
26921: 228: 
26922: 229: # Deploy specific function
26923: 230: firebase deploy --only functions:functionName
26924: 231: ```
26925: 232: 
26926: 233: ### How do I test before deployment?
26927: 234: 
26928: 235: ```bash
26929: 236: # Run tests
26930: 237: npm run test:images
26931: 238: 
26932: 239: # Validate sync
26933: 240: npm run validate-sync
26934: 241: 
26935: 242: # Local emulation
26936: 243: npm run serve
26937: 244: ```
26938: 245: 
26939: 246: ### What's the deployment rollback process?
26940: 247: 
26941: 248: 1. Use Firebase Console
26942: 249: 2. Select previous version
26943: 250: 3. Click "Rollback"
26944: 251: 4. Verify functionality
26945: 252: 
26946: 253: ## Monitoring
26947: 254: 
26948: 255: ### How do I monitor sync status?
26949: 256: 
26950: 257: 1. Check sync metadata collection
26951: 258: 2. Review logging dashboard
26952: 259: 3. Use health check endpoint
26953: 260: 4. Monitor performance metrics
26954: 261: 
26955: 262: ### What metrics are available?
26956: 263: 
26957: 264: - Sync completion rates
26958: 265: - Processing times
26959: 266: - Error rates
26960: 267: - Cache hit rates
26961: 268: - Storage usage
26962: 269: - API response times
26963: 270: 
26964: 271: ### How do I set up alerts?
26965: 272: 
26966: 273: Configure Firebase Alert conditions for:
26967: 274: 
26968: 275: - Function failures
26969: 276: - High error rates
26970: 277: - Quota approaching limits
26971: 278: - Sync failures
26972: 279: - Performance degradation
26973: </file>
26974: 
26975: <file path="index.md">
26976:  1: ---
26977:  2: layout: home
26978:  3: hero:
26979:  4:   name: FFTCG Sync Service
26980:  5:   text: Card and Price Synchronization Service
26981:  6:   tagline: Automated synchronization and management of FFTCG card data and prices
26982:  7:   actions:
26983:  8:     - theme: brand
26984:  9:       text: Get Started
26985: 10:       link: /introduction
26986: 11:     - theme: alt
26987: 12:       text: View API
26988: 13:       link: /api/
26989: 14: features:
26990: 15:   - title: Card Synchronization
26991: 16:     details: Automatically sync card information from external sources
26992: 17:   - title: Price Tracking
26993: 18:     details: Monitor and update card prices in real-time
26994: 19:   - title: Image Processing
26995: 20:     details: Automated image downloading, optimization, and storage
26996: 21:   - title: Caching System
26997: 22:     details: Efficient caching mechanism for improved performance
26998: 23: ---
26999: </file>
27000: 
27001: <file path="introduction.md">
27002:  1: # FFTCG Sync Service Documentation
27003:  2: 
27004:  3: ## Overview
27005:  4: 
27006:  5: FFTCG Sync Service is a specialized Firebase application designed to synchronize Final Fantasy Trading Card Game (FFTCG) card data, prices, and images. The service provides automated synchronization of card information, price tracking, and image optimization through Firebase Functions.
27007:  6: 
27008:  7: ## Core Features
27009:  8: 
27010:  9: ### Card Synchronization
27011: 10: 
27012: 11: - Automated card data synchronization from TCGPlayer
27013: 12: - Batch processing for efficient data handling
27014: 13: - Data validation and error handling
27015: 14: - Support for dry-run operations
27016: 15: 
27017: 16: ### Price Tracking
27018: 17: 
27019: 18: - Real-time price monitoring
27020: 19: - Support for both normal and foil card prices
27021: 20: - Price history tracking
27022: 21: - Configurable sync intervals
27023: 22: 
27024: 23: ### Image Processing
27025: 24: 
27026: 25: - Automatic image downloading and optimization
27027: 26: - Multiple resolution support (200w and 400w)
27028: 27: - Image compression with quality preservation
27029: 28: - Efficient caching system
27030: 29: - Firebase Storage integration
27031: 30: 
27032: 31: ### System Architecture
27033: 32: 
27034: 33: - Firebase Functions for serverless operation
27035: 34: - Firestore for data storage
27036: 35: - Firebase Storage for image management
27037: 36: - LRU caching for performance optimization
27038: 37: 
27039: 38: ## Technical Stack
27040: 39: 
27041: 40: - **Runtime**: Node.js 18
27042: 41: - **Framework**: Firebase Functions v6
27043: 42: - **Database**: Firestore
27044: 43: - **Storage**: Firebase Storage
27045: 44: - **Image Processing**: Sharp
27046: 45: - **HTTP Client**: Axios
27047: 46: - **Caching**: LRU Cache
27048: 47: - **Language**: TypeScript
27049: 48: 
27050: 49: ## Key Components
27051: 50: 
27052: 51: ### Services
27053: 52: 
27054: 53: - `cardSync`: Manages card data synchronization
27055: 54: - `priceSync`: Handles price updates and tracking
27056: 55: 
27057: 56: ### Utilities
27058: 57: 
27059: 58: - `ImageHandler`: Manages image processing and storage
27060: 59: - `ImageCompressor`: Handles image optimization
27061: 60: - `ImageCache`: Provides caching functionality
27062: 61: - `Logger`: Manages application logging
27063: 62: - `BatchProcessor`: Handles batch operations
27064: 63: 
27065: 64: ## Getting Started
27066: 65: 
27067: 66: To get started with the FFTCG Sync Service, see:
27068: 67: 
27069: 68: - [Installation Guide](./setup/installation)
27070: 69: - [Configuration Guide](./setup/configuration)
27071: 70: - [API Documentation](./api/)
27072: </file>
27073: 
27074: <file path="package.json">
27075:  1: {
27076:  2:   "name": "fftcg-sync-docs",
27077:  3:   "version": "1.0.0",
27078:  4:   "description": "Documentation for FFTCG Sync Service",
27079:  5:   "type": "module",
27080:  6:   "scripts": {
27081:  7:     "docs:dev": "vitepress dev",
27082:  8:     "docs:build": "vitepress build",
27083:  9:     "docs:preview": "vitepress preview"
27084: 10:   },
27085: 11:   "keywords": [],
27086: 12:   "author": "",
27087: 13:   "license": "ISC",
27088: 14:   "devDependencies": {
27089: 15:     "@vueuse/core": "^10.7.0",
27090: 16:     "firebase": "^10.7.0",
27091: 17:     "vitepress": "^1.0.0-rc.31",
27092: 18:     "vue": "^3.3.8"
27093: 19:   }
27094: 20: }
27095: </file>
27096: 
27097: <file path="performance.md">
27098:   1: # Performance Guide
27099:   2: 
27100:   3: ## Optimization Overview
27101:   4: 
27102:   5: This guide covers performance optimization strategies implemented in the FFTCG Sync Service, including caching, batch processing, memory management, and monitoring.
27103:   6: 
27104:   7: ## Resource Management
27105:   8: 
27106:   9: ### Memory Allocation
27107:  10: 
27108:  11: ```typescript
27109:  12: // Default runtime options
27110:  13: const runtimeOpts = {
27111:  14:   timeoutSeconds: 540,
27112:  15:   memory: "1GiB"
27113:  16: } as const;
27114:  17: ```
27115:  18: 
27116:  19: Memory optimization techniques:
27117:  20: 
27118:  21: - Batch processing to control memory usage
27119:  22: - Automatic garbage collection
27120:  23: - Resource cleanup after operations
27121:  24: - Stream processing for large datasets
27122:  25: 
27123:  26: ### Resource Cleanup
27124:  27: 
27125:  28: ```typescript
27126:  29: async function cleanupResources(): Promise<void> {
27127:  30:   // Clear image cache
27128:  31:   await imageCache.clear();
27129:  32:  
27130:  33:   // Force garbage collection if available
27131:  34:   global.gc && global.gc();
27132:  35:  
27133:  36:   // Clear other caches
27134:  37:   cardCache.clear();
27135:  38: }
27136:  39: ```
27137:  40: 
27138:  41: ## Caching Strategy
27139:  42: 
27140:  43: ### Multi-Level Caching
27141:  44: 
27142:  45: ```typescript
27143:  46: // L1 Cache (Memory)
27144:  47: private l1Cache = new Map<string, T>();
27145:  48: 
27146:  49: // L2 Cache (LRU)
27147:  50: private l2Cache: LRUCache<string, T> = new LRUCache<string, T>({
27148:  51:   max: options.maxSize,
27149:  52:   ttl: options.ttl
27150:  53: });
27151:  54: ```
27152:  55: 
27153:  56: Cache hierarchy:
27154:  57: 
27155:  58: 1. In-memory cache for frequent access
27156:  59: 2. LRU cache for larger datasets
27157:  60: 3. Persistent storage for backups
27158:  61: 
27159:  62: ### Cache Configuration
27160:  63: 
27161:  64: ```typescript
27162:  65: const cacheOptions = {
27163:  66:   // Card cache settings
27164:  67:   cardCache: {
27165:  68:     max: 500,
27166:  69:     ttl: 1000 * 60 * 60 // 1 hour
27167:  70:   },
27168:  71:  
27169:  72:   // Image cache settings
27170:  73:   imageCache: {
27171:  74:     metadata: {
27172:  75:       max: 1000,
27173:  76:       ttl: 1000 * 60 * 60 // 1 hour
27174:  77:     },
27175:  78:     buffer: {
27176:  79:       max: 100,
27177:  80:       ttl: 1000 * 60 * 5, // 5 minutes
27178:  81:       maxSize: 50 * 1024 * 1024 // 50MB
27179:  82:     }
27180:  83:   }
27181:  84: };
27182:  85: ```
27183:  86: 
27184:  87: ## Batch Processing
27185:  88: 
27186:  89: ### Adaptive Batch Processing
27187:  90: 
27188:  91: ```typescript
27189:  92: class AdaptiveBatchProcessor {
27190:  93:   private optimalBatchSize: number = 100;
27191:  94:   private processingTimes: number[] = [];
27192:  95: 
27193:  96:   async processBatch<T>(
27194:  97:     items: T[],
27195:  98:     processor: (batch: T[]) => Promise<void>
27196:  99:   ): Promise<void> {
27197: 100:     for (let i = 0; i < items.length; i += this.optimalBatchSize) {
27198: 101:       const start = Date.now();
27199: 102:       const batch = items.slice(i, i + this.optimalBatchSize);
27200: 103:      
27201: 104:       await processor(batch);
27202: 105:      
27203: 106:       this.adjustBatchSize(Date.now() - start);
27204: 107:     }
27205: 108:   }
27206: 109: 
27207: 110:   private adjustBatchSize(lastProcessingTime: number): void {
27208: 111:     // Dynamically adjust batch size based on processing time
27209: 112:     if (lastProcessingTime > 1000) {
27210: 113:       this.optimalBatchSize = Math.max(10, this.optimalBatchSize * 0.8);
27211: 114:     } else if (lastProcessingTime < 500) {
27212: 115:       this.optimalBatchSize = Math.min(1000, this.optimalBatchSize * 1.2);
27213: 116:     }
27214: 117:   }
27215: 118: }
27216: 119: ```
27217: 120: 
27218: 121: ### Batch Size Optimization
27219: 122: 
27220: 123: ```typescript
27221: 124: const batchOptions = {
27222: 125:   batchSize: 100,
27223: 126:   delayBetweenBatches: 1000,
27224: 127:   onBatchComplete: async (stats) => {
27225: 128:     console.log(`Processed: ${stats.processed}/${stats.total}`);
27226: 129:   }
27227: 130: };
27228: 131: ```
27229: 132: 
27230: 133: ## Image Processing Optimization
27231: 134: 
27232: 135: ### Compression Settings
27233: 136: 
27234: 137: ```typescript
27235: 138: const compressionOptions = {
27236: 139:   quality: {
27237: 140:     HIGH_RES: 90,
27238: 141:     LOW_RES: 85
27239: 142:   },
27240: 143:   dimensions: {
27241: 144:     HIGH_RES: 400,
27242: 145:     LOW_RES: 200
27243: 146:   }
27244: 147: };
27245: 148: ```
27246: 149: 
27247: 150: ### Progressive Loading
27248: 151: 
27249: 152: ```typescript
27250: 153: const imageProcessingOptions = {
27251: 154:   progressive: true,
27252: 155:   mozjpeg: true,
27253: 156:   optimizationLevel: 3
27254: 157: };
27255: 158: ```
27256: 159: 
27257: 160: ## Database Optimization
27258: 161: 
27259: 162: ### Batch Operations
27260: 163: 
27261: 164: ```typescript
27262: 165: async function batchWrite(updates: any[]): Promise<void> {
27263: 166:   const batch = db.batch();
27264: 167:   updates.forEach(update => {
27265: 168:     const ref = db.collection('cards').doc(update.id);
27266: 169:     batch.update(ref, update.data);
27267: 170:   });
27268: 171:   await batch.commit();
27269: 172: }
27270: 173: ```
27271: 174: 
27272: 175: ### Index Optimization
27273: 176: 
27274: 177: ```json
27275: 178: {
27276: 179:   "indexes": [
27277: 180:     {
27278: 181:       "collectionGroup": "cards",
27279: 182:       "queryScope": "COLLECTION",
27280: 183:       "fields": [
27281: 184:         { "fieldPath": "groupId", "order": "ASCENDING" },
27282: 185:         { "fieldPath": "lastUpdated", "order": "DESCENDING" }
27283: 186:       ]
27284: 187:     }
27285: 188:   ]
27286: 189: }
27287: 190: ```
27288: 191: 
27289: 192: ## Rate Limiting
27290: 193: 
27291: 194: ### Token Bucket Implementation
27292: 195: 
27293: 196: ```typescript
27294: 197: const rateLimiter = {
27295: 198:   tokens: 100,
27296: 199:   refillRate: 10,
27297: 200:   interval: 1000,
27298: 201: 
27299: 202:   async acquire(): Promise<boolean> {
27300: 203:     if (this.tokens > 0) {
27301: 204:       this.tokens--;
27302: 205:       return true;
27303: 206:     }
27304: 207:     return false;
27305: 208:   }
27306: 209: };
27307: 210: ```
27308: 211: 
27309: 212: ### Request Throttling
27310: 213: 
27311: 214: ```typescript
27312: 215: async function makeThrottledRequest<T>(
27313: 216:   endpoint: string,
27314: 217:   options: RequestOptions = {}
27315: 218: ): Promise<T> {
27316: 219:   if (!await rateLimiter.acquire()) {
27317: 220:     throw new Error("Rate limit exceeded");
27318: 221:   }
27319: 222:   return makeRequest<T>(endpoint, options);
27320: 223: }
27321: 224: ```
27322: 225: 
27323: 226: ## Performance Monitoring
27324: 227: 
27325: 228: ### Progress Tracking
27326: 229: 
27327: 230: ```typescript
27328: 231: export class EnhancedProgressTracker {
27329: 232:   private calculateStats(): ProgressStats {
27330: 233:     const now = Date.now();
27331: 234:     const elapsed = (now - this.startTime) / 1000;
27332: 235:     const percent = (this.current / this.total) * 100;
27333: 236:     const rate = this.current / elapsed;
27334: 237:    
27335: 238:     return {
27336: 239:       current: this.current,
27337: 240:       total: this.total,
27338: 241:       percent,
27339: 242:       elapsed,
27340: 243:       rate,
27341: 244:       remaining: this.total - this.current,
27342: 245:       eta: (this.total - this.current) / rate
27343: 246:     };
27344: 247:   }
27345: 248: }
27346: 249: ```
27347: 250: 
27348: 251: ### Performance Metrics
27349: 252: 
27350: 253: ```typescript
27351: 254: interface PerformanceMetrics {
27352: 255:   timestamp: Date;
27353: 256:   operation: string;
27354: 257:   duration: number;
27355: 258:   memory: {
27356: 259:     heapUsed: number;
27357: 260:     heapTotal: number;
27358: 261:   };
27359: 262:   success: boolean;
27360: 263: }
27361: 264: 
27362: 265: async function trackPerformance(
27363: 266:   operation: string,
27364: 267:   task: () => Promise<void>
27365: 268: ): Promise<void> {
27366: 269:   const start = Date.now();
27367: 270:   const startMemory = process.memoryUsage();
27368: 271:  
27369: 272:   try {
27370: 273:     await task();
27371: 274:     const endMemory = process.memoryUsage();
27372: 275:    
27373: 276:     await logInfo("Performance metrics", {
27374: 277:       operation,
27375: 278:       duration: Date.now() - start,
27376: 279:       memoryDelta: {
27377: 280:         heapUsed: endMemory.heapUsed - startMemory.heapUsed,
27378: 281:         heapTotal: endMemory.heapTotal - startMemory.heapTotal
27379: 282:       }
27380: 283:     });
27381: 284:   } catch (error) {
27382: 285:     await logError(error, "performanceTracking");
27383: 286:     throw error;
27384: 287:   }
27385: 288: }
27386: 289: ```
27387: 290: 
27388: 291: ## Best Practices
27389: 292: 
27390: 293: ### Memory Management
27391: 294: 
27392: 295: 1. Use streams for large file operations
27393: 296: 2. Implement cleanup routines
27394: 297: 3. Monitor memory usage
27395: 298: 4. Set appropriate cache limits
27396: 299: 5. Use batch processing
27397: 300: 
27398: 301: ### Network Optimization
27399: 302: 
27400: 303: 1. Implement request caching
27401: 304: 2. Use compression
27402: 305: 3. Batch API requests
27403: 306: 4. Handle rate limits
27404: 307: 5. Implement retry strategies
27405: 308: 
27406: 309: ### Database Efficiency
27407: 310: 
27408: 311: 1. Use batch operations
27409: 312: 2. Optimize indexes
27410: 313: 3. Implement caching
27411: 314: 4. Monitor query performance
27412: 315: 5. Use appropriate batch sizes
27413: 316: 
27414: 317: ### Image Processing
27415: 318: 
27416: 319: 1. Use progressive loading
27417: 320: 2. Implement size limits
27418: 321: 3. Optimize compression
27419: 322: 4. Cache processed images
27420: 323: 5. Use appropriate quality settings
27421: 324: 
27422: 325: ## Monitoring and Alerts
27423: 326: 
27424: 327: ### Key Metrics
27425: 328: 
27426: 329: ```typescript
27427: 330: interface SystemMetrics {
27428: 331:   syncDuration: number;
27429: 332:   memoryUsage: number;
27430: 333:   processedItems: number;
27431: 334:   errorRate: number;
27432: 335:   cacheHitRate: number;
27433: 336: }
27434: 337: 
27435: 338: async function monitorSystem(): Promise<SystemMetrics> {
27436: 339:   return {
27437: 340:     syncDuration: calculateSyncDuration(),
27438: 341:     memoryUsage: process.memoryUsage().heapUsed,
27439: 342:     processedItems: getProcessedCount(),
27440: 343:     errorRate: calculateErrorRate(),
27441: 344:     cacheHitRate: calculateCacheHitRate()
27442: 345:   };
27443: 346: }
27444: 347: ```
27445: 348: 
27446: 349: ### Alert Thresholds
27447: 350: 
27448: 351: ```typescript
27449: 352: const alertThresholds = {
27450: 353:   syncDuration: 1000 * 60 * 30, // 30 minutes
27451: 354:   memoryUsage: 900 * 1024 * 1024, // 900MB
27452: 355:   errorRate: 0.05, // 5%
27453: 356:   cacheHitRate: 0.7 // 70%
27454: 357: };
27455: 358: ```
27456: </file>
27457: 
27458: <file path="security.md">
27459:   1: # Security Guidelines
27460:   2: 
27461:   3: ## Overview
27462:   4: 
27463:   5: This guide outlines security best practices and implementations for the FFTCG Sync Service, covering authentication, data validation, rate limiting, and other security considerations.
27464:   6: 
27465:   7: ## Authentication
27466:   8: 
27467:   9: ### Firebase Authentication
27468:  10: 
27469:  11: ```typescript
27470:  12: // Verify Firebase authentication token
27471:  13: async function verifyAuth(req: Request): Promise<void> {
27472:  14:   const token = req.headers.authorization?.split("Bearer ")[1];
27473:  15:   if (!token) {
27474:  16:     throw new Error("No authentication token provided");
27475:  17:   }
27476:  18: 
27477:  19:   try {
27478:  20:     await admin.auth().verifyIdToken(token);
27479:  21:   } catch (error) {
27480:  22:     throw new Error("Invalid authentication token");
27481:  23:   }
27482:  24: }
27483:  25: ```
27484:  26: 
27485:  27: ### Service Account Security
27486:  28: 
27487:  29: ```typescript
27488:  30: // Service account initialization
27489:  31: async function initializeFirebase(): Promise<FirebaseFirestore.Firestore> {
27490:  32:   try {
27491:  33:     const serviceAccountPath = path.resolve(__dirname, "../../../service_account_key.json");
27492:  34:     const serviceAccount = JSON.parse(await fs.readFile(serviceAccountPath, "utf8"));
27493:  35: 
27494:  36:     if (!admin.apps.length) {
27495:  37:       admin.initializeApp({
27496:  38:         credential: admin.credential.cert(serviceAccount)
27497:  39:       });
27498:  40:     }
27499:  41: 
27500:  42:     return admin.firestore();
27501:  43:   } catch (error) {
27502:  44:     throw new Error("Failed to initialize Firebase: " + error);
27503:  45:   }
27504:  46: }
27505:  47: ```
27506:  48: 
27507:  49: ## Input Validation
27508:  50: 
27509:  51: ### Request Validation
27510:  52: 
27511:  53: ```typescript
27512:  54: // Validate sync options
27513:  55: function validateSyncOptions(options: unknown): asserts options is SyncOptions {
27514:  56:   if (!options || typeof options !== "object") {
27515:  57:     throw new Error("Invalid options object");
27516:  58:   }
27517:  59: 
27518:  60:   const opts = options as Record<string, unknown>;
27519:  61:  
27520:  62:   if (opts.limit && typeof opts.limit !== "number") {
27521:  63:     throw new Error("Limit must be a number");
27522:  64:   }
27523:  65: 
27524:  66:   if (opts.groupId && typeof opts.groupId !== "string") {
27525:  67:     throw new Error("GroupId must be a string");
27526:  68:   }
27527:  69: }
27528:  70: ```
27529:  71: 
27530:  72: ### Image Validation
27531:  73: 
27532:  74: ```typescript
27533:  75: class ImageValidator {
27534:  76:   private static readonly MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
27535:  77: 
27536:  78:   static async validateImage(buffer: Buffer): Promise<ImageValidationError | null> {
27537:  79:     // Check file size
27538:  80:     if (buffer.length > this.MAX_FILE_SIZE) {
27539:  81:       return {
27540:  82:         code: "FILE_TOO_LARGE",
27541:  83:         message: `Image exceeds maximum size of ${this.MAX_FILE_SIZE / 1024 / 1024}MB`
27542:  84:       };
27543:  85:     }
27544:  86: 
27545:  87:     // Verify file signature
27546:  88:     if (!this.isJpeg(buffer)) {
27547:  89:       return {
27548:  90:         code: "INVALID_FORMAT",
27549:  91:         message: "Image must be in JPEG format"
27550:  92:       };
27551:  93:     }
27552:  94: 
27553:  95:     return null;
27554:  96:   }
27555:  97: }
27556:  98: ```
27557:  99: 
27558: 100: ## Rate Limiting
27559: 101: 
27560: 102: ### API Rate Limiting
27561: 103: 
27562: 104: ```typescript
27563: 105: const rateLimiter = {
27564: 106:   tokens: 100,
27565: 107:   refillRate: 10,
27566: 108:   interval: 1000,
27567: 109: 
27568: 110:   async acquire(): Promise<boolean> {
27569: 111:     if (this.tokens > 0) {
27570: 112:       this.tokens--;
27571: 113:       return true;
27572: 114:     }
27573: 115:     return false;
27574: 116:   }
27575: 117: };
27576: 118: ```
27577: 119: 
27578: 120: ### Function Concurrency Control
27579: 121: 
27580: 122: ```typescript
27581: 123: // Configure function instance limits
27582: 124: exports.syncCards = onRequest({
27583: 125:   timeoutSeconds: runtimeOpts.timeoutSeconds,
27584: 126:   memory: runtimeOpts.memory,
27585: 127:   maxInstances: 1
27586: 128: }, async (req: Request, res: Response) => {
27587: 129:   // Function implementation
27588: 130: });
27589: 131: ```
27590: 132: 
27591: 133: ## Data Protection
27592: 134: 
27593: 135: ### Data Encryption
27594: 136: 
27595: 137: ```typescript
27596: 138: // Hash sensitive data
27597: 139: function getDataHash(data: any): string {
27598: 140:   return crypto.createHash("md5")
27599: 141:     .update(JSON.stringify(data, Object.keys(data).sort()))
27600: 142:     .digest("hex");
27601: 143: }
27602: 144: ```
27603: 145: 
27604: 146: ### Secure Storage Access
27605: 147: 
27606: 148: ```typescript
27607: 149: // Secure URL generation
27608: 150: async function getSecureImageUrl(path: string): Promise<string> {
27609: 151:   const [url] = await storage
27610: 152:     .bucket(STORAGE.BUCKETS.CARD_IMAGES)
27611: 153:     .file(path)
27612: 154:     .getSignedUrl({
27613: 155:       action: "read",
27614: 156:       expires: "03-01-2500"
27615: 157:     });
27616: 158:   return url;
27617: 159: }
27618: 160: ```
27619: 161: 
27620: 162: ## Error Handling
27621: 163: 
27622: 164: ### Secure Error Logging
27623: 165: 
27624: 166: ```typescript
27625: 167: export async function logDetailedError(
27626: 168:   error: Error,
27627: 169:   context: string,
27628: 170:   metadata?: Record<string, unknown>,
27629: 171:   severity: "ERROR" | "WARNING" | "CRITICAL" = "ERROR"
27630: 172: ): Promise<void> {
27631: 173:   const report: ErrorReport = {
27632: 174:     timestamp: new Date(),
27633: 175:     context,
27634: 176:     error: error.message,
27635: 177:     stackTrace: error.stack,
27636: 178:     metadata,
27637: 179:     severity
27638: 180:   };
27639: 181: 
27640: 182:   // Sanitize sensitive information before logging
27641: 183:   const sanitizedReport = sanitizeErrorReport(report);
27642: 184:   await db.collection(COLLECTION.LOGS).add(sanitizedReport);
27643: 185: }
27644: 186: ```
27645: 187: 
27646: 188: ### Error Response Sanitization
27647: 189: 
27648: 190: ```typescript
27649: 191: function sanitizeErrorMessage(error: Error): string {
27650: 192:   // Remove sensitive information from error messages
27651: 193:   return error.message.replace(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)/gi, '[EMAIL]')
27652: 194:     .replace(/\b\d{4}\b/g, '[ID]');
27653: 195: }
27654: 196: ```
27655: 197: 
27656: 198: ## Network Security
27657: 199: 
27658: 200: ### Request Configuration
27659: 201: 
27660: 202: ```typescript
27661: 203: const secureRequestConfig = {
27662: 204:   timeout: 30000,
27663: 205:   headers: {
27664: 206:     "Accept": "application/json",
27665: 207:     "User-Agent": "FFTCG-Sync-Service/1.0"
27666: 208:   },
27667: 209:   validateStatus: (status: number) => status < 400
27668: 210: };
27669: 211: ```
27670: 212: 
27671: 213: ### HTTPS Enforcement
27672: 214: 
27673: 215: ```typescript
27674: 216: // Ensure HTTPS usage
27675: 217: const BASE_URL = "https://tcgcsv.com";
27676: 218: const SECURE_STORAGE_URL = "https://storage.googleapis.com";
27677: 219: ```
27678: 220: 
27679: 221: ## Firestore Security Rules
27680: 222: 
27681: 223: ```typescript
27682: 224: // firestore.rules
27683: 225: rules_version = '2';
27684: 226: service cloud.firestore {
27685: 227:   match /databases/{database}/documents {
27686: 228:     // Card collection rules
27687: 229:     match /cards/{cardId} {
27688: 230:       allow read: if true;
27689: 231:       allow write: if request.auth != null 
27690: 232:         && request.auth.token.admin == true;
27691: 233:     }
27692: 234: 
27693: 235:     // Price collection rules
27694: 236:     match /prices/{priceId} {
27695: 237:       allow read: if true;
27696: 238:       allow write: if request.auth != null 
27697: 239:         && request.auth.token.admin == true;
27698: 240:     }
27699: 241: 
27700: 242:     // Sync metadata rules
27701: 243:     match /syncMetadata/{docId} {
27702: 244:       allow read: if request.auth != null;
27703: 245:       allow write: if request.auth != null 
27704: 246:         && request.auth.token.admin == true;
27705: 247:     }
27706: 248:   }
27707: 249: }
27708: 250: ```
27709: 251: 
27710: 252: ## Storage Security Rules
27711: 253: 
27712: 254: ```typescript
27713: 255: // storage.rules
27714: 256: rules_version = '2';
27715: 257: service firebase.storage {
27716: 258:   match /b/{bucket}/o {
27717: 259:     match /card-images/{groupId}/{imageId} {
27718: 260:       allow read: if true;
27719: 261:       allow write: if request.auth != null 
27720: 262:         && request.auth.token.admin == true
27721: 263:         && request.resource.size < 5 * 1024 * 1024
27722: 264:         && request.resource.contentType.matches('image/jpeg');
27723: 265:     }
27724: 266:   }
27725: 267: }
27726: 268: ```
27727: 269: 
27728: 270: ## Best Practices
27729: 271: 
27730: 272: ### API Security
27731: 273: 
27732: 274: 1. Use HTTPS for all requests
27733: 275: 2. Implement proper authentication
27734: 276: 3. Validate all inputs
27735: 277: 4. Rate limit requests
27736: 278: 5. Monitor for suspicious activity
27737: 279: 
27738: 280: ### Data Security
27739: 281: 
27740: 282: 1. Minimize sensitive data storage
27741: 283: 2. Encrypt sensitive information
27742: 284: 3. Implement proper access controls
27743: 285: 4. Regular security audits
27744: 286: 5. Secure backup procedures
27745: 287: 
27746: 288: ### Error Management
27747: 289: 
27748: 290: 1. Sanitize error messages
27749: 291: 2. Avoid exposing internal details
27750: 292: 3. Log security events
27751: 293: 4. Monitor error patterns
27752: 294: 5. Implement proper error recovery
27753: 295: 
27754: 296: ### Function Security
27755: 297: 
27756: 298: 1. Use minimal permissions
27757: 299: 2. Implement request validation
27758: 300: 3. Control function concurrency
27759: 301: 4. Monitor function execution
27760: 302: 5. Regular security updates
27761: 303: 
27762: 304: ## Security Monitoring
27763: 305: 
27764: 306: ### Logging Security Events
27765: 307: 
27766: 308: ```typescript
27767: 309: interface SecurityEvent {
27768: 310:   timestamp: Date;
27769: 311:   eventType: "AUTH" | "ACCESS" | "ERROR" | "MODIFICATION";
27770: 312:   severity: "LOW" | "MEDIUM" | "HIGH" | "CRITICAL";
27771: 313:   details: Record<string, unknown>;
27772: 314: }
27773: 315: 
27774: 316: async function logSecurityEvent(event: SecurityEvent): Promise<void> {
27775: 317:   await db.collection("securityLogs").add({
27776: 318:     ...event,
27777: 319:     timestamp: new Date()
27778: 320:   });
27779: 321: }
27780: 322: ```
27781: 323: 
27782: 324: ### Audit Trail
27783: 325: 
27784: 326: ```typescript
27785: 327: interface AuditLog {
27786: 328:   timestamp: Date;
27787: 329:   userId: string;
27788: 330:   action: string;
27789: 331:   resource: string;
27790: 332:   changes: Record<string, unknown>;
27791: 333: }
27792: 334: 
27793: 335: async function createAuditLog(
27794: 336:   action: string,
27795: 337:   resource: string,
27796: 338:   changes: Record<string, unknown>
27797: 339: ): Promise<void> {
27798: 340:   await db.collection("auditLogs").add({
27799: 341:     timestamp: new Date(),
27800: 342:     action,
27801: 343:     resource,
27802: 344:     changes
27803: 345:   });
27804: 346: }
27805: 347: ```
27806: 348: 
27807: 349: ### Security Metrics
27808: 350: 
27809: 351: ```typescript
27810: 352: interface SecurityMetrics {
27811: 353:   failedAuthAttempts: number;
27812: 354:   rateLimitExceeded: number;
27813: 355:   suspiciousRequests: number;
27814: 356:   securityEvents: number;
27815: 357: }
27816: 358: 
27817: 359: async function trackSecurityMetrics(): Promise<SecurityMetrics> {
27818: 360:   // Implementation of security metrics tracking
27819: 361:   return {
27820: 362:     failedAuthAttempts: 0,
27821: 363:     rateLimitExceeded: 0,
27822: 364:     suspiciousRequests: 0,
27823: 365:     securityEvents: 0
27824: 366:   };
27825: 367: }
27826: 368: ```
27827: </file>
27828: 
27829: <file path="services/card-sync.md">
27830:   1: # Card Synchronization Service
27831:   2: 
27832:   3: ## Overview
27833:   4: 
27834:   5: The Card Synchronization service (`cardSync.ts`) manages the automated synchronization of FFTCG card data from TCGPlayer's API. It handles card information updates, image processing, and maintains data consistency through hash-based versioning.
27835:   6: 
27836:   7: ## Core Features
27837:   8: 
27838:   9: - Automated card data synchronization
27839:  10: - Image processing and storage
27840:  11: - Batch processing
27841:  12: - Error handling and retry logic
27842:  13: - Dry run capability for testing
27843:  14: - Progress tracking and logging
27844:  15: 
27845:  16: ## API Reference
27846:  17: 
27847:  18: ### Main Function
27848:  19: 
27849:  20: ```typescript
27850:  21: async function syncCards(options: SyncOptions = {}): Promise<SyncMetadata>
27851:  22: ```
27852:  23: 
27853:  24: #### Options
27854:  25: 
27855:  26: ```typescript
27856:  27: interface SyncOptions {
27857:  28:   dryRun?: boolean;      // Run without making changes
27858:  29:   limit?: number;        // Limit number of cards processed
27859:  30:   groupId?: string;      // Process specific group only
27860:  31:   skipImages?: boolean;  // Skip image processing
27861:  32: }
27862:  33: ```
27863:  34: 
27864:  35: #### Response
27865:  36: 
27866:  37: ```typescript
27867:  38: interface SyncMetadata {
27868:  39:   lastSync: Date;
27869:  40:   status: "in_progress" | "success" | "failed" | "completed_with_errors";
27870:  41:   cardCount: number;
27871:  42:   type: "manual" | "scheduled";
27872:  43:   groupsProcessed: number;
27873:  44:   groupsUpdated: number;
27874:  45:   errors: string[];
27875:  46:   duration?: number;
27876:  47:   imagesProcessed?: number;
27877:  48:   imagesUpdated?: number;
27878:  49: }
27879:  50: ```
27880:  51: 
27881:  52: ## Usage Examples
27882:  53: 
27883:  54: ### Scheduled Sync
27884:  55: 
27885:  56: The service runs automatically on a daily schedule:
27886:  57: 
27887:  58: ```typescript
27888:  59: exports.scheduledCardSync = onSchedule({
27889:  60:   schedule: "0 21 * * *", // Daily at 21:00 UTC
27890:  61:   timeZone: "UTC",
27891:  62:   memory: runtimeOpts.memory,
27892:  63:   timeoutSeconds: runtimeOpts.timeoutSeconds,
27893:  64:   retryCount: 3,
27894:  65: });
27895:  66: ```
27896:  67: 
27897:  68: ### Manual Sync
27898:  69: 
27899:  70: Test specific groups or cards:
27900:  71: 
27901:  72: ```typescript
27902:  73: // Test sync with limits
27903:  74: await syncCards({
27904:  75:   dryRun: true,
27905:  76:   limit: 5,
27906:  77:   groupId: "23783"
27907:  78: });
27908:  79: 
27909:  80: // Full manual sync
27910:  81: await syncCards({
27911:  82:   dryRun: false
27912:  83: });
27913:  84: ```
27914:  85: 
27915:  86: ## Error Handling
27916:  87: 
27917:  88: The service implements comprehensive error handling:
27918:  89: 
27919:  90: ```typescript
27920:  91: class SyncError extends Error implements GenericError {
27921:  92:   constructor(
27922:  93:     message: string,
27923:  94:     code?: string,
27924:  95:     public details?: Record<string, unknown>
27925:  96:   ) {
27926:  97:     super(message);
27927:  98:     this.name = "SyncError";
27928:  99:     this.code = code;
27929: 100:   }
27930: 101: }
27931: 102: ```
27932: 103: 
27933: 104: ### Retry Logic
27934: 105: 
27935: 106: ```typescript
27936: 107: const MAX_RETRIES = 3;
27937: 108: const BASE_DELAY = 1000; // 1 second
27938: 109: 
27939: 110: // Exponential backoff
27940: 111: const delay = Math.pow(2, retryCount) * BASE_DELAY;
27941: 112: ```
27942: 113: 
27943: 114: ## Data Processing
27944: 115: 
27945: 116: ### Batch Processing
27946: 117: 
27947: 118: ```typescript
27948: 119: async function processBatch<T>(
27949: 120:   items: T[],
27950: 121:   processor: (batch: T[]) => Promise<void>,
27951: 122:   options: BatchOptions = {}
27952: 123: ): Promise<void>
27953: 124: ```
27954: 125: 
27955: 126: ### Hash Generation
27956: 127: 
27957: 128: ```typescript
27958: 129: function getDataHash(data: any): string {
27959: 130:   return crypto.createHash("md5")
27960: 131:     .update(JSON.stringify(data, Object.keys(data).sort()))
27961: 132:     .digest("hex");
27962: 133: }
27963: 134: ```
27964: 135: 
27965: 136: ## Monitoring
27966: 137: 
27967: 138: ### Progress Tracking
27968: 139: 
27969: 140: The service logs detailed progress information:
27970: 141: 
27971: 142: - Groups processed
27972: 143: - Cards updated
27973: 144: - Images processed
27974: 145: - Processing duration
27975: 146: - Error counts
27976: 147: 
27977: 148: ### Success Metrics
27978: 149: 
27979: 150: - Number of groups updated
27980: 151: - Number of cards processed
27981: 152: - Number of images updated
27982: 153: - Processing duration
27983: 154: - Error rate
27984: 155: 
27985: 156: ## Best Practices
27986: 157: 
27987: 158: 1. Testing Changes:
27988: 159: 
27989: 160: ```typescript
27990: 161: // Always test with dry run first
27991: 162: await syncCards({
27992: 163:   dryRun: true,
27993: 164:   limit: 5
27994: 165: });
27995: 166: ```
27996: 167: 
27997: 168: 1. Error Monitoring:
27998: 169: 
27999: 170: ```typescript
28000: 171: // Check sync metadata for errors
28001: 172: const metadata = await syncCards();
28002: 173: if (metadata.errors.length > 0) {
28003: 174:   console.error("Sync completed with errors:", metadata.errors);
28004: 175: }
28005: 176: ```
28006: 177: 
28007: 178: 1. Resource Management:
28008: 179: 
28009: 180: ```typescript
28010: 181: // Use limits when testing
28011: 182: const options: SyncOptions = {
28012: 183:   limit: 10,
28013: 184:   dryRun: true
28014: 185: };
28015: 186: ```
28016: 187: 
28017: 188: ## Troubleshooting
28018: 189: 
28019: 190: ### Common Issues
28020: 191: 
28021: 192: 1. Rate Limiting:
28022: 193:    - Implement proper delays between requests
28023: 194:    - Use batch processing
28024: 195:    - Follow exponential backoff
28025: 196: 
28026: 197: 2. Image Processing:
28027: 198:    - Verify storage permissions
28028: 199:    - Check image URLs
28029: 200:    - Monitor storage quotas
28030: 201: 
28031: 202: 3. Data Consistency:
28032: 203:    - Use hash verification
28033: 204:    - Implement proper error handling
28034: 205:    - Monitor sync metadata
28035: 206: 
28036: 207: ### Debug Mode
28037: 208: 
28038: 209: Enable detailed logging:
28039: 210: 
28040: 211: ```typescript
28041: 212: // Enable debug logging
28042: 213: await syncCards({
28043: 214:   dryRun: true,
28044: 215:   debug: true
28045: 216: });
28046: 217: ```
28047: 218: 
28048: 219: ## Related Components
28049: 220: 
28050: 221: - [Price Sync Service](./price-sync)
28051: 222: - [Image Handler](../utils/image-handler)
28052: 223: - [Cache System](../utils/cache)
28053: 224: - [Error Handling](../utils/error-handling)
28054: </file>
28055: 
28056: <file path="services/price-sync.md">
28057:   1: # Price Synchronization Service
28058:   2: 
28059:   3: ## Overview
28060:   4: 
28061:   5: The Price Synchronization service (`priceSync.ts`) manages automated price updates for FFTCG cards. It handles both normal and foil price variants, implements version control through hashing, and provides detailed logging of price changes.
28062:   6: 
28063:   7: ## Core Features
28064:   8: 
28065:   9: - Real-time price synchronization
28066:  10: - Support for multiple price variants (Normal/Foil)
28067:  11: - Hash-based version control
28068:  12: - Batch processing
28069:  13: - Detailed price change logging
28070:  14: - Configurable sync intervals
28071:  15: 
28072:  16: ## API Reference
28073:  17: 
28074:  18: ### Main Function
28075:  19: 
28076:  20: ```typescript
28077:  21: async function syncPrices(options: SyncOptions = {}): Promise<SyncMetadata>
28078:  22: ```
28079:  23: 
28080:  24: #### Options
28081:  25: 
28082:  26: ```typescript
28083:  27: interface SyncOptions {
28084:  28:   dryRun?: boolean;      // Run without making changes
28085:  29:   limit?: number;        // Limit number of prices processed
28086:  30:   groupId?: string;      // Process specific group only
28087:  31:   productId?: number;    // Process specific product only
28088:  32:   showAll?: boolean;     // Show all prices, including unchanged
28089:  33: }
28090:  34: ```
28091:  35: 
28092:  36: #### Price Data Structure
28093:  37: 
28094:  38: ```typescript
28095:  39: interface CardPrice {
28096:  40:   productId: number;
28097:  41:   lowPrice: number;
28098:  42:   midPrice: number;
28099:  43:   highPrice: number;
28100:  44:   marketPrice: number | null;
28101:  45:   directLowPrice: number | null;
28102:  46:   subTypeName: "Normal" | "Foil";
28103:  47: }
28104:  48: 
28105:  49: interface PriceData {
28106:  50:   normal?: CardPrice;
28107:  51:   foil?: CardPrice;
28108:  52:   lastUpdated: Date;
28109:  53: }
28110:  54: ```
28111:  55: 
28112:  56: ## Usage Examples
28113:  57: 
28114:  58: ### Scheduled Sync
28115:  59: 
28116:  60: Automated daily price updates:
28117:  61: 
28118:  62: ```typescript
28119:  63: exports.scheduledPriceSync = onSchedule({
28120:  64:   schedule: "30 21 * * *", // Daily at 21:30 UTC
28121:  65:   timeZone: "UTC",
28122:  66:   memory: runtimeOpts.memory,
28123:  67:   timeoutSeconds: runtimeOpts.timeoutSeconds,
28124:  68:   retryCount: 3,
28125:  69: });
28126:  70: ```
28127:  71: 
28128:  72: ### Manual Price Checks
28129:  73: 
28130:  74: ```typescript
28131:  75: // Test specific product
28132:  76: await syncPrices({
28133:  77:   dryRun: true,
28134:  78:   productId: 477236,
28135:  79:   showAll: true
28136:  80: });
28137:  81: 
28138:  82: // Check specific group
28139:  83: await syncPrices({
28140:  84:   dryRun: true,
28141:  85:   groupId: "23783",
28142:  86:   limit: 10
28143:  87: });
28144:  88: ```
28145:  89: 
28146:  90: ## Price Processing
28147:  91: 
28148:  92: ### Price Data Processing
28149:  93: 
28150:  94: ```typescript
28151:  95: function processPrices(prices: CardPrice[]): Record<number, PriceData> {
28152:  96:   const priceMap: Record<number, PriceData> = {};
28153:  97: 
28154:  98:   prices.forEach((price) => {
28155:  99:     if (!priceMap[price.productId]) {
28156: 100:       priceMap[price.productId] = {
28157: 101:         lastUpdated: new Date(),
28158: 102:       };
28159: 103:     }
28160: 104: 
28161: 105:     if (price.subTypeName === "Normal") {
28162: 106:       priceMap[price.productId].normal = price;
28163: 107:     } else {
28164: 108:       priceMap[price.productId].foil = price;
28165: 109:     }
28166: 110:   });
28167: 111: 
28168: 112:   return priceMap;
28169: 113: }
28170: 114: ```
28171: 115: 
28172: 116: ### Batch Processing
28173: 117: 
28174: 118: ```typescript
28175: 119: async function processBatch<T>(
28176: 120:   items: T[],
28177: 121:   processor: (batch: T[]) => Promise<void>,
28178: 122:   batchSize: number = 500
28179: 123: ): Promise<void>
28180: 124: ```
28181: 125: 
28182: 126: ## Error Handling
28183: 127: 
28184: 128: ### Error Types
28185: 129: 
28186: 130: ```typescript
28187: 131: class SyncError extends Error implements GenericError {
28188: 132:   code?: string;
28189: 133: 
28190: 134:   constructor(
28191: 135:     message: string,
28192: 136:     code?: string,
28193: 137:     public details?: Record<string, unknown>
28194: 138:   ) {
28195: 139:     super(message);
28196: 140:     this.name = "SyncError";
28197: 141:     this.code = code;
28198: 142:   }
28199: 143: }
28200: 144: ```
28201: 145: 
28202: 146: ### Request Retry Logic
28203: 147: 
28204: 148: ```typescript
28205: 149: const MAX_RETRIES = 3;
28206: 150: const BASE_DELAY = 1000; // 1 second base delay
28207: 151: 
28208: 152: // Exponential backoff implementation
28209: 153: if (retryCount < MAX_RETRIES - 1) {
28210: 154:   const delay = Math.pow(2, retryCount) * BASE_DELAY;
28211: 155:   await logWarning(`Request failed, retrying in ${delay}ms...`);
28212: 156: }
28213: 157: ```
28214: 158: 
28215: 159: ## Monitoring
28216: 160: 
28217: 161: ### Price Change Tracking
28218: 162: 
28219: 163: The service tracks:
28220: 164: 
28221: 165: - Price updates per group
28222: 166: - Number of cards processed
28223: 167: - Processing duration
28224: 168: - Error rates
28225: 169: - Price change percentages
28226: 170: 
28227: 171: ### Success Metrics
28228: 172: 
28229: 173: ```typescript
28230: 174: interface SyncMetadata {
28231: 175:   lastSync: Date;
28232: 176:   status: "in_progress" | "success" | "failed" | "completed_with_errors";
28233: 177:   cardCount: number;
28234: 178:   type: "manual" | "scheduled";
28235: 179:   groupsProcessed: number;
28236: 180:   groupsUpdated: number;
28237: 181:   errors: string[];
28238: 182:   duration?: number;
28239: 183: }
28240: 184: 
28241: 185: 
28242: 186: ## Best Practices
28243: 187: 
28244: 188: 1. Regular Monitoring:
28245: 189:    - Check sync metadata regularly
28246: 190:    - Monitor price change patterns
28247: 191:    - Track error rates
28248: 192: 
28249: 193: 1. Testing Changes:
28250: 194: 
28251: 195: ```typescript
28252: 196: // Always test with dry run
28253: 197: const testSync = await syncPrices({
28254: 198:   dryRun: true,
28255: 199:   limit: 5,
28256: 200:   showAll: true
28257: 201: });
28258: 202: ```
28259: 203: 
28260: 204: 1. Error Handling:
28261: 205: 
28262: 206: ```typescript
28263: 207: // Implement proper error checking
28264: 208: const sync = await syncPrices(options);
28265: 209: if (sync.status === "completed_with_errors") {
28266: 210:   console.error("Sync errors:", sync.errors);
28267: 211: }
28268: 212: ```
28269: 213: 
28270: 214: ## Troubleshooting
28271: 215: 
28272: 216: ### Common Issues
28273: 217: 
28274: 218: 1. Price Discrepancies:
28275: 219:    - Verify data source connection
28276: 220:    - Check price format consistency
28277: 221:    - Monitor exchange rate impacts
28278: 222: 
28279: 223: 2. Sync Failures:
28280: 224:    - Check network connectivity
28281: 225:    - Verify API rate limits
28282: 226:    - Monitor service quotas
28283: 227: 
28284: 228: 3. Performance Issues:
28285: 229:    - Use appropriate batch sizes
28286: 230:    - Implement proper delays
28287: 231:    - Monitor memory usage
28288: 232: 
28289: 233: ### Validation
28290: 234: 
28291: 235: ```typescript
28292: 236: // Validate price data
28293: 237: if (price.midPrice < 0 || price.lowPrice < 0) {
28294: 238:   throw new Error("Invalid price values detected");
28295: 239: }
28296: 240: ```
28297: 241: 
28298: 242: ## Related Components
28299: 243: 
28300: 244: - [Card Sync Service](./card-sync)
28301: 245: - [Cache System](../utils/cache)
28302: 246: - [Error Handling](../utils/error-handling)
28303: 247: - [Logger](../utils/logging)
28304: </file>
28305: 
28306: <file path="setup/configuration.md">
28307:   1: # Configuration Guide
28308:   2: 
28309:   3: ## Firebase Configuration
28310:   4: 
28311:   5: ### Environment Variables
28312:   6: 
28313:   7: Create a `.env.local` file in your project root:
28314:   8: 
28315:   9: ```env
28316:  10: FIREBASE_PROJECT_ID=your-project-id
28317:  11: FIREBASE_STORAGE_BUCKET=your-storage-bucket
28318:  12: ```
28319:  13: 
28320:  14: ### Firebase Console Settings
28321:  15: 
28322:  16: 1. Firestore Database:
28323:  17: 
28324:  18: - Collection structure:
28325:  19:   - `cards`: Stores card information
28326:  20:   - `prices`: Stores price data
28327:  21:   - `syncMetadata`: Stores sync operation logs
28328:  22:   - `logs`: System logs
28329:  23:   - `cardHashes`: Card data version control
28330:  24:   - `priceHashes`: Price data version control
28331:  25:   - `imageMetadata`: Image processing metadata
28332:  26: 
28333:  27: 1. Storage:
28334:  28: 
28335:  29: - Bucket structure:
28336:  30:   - `/card-images/{groupId}/{productId}_200w.jpg`
28337:  31:   - `/card-images/{groupId}/{productId}_400w.jpg`
28338:  32: 
28339:  33: ## Application Configuration
28340:  34: 
28341:  35: ### Runtime Options
28342:  36: 
28343:  37: Located in `src/config/firebase.ts`:
28344:  38: 
28345:  39: ```typescript
28346:  40: export const runtimeOpts = {
28347:  41:   timeoutSeconds: 540,
28348:  42:   memory: "1GiB",
28349:  43: } as const;
28350:  44: ```
28351:  45: 
28352:  46: ### API Configuration
28353:  47: 
28354:  48: Base URL and category settings:
28355:  49: 
28356:  50: ```typescript
28357:  51: export const BASE_URL = "https://tcgcsv.com";
28358:  52: export const FFTCG_CATEGORY_ID = "24";
28359:  53: ```
28360:  54: 
28361:  55: ### Collection Names
28362:  56: 
28363:  57: ```typescript
28364:  58: export const COLLECTION = {
28365:  59:   CARDS: "cards",
28366:  60:   PRICES: "prices",
28367:  61:   SYNC_METADATA: "syncMetadata",
28368:  62:   LOGS: "logs",
28369:  63:   CARD_HASHES: "cardHashes",
28370:  64:   PRICE_HASHES: "priceHashes",
28371:  65:   IMAGE_METADATA: "imageMetadata",
28372:  66: };
28373:  67: ```
28374:  68: 
28375:  69: ## Sync Configuration
28376:  70: 
28377:  71: ### Card Sync Schedule
28378:  72: 
28379:  73: ```typescript
28380:  74: exports.scheduledCardSync = onSchedule({
28381:  75:   schedule: "0 21 * * *", // Daily at 21:00 UTC
28382:  76:   timeZone: "UTC",
28383:  77:   memory: runtimeOpts.memory,
28384:  78:   timeoutSeconds: runtimeOpts.timeoutSeconds,
28385:  79:   retryCount: 3,
28386:  80: });
28387:  81: ```
28388:  82: 
28389:  83: ### Price Sync Schedule
28390:  84: 
28391:  85: ```typescript
28392:  86: exports.scheduledPriceSync = onSchedule({
28393:  87:   schedule: "30 21 * * *", // Daily at 21:30 UTC
28394:  88:   timeZone: "UTC",
28395:  89:   memory: runtimeOpts.memory,
28396:  90:   timeoutSeconds: runtimeOpts.timeoutSeconds,
28397:  91:   retryCount: 3,
28398:  92: });
28399:  93: ```
28400:  94: 
28401:  95: ## Image Processing Configuration
28402:  96: 
28403:  97: ### Compression Settings
28404:  98: 
28405:  99: ```typescript
28406: 100: private static readonly QUALITY = {
28407: 101:   HIGH_RES: 90,
28408: 102:   LOW_RES: 85,
28409: 103: };
28410: 104: 
28411: 105: private static readonly DIMENSIONS = {
28412: 106:   HIGH_RES: 400,
28413: 107:   LOW_RES: 200,
28414: 108: };
28415: 109: ```
28416: 110: 
28417: 111: ### Cache Settings
28418: 112: 
28419: 113: ```typescript
28420: 114: const options = {
28421: 115:   max: 500,
28422: 116:   ttl: 1000 * 60 * 60, // 1 hour
28423: 117: };
28424: 118: ```
28425: 119: 
28426: 120: ## Testing Configuration
28427: 121: 
28428: 122: ### Test Cases
28429: 123: 
28430: 124: ```typescript
28431: 125: const TEST_CASES = [
28432: 126:   {
28433: 127:     imageUrl: "https://tcgplayer-cdn.tcgplayer.com/product/477236_200w.jpg",
28434: 128:     groupId: "23783",
28435: 129:     productId: 477236,
28436: 130:     description: "FFVII Boss Deck",
28437: 131:   },
28438: 132: ];
28439: 133: ```
28440: 134: 
28441: 135: ## Error Handling Configuration
28442: 136: 
28443: 137: ### Log Levels
28444: 138: 
28445: 139: ```typescript
28446: 140: export interface ErrorReport {
28447: 141:   timestamp: Date;
28448: 142:   context: string;
28449: 143:   error: string;
28450: 144:   stackTrace?: string;
28451: 145:   metadata?: Record<string, unknown>;
28452: 146:   severity: "ERROR" | "WARNING" | "CRITICAL";
28453: 147: }
28454: 148: ```
28455: </file>
28456: 
28457: <file path="setup/installation.md">
28458:  1: # Installation Guide
28459:  2: 
28460:  3: ## Prerequisites
28461:  4: 
28462:  5: - Node.js 18 or higher
28463:  6: - Firebase CLI
28464:  7: - Git (for version control)
28465:  8: - A Firebase project with Firestore and Storage enabled
28466:  9: 
28467: 10: ## Firebase Project Setup
28468: 11: 
28469: 12: 1. Create or select a Firebase project:
28470: 13: 
28471: 14: - Visit the [Firebase Console](https://console.firebase.google.com/)
28472: 15: - Create a new project or select an existing one
28473: 16: - Note your project ID for later use
28474: 17: 
28475: 18: 1. Enable required services:
28476: 19: 
28477: 20: - Firestore Database
28478: 21: - Cloud Storage
28479: 22: - Cloud Functions
28480: 23: 
28481: 24: 1. Configure Firebase Authentication:
28482: 25: 
28483: 26: - Enable Google Authentication
28484: 27: - Add authorized domains if needed
28485: 28: - Set up authorized email addresses for admin access
28486: 29: 
28487: 30: ## Local Development Setup
28488: 31: 
28489: 32: 1. Clone the repository:
28490: 33: 
28491: 34: ```bash
28492: 35: git clone <repository-url>
28493: 36: cd fftcg-sync-service
28494: </file>
28495: 
28496: <file path="troubleshooting.md">
28497:   1: # Troubleshooting Guide
28498:   2: 
28499:   3: ## Quick Diagnosis
28500:   4: 
28501:   5: ### System Status Check
28502:   6: 
28503:   7: ```bash
28504:   8: # Check service health
28505:   9: curl https://${REGION}-${PROJECT_ID}.cloudfunctions.net/healthCheck
28506:  10: 
28507:  11: # Expected Response
28508:  12: {
28509:  13:   "status": "healthy",
28510:  14:   "timestamp": "2024-11-22T01:47:16.617Z",
28511:  15:   "version": "1.0.0"
28512:  16: }
28513:  17: ```
28514:  18: 
28515:  19: ### Log Analysis
28516:  20: 
28517:  21: ```typescript
28518:  22: // View recent logs
28519:  23: firebase functions:log
28520:  24: 
28521:  25: // Filter for errors
28522:  26: firebase functions:log --only errors
28523:  27: 
28524:  28: // View specific function logs
28525:  29: firebase functions:log --only syncCards
28526:  30: ```
28527:  31: 
28528:  32: ## Common Issues
28529:  33: 
28530:  34: ### Synchronization Failures
28531:  35: 
28532:  36: #### Cards Not Syncing
28533:  37: 
28534:  38: **Symptoms:**
28535:  39: 
28536:  40: - Missing card data
28537:  41: - Outdated information
28538:  42: - Sync operation completes without updates
28539:  43: 
28540:  44: **Solutions:**
28541:  45: 
28542:  46: 1. Check API access:
28543:  47: 
28544:  48: ```typescript
28545:  49: // Test API connection
28546:  50: const response = await makeRequest<{ results: any[] }>(
28547:  51:   `${FFTCG_CATEGORY_ID}/groups`,
28548:  52:   {metadata: {operation: "fetchGroups"}}
28549:  53: );
28550:  54: ```
28551:  55: 
28552:  56: 1. Verify hash comparison:
28553:  57: 
28554:  58: ```typescript
28555:  59: // Force sync by clearing hashes
28556:  60: await db.collection(COLLECTION.CARD_HASHES).doc(groupId).delete();
28557:  61: ```
28558:  62: 
28559:  63: 1. Check rate limits:
28560:  64: 
28561:  65: ```typescript
28562:  66: // Monitor rate limit logs
28563:  67: await logInfo("Rate limit status", {
28564:  68:   remaining: rateLimiter.tokens,
28565:  69:   nextRefill: rateLimiter.nextRefillTime
28566:  70: });
28567:  71: ```
28568:  72: 
28569:  73: #### Price Updates Failed
28570:  74: 
28571:  75: **Symptoms:**
28572:  76: 
28573:  77: - Outdated prices
28574:  78: - Partial updates
28575:  79: - Sync metadata shows errors
28576:  80: 
28577:  81: **Solutions:**
28578:  82: 
28579:  83: 1. Validate price data:
28580:  84: 
28581:  85: ```typescript
28582:  86: const priceResult = await validateCollection(
28583:  87:   db,
28584:  88:   COLLECTION.PRICES,
28585:  89:   (data) => {
28586:  90:     return (
28587:  91:       data.lastUpdated instanceof Timestamp &&
28588:  92:       (!data.normal || typeof data.normal.midPrice === "number") &&
28589:  93:       (!data.foil || typeof data.foil.midPrice === "number")
28590:  94:     );
28591:  95:   }
28592:  96: );
28593:  97: ```
28594:  98: 
28595:  99: 1. Force price sync:
28596: 100: 
28597: 101: ```typescript
28598: 102: await syncPrices({
28599: 103:   dryRun: false,
28600: 104:   groupId: specificGroupId,
28601: 105:   forceUpdate: true
28602: 106: });
28603: 107: ```
28604: 108: 
28605: 109: ### Image Processing Issues
28606: 110: 
28607: 111: #### Image Upload Failures
28608: 112: 
28609: 113: **Symptoms:**
28610: 114: 
28611: 115: - Missing images in storage
28612: 116: - Failed compression attempts
28613: 117: - Storage quota errors
28614: 118: 
28615: 119: **Solutions:**
28616: 120: 
28617: 121: 1. Check image validation:
28618: 122: 
28619: 123: ```typescript
28620: 124: const validationResult = await ImageValidator.validateImage(buffer);
28621: 125: if (validationResult) {
28622: 126:   console.error("Validation failed:", validationResult.message);
28623: 127: }
28624: 128: ```
28625: 129: 
28626: 130: 1. Verify storage permissions:
28627: 131: 
28628: 132: ```typescript
28629: 133: try {
28630: 134:   await storage.bucket(STORAGE.BUCKETS.CARD_IMAGES).file(path).save(buffer);
28631: 135: } catch (error) {
28632: 136:   console.error("Storage access error:", error);
28633: 137: }
28634: 138: ```
28635: 139: 
28636: 140: 1. Monitor storage quota:
28637: 141: 
28638: 142: ```typescript
28639: 143: const [usage] = await storage.bucket().getMetadata();
28640: 144: console.log("Storage usage:", usage.size);
28641: 145: ```
28642: 146: 
28643: 147: #### Image Compression Problems
28644: 148: 
28645: 149: **Symptoms:**
28646: 150: 
28647: 151: - Large file sizes
28648: 152: - Poor image quality
28649: 153: - Processing timeouts
28650: 154: 
28651: 155: **Solutions:**
28652: 156: 
28653: 157: 1. Adjust compression settings:
28654: 158: 
28655: 159: ```typescript
28656: 160: const compressionOptions = {
28657: 161:   quality: ImageCompressor.QUALITY.HIGH_RES,
28658: 162:   progressive: true,
28659: 163:   mozjpeg: true
28660: 164: };
28661: 165: ```
28662: 166: 
28663: 167: 1. Debug compression process:
28664: 168: 
28665: 169: ```typescript
28666: 170: const result = await ImageCompressor.compress(buffer, false);
28667: 171: console.log("Compression results:", {
28668: 172:   originalSize: buffer.length,
28669: 173:   compressedSize: result.buffer.length,
28670: 174:   ratio: result.buffer.length / buffer.length
28671: 175: });
28672: 176: ```
28673: 177: 
28674: 178: ### Database Issues
28675: 179: 
28676: 180: #### Write Operations Failed
28677: 181: 
28678: 182: **Symptoms:**
28679: 183: 
28680: 184: - Timeout errors
28681: 185: - Batch operation failures
28682: 186: - Inconsistent data state
28683: 187: 
28684: 188: **Solutions:**
28685: 189: 
28686: 190: 1. Check batch size:
28687: 191: 
28688: 192: ```typescript
28689: 193: // Reduce batch size
28690: 194: const batchOptions = {
28691: 195:   batchSize: 100,  // Decrease from default 500
28692: 196:   delayBetweenBatches: 1000
28693: 197: };
28694: 198: ```
28695: 199: 
28696: 200: 1. Monitor write operations:
28697: 201: 
28698: 202: ```typescript
28699: 203: const stats = {
28700: 204:   attempted: 0,
28701: 205:   successful: 0,
28702: 206:   failed: 0
28703: 207: };
28704: 208: 
28705: 209: await processBatch(items, async (batch) => {
28706: 210:   try {
28707: 211:     await writeBatch.commit();
28708: 212:     stats.successful += batch.length;
28709: 213:   } catch (error) {
28710: 214:     stats.failed += batch.length;
28711: 215:     await logError(error, "writeBatch");
28712: 216:   }
28713: 217:   stats.attempted += batch.length;
28714: 218: });
28715: 219: ```
28716: 220: 
28717: 221: #### Cache Inconsistency
28718: 222: 
28719: 223: **Symptoms:**
28720: 224: 
28721: 225: - Stale data
28722: 226: - Memory usage spikes
28723: 227: - Inconsistent results
28724: 228: 
28725: 229: **Solutions:**
28726: 230: 
28727: 231: 1. Clear caches:
28728: 232: 
28729: 233: ```typescript
28730: 234: // Clear specific cache
28731: 235: imageCache.clear();
28732: 236: cardCache.clear();
28733: 237: 
28734: 238: // Clear all caches
28735: 239: await Promise.all([
28736: 240:   imageCache.clear(),
28737: 241:   cardCache.clear(),
28738: 242:   db.clearPersistence()
28739: 243: ]);
28740: 244: ```
28741: 245: 
28742: 246: 1. Verify cache settings:
28743: 247: 
28744: 248: ```typescript
28745: 249: const cacheOptions = {
28746: 250:   max: 500,
28747: 251:   ttl: 1000 * 60 * 60, // 1 hour
28748: 252:   updateAgeOnGet: true
28749: 253: };
28750: 254: ```
28751: 255: 
28752: 256: ### Performance Issues
28753: 257: 
28754: 258: #### High Memory Usage
28755: 259: 
28756: 260: **Symptoms:**
28757: 261: 
28758: 262: - Function timeouts
28759: 263: - Out of memory errors
28760: 264: - Slow processing
28761: 265: 
28762: 266: **Solutions:**
28763: 267: 
28764: 268: 1. Monitor memory usage:
28765: 269: 
28766: 270: ```typescript
28767: 271: const used = process.memoryUsage();
28768: 272: await logInfo("Memory usage", {
28769: 273:   heapUsed: `${Math.round(used.heapUsed / 1024 / 1024 * 100) / 100} MB`,
28770: 274:   heapTotal: `${Math.round(used.heapTotal / 1024 / 1024 * 100) / 100} MB`,
28771: 275: });
28772: 276: ```
28773: 277: 
28774: 278: 1. Implement cleanup:
28775: 279: 
28776: 280: ```typescript
28777: 281: async function cleanupResources(): Promise<void> {
28778: 282:   await imageCache.clear();
28779: 283:   global.gc && global.gc();
28780: 284: }
28781: 285: ```
28782: 286: 
28783: 287: #### Slow Synchronization
28784: 288: 
28785: 289: **Symptoms:**
28786: 290: 
28787: 291: - Long sync duration
28788: 292: - Timeout errors
28789: 293: - Queue buildup
28790: 294: 
28791: 295: **Solutions:**
28792: 296: 
28793: 297: 1. Enable progress tracking:
28794: 298: 
28795: 299: ```typescript
28796: 300: const progress = new EnhancedProgressTracker(
28797: 301:   totalItems,
28798: 302:   "Processing Cards",
28799: 303:   { updateInterval: 1000 }
28800: 304: );
28801: 305: 
28802: 306: // Monitor progress
28803: 307: progress.update(1);
28804: 308: const stats = progress.getProgress();
28805: 309: ```
28806: 310: 
28807: 311: 1. Optimize batch processing:
28808: 312: 
28809: 313: ```typescript
28810: 314: const optimizedBatch = new AdaptiveBatchProcessor();
28811: 315: await optimizedBatch.processBatch(items, processor);
28812: 316: ```
28813: 317: 
28814: 318: ### Network Issues
28815: 319: 
28816: 320: #### API Connection Failures
28817: 321: 
28818: 322: **Symptoms:**
28819: 323: 
28820: 324: - Request timeouts
28821: 325: - Connection refused
28822: 326: - DNS resolution failed
28823: 327: 
28824: 328: **Solutions:**
28825: 329: 
28826: 330: 1. Implement retry logic:
28827: 331: 
28828: 332: ```typescript
28829: 333: const requestWithRetry = async () => {
28830: 334:   const retryStrategy = new RetryStrategy();
28831: 335:   return retryStrategy.executeWithRetry(
28832: 336:     operation,
28833: 337:     "API_REQUEST"
28834: 338:   );
28835: 339: };
28836: 340: ```
28837: 341: 
28838: 342: 1. Check network status:
28839: 343: 
28840: 344: ```typescript
28841: 345: async function checkConnectivity(): Promise<boolean> {
28842: 346:   try {
28843: 347:     await axios.get(BASE_URL, { timeout: 5000 });
28844: 348:     return true;
28845: 349:   } catch (error) {
28846: 350:     await logError(error, "connectivityCheck");
28847: 351:     return false;
28848: 352:   }
28849: 353: }
28850: 354: ```
28851: 355: 
28852: 356: ## Debugging Tools
28853: 357: 
28854: 358: ### Logging and Diagnostics
28855: 359: 
28856: 360: ```typescript
28857: 361: // Enable detailed logging
28858: 362: const logger = new SyncLogger({
28859: 363:   type: "manual",
28860: 364:   limit: 10,
28861: 365:   dryRun: true,
28862: 366:   verbose: true
28863: 367: });
28864: 368: 
28865: 369: // Track specific operations
28866: 370: await logger.logGroupDetails(groupId, products.length, prices.length);
28867: 371: ```
28868: 372: 
28869: 373: ### Validation Tools
28870: 374: 
28871: 375: ```typescript
28872: 376: // Validate sync state
28873: 377: await validateSync({
28874: 378:   limit: 100,
28875: 379:   verbose: true,
28876: 380:   groupId: "test_group"
28877: 381: });
28878: 382: 
28879: 383: // Check data integrity
28880: 384: const integrityCheck = await validateCollection(db, COLLECTION.CARDS);
28881: 385: console.log("Integrity check results:", integrityCheck);
28882: 386: ```
28883: 387: 
28884: 388: ### Performance Monitoring
28885: 389: 
28886: 390: ```typescript
28887: 391: // Track operation timing
28888: 392: const timer = {
28889: 393:   start: Date.now(),
28890: 394:   checkPoint(operation: string) {
28891: 395:     const duration = Date.now() - this.start;
28892: 396:     console.log(`${operation}: ${duration}ms`);
28893: 397:   }
28894: 398: };
28895: 399: 
28896: 400: // Monitor async operations
28897: 401: async function trackAsyncOperation<T>(
28898: 402:   operation: () => Promise<T>,
28899: 403:   name: string
28900: 404: ): Promise<T> {
28901: 405:   const start = Date.now();
28902: 406:   try {
28903: 407:     const result = await operation();
28904: 408:     const duration = Date.now() - start;
28905: 409:     await logInfo(`${name} completed`, { duration });
28906: 410:     return result;
28907: 411:   } catch (error) {
28908: 412:     await logError(error, name);
28909: 413:     throw error;
28910: 414:   }
28911: 415: }
28912: 416: ```
28913: 417: 
28914: 418: ## Recovery Procedures
28915: 419: 
28916: 420: ### Data Recovery
28917: 421: 
28918: 422: 1. Backup verification:
28919: 423: 
28920: 424: ```typescript
28921: 425: async function verifyBackups(): Promise<boolean> {
28922: 426:   const backups = await db.collection('backups').get();
28923: 427:   return backups.size > 0;
28924: 428: }
28925: 429: ```
28926: 430: 
28927: 431: 1. Restore procedure:
28928: 432: 
28929: 433: ```typescript
28930: 434: async function restoreData(timestamp: Date): Promise<void> {
28931: 435:   const backup = await db.collection('backups')
28932: 436:     .where('timestamp', '<=', timestamp)
28933: 437:     .orderBy('timestamp', 'desc')
28934: 438:     .limit(1)
28935: 439:     .get();
28936: 440:    
28937: 441:   if (!backup.empty) {
28938: 442:     await restoreFromBackup(backup.docs[0]);
28939: 443:   }
28940: 444: }
28941: 445: ```
28942: 446: 
28943: 447: ### Error Recovery
28944: 448: 
28945: 449: 1. Clear error state:
28946: 450: 
28947: 451: ```typescript
28948: 452: async function clearErrorState(): Promise<void> {
28949: 453:   await db.collection(COLLECTION.SYNC_METADATA)
28950: 454:     .where('status', '==', 'failed')
28951: 455:     .get()
28952: 456:     .then(snapshot => {
28953: 457:       const batch = db.batch();
28954: 458:       snapshot.forEach(doc => {
28955: 459:         batch.update(doc.ref, { status: 'ready' });
28956: 460:       });
28957: 461:       return batch.commit();
28958: 462:     });
28959: 463: }
28960: 464: ```
28961: 465: 
28962: 466: 1. Reset sync state:
28963: 467: 
28964: 468: ```typescript
28965: 469: async function resetSyncState(): Promise<void> {
28966: 470:   await Promise.all([
28967: 471:     db.collection(COLLECTION.CARD_HASHES).get()
28968: 472:       .then(snapshot => {
28969: 473:         const batch = db.batch();
28970: 474:         snapshot.forEach(doc => batch.delete(doc.ref));
28971: 475:         return batch.commit();
28972: 476:       }),
28973: 477:     db.collection(COLLECTION.PRICE_HASHES).get()
28974: 478:       .then(snapshot => {
28975: 479:         const batch = db.batch();
28976: 480:         snapshot.forEach(doc => batch.delete(doc.ref));
28977: 481:         return batch.commit();
28978: 482:       })
28979: 483:   ]);
28980: 484: }
28981: 485: ```
28982: </file>
28983: 
28984: <file path="usage-guide.md">
28985:   1: # FFTCG Sync Service Usage Guide
28986:   2: 
28987:   3: ## Overview
28988:   4: 
28989:   5: This guide provides comprehensive instructions for using the FFTCG Sync Service, including setup, operations, and best practices.
28990:   6: 
28991:   7: ## Quick Start
28992:   8: 
28993:   9: ### Prerequisites
28994:  10: 
28995:  11: - Node.js 18 or higher
28996:  12: - Firebase CLI installed (`npm install -g firebase-tools`)
28997:  13: - Firebase project created
28998:  14: - Service account key configured
28999:  15: 
29000:  16: ### Initial Setup
29001:  17: 
29002:  18: 1. Clone the repository
29003:  19: 
29004:  20: ```bash
29005:  21: git clone https://github.com/yourusername/fftcg-sync-service.git
29006:  22: cd fftcg-sync-service
29007:  23: ```
29008:  24: 
29009:  25: 1. Install dependencies
29010:  26: 
29011:  27: ```bash
29012:  28: npm install
29013:  29: ```
29014:  30: 
29015:  31: 1. Initialize Firebase
29016:  32: 
29017:  33: ```bash
29018:  34: firebase login
29019:  35: firebase init
29020:  36: ```
29021:  37: 
29022:  38: ## API Reference
29023:  39: 
29024:  40: ### Card Management Endpoints
29025:  41: 
29026:  42: #### Test Card Sync
29027:  43: 
29028:  44: ```http
29029:  45: GET /testCardSync?limit=5&dryRun=true&groupId=23783
29030:  46: ```
29031:  47: 
29032:  48: #### Manual Card Sync
29033:  49: 
29034:  50: ```http
29035:  51: GET /manualCardSync
29036:  52: ```
29037:  53: 
29038:  54: ### Price Management Endpoints
29039:  55: 
29040:  56: #### Test Price Sync
29041:  57: 
29042:  58: ```http
29043:  59: GET /testPriceSync?limit=5&dryRun=true&groupId=23783
29044:  60: ```
29045:  61: 
29046:  62: #### Manual Price Sync
29047:  63: 
29048:  64: ```http
29049:  65: GET /manualPriceSync
29050:  66: ```
29051:  67: 
29052:  68: ## Synchronization Features
29053:  69: 
29054:  70: ### Card Data Synchronization
29055:  71: 
29056:  72: ```typescript
29057:  73: // Test sync with limited cards
29058:  74: const options = {
29059:  75:   dryRun: true,
29060:  76:   limit: 5,
29061:  77:   groupId: "23783" // Optional: specific group
29062:  78: };
29063:  79: 
29064:  80: await syncCards(options);
29065:  81: ```
29066:  82: 
29067:  83: ### Price Data Synchronization
29068:  84: 
29069:  85: ```typescript
29070:  86: // Test price sync for specific cards
29071:  87: const options = {
29072:  88:   dryRun: true,
29073:  89:   limit: 10,
29074:  90:   groupId: "23783",
29075:  91:   productId: 477236 // Optional: specific card
29076:  92: };
29077:  93: 
29078:  94: await syncPrices(options);
29079:  95: ```
29080:  96: 
29081:  97: ## Image Management
29082:  98: 
29083:  99: ### Basic Image Processing
29084: 100: 
29085: 101: ```typescript
29086: 102: const imageHandler = new ImageHandler();
29087: 103: 
29088: 104: const result = await imageHandler.processImage(
29089: 105:   imageUrl,
29090: 106:   groupId,
29091: 107:   productId
29092: 108: );
29093: 109: ```
29094: 110: 
29095: 111: ### Image Processing Options
29096: 112: 
29097: 113: ```typescript
29098: 114: const options = {
29099: 115:   skipImages: false,    // Skip image processing
29100: 116:   retryFailedImages: true,    // Retry failed images
29101: 117:   batchSize: 25        // Batch size for processing
29102: 118: };
29103: 119: ```
29104: 120: 
29105: 121: ## Batch Operations
29106: 122: 
29107: 123: ### Standard Batch Processing
29108: 124: 
29109: 125: ```typescript
29110: 126: const batchOptions = {
29111: 127:   batchSize: 100,
29112: 128:   delayBetweenBatches: 1000,
29113: 129:   onBatchComplete: async (stats) => {
29114: 130:     console.log(`Processed: ${stats.processed}/${stats.total}`);
29115: 131:   }
29116: 132: };
29117: 133: 
29118: 134: await processBatch(items, processor, batchOptions);
29119: 135: ```
29120: 136: 
29121: 137: ## Logging System
29122: 138: 
29123: 139: ### Core Logging Operations
29124: 140: 
29125: 141: ```typescript
29126: 142: // Info logging
29127: 143: await logInfo("Operation started", {
29128: 144:   context: "syncOperation",
29129: 145:   timestamp: new Date()
29130: 146: });
29131: 147: 
29132: 148: // Warning logging
29133: 149: await logWarning("Retry required", {
29134: 150:   attempt: 2,
29135: 151:   maxRetries: 3
29136: 152: });
29137: 153: 
29138: 154: // Error logging
29139: 155: await logError(error, "operationName");
29140: 156: ```
29141: 157: 
29142: 158: ### Sync Status Logging
29143: 159: 
29144: 160: ```typescript
29145: 161: const logger = new SyncLogger({
29146: 162:   type: "manual",
29147: 163:   limit: 10,
29148: 164:   dryRun: true
29149: 165: });
29150: 166: 
29151: 167: await logger.start();
29152: 168: await logger.logGroupDetails(groupId, products.length, prices.length);
29153: 169: await logger.finish();
29154: 170: ```
29155: 171: 
29156: 172: ## Testing Infrastructure
29157: 173: 
29158: 174: ### Image System Testing
29159: 175: 
29160: 176: ```typescript
29161: 177: // Run the image processing test suite
29162: 178: npm run test:images
29163: 179: 
29164: 180: // Test specific image handling
29165: 181: const testCase = {
29166: 182:   imageUrl: "https://example.com/card.jpg",
29167: 183:   groupId: "23783",
29168: 184:   productId: 477236
29169: 185: };
29170: 186: 
29171: 187: await testImageProcessing(testCase);
29172: 188: ```
29173: 189: 
29174: 190: ### Sync System Testing
29175: 191: 
29176: 192: ```bash
29177: 193: # Basic validation
29178: 194: npm run validate-sync
29179: 195: 
29180: 196: # Advanced validation with options
29181: 197: npm run validate-sync -- --limit 10 --verbose --groupId 23783
29182: 198: ```
29183: 199: 
29184: 200: ## System Observation
29185: 201: 
29186: 202: ### Health Monitoring
29187: 203: 
29188: 204: ```typescript
29189: 205: // Endpoint: GET /healthCheck
29190: 206: const healthResponse = {
29191: 207:   status: "healthy",
29192: 208:   timestamp: "2024-11-22T01:47:16.617Z",
29193: 209:   version: "1.0.0"
29194: 210: };
29195: 211: ```
29196: 212: 
29197: 213: ### Runtime Monitoring
29198: 214: 
29199: 215: ```typescript
29200: 216: // Monitor sync operations
29201: 217: const syncStats = {
29202: 218:   processedItems: 0,
29203: 219:   totalItems: 100,
29204: 220:   startTime: Date.now(),
29205: 221:   errors: []
29206: 222: };
29207: 223: 
29208: 224: // Update monitoring stats
29209: 225: function updateStats(processed: number): void {
29210: 226:   syncStats.processedItems = processed;
29211: 227:   const elapsed = Date.now() - syncStats.startTime;
29212: 228:   const rate = processed / (elapsed / 1000);
29213: 229:   console.log(`Processing rate: ${rate.toFixed(2)} items/second`);
29214: 230: }
29215: 231: ```
29216: 232: 
29217: 233: ## Operational Procedures
29218: 234: 
29219: 235: ### Sync Process Workflow
29220: 236: 
29221: 237: 1. Initialize sync operation
29222: 238: 
29223: 239: ```typescript
29224: 240: const syncOptions = {
29225: 241:   dryRun: false,
29226: 242:   limit: undefined,
29227: 243:   groupId: undefined
29228: 244: };
29229: 245: ```
29230: 246: 
29231: 247: 1. Fetch and validate data
29232: 248: 
29233: 249: ```typescript
29234: 250: const rawData = await fetchData();
29235: 251: const validatedData = await validateData(rawData);
29236: 252: ```
29237: 253: 
29238: 254: 1. Process updates
29239: 255: 
29240: 256: ```typescript
29241: 257: await processBatch(validatedData, async (batch) => {
29242: 258:   await updateDatabase(batch);
29243: 259: });
29244: 260: ```
29245: 261: 
29246: 262: 1. Handle image processing
29247: 263: 
29248: 264: ```typescript
29249: 265: await processImages(validatedData, {
29250: 266:   compression: true,
29251: 267:   validateMetadata: true
29252: 268: });
29253: 269: ```
29254: 270: 
29255: 271: 1. Update cache system
29256: 272: 
29257: 273: ```typescript
29258: 274: await updateCacheEntries(processedData);
29259: 275: ```
29260: 276: 
29261: 277: ### Image Pipeline Workflow
29262: 278: 
29263: 279: #### Image Acquisition and Validation
29264: 280: 
29265: 281: ```typescript
29266: 282: const imageHandler = new ImageHandler();
29267: 283: const validator = new ImageValidator();
29268: 284: 
29269: 285: const buffer = await imageHandler.downloadImage(url);
29270: 286: const validationResult = await validator.validateImage(buffer);
29271: 287: ```
29272: 288: 
29273: 289: #### Image Processing and Storage
29274: 290: 
29275: 291: ```typescript
29276: 292: const compressor = new ImageCompressor();
29277: 293: const result = await compressor.compress(buffer, {
29278: 294:   quality: 85,
29279: 295:   maxWidth: 800
29280: 296: });
29281: 297: 
29282: 298: await storageService.uploadImage(result.buffer, {
29283: 299:   metadata: result.info
29284: 300: });
29285: 301: ```
29286: 302: 
29287: 303: ## System Optimization
29288: 304: 
29289: 305: ### Database Performance
29290: 306: 
29291: 307: ```typescript
29292: 308: // Use batch operations for multiple updates
29293: 309: const batch = db.batch();
29294: 310: updates.forEach(update => {
29295: 311:   const ref = db.collection('cards').doc(update.id);
29296: 312:   batch.update(ref, update.data);
29297: 313: });
29298: 314: await batch.commit();
29299: 315: ```
29300: 316: 
29301: 317: ### Resource Management
29302: 318: 
29303: 319: ```typescript
29304: 320: // Implement cleanup for large operations
29305: 321: async function cleanupResources(): Promise<void> {
29306: 322:   await imageCache.clear();
29307: 323:   global.gc && global.gc();
29308: 324: }
29309: 325: ```
29310: 326: 
29311: 327: ### Request Rate Management
29312: 328: 
29313: 329: ```typescript
29314: 330: const rateLimiter = {
29315: 331:   tokens: 100,
29316: 332:   refillRate: 10,
29317: 333:   interval: 1000,
29318: 334: 
29319: 335:   async acquire(): Promise<boolean> {
29320: 336:     if (this.tokens > 0) {
29321: 337:       this.tokens--;
29322: 338:       return true;
29323: 339:     }
29324: 340:     return false;
29325: 341:   }
29326: 342: };
29327: 343: ```
29328: 344: 
29329: 345: ## Security Controls
29330: 346: 
29331: 347: ### Input Validation
29332: 348: 
29333: 349: ```typescript
29334: 350: // Implement strict type checking
29335: 351: function validateSyncOptions(options: unknown): asserts options is SyncOptions {
29336: 352:   if (!options || typeof options !== "object") {
29337: 353:     throw new Error("Invalid options object");
29338: 354:   }
29339: 355: 
29340: 356:   const opts = options as Record<string, unknown>;
29341: 357:  
29342: 358:   if (opts.limit && typeof opts.limit !== "number") {
29343: 359:     throw new Error("Limit must be a number");
29344: 360:   }
29345: 361: 
29346: 362:   if (opts.groupId && typeof opts.groupId !== "string") {
29347: 363:     throw new Error("GroupId must be a string");
29348: 364:   }
29349: 365: }
29350: 366: ```
29351: 367: 
29352: 368: ### Authentication
29353: 369: 
29354: 370: ```typescript
29355: 371: // Verify Firebase authentication
29356: 372: async function verifyAuth(req: Request): Promise<void> {
29357: 373:   const token = req.headers.authorization?.split("Bearer ")[1];
29358: 374:   if (!token) {
29359: 375:     throw new Error("No authentication token provided");
29360: 376:   }
29361: 377: 
29362: 378:   try {
29363: 379:     await admin.auth().verifyIdToken(token);
29364: 380:   } catch (error) {
29365: 381:     throw new Error("Invalid authentication token");
29366: 382:   }
29367: 383: }
29368: 384: ```
29369: 385: 
29370: 386: ## Advanced Patterns
29371: 387: 
29372: 388: ### Custom Synchronization
29373: 389: 
29374: 390: ```typescript
29375: 391: // Implement custom sync logic
29376: 392: async function customSync<T extends BaseEntity>(
29377: 393:   fetcher: DataFetcher<T>,
29378: 394:   processor: DataProcessor<T>,
29379: 395:   options: SyncOptions
29380: 396: ): Promise<SyncMetadata> {
29381: 397:   const logger = new SyncLogger({
29382: 398:     type: "custom",
29383: 399:     ...options
29384: 400:   });
29385: 401: 
29386: 402:   await logger.start();
29387: 403:  
29388: 404:   try {
29389: 405:     const data = await fetcher.fetch();
29390: 406:     const processed = await processor.process(data);
29391: 407:     return {
29392: 408:       status: "success",
29393: 409:       processed: processed.length,
29394: 410:       timestamp: new Date()
29395: 411:     };
29396: 412:   } catch (error) {
29397: 413:     await logger.logError(error);
29398: 414:     throw error;
29399: 415:   } finally {
29400: 416:     await logger.finish();
29401: 417:   }
29402: 418: }
29403: 419: ```
29404: 420: 
29405: 421: ### Advanced Caching
29406: 422: 
29407: 423: ```typescript
29408: 424: // Implement hierarchical caching
29409: 425: class HierarchicalCache<T> {
29410: 426:   private l1Cache = new Map<string, T>();
29411: 427:   private l2Cache: LRUCache<string, T>;
29412: 428: 
29413: 429:   constructor(options: CacheOptions) {
29414: 430:     this.l2Cache = new LRUCache<string, T>({
29415: 431:       max: options.maxSize,
29416: 432:       ttl: options.ttl
29417: 433:     });
29418: 434:   }
29419: 435: 
29420: 436:   async get(key: string): Promise<T | undefined> {
29421: 437:     // Check L1 cache first
29422: 438:     const l1Result = this.l1Cache.get(key);
29423: 439:     if (l1Result) return l1Result;
29424: 440: 
29425: 441:     // Check L2 cache
29426: 442:     const l2Result = this.l2Cache.get(key);
29427: 443:     if (l2Result) {
29428: 444:       this.l1Cache.set(key, l2Result);
29429: 445:       return l2Result;
29430: 446:     }
29431: 447: 
29432: 448:     return undefined;
29433: 449:   }
29434: 450: }
29435: 451: ```
29436: 452: 
29437: 453: ### Advanced Batch Processing
29438: 454: 
29439: 455: ```typescript
29440: 456: // Implement adaptive batch sizing
29441: 457: class AdaptiveBatchProcessor {
29442: 458:   private optimalBatchSize: number = 100;
29443: 459:   private processingTimes: number[] = [];
29444: 460: 
29445: 461:   async processBatch<T>(
29446: 462:     items: T[],
29447: 463:     processor: (batch: T[]) => Promise<void>
29448: 464:   ): Promise<void> {
29449: 465:     for (let i = 0; i < items.length; i += this.optimalBatchSize) {
29450: 466:       const start = Date.now();
29451: 467:       const batch = items.slice(i, i + this.optimalBatchSize);
29452: 468:      
29453: 469:       await processor(batch);
29454: 470:      
29455: 471:       const duration = Date.now() - start;
29456: 472:       this.adjustBatchSize(duration);
29457: 473:     }
29458: 474:   }
29459: 475: 
29460: 476:   private adjustBatchSize(lastProcessingTime: number): void {
29461: 477:     this.processingTimes.push(lastProcessingTime);
29462: 478:     if (this.processingTimes.length >= 5) {
29463: 479:       const avgTime = this.calculateAverage(this.processingTimes);
29464: 480:       if (avgTime > 1000) {
29465: 481:         this.optimalBatchSize = Math.max(10, this.optimalBatchSize * 0.8);
29466: 482:       } else if (avgTime < 500) {
29467: 483:         this.optimalBatchSize = Math.min(1000, this.optimalBatchSize * 1.2);
29468: 484:       }
29469: 485:       this.processingTimes = [];
29470: 486:     }
29471: 487:   }
29472: 488: }
29473: 489: ```
29474: 490: 
29475: 491: ### Recovery Strategies
29476: 492: 
29477: 493: ```typescript
29478: 494: // Implement progressive retry with backoff
29479: 495: class RetryStrategy {
29480: 496:   private static readonly MAX_RETRIES = 3;
29481: 497:   private static readonly BASE_DELAY = 1000;
29482: 498: 
29483: 499:   async executeWithRetry<T>(
29484: 500:     operation: () => Promise<T>,
29485: 501:     context: string
29486: 502:   ): Promise<T> {
29487: 503:     let lastError: Error;
29488: 504:    
29489: 505:     for (let attempt = 0; attempt < RetryStrategy.MAX_RETRIES; attempt++) {
29490: 506:       try {
29491: 507:         return await operation();
29492: 508:       } catch (error) {
29493: 509:         lastError = error instanceof Error ? error : new Error(String(error));
29494: 510:         const delay = Math.pow(2, attempt) * RetryStrategy.BASE_DELAY;
29495: 511:        
29496: 512:         await logWarning(
29497: 513:           `Operation failed, attempting retry ${attempt + 1}/${RetryStrategy.MAX_RETRIES}`,
29498: 514:           { context, error: lastError.message }
29499: 515:         );
29500: 516:        
29501: 517:         await new Promise(resolve => setTimeout(resolve, delay));
29502: 518:       }
29503: 519:     }
29504: 520:    
29505: 521:     throw lastError!;
29506: 522:   }
29507: 523: }
29508: 524: ```
29509: 525: 
29510: 526: ## Reference Materials
29511: 527: 
29512: 528: ### CLI Commands
29513: 529: 
29514: 530: ```bash
29515: 531: # Build the project
29516: 532: npm run build
29517: 533: 
29518: 534: # Run linting
29519: 535: npm run lint
29520: 536: 
29521: 537: # Fix linting issues
29522: 538: npm run lint:fix
29523: 539: 
29524: 540: # Run tests
29525: 541: npm run test:images
29526: 542: 
29527: 543: # Deploy functions
29528: 544: npm run deploy
29529: 545: ```
29530: 546: 
29531: 547: ### Documentation Links
29532: 548: 
29533: 549: - [Architecture Overview](./architecture.md)
29534: 550: - [API Documentation](./api/index.md)
29535: 551: - [Troubleshooting Guide](./troubleshooting.md)
29536: 552: - [Security Guidelines](./security.md)
29537: 553: - [Performance Guide](./performance.md)
29538: </file>
29539: 
29540: <file path="utils/batch.md">
29541:   1: # Batch Processing Utility
29542:   2: 
29543:   3: ## Overview
29544:   4: 
29545:   5: The Batch Processor (`batch.ts`) manages efficient processing of large data sets through controlled batching. It provides configurable batch sizes, concurrent processing, and progress tracking for synchronization operations.
29546:   6: 
29547:   7: ## Core Features
29548:   8: 
29549:   9: - Configurable batch sizes
29550:  10: - Concurrent processing
29551:  11: - Progress tracking
29552:  12: - Error handling
29553:  13: - Memory management
29554:  14: - Rate limiting
29555:  15: 
29556:  16: ## Main Interfaces
29557:  17: 
29558:  18: ### Batch Options
29559:  19: 
29560:  20: ```typescript
29561:  21: interface BatchOptions {
29562:  22:   batchSize?: number;
29563:  23:   concurrency?: number;
29564:  24:   retries?: number;
29565:  25:   backoff?: number;
29566:  26:   onProgress?: (progress: BatchProgress) => void;
29567:  27:   abortSignal?: AbortSignal;
29568:  28: }
29569:  29: ```
29570:  30: 
29571:  31: ### Progress Interface
29572:  32: 
29573:  33: ```typescript
29574:  34: interface BatchProgress {
29575:  35:   total: number;
29576:  36:   processed: number;
29577:  37:   failed: number;
29578:  38:   currentBatch: number;
29579:  39:   totalBatches: number;
29580:  40:   percentage: number;
29581:  41:   estimatedTimeRemaining?: number;
29582:  42: }
29583:  43: ```
29584:  44: 
29585:  45: ## Core Methods
29586:  46: 
29587:  47: ### Batch Processing
29588:  48: 
29589:  49: ```typescript
29590:  50: export async function processBatch<T>(
29591:  51:   items: T[],
29592:  52:   processor: (batch: T[]) => Promise<void>,
29593:  53:   options: BatchOptions = {}
29594:  54: ): Promise<BatchResult> {
29595:  55:   const {
29596:  56:     batchSize = 100,
29597:  57:     concurrency = 1,
29598:  58:     retries = 3,
29599:  59:     onProgress
29600:  60:   } = options;
29601:  61: 
29602:  62:   const batches = chunk(items, batchSize);
29603:  63:   let processed = 0;
29604:  64:   let failed = 0;
29605:  65: 
29606:  66:   for (let i = 0; i < batches.length; i++) {
29607:  67:     try {
29608:  68:       await processor(batches[i]);
29609:  69:       processed += batches[i].length;
29610:  70:     } catch (error) {
29611:  71:       failed += batches[i].length;
29612:  72:       await handleBatchError(error, retries);
29613:  73:     }
29614:  74: 
29615:  75:     if (onProgress) {
29616:  76:       onProgress({
29617:  77:         total: items.length,
29618:  78:         processed,
29619:  79:         failed,
29620:  80:         currentBatch: i + 1,
29621:  81:         totalBatches: batches.length,
29622:  82:         percentage: (processed + failed) / items.length * 100
29623:  83:       });
29624:  84:     }
29625:  85:   }
29626:  86: 
29627:  87:   return { processed, failed };
29628:  88: }
29629:  89: ```
29630:  90: 
29631:  91: ## Implementation Examples
29632:  92: 
29633:  93: ### Basic Usage
29634:  94: 
29635:  95: ```typescript
29636:  96: const items = await fetchItems();
29637:  97: const result = await processBatch(
29638:  98:   items,
29639:  99:   async (batch) => {
29640: 100:     await processItems(batch);
29641: 101:   },
29642: 102:   {
29643: 103:     batchSize: 50,
29644: 104:     onProgress: (progress) => {
29645: 105:       console.log(
29646: 106:         `Processed ${progress.processed}/${progress.total} items`
29647: 107:       );
29648: 108:     }
29649: 109:   }
29650: 110: );
29651: 111: ```
29652: 112: 
29653: 113: ### With Concurrency
29654: 114: 
29655: 115: ```typescript
29656: 116: const processConcurrentBatches = async <T>(
29657: 117:   items: T[],
29658: 118:   processor: (item: T) => Promise<void>
29659: 119: ): Promise<void> => {
29660: 120:   await processBatch(items, async (batch) => {
29661: 121:     await Promise.all(
29662: 122:       batch.map(item => processor(item))
29663: 123:     );
29664: 124:   }, {
29665: 125:     batchSize: 25,
29666: 126:     concurrency: 3
29667: 127:   });
29668: 128: };
29669: 129: ```
29670: 130: 
29671: 131: ## Error Management
29672: 132: 
29673: 133: ### Retry Logic
29674: 134: 
29675: 135: ```typescript
29676: 136: async function handleBatchError(
29677: 137:   error: unknown,
29678: 138:   retriesLeft: number,
29679: 139:   backoff: number = 1000
29680: 140: ): Promise<void> {
29681: 141:   if (retriesLeft <= 0) {
29682: 142:     throw error;
29683: 143:   }
29684: 144: 
29685: 145:   await new Promise(resolve => 
29686: 146:     setTimeout(resolve, backoff * (4 - retriesLeft))
29687: 147:   );
29688: 148:  
29689: 149:   return handleBatchError(
29690: 150:     error,
29691: 151:     retriesLeft - 1,
29692: 152:     backoff
29693: 153:   );
29694: 154: }
29695: 155: ```
29696: 156: 
29697: 157: ### Error Collection
29698: 158: 
29699: 159: ```typescript
29700: 160: interface BatchError {
29701: 161:   batchIndex: number;
29702: 162:   items: unknown[];
29703: 163:   error: Error;
29704: 164: }
29705: 165: 
29706: 166: const collectErrors = async <T>(
29707: 167:   items: T[],
29708: 168:   processor: (batch: T[]) => Promise<void>
29709: 169: ): Promise<BatchError[]> => {
29710: 170:   const errors: BatchError[] = [];
29711: 171:  
29712: 172:   await processBatch(items, async (batch, index) => {
29713: 173:     try {
29714: 174:       await processor(batch);
29715: 175:     } catch (error) {
29716: 176:       errors.push({
29717: 177:         batchIndex: index,
29718: 178:         items: batch,
29719: 179:         error: error instanceof Error ? error : new Error(String(error))
29720: 180:       });
29721: 181:     }
29722: 182:   });
29723: 183: 
29724: 184:   return errors;
29725: 185: };
29726: 186: ```
29727: 187: 
29728: 188: ## Memory Management
29729: 189: 
29730: 190: ### Chunking Function
29731: 191: 
29732: 192: ```typescript
29733: 193: function chunk<T>(
29734: 194:   items: T[], 
29735: 195:   size: number
29736: 196: ): T[][] {
29737: 197:   const chunks: T[][] = [];
29738: 198:  
29739: 199:   for (let i = 0; i < items.length; i += size) {
29740: 200:     chunks.push(items.slice(i, i + size));
29741: 201:   }
29742: 202:  
29743: 203:   return chunks;
29744: 204: }
29745: 205: ```
29746: 206: 
29747: 207: ### Resource Cleanup
29748: 208: 
29749: 209: ```typescript
29750: 210: async function processWithCleanup<T>(
29751: 211:   items: T[],
29752: 212:   processor: (batch: T[]) => Promise<void>
29753: 213: ): Promise<void> {
29754: 214:   let currentBatch: T[] = [];
29755: 215:  
29756: 216:   try {
29757: 217:     await processBatch(items, async (batch) => {
29758: 218:       currentBatch = batch;
29759: 219:       await processor(batch);
29760: 220:       currentBatch = [];
29761: 221:     });
29762: 222:   } finally {
29763: 223:     currentBatch = [];
29764: 224:   }
29765: 225: }
29766: 226: ```
29767: 227: 
29768: 228: ## Progress Tracking
29769: 229: 
29770: 230: ### Progress Calculator
29771: 231: 
29772: 232: ```typescript
29773: 233: function calculateProgress(
29774: 234:   processed: number,
29775: 235:   total: number,
29776: 236:   startTime: number
29777: 237: ): BatchProgress {
29778: 238:   const elapsed = Date.now() - startTime;
29779: 239:   const rate = processed / (elapsed / 1000);
29780: 240:   const remaining = total - processed;
29781: 241:  
29782: 242:   return {
29783: 243:     processed,
29784: 244:     total,
29785: 245:     percentage: (processed / total) * 100,
29786: 246:     estimatedTimeRemaining: remaining / rate
29787: 247:   };
29788: 248: }
29789: 249: ```
29790: 250: 
29791: 251: ## Best Practices
29792: 252: 
29793: 253: ### Batch Size Selection
29794: 254: 
29795: 255: - Consider memory constraints
29796: 256: - Balance throughput and overhead
29797: 257: - Monitor processing times
29798: 258: 
29799: 259: ### Error Handling
29800: 260: 
29801: 261: - Implement proper retries
29802: 262: - Log batch failures
29803: 263: - Maintain item context
29804: 264: 
29805: 265: ### Resource Management
29806: 266: 
29807: 267: - Clean up after processing
29808: 268: - Monitor memory usage
29809: 269: - Handle aborted operations
29810: 270: 
29811: 271: ## Related Components
29812: 272: 
29813: 273: - [Progress Tracker](./progress)
29814: 274: - [Error Handler](./error-handling)
29815: 275: - [Logger](./logging)
29816: 276: 
29817: 277: ## Troubleshooting
29818: 278: 
29819: 279: ### Common Issues
29820: 280: 
29821: 281: 1. Memory Problems:
29822: 282:    - Reduce batch size
29823: 283:    - Implement cleanup
29824: 284:    - Monitor heap usage
29825: 285: 
29826: 286: 2. Performance Issues:
29827: 287:    - Adjust concurrency
29828: 288:    - Optimize batch size
29829: 289:    - Monitor processing rates
29830: 290: 
29831: 291: 3. Error Handling:
29832: 292:    - Check retry logic
29833: 293:    - Verify error collection
29834: 294:    - Monitor failure patterns
29835: </file>
29836: 
29837: <file path="utils/cache.md">
29838:   1: # Cache System
29839:   2: 
29840:   3: ## Overview
29841:   4: 
29842:   5: The Cache System provides efficient memory caching for card data, prices, and images. It implements an LRU (Least Recently Used) caching strategy and includes specialized caching for different data types.
29843:   6: 
29844:   7: ## Components
29845:   8: 
29846:   9: The system consists of two main cache implementations:
29847:  10: 
29848:  11: 1. Basic LRU Cache (`cache.ts`)
29849:  12: 2. Specialized Image Cache (`imageCache.ts`)
29850:  13: 
29851:  14: ## Basic Cache Implementation
29852:  15: 
29853:  16: ### Configuration
29854:  17: 
29855:  18: ```typescript
29856:  19: const options = {
29857:  20:   max: 500,                // Maximum number of items
29858:  21:   ttl: 1000 * 60 * 60,    // Time to live: 1 hour
29859:  22: };
29860:  23: 
29861:  24: export const cardCache = new LRUCache<string, CardProduct>(options);
29862:  25: ```
29863:  26: 
29864:  27: ### Basic Key Generation
29865:  28: 
29866:  29: ```typescript
29867:  30: export type CacheType = "card" | "price" | "image";
29868:  31: 
29869:  32: export const getCacheKey = (type: CacheType, id: number): string => {
29870:  33:   return `${type}:${id}`;
29871:  34: };
29872:  35: ```
29873:  36: 
29874:  37: ## Image Cache Implementation
29875:  38: 
29876:  39: ### Class Structure
29877:  40: 
29878:  41: ```typescript
29879:  42: export class ImageCache {
29880:  43:   private metadataCache: LRUCache<string, ImageMetadata>;
29881:  44:   private bufferCache: LRUCache<string, Buffer>;
29882:  45:   private existsCache: LRUCache<string, boolean>;
29883:  46:   private stats: CacheStats;
29884:  47: }
29885:  48: ```
29886:  49: 
29887:  50: ### Cache Configuration
29888:  51: 
29889:  52: ```typescript
29890:  53: constructor() {
29891:  54:   this.metadataCache = new LRUCache<string, ImageMetadata>({
29892:  55:     max: 1000,
29893:  56:     ttl: 1000 * 60 * 60,  // 1 hour
29894:  57:     updateAgeOnGet: true,
29895:  58:   });
29896:  59: 
29897:  60:   this.bufferCache = new LRUCache<string, Buffer>({
29898:  61:     max: 100,
29899:  62:     ttl: 1000 * 60 * 5,   // 5 minutes
29900:  63:     updateAgeOnGet: true,
29901:  64:     maxSize: 50 * 1024 * 1024,  // 50MB max cache size
29902:  65:     sizeCalculation: (buffer) => buffer.length,
29903:  66:   });
29904:  67: 
29905:  68:   this.existsCache = new LRUCache<string, boolean>({
29906:  69:     max: 1000,
29907:  70:     ttl: 1000 * 60 * 60,  // 1 hour
29908:  71:     updateAgeOnGet: true,
29909:  72:   });
29910:  73: }
29911:  74: ```
29912:  75: 
29913:  76: ## Usage Examples
29914:  77: 
29915:  78: ### Basic Cache Usage
29916:  79: 
29917:  80: ```typescript
29918:  81: // Store card data
29919:  82: const cardId = 477236;
29920:  83: const cacheKey = getCacheKey("card", cardId);
29921:  84: cardCache.set(cacheKey, cardData);
29922:  85: 
29923:  86: // Retrieve card data
29924:  87: const cachedCard = cardCache.get(cacheKey);
29925:  88: if (cachedCard) {
29926:  89:   return cachedCard;
29927:  90: }
29928:  91: ```
29929:  92: 
29930:  93: ### Image Cache Usage
29931:  94: 
29932:  95: ```typescript
29933:  96: const imageCache = new ImageCache();
29934:  97: 
29935:  98: // Get metadata
29936:  99: const metadataKey = imageCache.getMetadataCacheKey(groupId, productId, false);
29937: 100: const metadata = await imageCache.getMetadata(metadataKey);
29938: 101: 
29939: 102: // Get image buffer
29940: 103: const bufferKey = imageCache.getBufferCacheKey(imageUrl);
29941: 104: const buffer = await imageCache.getBuffer(bufferKey);
29942: 105: 
29943: 106: // Check existence
29944: 107: const existsKey = imageCache.getExistsCacheKey(groupId, productId, false);
29945: 108: const exists = imageCache.getExists(existsKey);
29946: 109: ```
29947: 110: 
29948: 111: ## Image Cache Key Types
29949: 112: 
29950: 113: ### Metadata Keys
29951: 114: 
29952: 115: ```typescript
29953: 116: getMetadataCacheKey(
29954: 117:   groupId: string,
29955: 118:   productId: number,
29956: 119:   isHighRes: boolean
29957: 120: ): string {
29958: 121:   return `metadata:${groupId}:${productId}:${isHighRes ? "high" : "original"}`;
29959: 122: }
29960: 123: ```
29961: 124: 
29962: 125: ### Buffer Keys
29963: 126: 
29964: 127: ```typescript
29965: 128: getBufferCacheKey(url: string): string {
29966: 129:   return `buffer:${url}`;
29967: 130: }
29968: 131: ```
29969: 132: 
29970: 133: ### Existence Check Keys
29971: 134: 
29972: 135: ```typescript
29973: 136: getExistsCacheKey(
29974: 137:   groupId: string,
29975: 138:   productId: number,
29976: 139:   isHighRes: boolean
29977: 140: ): string {
29978: 141:   return `exists:${groupId}:${productId}:${isHighRes ? "high" : "original"}`;
29979: 142: }
29980: 143: ```
29981: 144: 
29982: 145: ## Statistics Tracking
29983: 146: 
29984: 147: ```typescript
29985: 148: interface CacheStats {
29986: 149:   hits: number;
29987: 150:   misses: number;
29988: 151:   totalRequests: number;
29989: 152: }
29990: 153: 
29991: 154: getStats(): CacheStats {
29992: 155:   return {...this.stats};
29993: 156: }
29994: 157: ```
29995: 158: 
29996: 159: ## Cache Management
29997: 160: 
29998: 161: ### Clearing Cache
29999: 162: 
30000: 163: ```typescript
30001: 164: clear(): void {
30002: 165:   this.metadataCache.clear();
30003: 166:   this.bufferCache.clear();
30004: 167:   this.existsCache.clear();
30005: 168:   this.stats = {
30006: 169:     hits: 0,
30007: 170:     misses: 0,
30008: 171:     totalRequests: 0,
30009: 172:   };
30010: 173: }
30011: 174: ```
30012: 175: 
30013: 176: ### Performance Monitoring
30014: 177: 
30015: 178: ```typescript
30016: 179: async getMetadata(key: string): Promise<ImageMetadata | undefined> {
30017: 180:   this.stats.totalRequests++;
30018: 181:   const value = this.metadataCache.get(key);
30019: 182:   if (value) {
30020: 183:     this.stats.hits++;
30021: 184:     await logInfo("Cache hit: metadata", {
30022: 185:       key,
30023: 186:       timestamp: new Date().toISOString(),
30024: 187:     });
30025: 188:   } else {
30026: 189:     this.stats.misses++;
30027: 190:   }
30028: 191:   return value;
30029: 192: }
30030: 193: ```
30031: 194: 
30032: 195: ## Best Practices
30033: 196: 
30034: 197: 1. **Memory Management**:
30035: 198:    - Set appropriate cache sizes
30036: 199:    - Monitor memory usage
30037: 200:    - Implement TTL for all cached items
30038: 201: 
30039: 202: 2. **Performance Optimization**:
30040: 203:    - Use buffer cache for frequently accessed images
30041: 204:    - Implement size limits for buffer cache
30042: 205:    - Track cache statistics
30043: 206: 
30044: 207: 3. **Error Handling**:
30045: 208:    - Graceful degradation on cache misses
30046: 209:    - Monitor cache hit rates
30047: 210:    - Log cache operations
30048: 211: 
30049: 212: ## Troubleshooting
30050: 213: 
30051: 214: ### Common Issues
30052: 215: 
30053: 216: 1. Memory Usage:
30054: 217:    - Monitor cache size
30055: 218:    - Adjust max entries
30056: 219:    - Check TTL settings
30057: 220: 
30058: 221: 2. Cache Misses:
30059: 222:    - Verify key generation
30060: 223:    - Check TTL values
30061: 224:    - Monitor hit rates
30062: 225: 
30063: 226: 3. Performance:
30064: 227:    - Analyze cache stats
30065: 228:    - Adjust cache sizes
30066: 229:    - Optimize key generation
30067: 230: 
30068: 231: ## Related Components
30069: 232: 
30070: 233: - [Image Handler](./image-handler)
30071: 234: - [Logger](./logging)
30072: 235: - [Error Handling](./error-handling)
30073: </file>
30074: 
30075: <file path="utils/error-handling.md">
30076:   1: # Error Handling System
30077:   2: 
30078:   3: ## Overview
30079:   4: 
30080:   5: The Error Handling system (`error.ts`) provides a standardized approach to error management across the application. It includes error classification, detailed logging, and integration with the logging system for comprehensive error tracking.
30081:   6: 
30082:   7: ## Features
30083:   8: 
30084:   9: - Custom error types
30085:  10: - Detailed error reporting
30086:  11: - Error severity levels
30087:  12: - Metadata support
30088:  13: - Firestore integration
30089:  14: - Stack trace preservation
30090:  15: 
30091:  16: ## Core Components
30092:  17: 
30093:  18: ### Error Types
30094:  19: 
30095:  20: ```typescript
30096:  21: export interface ErrorReport {
30097:  22:   timestamp: Date;
30098:  23:   context: string;
30099:  24:   error: string;
30100:  25:   stackTrace?: string;
30101:  26:   metadata?: Record<string, unknown>;
30102:  27:   severity: "ERROR" | "WARNING" | "CRITICAL";
30103:  28: }
30104:  29: 
30105:  30: export class DetailedError extends Error {
30106:  31:   constructor(
30107:  32:     message: string,
30108:  33:     public context: string,
30109:  34:     public metadata?: Record<string, unknown>,
30110:  35:     public severity: "ERROR" | "WARNING" | "CRITICAL" = "ERROR"
30111:  36:   ) {
30112:  37:     super(message);
30113:  38:     this.name = "DetailedError";
30114:  39:   }
30115:  40: }
30116:  41: ```
30117:  42: 
30118:  43: ## Error Logging
30119:  44: 
30120:  45: ### Basic Error Logging
30121:  46: 
30122:  47: ```typescript
30123:  48: export async function logDetailedError(
30124:  49:   error: Error,
30125:  50:   context: string,
30126:  51:   metadata?: Record<string, unknown>,
30127:  52:   severity: "ERROR" | "WARNING" | "CRITICAL" = "ERROR"
30128:  53: ): Promise<void> {
30129:  54:   const report: ErrorReport = {
30130:  55:     timestamp: new Date(),
30131:  56:     context,
30132:  57:     error: error.message,
30133:  58:     stackTrace: error.stack,
30134:  59:     metadata,
30135:  60:     severity,
30136:  61:   };
30137:  62: 
30138:  63:   await db.collection(COLLECTION.LOGS).add(report);
30139:  64:   await logError(error, context);
30140:  65: }
30141:  66: ```
30142:  67: 
30143:  68: ## Usage Examples
30144:  69: 
30145:  70: ### Basic Error Handling
30146:  71: 
30147:  72: ```typescript
30148:  73: try {
30149:  74:   await processImage(imageUrl);
30150:  75: } catch (error) {
30151:  76:   await logDetailedError(
30152:  77:     error as Error,
30153:  78:     "imageProcessing",
30154:  79:     { imageUrl, timestamp: new Date() },
30155:  80:     "ERROR"
30156:  81:   );
30157:  82: }
30158:  83: ```
30159:  84: 
30160:  85: ### Custom Error Creation
30161:  86: 
30162:  87: ```typescript
30163:  88: const handleImageError = async (error: unknown, imageUrl: string) => {
30164:  89:   const detailedError = new DetailedError(
30165:  90:     "Image processing failed",
30166:  91:     "imageHandler:process",
30167:  92:     {
30168:  93:       imageUrl,
30169:  94:       originalError: error instanceof Error ? error.message : "Unknown error",
30170:  95:       timestamp: new Date().toISOString()
30171:  96:     },
30172:  97:     "ERROR"
30173:  98:   );
30174:  99: 
30175: 100:   await logDetailedError(detailedError, detailedError.context);
30176: 101: };
30177: 102: ```
30178: 103: 
30179: 104: ## Error Classification
30180: 105: 
30181: 106: ### Severity Levels
30182: 107: 
30183: 108: ```typescript
30184: 109: type ErrorSeverity = "ERROR" | "WARNING" | "CRITICAL";
30185: 110: 
30186: 111: const determineSeverity = (error: Error): ErrorSeverity => {
30187: 112:   if (error instanceof NetworkError) return "WARNING";
30188: 113:   if (error instanceof DataCorruptionError) return "CRITICAL";
30189: 114:   return "ERROR";
30190: 115: };
30191: 116: ```
30192: 117: 
30193: 118: ### Context Management
30194: 119: 
30195: 120: ```typescript
30196: 121: interface ErrorContext {
30197: 122:   component: string;
30198: 123:   operation: string;
30199: 124:   metadata?: Record<string, unknown>;
30200: 125: }
30201: 126: 
30202: 127: const createErrorContext = (
30203: 128:   component: string,
30204: 129:   operation: string,
30205: 130:   metadata?: Record<string, unknown>
30206: 131: ): ErrorContext => ({
30207: 132:   component,
30208: 133:   operation,
30209: 134:   metadata
30210: 135: });
30211: 136: ```
30212: 137: 
30213: 138: ## Best Practices
30214: 139: 
30215: 140: ### 1. Error Wrapping
30216: 141: 
30217: 142: ```typescript
30218: 143: try {
30219: 144:   await externalOperation();
30220: 145: } catch (error) {
30221: 146:   const wrappedError = new DetailedError(
30222: 147:     "External operation failed",
30223: 148:     "externalService:operation",
30224: 149:     {
30225: 150:       originalError: error instanceof Error ? error.message : "Unknown error",
30226: 151:       timestamp: new Date().toISOString()
30227: 152:     }
30228: 153:   );
30229: 154:   throw wrappedError;
30230: 155: }
30231: 156: ```
30232: 157: 
30233: 158: ### 2. Error Recovery
30234: 159: 
30235: 160: ```typescript
30236: 161: async function withErrorRecovery<T>(
30237: 162:   operation: () => Promise<T>,
30238: 163:   fallback: T,
30239: 164:   context: string
30240: 165: ): Promise<T> {
30241: 166:   try {
30242: 167:     return await operation();
30243: 168:   } catch (error) {
30244: 169:     await logDetailedError(
30245: 170:       error as Error,
30246: 171:       context,
30247: 172:       { recoveryAction: "using fallback" }
30248: 173:     );
30249: 174:     return fallback;
30250: 175:   }
30251: 176: }
30252: 177: ```
30253: 178: 
30254: 179: ### 3. Batch Error Handling
30255: 180: 
30256: 181: ```typescript
30257: 182: interface BatchError {
30258: 183:   index: number;
30259: 184:   error: Error;
30260: 185:   item: unknown;
30261: 186: }
30262: 187: 
30263: 188: async function processBatchWithErrors<T>(
30264: 189:   items: T[],
30265: 190:   processor: (item: T) => Promise<void>
30266: 191: ): Promise<BatchError[]> {
30267: 192:   const errors: BatchError[] = [];
30268: 193: 
30269: 194:   for (let i = 0; i < items.length; i++) {
30270: 195:     try {
30271: 196:       await processor(items[i]);
30272: 197:     } catch (error) {
30273: 198:       errors.push({
30274: 199:         index: i,
30275: 200:         error: error as Error,
30276: 201:         item: items[i]
30277: 202:       });
30278: 203:     }
30279: 204:   }
30280: 205: 
30281: 206:   return errors;
30282: 207: }
30283: 208: ```
30284: 209: 
30285: 210: ## Error Monitoring
30286: 211: 
30287: 212: ### Error Aggregation
30288: 213: 
30289: 214: ```typescript
30290: 215: interface ErrorAggregate {
30291: 216:   count: number;
30292: 217:   lastOccurrence: Date;
30293: 218:   contexts: string[];
30294: 219: }
30295: 220: 
30296: 221: const aggregateErrors = async (
30297: 222:   timeWindow: number
30298: 223: ): Promise<Map<string, ErrorAggregate>> => {
30299: 224:   const now = new Date();
30300: 225:   const windowStart = new Date(now.getTime() - timeWindow);
30301: 226: 
30302: 227:   const errors = await db
30303: 228:     .collection(COLLECTION.LOGS)
30304: 229:     .where("timestamp", ">=", windowStart)
30305: 230:     .where("level", "==", "ERROR")
30306: 231:     .get();
30307: 232: 
30308: 233:   return errors.docs.reduce((acc, doc) => {
30309: 234:     const data = doc.data();
30310: 235:     const key = data.error;
30311: 236:     const existing = acc.get(key) || {
30312: 237:       count: 0,
30313: 238:       lastOccurrence: windowStart,
30314: 239:       contexts: []
30315: 240:     };
30316: 241: 
30317: 242:     existing.count++;
30318: 243:     existing.lastOccurrence = data.timestamp.toDate();
30319: 244:     if (!existing.contexts.includes(data.context)) {
30320: 245:       existing.contexts.push(data.context);
30321: 246:     }
30322: 247: 
30323: 248:     acc.set(key, existing);
30324: 249:     return acc;
30325: 250:   }, new Map<string, ErrorAggregate>());
30326: 251: };
30327: 252: ```
30328: 253: 
30329: 254: ## Error Resolution
30330: 255: 
30331: 256: ### Automatic Recovery
30332: 257: 
30333: 258: ```typescript
30334: 259: async function attemptRecovery(
30335: 260:   error: DetailedError,
30336: 261:   maxAttempts: number = 3
30337: 262: ): Promise<boolean> {
30338: 263:   let attempts = 0;
30339: 264:   let recovered = false;
30340: 265: 
30341: 266:   while (attempts < maxAttempts && !recovered) {
30342: 267:     try {
30343: 268:       await recoveryStrategies[error.name]?.(error);
30344: 269:       recovered = true;
30345: 270:     } catch (recoveryError) {
30346: 271:       attempts++;
30347: 272:       await logWarning(
30348: 273:         `Recovery attempt ${attempts} failed`,
30349: 274:         { error: recoveryError }
30350: 275:       );
30351: 276:     }
30352: 277:   }
30353: 278: 
30354: 279:   return recovered;
30355: 280: }
30356: 281: ```
30357: 282: 
30358: 283: ## Related Components
30359: 284: 
30360: 285: - [Logger](./logging)
30361: 286: - [Sync Logger](./sync-logger)
30362: 287: - [Image Handler](./image-handler)
30363: 288: 
30364: 289: ## Troubleshooting
30365: 290: 
30366: 291: ### Common Issues
30367: 292: 
30368: 293: 1. Missing Error Context:
30369: 294:    - Ensure proper error wrapping
30370: 295:    - Include relevant metadata
30371: 296:    - Use appropriate error types
30372: 297: 
30373: 298: 2. Error Recovery:
30374: 299:    - Implement fallback mechanisms
30375: 300:    - Use appropriate retry strategies
30376: 301:    - Monitor recovery success rates
30377: 302: 
30378: 303: 3. Performance Impact:
30379: 304:    - Balance logging detail with performance
30380: 305:    - Implement error aggregation
30381: 306:    - Use appropriate severity levels
30382: </file>
30383: 
30384: <file path="utils/image-compressor.md">
30385:   1: # Image Compressor Utility
30386:   2: 
30387:   3: ## Overview
30388:   4: 
30389:   5: The Image Compressor (`imageCompressor.ts`) handles image optimization and compression for card images. It provides configurable compression settings for both standard and high-resolution images while maintaining image quality.
30390:   6: 
30391:   7: ## Core Features
30392:   8: 
30393:   9: - Dual resolution support (200w/400w)
30394:  10: - Quality-preserving compression
30395:  11: - Dimension optimization
30396:  12: - Progressive JPEG support
30397:  13: - Metadata preservation
30398:  14: - Compression statistics
30399:  15: 
30400:  16: ## Configuration
30401:  17: 
30402:  18: ### Quality Settings
30403:  19: 
30404:  20: ```typescript
30405:  21: private static readonly QUALITY = {
30406:  22:   HIGH_RES: 90,
30407:  23:   LOW_RES: 85,
30408:  24: };
30409:  25: ```
30410:  26: 
30411:  27: ### Dimension Settings
30412:  28: 
30413:  29: ```typescript
30414:  30: private static readonly DIMENSIONS = {
30415:  31:   HIGH_RES: 400,
30416:  32:   LOW_RES: 200,
30417:  33: };
30418:  34: ```
30419:  35: 
30420:  36: ## Main Interfaces
30421:  37: 
30422:  38: ### Compression Result
30423:  39: 
30424:  40: ```typescript
30425:  41: export interface CompressionResult {
30426:  42:   buffer: Buffer;
30427:  43:   info: {
30428:  44:     width: number;
30429:  45:     height: number;
30430:  46:     size: number;
30431:  47:     format: string;
30432:  48:     quality: number;
30433:  49:   };
30434:  50: }
30435:  51: ```
30436:  52: 
30437:  53: ## Primary Methods
30438:  54: 
30439:  55: ### Compression Method
30440:  56: 
30441:  57: ```typescript
30442:  58: static async compress(
30443:  59:   buffer: Buffer,
30444:  60:   isHighRes: boolean = false
30445:  61: ): Promise<CompressionResult>
30446:  62: ```
30447:  63: 
30448:  64: ### Format Validation
30449:  65: 
30450:  66: ```typescript
30451:  67: static async isCompressible(buffer: Buffer): Promise<boolean>
30452:  68: ```
30453:  69: 
30454:  70: ## Implementation Examples
30455:  71: 
30456:  72: ### Basic Compression
30457:  73: 
30458:  74: ```typescript
30459:  75: const imageBuffer = await fetchImage(url);
30460:  76: const result = await ImageCompressor.compress(imageBuffer, false);
30461:  77: 
30462:  78: console.log("Compression stats:", {
30463:  79:   originalSize: imageBuffer.length,
30464:  80:   compressedSize: result.buffer.length,
30465:  81:   dimensions: `${result.info.width}x${result.info.height}`,
30466:  82:   quality: result.info.quality
30467:  83: });
30468:  84: ```
30469:  85: 
30470:  86: ### High-Resolution Processing
30471:  87: 
30472:  88: ```typescript
30473:  89: const highResResult = await ImageCompressor.compress(buffer, true);
30474:  90: await logInfo("High-res compression complete", {
30475:  91:   originalSize: buffer.length,
30476:  92:   compressedSize: highResResult.buffer.length,
30477:  93:   dimensions: `${highResResult.info.width}x${highResResult.info.height}`,
30478:  94:   quality: highResResult.info.quality
30479:  95: });
30480:  96: ```
30481:  97: 
30482:  98: ## Compression Pipeline
30483:  99: 
30484: 100: ### Image Analysis
30485: 101: 
30486: 102: ```typescript
30487: 103: const originalInfo = await sharp(buffer).metadata();
30488: 104: const originalSize = buffer.length;
30489: 105: ```
30490: 106: 
30491: 107: ### Optimization Process
30492: 108: 
30493: 109: ```typescript
30494: 110: const image = sharp(buffer).jpeg({
30495: 111:   quality,
30496: 112:   progressive: true,
30497: 113:   mozjpeg: true,
30498: 114: });
30499: 115: 
30500: 116: if (originalInfo.width && originalInfo.width > targetWidth) {
30501: 117:   image.resize(targetWidth, null, {
30502: 118:     fit: "inside",
30503: 119:     withoutEnlargement: true,
30504: 120:   });
30505: 121: }
30506: 122: ```
30507: 123: 
30508: 124: ## Performance Monitoring
30509: 125: 
30510: 126: ### Size Reduction Tracking
30511: 127: 
30512: 128: ```typescript
30513: 129: const compressionStats = {
30514: 130:   originalSize: buffer.length,
30515: 131:   compressedSize: compressedBuffer.length,
30516: 132:   reductionPercent: (
30517: 133:     (buffer.length - compressedBuffer.length) / 
30518: 134:     buffer.length * 100
30519: 135:   ).toFixed(2)
30520: 136: };
30521: 137: ```
30522: 138: 
30523: 139: ### Quality Metrics
30524: 140: 
30525: 141: ```typescript
30526: 142: const qualityMetrics = {
30527: 143:   dimensions: `${compressedInfo.width}x${compressedInfo.height}`,
30528: 144:   format: compressedInfo.format,
30529: 145:   quality: isHighRes ? QUALITY.HIGH_RES : QUALITY.LOW_RES
30530: 146: };
30531: 147: ```
30532: 148: 
30533: 149: ## Best Practices
30534: 150: 
30535: 151: ### Memory Management
30536: 152: 
30537: 153: - Process one image at a time
30538: 154: - Release buffers after processing
30539: 155: - Monitor memory usage
30540: 156: 
30541: 157: ### Quality Control
30542: 158: 
30543: 159: - Use appropriate quality settings
30544: 160: - Validate output dimensions
30545: 161: - Check compression ratios
30546: 162: 
30547: 163: ### Error Prevention
30548: 164: 
30549: 165: - Validate input formats
30550: 166: - Check buffer integrity
30551: 167: - Monitor compression results
30552: 168: 
30553: 169: ## Usage Guidelines
30554: 170: 
30555: 171: ### Standard Resolution
30556: 172: 
30557: 173: ```typescript
30558: 174: const standardResult = await ImageCompressor.compress(buffer);
30559: 175: if (standardResult.buffer.length > buffer.length) {
30560: 176:   // Use original if compression didn't help
30561: 177:   return buffer;
30562: 178: }
30563: 179: ```
30564: 180: 
30565: 181: ### High Resolution
30566: 182: 
30567: 183: ```typescript
30568: 184: const highResResult = await ImageCompressor.compress(buffer, true);
30569: 185: if (!highResResult.info.width || highResResult.info.width < 400) {
30570: 186:   throw new Error("High-res compression failed to meet size requirements");
30571: 187: }
30572: 188: ```
30573: 189: 
30574: 190: ## Error Handling
30575: 191: 
30576: 192: ### Input Validation
30577: 193: 
30578: 194: ```typescript
30579: 195: if (!buffer || buffer.length === 0) {
30580: 196:   throw new Error("Invalid input buffer");
30581: 197: }
30582: 198: 
30583: 199: if (!await ImageCompressor.isCompressible(buffer)) {
30584: 200:   throw new Error("Unsupported image format");
30585: 201: }
30586: 202: ```
30587: 203: 
30588: 204: ### Processing Errors
30589: 205: 
30590: 206: ```typescript
30591: 207: try {
30592: 208:   return await ImageCompressor.compress(buffer);
30593: 209: } catch (error) {
30594: 210:   throw new Error(
30595: 211:     `Image compression failed: ${
30596: 212:       error instanceof Error ? error.message : "Unknown error"
30597: 213:     }`
30598: 214:   );
30599: 215: }
30600: 216: ```
30601: 217: 
30602: 218: ## Related Components
30603: 219: 
30604: 220: - [Image Handler](./image-handler)
30605: 221: - [Image Validator](./image-validator)
30606: 222: - [Logger](./logging)
30607: 223: 
30608: 224: ## Troubleshooting
30609: 225: 
30610: 226: ### Common Issues
30611: 227: 
30612: 228: 1. Memory Constraints:
30613: 229:    - Monitor buffer sizes
30614: 230:    - Process images sequentially
30615: 231:    - Implement garbage collection
30616: 232: 
30617: 233: 2. Quality Problems:
30618: 234:    - Verify quality settings
30619: 235:    - Check dimension constraints
30620: 236:    - Validate output formats
30621: 237: 
30622: 238: 3. Performance Issues:
30623: 239:    - Monitor processing times
30624: 240:    - Track compression ratios
30625: 241:    - Optimize batch processing
30626: </file>
30627: 
30628: <file path="utils/image-handler.md">
30629:   1: # Image Handler Utility
30630:   2: 
30631:   3: ## Overview
30632:   4: 
30633:   5: The Image Handler (`imageHandler.ts`) is a comprehensive utility for managing card images. It handles downloading, processing, compression, caching, and storage of both standard and high-resolution card images in Firebase Storage.
30634:   6: 
30635:   7: ## Features
30636:   8: 
30637:   9: - Dual resolution support (200w and 400w)
30638:  10: - Image compression and optimization
30639:  11: - Caching system
30640:  12: - Hash-based change detection
30641:  13: - Error handling and retry logic
30642:  14: - Storage path management
30643:  15: - Metadata tracking
30644:  16: 
30645:  17: ## Class Structure
30646:  18: 
30647:  19: ```typescript
30648:  20: export class ImageHandler {
30649:  21:   private bucket = storage.bucket(STORAGE.BUCKETS.CARD_IMAGES);
30650:  22:  
30651:  23:   // Main method
30652:  24:   async processImage(
30653:  25:     imageUrl: string,
30654:  26:     groupId: string,
30655:  27:     productId: number
30656:  28:   ): Promise<ImageProcessingResult>
30657:  29: }
30658:  30: ```
30659:  31: 
30660:  32: ## Core Methods
30661:  33: 
30662:  34: ### Process Image
30663:  35: 
30664:  36: ```typescript
30665:  37: async processImage(
30666:  38:   imageUrl: string,
30667:  39:   groupId: string,
30668:  40:   productId: number
30669:  41: ): Promise<ImageProcessingResult>
30670:  42: ```
30671:  43: 
30672:  44: #### Parameters
30673:  45: 
30674:  46: - `imageUrl`: Source URL of the card image
30675:  47: - `groupId`: Card group identifier
30676:  48: - `productId`: Unique card identifier
30677:  49: 
30678:  50: #### Returns
30679:  51: 
30680:  52: ```typescript
30681:  53: interface ImageProcessingResult {
30682:  54:   originalUrl: string;      // URL of standard resolution image
30683:  55:   highResUrl: string;       // URL of high resolution image
30684:  56:   metadata: ImageMetadata;  // Image processing metadata
30685:  57:   updated: boolean;         // Whether image was updated
30686:  58: }
30687:  59: ```
30688:  60: 
30689:  61: ### Image Processing Pipeline
30690:  62: 
30691:  63: 1. **URL Processing**:
30692:  64: 
30693:  65: ```typescript
30694:  66: private getHighResUrl(imageUrl: string): string {
30695:  67:   return imageUrl.replace(/_200w\.jpg$/, "_400w.jpg");
30696:  68: }
30697:  69: ```
30698:  70: 
30699:  71: 1. **Storage Path Management**:
30700:  72: 
30701:  73: ```typescript
30702:  74: private getStoragePath(
30703:  75:   groupId: string,
30704:  76:   productId: number,
30705:  77:   isHighRes: boolean = false
30706:  78: ): string {
30707:  79:   const suffix = isHighRes ? "_400w" : "_200w";
30708:  80:   return `${STORAGE.PATHS.IMAGES}/${groupId}/${productId}${suffix}.jpg`;
30709:  81: }
30710:  82: ```
30711:  83: 
30712:  84: 1. **Image Download**:
30713:  85: 
30714:  86: ```typescript
30715:  87: private async downloadImage(url: string): Promise<Buffer>
30716:  88: ```
30717:  89: 
30718:  90: 1. **Image Compression**:
30719:  91: 
30720:  92: ```typescript
30721:  93: private async compressImage(
30722:  94:   buffer: Buffer,
30723:  95:   isHighRes: boolean
30724:  96: ): Promise<Buffer>
30725:  97: ```
30726:  98: 
30727:  99: ## Configuration
30728: 100: 
30729: 101: ### Storage Settings
30730: 102: 
30731: 103: ```typescript
30732: 104: export const STORAGE = {
30733: 105:   BUCKETS: {
30734: 106:     CARD_IMAGES: "fftcg-sync-service.firebasestorage.app",
30735: 107:   },
30736: 108:   PATHS: {
30737: 109:     IMAGES: "card-images",
30738: 110:   },
30739: 111: };
30740: 112: ```
30741: 113: 
30742: 114: ### Compression Settings
30743: 115: 
30744: 116: ```typescript
30745: 117: private static readonly QUALITY = {
30746: 118:   HIGH_RES: 90,
30747: 119:   LOW_RES: 85,
30748: 120: };
30749: 121: 
30750: 122: private static readonly DIMENSIONS = {
30751: 123:   HIGH_RES: 400,
30752: 124:   LOW_RES: 200,
30753: 125: };
30754: 126: ```
30755: 127: 
30756: 128: ## Usage Examples
30757: 129: 
30758: 130: ### Basic Image Processing
30759: 131: 
30760: 132: ```typescript
30761: 133: const imageHandler = new ImageHandler();
30762: 134: 
30763: 135: const result = await imageHandler.processImage(
30764: 136:   "https://tcgplayer-cdn.tcgplayer.com/product/477236_200w.jpg",
30765: 137:   "23783",
30766: 138:   477236
30767: 139: );
30768: 140: 
30769: 141: console.log("Image URLs:", {
30770: 142:   original: result.originalUrl,
30771: 143:   highRes: result.highResUrl
30772: 144: });
30773: 145: ```
30774: 146: 
30775: 147: ### With Error Handling
30776: 148: 
30777: 149: ```typescript
30778: 150: try {
30779: 151:   const imageHandler = new ImageHandler();
30780: 152:   const result = await imageHandler.processImage(imageUrl, groupId, productId);
30781: 153:  
30782: 154:   if (result.updated) {
30783: 155:     console.log("Image updated successfully");
30784: 156:     console.log("Metadata:", result.metadata);
30785: 157:   }
30786: 158: } catch (error) {
30787: 159:   console.error("Image processing failed:", error);
30788: 160: }
30789: 161: ```
30790: 162: 
30791: 163: ## Metadata Management
30792: 164: 
30793: 165: ### Metadata Structure
30794: 166: 
30795: 167: ```typescript
30796: 168: interface ImageMetadata {
30797: 169:   contentType: string;
30798: 170:   size: number;
30799: 171:   updated: Date;
30800: 172:   hash: string;
30801: 173:   originalUrl: string;
30802: 174:   highResUrl: string;
30803: 175:   originalSize?: number;
30804: 176:   highResSize?: number;
30805: 177: }
30806: 178: ```
30807: 179: 
30808: 180: ### Saving Metadata
30809: 181: 
30810: 182: ```typescript
30811: 183: private async saveMetadata(
30812: 184:   groupId: string,
30813: 185:   productId: number,
30814: 186:   metadata: ImageMetadata
30815: 187: ): Promise<void>
30816: 188: ```
30817: 189: 
30818: 190: ## Cache Integration
30819: 191: 
30820: 192: The Image Handler integrates with the caching system for improved performance:
30821: 193: 
30822: 194: ```typescript
30823: 195: const cacheKey = imageCache.getBufferCacheKey(url);
30824: 196: const cachedBuffer = await imageCache.getBuffer(cacheKey);
30825: 197: 
30826: 198: if (cachedBuffer) {
30827: 199:   return cachedBuffer;
30828: 200: }
30829: 201: ```
30830: 202: 
30831: 203: ## Error Handling
30832: 204: 
30833: 205: ### Error Types
30834: 206: 
30835: 207: ```typescript
30836: 208: interface ImageProcessingError extends GenericError {
30837: 209:   productId: number;
30838: 210:   groupId: string;
30839: 211:   originalUrl: string;
30840: 212:   type: "download" | "upload" | "metadata" | "unknown";
30841: 213: }
30842: 214: ```
30843: 215: 
30844: 216: ### Error Recovery
30845: 217: 
30846: 218: ```typescript
30847: 219: catch (error) {
30848: 220:   return {
30849: 221:     originalUrl: imageUrl,
30850: 222:     highResUrl: this.getHighResUrl(imageUrl),
30851: 223:     metadata: {
30852: 224:       contentType: "image/jpeg",
30853: 225:       size: 0,
30854: 226:       updated: new Date(),
30855: 227:       hash: "",
30856: 228:       originalUrl: imageUrl,
30857: 229:       highResUrl: this.getHighResUrl(imageUrl),
30858: 230:     },
30859: 231:     updated: false,
30860: 232:   };
30861: 233: }
30862: 234: ```
30863: 235: 
30864: 236: ## Best Practices
30865: 237: 
30866: 238: 1. **Memory Management**:
30867: 239:    - Process one resolution at a time
30868: 240:    - Use streams for large files
30869: 241:    - Implement proper cleanup
30870: 242: 
30871: 243: 2. **Error Handling**:
30872: 244:    - Implement retries for transient failures
30873: 245:    - Log detailed error information
30874: 246:    - Maintain fallback URLs
30875: 247: 
30876: 248: 3. **Performance**:
30877: 249:    - Utilize caching effectively
30878: 250:    - Implement batch processing
30879: 251:    - Monitor storage quotas
30880: 252: 
30881: 253: ## Related Components
30882: 254: 
30883: 255: - [Image Cache](./cache)
30884: 256: - [Image Compressor](./image-compressor)
30885: 257: - [Image Validator](./image-validator)
30886: 258: - [Logger](./logging)
30887: </file>
30888: 
30889: <file path="utils/image-validator.md">
30890:   1: # Image Validator Utility
30891:   2: 
30892:   3: ## Overview
30893:   4: 
30894:   5: The Image Validator (`imageValidator.ts`) ensures image integrity and conformance to required specifications before processing. It validates format, dimensions, file size, and other critical image attributes.
30895:   6: 
30896:   7: ## Core Features
30897:   8: 
30898:   9: - Format validation
30899:  10: - Dimension verification
30900:  11: - Size limit enforcement
30901:  12: - Metadata validation
30902:  13: - URL structure validation
30903:  14: - MIME type checking
30904:  15: 
30905:  16: ## Configuration
30906:  17: 
30907:  18: ### Size Limits
30908:  19: 
30909:  20: ```typescript
30910:  21: export const IMAGE_LIMITS = {
30911:  22:   MAX_SIZE: 10 * 1024 * 1024,  // 10MB
30912:  23:   MIN_SIZE: 1024,              // 1KB
30913:  24:   MAX_WIDTH: 2048,
30914:  25:   MAX_HEIGHT: 2048,
30915:  26:   MIN_WIDTH: 100,
30916:  27:   MIN_HEIGHT: 100,
30917:  28: };
30918:  29: ```
30919:  30: 
30920:  31: ### Format Settings
30921:  32: 
30922:  33: ```typescript
30923:  34: export const SUPPORTED_FORMATS = [
30924:  35:   "image/jpeg",
30925:  36:   "image/jpg",
30926:  37:   "image/png"
30927:  38: ] as const;
30928:  39: 
30929:  40: export const REQUIRED_DIMENSIONS = {
30930:  41:   STANDARD: {
30931:  42:     width: 200,
30932:  43:     height: 200
30933:  44:   },
30934:  45:   HIGH_RES: {
30935:  46:     width: 400,
30936:  47:     height: 400
30937:  48:   }
30938:  49: };
30939:  50: ```
30940:  51: 
30941:  52: ## Validation Methods
30942:  53: 
30943:  54: ### URL Pattern Check
30944:  55: 
30945:  56: ```typescript
30946:  57: export function isValidImageUrl(url: string): boolean {
30947:  58:   const pattern = /^https:\/\/.*\.(jpg|jpeg|png)(\?.*)?$/i;
30948:  59:   return pattern.test(url);
30949:  60: }
30950:  61: ```
30951:  62: 
30952:  63: ### Format Verification
30953:  64: 
30954:  65: ```typescript
30955:  66: export async function isValidFormat(
30956:  67:   buffer: Buffer
30957:  68: ): Promise<boolean> {
30958:  69:   try {
30959:  70:     const metadata = await sharp(buffer).metadata();
30960:  71:     return SUPPORTED_FORMATS.includes(
30961:  72:       `image/${metadata.format}` as typeof SUPPORTED_FORMATS[number]
30962:  73:     );
30963:  74:   } catch {
30964:  75:     return false;
30965:  76:   }
30966:  77: }
30967:  78: ```
30968:  79: 
30969:  80: ## Implementation Examples
30970:  81: 
30971:  82: ### Basic Validation
30972:  83: 
30973:  84: ```typescript
30974:  85: const validator = new ImageValidator();
30975:  86: 
30976:  87: try {
30977:  88:   await validator.validate(imageBuffer);
30978:  89:   console.log("Image validation successful");
30979:  90: } catch (error) {
30980:  91:   console.error("Validation failed:", error.message);
30981:  92: }
30982:  93: ```
30983:  94: 
30984:  95: ### URL Validation
30985:  96: 
30986:  97: ```typescript
30987:  98: const isValid = validator.validateUrl(imageUrl);
30988:  99: if (!isValid) {
30989: 100:   throw new Error(`Invalid image URL: ${imageUrl}`);
30990: 101: }
30991: 102: ```
30992: 103: 
30993: 104: ## Validation Pipeline
30994: 105: 
30995: 106: ### Size Check
30996: 107: 
30997: 108: ```typescript
30998: 109: private async validateSize(buffer: Buffer): Promise<void> {
30999: 110:   const size = buffer.length;
31000: 111:  
31001: 112:   if (size > IMAGE_LIMITS.MAX_SIZE) {
31002: 113:     throw new Error(
31003: 114:       `Image size ${size} exceeds maximum limit of ${IMAGE_LIMITS.MAX_SIZE}`
31004: 115:     );
31005: 116:   }
31006: 117:  
31007: 118:   if (size < IMAGE_LIMITS.MIN_SIZE) {
31008: 119:     throw new Error(
31009: 120:       `Image size ${size} below minimum requirement of ${IMAGE_LIMITS.MIN_SIZE}`
31010: 121:     );
31011: 122:   }
31012: 123: }
31013: 124: ```
31014: 125: 
31015: 126: ### Dimension Check
31016: 127: 
31017: 128: ```typescript
31018: 129: private async validateDimensions(
31019: 130:   metadata: sharp.Metadata
31020: 131: ): Promise<void> {
31021: 132:   const { width, height } = metadata;
31022: 133:  
31023: 134:   if (!width || !height) {
31024: 135:     throw new Error("Unable to determine image dimensions");
31025: 136:   }
31026: 137:  
31027: 138:   if (width > IMAGE_LIMITS.MAX_WIDTH || height > IMAGE_LIMITS.MAX_HEIGHT) {
31028: 139:     throw new Error("Image dimensions exceed maximum limits");
31029: 140:   }
31030: 141:  
31031: 142:   if (width < IMAGE_LIMITS.MIN_WIDTH || height < IMAGE_LIMITS.MIN_HEIGHT) {
31032: 143:     throw new Error("Image dimensions below minimum requirements");
31033: 144:   }
31034: 145: }
31035: 146: ```
31036: 147: 
31037: 148: ## Utility Functions
31038: 149: 
31039: 150: ### Metadata Extraction
31040: 151: 
31041: 152: ```typescript
31042: 153: async function getImageMetadata(
31043: 154:   buffer: Buffer
31044: 155: ): Promise<sharp.Metadata> {
31045: 156:   try {
31046: 157:     return await sharp(buffer).metadata();
31047: 158:   } catch (error) {
31048: 159:     throw new Error("Failed to extract image metadata");
31049: 160:   }
31050: 161: }
31051: 162: ```
31052: 163: 
31053: 164: ### Resolution Check
31054: 165: 
31055: 166: ```typescript
31056: 167: function isValidResolution(
31057: 168:   width: number,
31058: 169:   height: number,
31059: 170:   isHighRes: boolean
31060: 171: ): boolean {
31061: 172:   const requirements = isHighRes ? 
31062: 173:     REQUIRED_DIMENSIONS.HIGH_RES : 
31063: 174:     REQUIRED_DIMENSIONS.STANDARD;
31064: 175:    
31065: 176:   return width >= requirements.width && 
31066: 177:          height >= requirements.height;
31067: 178: }
31068: 179: ```
31069: 180: 
31070: 181: ## Error Messages
31071: 182: 
31072: 183: ### Custom Validation Errors
31073: 184: 
31074: 185: ```typescript
31075: 186: export class ImageValidationError extends Error {
31076: 187:   constructor(
31077: 188:     message: string,
31078: 189:     public code: string,
31079: 190:     public details?: Record<string, unknown>
31080: 191:   ) {
31081: 192:     super(message);
31082: 193:     this.name = "ImageValidationError";
31083: 194:   }
31084: 195: }
31085: 196: ```
31086: 197: 
31087: 198: ### Error Codes
31088: 199: 
31089: 200: ```typescript
31090: 201: export const VALIDATION_ERRORS = {
31091: 202:   INVALID_FORMAT: "INVALID_FORMAT",
31092: 203:   INVALID_SIZE: "INVALID_SIZE",
31093: 204:   INVALID_DIMENSIONS: "INVALID_DIMENSIONS",
31094: 205:   INVALID_URL: "INVALID_URL",
31095: 206:   METADATA_ERROR: "METADATA_ERROR"
31096: 207: } as const;
31097: 208: ```
31098: 209: 
31099: 210: ## Best Practices
31100: 211: 
31101: 212: ### Input Validation
31102: 213: 
31103: 214: - Check buffer integrity
31104: 215: - Validate URL structure
31105: 216: - Verify MIME types
31106: 217: 
31107: 218: ### Performance Optimization
31108: 219: 
31109: 220: - Cache validation results
31110: 221: - Implement early returns
31111: 222: - Use efficient checks
31112: 223: 
31113: 224: ### Error Handling
31114: 225: 
31115: 226: - Provide detailed error messages
31116: 227: - Include validation context
31117: 228: - Log validation failures
31118: 229: 
31119: 230: ## Usage Guidelines
31120: 231: 
31121: 232: ### Standard Validation
31122: 233: 
31123: 234: ```typescript
31124: 235: const validateImage = async (buffer: Buffer): Promise<void> => {
31125: 236:   const validator = new ImageValidator();
31126: 237:  
31127: 238:   try {
31128: 239:     await validator.validate(buffer);
31129: 240:   } catch (error) {
31130: 241:     await logError(error, "imageValidation");
31131: 242:     throw error;
31132: 243:   }
31133: 244: };
31134: 245: ```
31135: 246: 
31136: 247: ### URL Pattern Validation
31137: 248: 
31138: 249: ```typescript
31139: 250: const validateImageUrl = (url: string): void => {
31140: 251:   if (!isValidImageUrl(url)) {
31141: 252:     throw new ImageValidationError(
31142: 253:       `Invalid image URL: ${url}`,
31143: 254:       VALIDATION_ERRORS.INVALID_URL,
31144: 255:       { url }
31145: 256:     );
31146: 257:   }
31147: 258: };
31148: 259: ```
31149: 260: 
31150: 261: ## Related Components
31151: 262: 
31152: 263: - [Image Compressor](./image-compressor)
31153: 264: - [Image Handler](./image-handler)
31154: 265: - [Error Handling](./error-handling)
31155: 266: 
31156: 267: ## Troubleshooting
31157: 268: 
31158: 269: ### Common Issues
31159: 270: 
31160: 271: 1. Format Problems:
31161: 272:    - Check file extensions
31162: 273:    - Verify MIME types
31163: 274:    - Validate image headers
31164: 275: 
31165: 276: 2. Size Issues:
31166: 277:    - Monitor file sizes
31167: 278:    - Check compression settings
31168: 279:    - Verify buffer integrity
31169: 280: 
31170: 281: 3. Dimension Errors:
31171: 282:    - Validate aspect ratios
31172: 283:    - Check resolution requirements
31173: 284:    - Monitor scaling issues
31174: </file>
31175: 
31176: <file path="utils/logging.md">
31177:   1: # Logging System
31178:   2: 
31179:   3: ## Overview
31180:   4: 
31181:   5: The Logging System (`logger.ts`) provides comprehensive logging functionality across the application. It integrates with Firebase Functions logger and Firestore for persistent log storage, supporting multiple log levels and structured logging data.
31182:   6: 
31183:   7: ## Features
31184:   8: 
31185:   9: - Multiple log levels (INFO, WARNING, ERROR)
31186:  10: - Structured logging with metadata
31187:  11: - Firestore integration for log persistence
31188:  12: - Data cleaning and sanitization
31189:  13: - Flexible context tracking
31190:  14: - Type-safe logging interfaces
31191:  15: 
31192:  16: ## Basic Usage
31193:  17: 
31194:  18: ### Importing the Logger
31195:  19: 
31196:  20: ```typescript
31197:  21: import { logInfo, logWarning, logError } from "../utils/logger";
31198:  22: import { logger } from "firebase-functions";
31199:  23: ```
31200:  24: 
31201:  25: ### Log Levels
31202:  26: 
31203:  27: ```typescript
31204:  28: // Info level logging
31205:  29: await logInfo("Processing started", {
31206:  30:   timestamp: new Date().toISOString(),
31207:  31:   operation: "syncCards"
31208:  32: });
31209:  33: 
31210:  34: // Warning level logging
31211:  35: await logWarning("Retry attempt required", {
31212:  36:   attempt: 2,
31213:  37:   maxRetries: 3
31214:  38: });
31215:  39: 
31216:  40: // Error level logging
31217:  41: await logError(error, "syncCards:main");
31218:  42: ```
31219:  43: 
31220:  44: ## Data Structures
31221:  45: 
31222:  46: ### Log Entry Interface
31223:  47: 
31224:  48: ```typescript
31225:  49: interface LogEntry {
31226:  50:   timestamp: Date;
31227:  51:   level: "INFO" | "WARNING" | "ERROR";
31228:  52:   message: string;
31229:  53:   context?: string;
31230:  54:   data?: Record<string, unknown>;
31231:  55: }
31232:  56: ```
31233:  57: 
31234:  58: ### Error Logging Interface
31235:  59: 
31236:  60: ```typescript
31237:  61: interface GenericError {
31238:  62:   message: string;
31239:  63:   name: string;
31240:  64:   code?: string;
31241:  65:   stack?: string;
31242:  66: }
31243:  67: ```
31244:  68: 
31245:  69: ## Core Functions
31246:  70: 
31247:  71: ### Info Logging
31248:  72: 
31249:  73: ```typescript
31250:  74: export const logInfo = async (
31251:  75:   message: string,
31252:  76:   data?: LogData
31253:  77: ) => {
31254:  78:   const cleanedData = data ? cleanLogData({
31255:  79:     ...data,
31256:  80:     timestamp: new Date().toISOString(),
31257:  81:   }) : undefined;
31258:  82: 
31259:  83:   const entry: LogEntry = {
31260:  84:     timestamp: new Date(),
31261:  85:     level: "INFO",
31262:  86:     message,
31263:  87:     ...(cleanedData && {data: cleanedData}),
31264:  88:   };
31265:  89: 
31266:  90:   logger.info(message, cleanedData);
31267:  91:   await saveLogEntry(entry);
31268:  92: };
31269:  93: ```
31270:  94: 
31271:  95: ### Error Logging
31272:  96: 
31273:  97: ```typescript
31274:  98: export const logError = async (
31275:  99:   error: GenericError | GenericObject,
31276: 100:   context: string
31277: 101: ) => {
31278: 102:   const errorData = cleanLogData({
31279: 103:     stack: error.stack,
31280: 104:     code: error.code,
31281: 105:     ...(error as GenericObject),
31282: 106:     timestamp: new Date().toISOString(),
31283: 107:   });
31284: 108: 
31285: 109:   const entry: LogEntry = {
31286: 110:     timestamp: new Date(),
31287: 111:     level: "ERROR",
31288: 112:     message: error.message || "Unknown error",
31289: 113:     context,
31290: 114:     data: errorData,
31291: 115:   };
31292: 116: 
31293: 117:   logger.error(entry.message, errorData);
31294: 118:   await saveLogEntry(entry);
31295: 119: };
31296: 120: ```
31297: 121: 
31298: 122: ## Data Cleaning
31299: 123: 
31300: 124: ### Clean Log Data Function
31301: 125: 
31302: 126: ```typescript
31303: 127: function cleanLogData(
31304: 128:   data: Record<string, unknown>
31305: 129: ): Record<string, unknown> {
31306: 130:   return Object.entries(data).reduce((acc, [key, value]) => {
31307: 131:     if (value !== undefined && value !== null) {
31308: 132:       if (value && typeof value === "object") {
31309: 133:         const cleaned = cleanLogData(value as Record<string, unknown>);
31310: 134:         if (Object.keys(cleaned).length > 0) {
31311: 135:           acc[key] = cleaned;
31312: 136:         }
31313: 137:       } else {
31314: 138:         acc[key] = value instanceof Date ? value.toISOString() : value;
31315: 139:       }
31316: 140:     }
31317: 141:     return acc;
31318: 142:   }, {} as Record<string, unknown>);
31319: 143: }
31320: 144: ```
31321: 145: 
31322: 146: ## Firestore Integration
31323: 147: 
31324: 148: ### Save Log Entry
31325: 149: 
31326: 150: ```typescript
31327: 151: async function saveLogEntry(entry: LogEntry): Promise<void> {
31328: 152:   const cleanEntry = {
31329: 153:     timestamp: entry.timestamp,
31330: 154:     level: entry.level,
31331: 155:     message: entry.message,
31332: 156:     ...(entry.context && {context: entry.context}),
31333: 157:     ...(entry.data && {data: cleanLogData(entry.data)}),
31334: 158:   };
31335: 159: 
31336: 160:   await db.collection(COLLECTION.LOGS).add(cleanEntry);
31337: 161: }
31338: 162: ```
31339: 163: 
31340: 164: ## Best Practices
31341: 165: 
31342: 166: 1. **Structured Logging**:
31343: 167: 
31344: 168:    ```typescript
31345: 169:    await logInfo("Card sync completed", {
31346: 170:      cardsProcessed: 50,
31347: 171:      updatedCount: 10,
31348: 172:      duration: "5m30s",
31349: 173:      timestamp: new Date().toISOString()
31350: 174:    });
31351: 175:    ```
31352: 176: 
31353: 177: 2. **Error Context**:
31354: 178: 
31355: 179:    ```typescript
31356: 180:    await logError(error, "cardSync:processGroup", {
31357: 181:      groupId: "23783",
31358: 182:      attempt: 2,
31359: 183:      operation: "imageProcessing"
31360: 184:    });
31361: 185:    ```
31362: 186: 
31363: 187: 3. **Performance Monitoring**:
31364: 188: 
31365: 189:    ```typescript
31366: 190:    await logInfo("Operation timing", {
31367: 191:      operation: "imageCompression",
31368: 192:      duration: endTime - startTime,
31369: 193:      size: {
31370: 194:        before: originalSize,
31371: 195:        after: compressedSize
31372: 196:      }
31373: 197:    });
31374: 198:    ```
31375: 199: 
31376: 200: ## Error Handling
31377: 201: 
31378: 202: ### Common Patterns
31379: 203: 
31380: 204: ```typescript
31381: 205: try {
31382: 206:   // Operation code
31383: 207: } catch (error) {
31384: 208:   await logError(
31385: 209:     error instanceof Error ? error : new Error("Unknown error"),
31386: 210:     "operationName",
31387: 211:     { contextData: "relevant info" }
31388: 212:   );
31389: 213:   throw error;
31390: 214: }
31391: 215: ```
31392: 216: 
31393: 217: ### Error with Context
31394: 218: 
31395: 219: ```typescript
31396: 220: class DetailedError extends Error {
31397: 221:   constructor(
31398: 222:     message: string,
31399: 223:     public context: string,
31400: 224:     public metadata?: Record<string, unknown>
31401: 225:   ) {
31402: 226:     super(message);
31403: 227:     this.name = "DetailedError";
31404: 228:   }
31405: 229: }
31406: 230: ```
31407: 231: 
31408: 232: ## Query Examples
31409: 233: 
31410: 234: ### Firestore Queries
31411: 235: 
31412: 236: ```typescript
31413: 237: // Get recent errors
31414: 238: const recentErrors = await db
31415: 239:   .collection(COLLECTION.LOGS)
31416: 240:   .where("level", "==", "ERROR")
31417: 241:   .orderBy("timestamp", "desc")
31418: 242:   .limit(10)
31419: 243:   .get();
31420: 244: 
31421: 245: // Get logs by context
31422: 246: const contextLogs = await db
31423: 247:   .collection(COLLECTION.LOGS)
31424: 248:   .where("context", "==", "cardSync:processGroup")
31425: 249:   .get();
31426: 250: ```
31427: 251: 
31428: 252: ## Related Components
31429: 253: 
31430: 254: - [Error Handling](./error-handling)
31431: 255: - [Sync Logger](./sync-logger)
31432: 256: - [Progress Tracking](./progress)
31433: 257: 
31434: 258: ## Troubleshooting
31435: 259: 
31436: 260: ### Common Issues
31437: 261: 
31438: 262: 1. Missing Logs:
31439: 263:    - Check log level configuration
31440: 264:    - Verify Firestore permissions
31441: 265:    - Check error handling implementation
31442: 266: 
31443: 267: 2. Performance Impact:
31444: 268:    - Use appropriate log levels
31445: 269:    - Implement log batching for high-volume operations
31446: 270:    - Monitor Firestore usage
31447: 271: 
31448: 272: 3. Data Size:
31449: 273:    - Implement log rotation
31450: 274:    - Clean sensitive data
31451: 275:    - Monitor storage usage
31452: </file>
31453: 
31454: <file path="utils/progress.md">
31455:   1: # Progress Tracking Utility
31456:   2: 
31457:   3: ## Overview
31458:   4: 
31459:   5: The Progress Tracker (`progress.ts`) provides real-time monitoring and reporting of long-running operations, particularly during synchronization processes. It handles progress calculation, ETA estimation, and status updates.
31460:   6: 
31461:   7: ## Core Features
31462:   8: 
31463:   9: - Real-time progress tracking
31464:  10: - ETA calculations
31465:  11: - Operation statistics
31466:  12: - Progress bar visualization
31467:  13: - Step-by-step monitoring
31468:  14: - Batch progress tracking
31469:  15: 
31470:  16: ## Main Interfaces
31471:  17: 
31472:  18: ### Progress Options
31473:  19: 
31474:  20: ```typescript
31475:  21: interface ProgressOptions {
31476:  22:   total: number;
31477:  23:   title?: string;
31478:  24:   showBar?: boolean;
31479:  25:   showEta?: boolean;
31480:  26:   batchSize?: number;
31481:  27: }
31482:  28: ```
31483:  29: 
31484:  30: ### Progress State
31485:  31: 
31486:  32: ```typescript
31487:  33: interface ProgressState {
31488:  34:   current: number;
31489:  35:   total: number;
31490:  36:   startTime: Date;
31491:  37:   lastUpdateTime: Date;
31492:  38:   completed: boolean;
31493:  39:   eta?: Date;
31494:  40:   rate?: number;
31495:  41: }
31496:  42: ```
31497:  43: 
31498:  44: ## Implementation Examples
31499:  45: 
31500:  46: ### Basic Usage
31501:  47: 
31502:  48: ```typescript
31503:  49: const progress = new ProgressTracker({
31504:  50:   total: totalItems,
31505:  51:   title: "Processing Cards",
31506:  52:   showBar: true,
31507:  53:   showEta: true
31508:  54: });
31509:  55: 
31510:  56: progress.start();
31511:  57: 
31512:  58: for (const item of items) {
31513:  59:   await processItem(item);
31514:  60:   progress.increment();
31515:  61: }
31516:  62: 
31517:  63: progress.finish();
31518:  64: ```
31519:  65: 
31520:  66: ### Batch Processing
31521:  67: 
31522:  68: ```typescript
31523:  69: const tracker = new ProgressTracker({
31524:  70:   total: totalGroups,
31525:  71:   title: "Syncing Groups",
31526:  72:   batchSize: 25
31527:  73: });
31528:  74: 
31529:  75: tracker.start();
31530:  76: 
31531:  77: for (const batch of batches) {
31532:  78:   await processBatch(batch);
31533:  79:   tracker.incrementBatch(batch.length);
31534:  80: }
31535:  81: 
31536:  82: tracker.finish();
31537:  83: ```
31538:  84: 
31539:  85: ## Progress Visualization
31540:  86: 
31541:  87: ### Progress Bar
31542:  88: 
31543:  89: ```typescript
31544:  90: private renderBar(
31545:  91:   percentage: number,
31546:  92:   width: number = 30
31547:  93: ): string {
31548:  94:   const filled = Math.floor(width * (percentage / 100));
31549:  95:   const empty = width - filled;
31550:  96:  
31551:  97:   return '[' + 
31552:  98:     '='.repeat(filled) + 
31553:  99:     ' '.repeat(empty) + 
31554: 100:     ']';
31555: 101: }
31556: 102: ```
31557: 103: 
31558: 104: ### Status Line
31559: 105: 
31560: 106: ```typescript
31561: 107: private renderStatus(): string {
31562: 108:   const percentage = this.getPercentage();
31563: 109:   const current = this.state.current;
31564: 110:   const total = this.state.total;
31565: 111:  
31566: 112:   return `${this.options.title || 'Progress'}: ` +
31567: 113:     `${current}/${total} ` +
31568: 114:     `(${percentage.toFixed(1)}%)`;
31569: 115: }
31570: 116: ```
31571: 117: 
31572: 118: ## Time Calculations
31573: 119: 
31574: 120: ### ETA Estimation
31575: 121: 
31576: 122: ```typescript
31577: 123: private calculateEta(): Date | undefined {
31578: 124:   if (this.state.current === 0) return undefined;
31579: 125:  
31580: 126:   const elapsed = Date.now() - this.state.startTime.getTime();
31581: 127:   const rate = this.state.current / (elapsed / 1000);
31582: 128:   const remaining = this.state.total - this.state.current;
31583: 129:  
31584: 130:   return new Date(
31585: 131:     Date.now() + (remaining / rate) * 1000
31586: 132:   );
31587: 133: }
31588: 134: ```
31589: 135: 
31590: 136: ### Processing Rate
31591: 137: 
31592: 138: ```typescript
31593: 139: private calculateRate(): number {
31594: 140:   const elapsed = (
31595: 141:     this.state.lastUpdateTime.getTime() - 
31596: 142:     this.state.startTime.getTime()
31597: 143:   ) / 1000;
31598: 144:  
31599: 145:   return this.state.current / elapsed;
31600: 146: }
31601: 147: ```
31602: 148: 
31603: 149: ## Event Handling
31604: 150: 
31605: 151: ### Progress Updates
31606: 152: 
31607: 153: ```typescript
31608: 154: onProgress(callback: ProgressCallback): void {
31609: 155:   this.progressCallbacks.push(callback);
31610: 156: }
31611: 157: 
31612: 158: private emitProgress(): void {
31613: 159:   const progress = {
31614: 160:     current: this.state.current,
31615: 161:     total: this.state.total,
31616: 162:     percentage: this.getPercentage(),
31617: 163:     eta: this.state.eta,
31618: 164:     rate: this.state.rate
31619: 165:   };
31620: 166:  
31621: 167:   this.progressCallbacks.forEach(callback => callback(progress));
31622: 168: }
31623: 169: ```
31624: 170: 
31625: 171: ### Completion Events
31626: 172: 
31627: 173: ```typescript
31628: 174: onComplete(callback: CompleteCallback): void {
31629: 175:   this.completeCallbacks.push(callback);
31630: 176: }
31631: 177: 
31632: 178: private emitComplete(): void {
31633: 179:   const summary = {
31634: 180:     total: this.state.total,
31635: 181:     duration: this.getDuration(),
31636: 182:     averageRate: this.calculateAverageRate()
31637: 183:   };
31638: 184:  
31639: 185:   this.completeCallbacks.forEach(callback => callback(summary));
31640: 186: }
31641: 187: ```
31642: 188: 
31643: 189: ## Usage Patterns
31644: 190: 
31645: 191: ### With Async Operations
31646: 192: 
31647: 193: ```typescript
31648: 194: const processWithProgress = async (
31649: 195:   items: any[],
31650: 196:   processor: (item: any) => Promise<void>
31651: 197: ): Promise<void> => {
31652: 198:   const progress = new ProgressTracker({
31653: 199:     total: items.length,
31654: 200:     title: "Processing Items",
31655: 201:     showBar: true
31656: 202:   });
31657: 203:  
31658: 204:   progress.start();
31659: 205:  
31660: 206:   for (const item of items) {
31661: 207:     await processor(item);
31662: 208:     progress.increment();
31663: 209:     await new Promise(resolve => setTimeout(resolve, 10));
31664: 210:   }
31665: 211:  
31666: 212:   progress.finish();
31667: 213: };
31668: 214: ```
31669: 215: 
31670: 216: ### With Batch Processing
31671: 217: 
31672: 218: ```typescript
31673: 219: const processBatchWithProgress = async (
31674: 220:   batches: any[][],
31675: 221:   processor: (batch: any[]) => Promise<void>
31676: 222: ): Promise<void> => {
31677: 223:   const totalItems = batches.reduce(
31678: 224:     (sum, batch) => sum + batch.length, 
31679: 225:     0
31680: 226:   );
31681: 227:  
31682: 228:   const progress = new ProgressTracker({
31683: 229:     total: totalItems,
31684: 230:     title: "Processing Batches",
31685: 231:     batchSize: batches[0].length
31686: 232:   });
31687: 233:  
31688: 234:   progress.start();
31689: 235:  
31690: 236:   for (const batch of batches) {
31691: 237:     await processor(batch);
31692: 238:     progress.incrementBatch(batch.length);
31693: 239:   }
31694: 240:  
31695: 241:   progress.finish();
31696: 242: };
31697: 243: ```
31698: 244: 
31699: 245: ## Best Practices
31700: 246: 
31701: 247: ### Memory Efficiency
31702: 248: 
31703: 249: - Clear callbacks after completion
31704: 250: - Limit status update frequency
31705: 251: - Manage event listener count
31706: 252: 
31707: 253: ### Accuracy
31708: 254: 
31709: 255: - Update progress immediately
31710: 256: - Calculate rates periodically
31711: 257: - Maintain precise counters
31712: 258: 
31713: 259: ### User Experience
31714: 260: 
31715: 261: - Show meaningful titles
31716: 262: - Provide accurate ETAs
31717: 263: - Update status consistently
31718: 264: 
31719: 265: ## Related Components
31720: 266: 
31721: 267: - [Sync Logger](./sync-logger)
31722: 268: - [Batch Processor](./batch)
31723: 269: - [Logger](./logging)
31724: 270: 
31725: 271: ## Troubleshooting
31726: 272: 
31727: 273: ### Common Issues
31728: 274: 
31729: 275: 1. Performance Impact:
31730: 276:    - Limit update frequency
31731: 277:    - Optimize calculations
31732: 278:    - Monitor memory usage
31733: 279: 
31734: 280: 2. Accuracy Problems:
31735: 281:    - Verify counter updates
31736: 282:    - Check time calculations
31737: 283:    - Validate batch sizes
31738: 284: 
31739: 285: 3. Display Issues:
31740: 286:    - Check terminal width
31741: 287:    - Verify output formatting
31742: 288:    - Monitor update rates
31743: </file>
31744: 
31745: <file path="utils/request.md">
31746:   1: # Request Handler Utility
31747:   2: 
31748:   3: ## Overview
31749:   4: 
31750:   5: The Request Handler (`request.ts`) manages HTTP requests with built-in retry logic, rate limiting, and error handling. It provides a robust foundation for external API communications, particularly with TCGplayer's API.
31751:   6: 
31752:   7: ## Core Features
31753:   8: 
31754:   9: - Configurable retry logic
31755:  10: - Rate limiting
31756:  11: - Request queuing
31757:  12: - Response caching
31758:  13: - Error standardization
31759:  14: - Request logging
31760:  15: 
31761:  16: ## Configuration
31762:  17: 
31763:  18: ### Request Settings
31764:  19: 
31765:  20: ```typescript
31766:  21: interface RequestOptions {
31767:  22:   baseURL?: string;
31768:  23:   timeout?: number;
31769:  24:   retries?: number;
31770:  25:   backoff?: number;
31771:  26:   headers?: Record<string, string>;
31772:  27:   cache?: boolean;
31773:  28:   validateStatus?: (status: number) => boolean;
31774:  29: }
31775:  30: ```
31776:  31: 
31777:  32: ### Default Configuration
31778:  33: 
31779:  34: ```typescript
31780:  35: const DEFAULT_OPTIONS: RequestOptions = {
31781:  36:   timeout: 10000,
31782:  37:   retries: 3,
31783:  38:   backoff: 1000,
31784:  39:   cache: true,
31785:  40:   validateStatus: (status: number) => status >= 200 && status < 300
31786:  41: };
31787:  42: ```
31788:  43: 
31789:  44: ## Main Methods
31790:  45: 
31791:  46: ### HTTP Methods
31792:  47: 
31793:  48: ```typescript
31794:  49: class RequestHandler {
31795:  50:   async get<T>(
31796:  51:     url: string, 
31797:  52:     options?: RequestOptions
31798:  53:   ): Promise<T>
31799:  54: 
31800:  55:   async post<T>(
31801:  56:     url: string, 
31802:  57:     data: unknown, 
31803:  58:     options?: RequestOptions
31804:  59:   ): Promise<T>
31805:  60: 
31806:  61:   async put<T>(
31807:  62:     url: string, 
31808:  63:     data: unknown, 
31809:  64:     options?: RequestOptions
31810:  65:   ): Promise<T>
31811:  66: 
31812:  67:   async delete<T>(
31813:  68:     url: string, 
31814:  69:     options?: RequestOptions
31815:  70:   ): Promise<T>
31816:  71: }
31817:  72: ```
31818:  73: 
31819:  74: ## Implementation Examples
31820:  75: 
31821:  76: ### Basic Request
31822:  77: 
31823:  78: ```typescript
31824:  79: const requestHandler = new RequestHandler({
31825:  80:   baseURL: "https://api.tcgplayer.com",
31826:  81:   headers: {
31827:  82:     "Authorization": `Bearer ${token}`,
31828:  83:     "Content-Type": "application/json"
31829:  84:   }
31830:  85: });
31831:  86: 
31832:  87: const data = await requestHandler.get<CardResponse>(
31833:  88:   `/catalog/products/${productId}`
31834:  89: );
31835:  90: ```
31836:  91: 
31837:  92: ### With Retry Logic
31838:  93: 
31839:  94: ```typescript
31840:  95: const fetchWithRetry = async <T>(
31841:  96:   url: string,
31842:  97:   options: RequestOptions = {}
31843:  98: ): Promise<T> => {
31844:  99:   let attempt = 0;
31845: 100:  
31846: 101:   while (attempt < (options.retries || DEFAULT_OPTIONS.retries)) {
31847: 102:     try {
31848: 103:       return await requestHandler.get<T>(url, options);
31849: 104:     } catch (error) {
31850: 105:       attempt++;
31851: 106:       if (attempt === options.retries) throw error;
31852: 107:      
31853: 108:       const delay = Math.pow(2, attempt) * options.backoff;
31854: 109:       await new Promise(resolve => setTimeout(resolve, delay));
31855: 110:     }
31856: 111:   }
31857: 112:  
31858: 113:   throw new Error("Max retries exceeded");
31859: 114: };
31860: 115: ```
31861: 116: 
31862: 117: ## Error Handling
31863: 118: 
31864: 119: ### Request Error
31865: 120: 
31866: 121: ```typescript
31867: 122: export class RequestError extends Error {
31868: 123:   constructor(
31869: 124:     message: string,
31870: 125:     public status?: number,
31871: 126:     public code?: string,
31872: 127:     public response?: unknown
31873: 128:   ) {
31874: 129:     super(message);
31875: 130:     this.name = "RequestError";
31876: 131:   }
31877: 132: }
31878: 133: ```
31879: 134: 
31880: 135: ### Error Processing
31881: 136: 
31882: 137: ```typescript
31883: 138: private processError(error: unknown): never {
31884: 139:   if (axios.isAxiosError(error)) {
31885: 140:     throw new RequestError(
31886: 141:       error.message,
31887: 142:       error.response?.status,
31888: 143:       error.code,
31889: 144:       error.response?.data
31890: 145:     );
31891: 146:   }
31892: 147:  
31893: 148:   throw error;
31894: 149: }
31895: 150: ```
31896: 151: 
31897: 152: ## Rate Limiting
31898: 153: 
31899: 154: ### Rate Limiter
31900: 155: 
31901: 156: ```typescript
31902: 157: class RateLimiter {
31903: 158:   private queue: Array<() => Promise<void>> = [];
31904: 159:   private processing = false;
31905: 160:  
31906: 161:   async add<T>(
31907: 162:     request: () => Promise<T>
31908: 163:   ): Promise<T> {
31909: 164:     return new Promise((resolve, reject) => {
31910: 165:       this.queue.push(async () => {
31911: 166:         try {
31912: 167:           const result = await request();
31913: 168:           resolve(result);
31914: 169:         } catch (error) {
31915: 170:           reject(error);
31916: 171:         }
31917: 172:       });
31918: 173:      
31919: 174:       if (!this.processing) {
31920: 175:         this.processQueue();
31921: 176:       }
31922: 177:     });
31923: 178:   }
31924: 179: }
31925: 180: ```
31926: 181: 
31927: 182: ### Queue Processing
31928: 183: 
31929: 184: ```typescript
31930: 185: private async processQueue(): Promise<void> {
31931: 186:   if (this.queue.length === 0) {
31932: 187:     this.processing = false;
31933: 188:     return;
31934: 189:   }
31935: 190:  
31936: 191:   this.processing = true;
31937: 192:   const request = this.queue.shift();
31938: 193:  
31939: 194:   if (request) {
31940: 195:     await request();
31941: 196:     await new Promise(resolve => 
31942: 197:       setTimeout(resolve, this.requestDelay)
31943: 198:     );
31944: 199:     await this.processQueue();
31945: 200:   }
31946: 201: }
31947: 202: ```
31948: 203: 
31949: 204: ## Response Caching
31950: 205: 
31951: 206: ### Cache Implementation
31952: 207: 
31953: 208: ```typescript
31954: 209: class ResponseCache {
31955: 210:   private cache = new Map<string, CacheEntry>();
31956: 211:  
31957: 212:   set(key: string, value: unknown, ttl: number): void {
31958: 213:     this.cache.set(key, {
31959: 214:       value,
31960: 215:       expiry: Date.now() + ttl
31961: 216:     });
31962: 217:   }
31963: 218:  
31964: 219:   get(key: string): unknown | undefined {
31965: 220:     const entry = this.cache.get(key);
31966: 221:     if (!entry) return undefined;
31967: 222:    
31968: 223:     if (Date.now() > entry.expiry) {
31969: 224:       this.cache.delete(key);
31970: 225:       return undefined;
31971: 226:     }
31972: 227:    
31973: 228:     return entry.value;
31974: 229:   }
31975: 230: }
31976: 231: ```
31977: 232: 
31978: 233: ## Usage Guidelines
31979: 234: 
31980: 235: ### Basic Usage
31981: 236: 
31982: 237: ```typescript
31983: 238: const handler = new RequestHandler();
31984: 239: 
31985: 240: // GET request
31986: 241: const data = await handler.get<DataType>(url);
31987: 242: 
31988: 243: // POST request
31989: 244: const response = await handler.post<ResponseType>(
31990: 245:   url,
31991: 246:   requestData
31992: 247: );
31993: 248: ```
31994: 249: 
31995: 250: ### With Options
31996: 251: 
31997: 252: ```typescript
31998: 253: const response = await handler.get<CardData>(url, {
31999: 254:   timeout: 5000,
32000: 255:   retries: 2,
32001: 256:   cache: true,
32002: 257:   headers: {
32003: 258:     "Authorization": `Bearer ${token}`
32004: 259:   }
32005: 260: });
32006: 261: ```
32007: 262: 
32008: 263: ## Best Practices
32009: 264: 
32010: 265: ### Error Management
32011: 266: 
32012: 267: - Implement proper error handling
32013: 268: - Use retry logic appropriately
32014: 269: - Log failed requests
32015: 270: 
32016: 271: ### Performance
32017: 272: 
32018: 273: - Enable caching when appropriate
32019: 274: - Use rate limiting
32020: 275: - Monitor response times
32021: 276: 
32022: 277: ### Security
32023: 278: 
32024: 279: - Validate URLs
32025: 280: - Secure sensitive headers
32026: 281: - Monitor request patterns
32027: 282: 
32028: 283: ## Related Components
32029: 284: 
32030: 285: - [Error Handler](./error-handling)
32031: 286: - [Logger](./logging)
32032: 287: - [Cache System](./cache)
32033: 288: 
32034: 289: ## Troubleshooting
32035: 290: 
32036: 291: ### Common Issues
32037: 292: 
32038: 293: 1. Request Timeouts:
32039: 294:    - Check network connectivity
32040: 295:    - Verify timeout settings
32041: 296:    - Monitor server response times
32042: 297: 
32043: 298: 2. Rate Limiting:
32044: 299:    - Review rate limit settings
32045: 300:    - Check queue processing
32046: 301:    - Monitor request patterns
32047: 302: 
32048: 303: 3. Cache Issues:
32049: 304:    - Verify cache configuration
32050: 305:    - Check TTL settings
32051: 306:    - Monitor cache hit rates
32052: </file>
32053: 
32054: <file path="utils/sync-logger.md">
32055:   1: # Sync Logger Utility
32056:   2: 
32057:   3: ## Overview
32058:   4: 
32059:   5: The Sync Logger (`syncLogger.ts`) provides specialized logging functionality for synchronization operations. It offers detailed tracking of card and price synchronization processes, including group details, card information, and sync results.
32060:   6: 
32061:   7: ## Features
32062:   8: 
32063:   9: - Detailed sync operation logging
32064:  10: - Card and price details tracking
32065:  11: - Group processing information
32066:  12: - Progress monitoring
32067:  13: - Results summarization
32068:  14: - Support for dry run operations
32069:  15: 
32070:  16: ## Core Interfaces
32071:  17: 
32072:  18: ### Logger Options
32073:  19: 
32074:  20: ```typescript
32075:  21: interface SyncLoggerOptions {
32076:  22:   type: "manual" | "scheduled" | "both";
32077:  23:   limit?: number;
32078:  24:   dryRun?: boolean;
32079:  25:   groupId?: string;
32080:  26:   batchSize?: number;
32081:  27: }
32082:  28: ```
32083:  29: 
32084:  30: ### Card Details
32085:  31: 
32086:  32: ```typescript
32087:  33: interface CardDetails {
32088:  34:   id: number;
32089:  35:   name: string;
32090:  36:   groupId: string;
32091:  37:   normalPrice?: number;
32092:  38:   foilPrice?: number;
32093:  39:   rawPrices: Array<{
32094:  40:     type: "Normal" | "Foil";
32095:  41:     price: number;
32096:  42:     groupId: string;
32097:  43:   }>;
32098:  44:   imageUrl?: string;
32099:  45:   storageImageUrl?: string;
32100:  46: }
32101:  47: ```
32102:  48: 
32103:  49: ### Sync Results
32104:  50: 
32105:  51: ```typescript
32106:  52: interface SyncResults {
32107:  53:   success: number;
32108:  54:   failures: number;
32109:  55:   groupId?: string;
32110:  56:   type: "Manual" | "Scheduled";
32111:  57:   imagesProcessed?: number;
32112:  58:   imagesUpdated?: number;
32113:  59: }
32114:  60: ```
32115:  61: 
32116:  62: ## Usage Examples
32117:  63: 
32118:  64: ### Basic Usage
32119:  65: 
32120:  66: ```typescript
32121:  67: const logger = new SyncLogger({
32122:  68:   type: "manual",
32123:  69:   dryRun: true,
32124:  70:   limit: 10,
32125:  71:   batchSize: 25
32126:  72: });
32127:  73: 
32128:  74: await logger.start();
32129:  75: await logger.logGroupFound(totalGroups);
32130:  76: await logger.logCardDetails(cardDetails);
32131:  77: await logger.finish();
32132:  78: ```
32133:  79: 
32134:  80: ### Sync Process Logging
32135:  81: 
32136:  82: ```typescript
32137:  83: // Initialize logger
32138:  84: const logger = new SyncLogger({
32139:  85:   type: options.dryRun ? "manual" : "scheduled",
32140:  86:   limit: options.limit,
32141:  87:   dryRun: options.dryRun,
32142:  88:   groupId: options.groupId
32143:  89: });
32144:  90: 
32145:  91: // Start logging
32146:  92: await logger.start();
32147:  93: 
32148:  94: // Log group information
32149:  95: await logger.logGroupDetails(groupId, products.length, prices.length);
32150:  96: 
32151:  97: // Log individual card details
32152:  98: await logger.logCardDetails({
32153:  99:   id: product.productId,
32154: 100:   name: product.name,
32155: 101:   groupId: product.groupId.toString(),
32156: 102:   normalPrice: normalPrice,
32157: 103:   foilPrice: foilPrice,
32158: 104:   rawPrices: pricesArray
32159: 105: });
32160: 106: 
32161: 107: // Log final results
32162: 108: await logger.logSyncResults({
32163: 109:   success: processedCount,
32164: 110:   failures: errorCount,
32165: 111:   type: "Manual",
32166: 112:   imagesProcessed: 100,
32167: 113:   imagesUpdated: 25
32168: 114: });
32169: 115: ```
32170: 116: 
32171: 117: ## Core Methods
32172: 118: 
32173: 119: ### Start Logging
32174: 120: 
32175: 121: ```typescript
32176: 122: async start(): Promise<void> {
32177: 123:   console.log("\nStarting sync test...");
32178: 124:   console.log(`Type: ${this.options.type}`);
32179: 125:   if (this.options.limit) console.log(`Limit: ${this.options.limit} cards`);
32180: 126:   console.log(`Dry Run: ${this.options.dryRun ? "true" : "false"}`);
32181: 127:   console.log("\n=== Fetching Raw Data ===");
32182: 128: }
32183: 129: ```
32184: 130: 
32185: 131: ### Group Logging
32186: 132: 
32187: 133: ```typescript
32188: 134: async logGroupDetails(
32189: 135:   groupId: string,
32190: 136:   products: number,
32191: 137:   prices: number
32192: 138: ): Promise<void> {
32193: 139:   this.groups.set(groupId, {products, prices});
32194: 140:   console.log(
32195: 141:     `Group ${groupId} has ${products} products and ${prices} prices`
32196: 142:   );
32197: 143: }
32198: 144: ```
32199: 145: 
32200: 146: ### Card Details Logging
32201: 147: 
32202: 148: ```typescript
32203: 149: async logCardDetails(details: CardDetails): Promise<void> {
32204: 150:   this.cards.push(details);
32205: 151:   if (this.cards.length === 1) {
32206: 152:     console.log("\n=== Card Details ===");
32207: 153:   }
32208: 154: 
32209: 155:   console.log(`Card: ${details.name} (${details.groupId || "UNKNOWN"})`);
32210: 156:   console.log(`- ID: ${details.id}`);
32211: 157:   console.log(`- Group ID: ${details.groupId || "UNKNOWN"}`);
32212: 158: 
32213: 159:   if (details.rawPrices.length > 0) {
32214: 160:     console.log("- Raw Prices:");
32215: 161:     details.rawPrices.forEach((price) => {
32216: 162:       console.log(
32217: 163:         `  > ${price.type}: $${price.price.toFixed(2)} ` +
32218: 164:         `(Group: ${price.groupId})`
32219: 165:       );
32220: 166:     });
32221: 167:   }
32222: 168: }
32223: 169: ```
32224: 170: 
32225: 171: ## Output Examples
32226: 172: 
32227: 173: ### Sync Start
32228: 174: 
32229: 175: ```text
32230: 176: Starting sync test...
32231: 177: Type: manual
32232: 178: Limit: 10 cards
32233: 179: Dry Run: true
32234: 180: 
32235: 181: === Fetching Raw Data ===
32236: 182: ```
32237: 183: 
32238: 184: ### Group Information
32239: 185: 
32240: 186: ```text
32241: 187: Found 15 groups
32242: 188: Group 23783 has 100 products and 200 prices
32243: 189: ```
32244: 190: 
32245: 191: ### Card Details Output Example
32246: 192: 
32247: 193: ```text
32248: 194: === Card Details ===
32249: 195: Card: Cloud (23783)
32250: 196: - ID: 477236
32251: 197: - Group ID: 23783
32252: 198: - Raw Prices:
32253: 199:   > Normal: $1.99 (Group: 23783)
32254: 200:   > Foil: $5.99 (Group: 23783)
32255: 201: - Image URL: https://example.com/image.jpg
32256: 202: - Storage URL: gs://bucket/image.jpg
32257: 203: ```
32258: 204: 
32259: 205: ## Best Practices
32260: 206: 
32261: 207: 1. **Consistent Usage**:
32262: 208: 
32263: 209:    ```typescript
32264: 210:    const logger = new SyncLogger(options);
32265: 211:    await logger.start();
32266: 212:    try {
32267: 213:      // Sync operations
32268: 214:    } finally {
32269: 215:      await logger.finish();
32270: 216:    }
32271: 217:    ```
32272: 218: 
32273: 219: 2. **Detailed Logging**:
32274: 220: 
32275: 221:    ```typescript
32276: 222:    await logger.logCardDetails({
32277: 223:      id: product.id,
32278: 224:      name: product.name,
32279: 225:      groupId: product.groupId,
32280: 226:      normalPrice: product.prices.normal,
32281: 227:      foilPrice: product.prices.foil,
32282: 228:      rawPrices: product.allPrices,
32283: 229:      imageUrl: product.imageUrl,
32284: 230:      storageImageUrl: product.storageUrl
32285: 231:    });
32286: 232:    ```
32287: 233: 
32288: 234: 3. **Error Tracking**:
32289: 235: 
32290: 236:    ```typescript
32291: 237:    try {
32292: 238:      await processGroup(group);
32293: 239:    } catch (error) {
32294: 240:      await logger.logSyncResults({
32295: 241:        success: processed,
32296: 242:        failures: failures + 1,
32297: 243:        type: "Manual"
32298: 244:      });
32299: 245:    }
32300: 246:    ```
32301: 247: 
32302: 248: ## Related Components
32303: 249: 
32304: 250: - [Logger](./logging)
32305: 251: - [Error Handling](./error-handling)
32306: 252: - [Progress Tracking](./progress)
32307: 253: 
32308: 254: ## Troubleshooting
32309: 255: 
32310: 256: ### Common Issues
32311: 257: 
32312: 258: 1. Missing Information:
32313: 259:    - Verify all required fields are provided
32314: 260:    - Check logging options configuration
32315: 261:    - Ensure proper error handling
32316: 262: 
32317: 263: 2. Performance Impact:
32318: 264:    - Use appropriate batch sizes
32319: 265:    - Monitor memory usage
32320: 266:    - Implement log rotation
32321: 267: 
32322: 268: 3. Output Formatting:
32323: 269:    - Verify console output formatting
32324: 270:    - Check price formatting
32325: 271:    - Validate date/time formats
32326: </file>
32327: 
32328: </repository_files>
</file>

<file path="faq.md">
  1: # Frequently Asked Questions
  2: 
  3: ## General
  4: 
  5: ### What is FFTCG Sync Service?
  6: 
  7: A Firebase-based service that synchronizes Final Fantasy Trading Card Game data from TCGplayer, including card information, prices, and images.
  8: 
  9: ### What are the system requirements?
 10: 
 11: - Node.js 18 or higher
 12: - Firebase CLI
 13: - Firebase project with Firestore and Storage enabled
 14: - 1GB minimum memory allocation
 15: - Sufficient storage quota for card images
 16: 
 17: ### How often does the service sync data?
 18: 
 19: - Cards: Daily at 21:00 UTC
 20: - Prices: Daily at 21:30 UTC
 21: - Images: During card synchronization
 22: 
 23: ## Synchronization
 24: 
 25: ### How do I manually trigger a sync?
 26: 
 27: ```typescript
 28: // For cards
 29: await syncCards({
 30:   dryRun: false,
 31:   limit: undefined,
 32:   groupId: undefined
 33: });
 34: 
 35: // For prices
 36: await syncPrices({
 37:   dryRun: false,
 38:   limit: undefined,
 39:   groupId: undefined
 40: });
 41: ```
 42: 
 43: ### What is dry run mode?
 44: 
 45: Dry run mode (`dryRun: true`) allows you to test synchronization without making any changes to the database. It's useful for:
 46: 
 47: - Validating data before actual sync
 48: - Testing configuration changes
 49: - Debugging sync issues
 50: 
 51: ### How do I sync specific card groups?
 52: 
 53: ```typescript
 54: const options = {
 55:   groupId: "23783",  // Specific group ID
 56:   dryRun: false
 57: };
 58: await syncCards(options);
 59: ```
 60: 
 61: ### Why are some syncs skipped?
 62: 
 63: Syncs may be skipped when:
 64: 
 65: - Data hasn't changed (verified via hash comparison)
 66: - Rate limits are reached
 67: - Previous sync is still in progress
 68: - Network issues occur
 69: 
 70: ## Image Processing
 71: 
 72: ### What image formats are supported?
 73: 
 74: Currently, only JPEG images are supported. The service:
 75: 
 76: - Validates JPEG format
 77: - Checks file signatures
 78: - Enforces size limits (5MB max)
 79: 
 80: ### How are images optimized?
 81: 
 82: Images are processed in two ways:
 83: 
 84: - Standard resolution (200px width)
 85: - High resolution (400px width)
 86: 
 87: Both versions are:
 88: 
 89: - Compressed using mozjpeg
 90: - Progressive loading enabled
 91: - Quality optimized (85-90%)
 92: 
 93: ### Why are some images not updating?
 94: 
 95: Images might not update if:
 96: 
 97: - Hash matches existing image
 98: - Validation fails
 99: - Storage quota is exceeded
100: - Network errors occur
101: 
102: ## Firebase Integration
103: 
104: ### How is data stored in Firestore?
105: 
106: Data is organized in collections:
107: 
108: - `cards`: Card information
109: - `prices`: Price history
110: - `cardHashes`: Change detection
111: - `priceHashes`: Price updates
112: - `imageMetadata`: Image information
113: - `syncMetadata`: Sync status
114: - `logs`: System logs
115: 
116: ### How are images stored?
117: 
118: Images are stored in Firebase Storage:
119: 
120: - Path format: `card-images/{groupId}/{productId}_{resolution}.jpg`
121: - Metadata includes hash and timestamp
122: - URLs are signed for long-term access
123: 
124: ### What happens if Firebase quotas are exceeded?
125: 
126: The service will:
127: 
128: 1. Log the quota error
129: 2. Pause operations
130: 3. Retry with exponential backoff
131: 4. Skip non-critical updates
132: 
133: ## Rate Limiting
134: 
135: ### How does rate limiting work?
136: 
137: ```typescript
138: const rateLimiter = {
139:   tokens: 100,
140:   refillRate: 10,
141:   interval: 1000
142: };
143: ```
144: 
145: - Token bucket algorithm
146: - Configurable limits
147: - Automatic retry handling
148: 
149: ### What are the default rate limits?
150: 
151: - API requests: 100 per minute
152: - Image processing: 25 concurrent operations
153: - Database writes: Batch size of 500
154: - Storage operations: 10 concurrent uploads
155: 
156: ### How do I adjust rate limits?
157: 
158: Modify the configuration in your environment:
159: 
160: ```typescript
161: const runtimeOpts = {
162:   timeoutSeconds: 540,
163:   memory: "1GiB",
164: } as const;
165: ```
166: 
167: ## Caching
168: 
169: ### What is cached?
170: 
171: - Card data: 1 hour TTL
172: - Image metadata: 1 hour TTL
173: - Image buffers: 5 minutes TTL
174: - API responses: Request-specific TTL
175: 
176: ### How does the cache hierarchy work?
177: 
178: 1. Memory cache (L1)
179: 2. LRU cache (L2)
180: 3. Firestore (persistent)
181: 
182: ### How do I clear the cache?
183: 
184: ```typescript
185: // Clear specific cache
186: imageCache.clear();
187: cardCache.clear();
188: 
189: // Clear all caches
190: await clearAllCaches();
191: ```
192: 
193: ## Error Handling
194: 
195: ### How are errors logged?
196: 
197: ```typescript
198: // Error logging with context
199: await logDetailedError(
200:   error,
201:   "operationContext",
202:   { metadata: "details" },
203:   "ERROR"
204: );
205: ```
206: 
207: ### What retry mechanisms are in place?
208: 
209: - Maximum 3 retries
210: - Exponential backoff
211: - Configurable delay
212: - Operation-specific handling
213: 
214: ### How do I debug sync failures?
215: 
216: 1. Check sync metadata collection
217: 2. Review error logs
218: 3. Use dry run mode
219: 4. Monitor rate limits
220: 
221: ## Deployment
222: 
223: ### How do I deploy updates?
224: 
225: ```bash
226: # Deploy all functions
227: npm run deploy
228: 
229: # Deploy specific function
230: firebase deploy --only functions:functionName
231: ```
232: 
233: ### How do I test before deployment?
234: 
235: ```bash
236: # Run tests
237: npm run test:images
238: 
239: # Validate sync
240: npm run validate-sync
241: 
242: # Local emulation
243: npm run serve
244: ```
245: 
246: ### What's the deployment rollback process?
247: 
248: 1. Use Firebase Console
249: 2. Select previous version
250: 3. Click "Rollback"
251: 4. Verify functionality
252: 
253: ## Monitoring
254: 
255: ### How do I monitor sync status?
256: 
257: 1. Check sync metadata collection
258: 2. Review logging dashboard
259: 3. Use health check endpoint
260: 4. Monitor performance metrics
261: 
262: ### What metrics are available?
263: 
264: - Sync completion rates
265: - Processing times
266: - Error rates
267: - Cache hit rates
268: - Storage usage
269: - API response times
270: 
271: ### How do I set up alerts?
272: 
273: Configure Firebase Alert conditions for:
274: 
275: - Function failures
276: - High error rates
277: - Quota approaching limits
278: - Sync failures
279: - Performance degradation
</file>

<file path="index.md">
 1: ---
 2: layout: home
 3: hero:
 4:   name: FFTCG Sync Service
 5:   text: Card and Price Synchronization Service
 6:   tagline: Automated synchronization and management of FFTCG card data and prices
 7:   actions:
 8:     - theme: brand
 9:       text: Get Started
10:       link: /introduction
11:     - theme: alt
12:       text: View API
13:       link: /api/
14: features:
15:   - title: Card Synchronization
16:     details: Automatically sync card information from external sources
17:   - title: Price Tracking
18:     details: Monitor and update card prices in real-time
19:   - title: Image Processing
20:     details: Automated image downloading, optimization, and storage
21:   - title: Caching System
22:     details: Efficient caching mechanism for improved performance
23: ---
</file>

<file path="introduction.md">
 1: # FFTCG Sync Service Documentation
 2: 
 3: ## Overview
 4: 
 5: FFTCG Sync Service is a specialized Firebase application designed to synchronize Final Fantasy Trading Card Game (FFTCG) card data, prices, and images. The service provides automated synchronization of card information, price tracking, and image optimization through Firebase Functions.
 6: 
 7: ## Core Features
 8: 
 9: ### Card Synchronization
10: 
11: - Automated card data synchronization from TCGPlayer
12: - Batch processing for efficient data handling
13: - Data validation and error handling
14: - Support for dry-run operations
15: 
16: ### Price Tracking
17: 
18: - Real-time price monitoring
19: - Support for both normal and foil card prices
20: - Price history tracking
21: - Configurable sync intervals
22: 
23: ### Image Processing
24: 
25: - Automatic image downloading and optimization
26: - Multiple resolution support (200w and 400w)
27: - Image compression with quality preservation
28: - Efficient caching system
29: - Firebase Storage integration
30: 
31: ### System Architecture
32: 
33: - Firebase Functions for serverless operation
34: - Firestore for data storage
35: - Firebase Storage for image management
36: - LRU caching for performance optimization
37: 
38: ## Technical Stack
39: 
40: - **Runtime**: Node.js 18
41: - **Framework**: Firebase Functions v6
42: - **Database**: Firestore
43: - **Storage**: Firebase Storage
44: - **Image Processing**: Sharp
45: - **HTTP Client**: Axios
46: - **Caching**: LRU Cache
47: - **Language**: TypeScript
48: 
49: ## Key Components
50: 
51: ### Services
52: 
53: - `cardSync`: Manages card data synchronization
54: - `priceSync`: Handles price updates and tracking
55: 
56: ### Utilities
57: 
58: - `ImageHandler`: Manages image processing and storage
59: - `ImageCompressor`: Handles image optimization
60: - `ImageCache`: Provides caching functionality
61: - `Logger`: Manages application logging
62: - `BatchProcessor`: Handles batch operations
63: 
64: ## Getting Started
65: 
66: To get started with the FFTCG Sync Service, see:
67: 
68: - [Installation Guide](./setup/installation)
69: - [Configuration Guide](./setup/configuration)
70: - [API Documentation](./api/)
</file>

<file path="package.json">
 1: {
 2:   "name": "fftcg-sync-docs",
 3:   "version": "1.0.0",
 4:   "description": "Documentation for FFTCG Sync Service",
 5:   "type": "module",
 6:   "scripts": {
 7:     "docs:dev": "vitepress dev",
 8:     "docs:build": "vitepress build",
 9:     "docs:preview": "vitepress preview"
10:   },
11:   "keywords": [],
12:   "author": "",
13:   "license": "ISC",
14:   "devDependencies": {
15:     "@types/node": "^22.9.1",
16:     "@vueuse/core": "^10.7.0",
17:     "firebase": "^10.14.1",
18:     "typescript": "^5.6.3",
19:     "vitepress": "^1.5.0",
20:     "vue": "^3.5.13"
21:   }
22: }
</file>

<file path="performance.md">
  1: # Performance Guide
  2: 
  3: ## Optimization Overview
  4: 
  5: This guide covers performance optimization strategies implemented in the FFTCG Sync Service, including caching, batch processing, memory management, and monitoring.
  6: 
  7: ## Resource Management
  8: 
  9: ### Memory Allocation
 10: 
 11: ```typescript
 12: // Default runtime options
 13: const runtimeOpts = {
 14:   timeoutSeconds: 540,
 15:   memory: "1GiB"
 16: } as const;
 17: ```
 18: 
 19: Memory optimization techniques:
 20: 
 21: - Batch processing to control memory usage
 22: - Automatic garbage collection
 23: - Resource cleanup after operations
 24: - Stream processing for large datasets
 25: 
 26: ### Resource Cleanup
 27: 
 28: ```typescript
 29: async function cleanupResources(): Promise<void> {
 30:   // Clear image cache
 31:   await imageCache.clear();
 32:  
 33:   // Force garbage collection if available
 34:   global.gc && global.gc();
 35:  
 36:   // Clear other caches
 37:   cardCache.clear();
 38: }
 39: ```
 40: 
 41: ## Caching Strategy
 42: 
 43: ### Multi-Level Caching
 44: 
 45: ```typescript
 46: // L1 Cache (Memory)
 47: private l1Cache = new Map<string, T>();
 48: 
 49: // L2 Cache (LRU)
 50: private l2Cache: LRUCache<string, T> = new LRUCache<string, T>({
 51:   max: options.maxSize,
 52:   ttl: options.ttl
 53: });
 54: ```
 55: 
 56: Cache hierarchy:
 57: 
 58: 1. In-memory cache for frequent access
 59: 2. LRU cache for larger datasets
 60: 3. Persistent storage for backups
 61: 
 62: ### Cache Configuration
 63: 
 64: ```typescript
 65: const cacheOptions = {
 66:   // Card cache settings
 67:   cardCache: {
 68:     max: 500,
 69:     ttl: 1000 * 60 * 60 // 1 hour
 70:   },
 71:  
 72:   // Image cache settings
 73:   imageCache: {
 74:     metadata: {
 75:       max: 1000,
 76:       ttl: 1000 * 60 * 60 // 1 hour
 77:     },
 78:     buffer: {
 79:       max: 100,
 80:       ttl: 1000 * 60 * 5, // 5 minutes
 81:       maxSize: 50 * 1024 * 1024 // 50MB
 82:     }
 83:   }
 84: };
 85: ```
 86: 
 87: ## Batch Processing
 88: 
 89: ### Adaptive Batch Processing
 90: 
 91: ```typescript
 92: class AdaptiveBatchProcessor {
 93:   private optimalBatchSize: number = 100;
 94:   private processingTimes: number[] = [];
 95: 
 96:   async processBatch<T>(
 97:     items: T[],
 98:     processor: (batch: T[]) => Promise<void>
 99:   ): Promise<void> {
100:     for (let i = 0; i < items.length; i += this.optimalBatchSize) {
101:       const start = Date.now();
102:       const batch = items.slice(i, i + this.optimalBatchSize);
103:      
104:       await processor(batch);
105:      
106:       this.adjustBatchSize(Date.now() - start);
107:     }
108:   }
109: 
110:   private adjustBatchSize(lastProcessingTime: number): void {
111:     // Dynamically adjust batch size based on processing time
112:     if (lastProcessingTime > 1000) {
113:       this.optimalBatchSize = Math.max(10, this.optimalBatchSize * 0.8);
114:     } else if (lastProcessingTime < 500) {
115:       this.optimalBatchSize = Math.min(1000, this.optimalBatchSize * 1.2);
116:     }
117:   }
118: }
119: ```
120: 
121: ### Batch Size Optimization
122: 
123: ```typescript
124: const batchOptions = {
125:   batchSize: 100,
126:   delayBetweenBatches: 1000,
127:   onBatchComplete: async (stats) => {
128:     console.log(`Processed: ${stats.processed}/${stats.total}`);
129:   }
130: };
131: ```
132: 
133: ## Image Processing Optimization
134: 
135: ### Compression Settings
136: 
137: ```typescript
138: const compressionOptions = {
139:   quality: {
140:     HIGH_RES: 90,
141:     LOW_RES: 85
142:   },
143:   dimensions: {
144:     HIGH_RES: 400,
145:     LOW_RES: 200
146:   }
147: };
148: ```
149: 
150: ### Progressive Loading
151: 
152: ```typescript
153: const imageProcessingOptions = {
154:   progressive: true,
155:   mozjpeg: true,
156:   optimizationLevel: 3
157: };
158: ```
159: 
160: ## Database Optimization
161: 
162: ### Batch Operations
163: 
164: ```typescript
165: async function batchWrite(updates: any[]): Promise<void> {
166:   const batch = db.batch();
167:   updates.forEach(update => {
168:     const ref = db.collection('cards').doc(update.id);
169:     batch.update(ref, update.data);
170:   });
171:   await batch.commit();
172: }
173: ```
174: 
175: ### Index Optimization
176: 
177: ```json
178: {
179:   "indexes": [
180:     {
181:       "collectionGroup": "cards",
182:       "queryScope": "COLLECTION",
183:       "fields": [
184:         { "fieldPath": "groupId", "order": "ASCENDING" },
185:         { "fieldPath": "lastUpdated", "order": "DESCENDING" }
186:       ]
187:     }
188:   ]
189: }
190: ```
191: 
192: ## Rate Limiting
193: 
194: ### Token Bucket Implementation
195: 
196: ```typescript
197: const rateLimiter = {
198:   tokens: 100,
199:   refillRate: 10,
200:   interval: 1000,
201: 
202:   async acquire(): Promise<boolean> {
203:     if (this.tokens > 0) {
204:       this.tokens--;
205:       return true;
206:     }
207:     return false;
208:   }
209: };
210: ```
211: 
212: ### Request Throttling
213: 
214: ```typescript
215: async function makeThrottledRequest<T>(
216:   endpoint: string,
217:   options: RequestOptions = {}
218: ): Promise<T> {
219:   if (!await rateLimiter.acquire()) {
220:     throw new Error("Rate limit exceeded");
221:   }
222:   return makeRequest<T>(endpoint, options);
223: }
224: ```
225: 
226: ## Performance Monitoring
227: 
228: ### Progress Tracking
229: 
230: ```typescript
231: export class EnhancedProgressTracker {
232:   private calculateStats(): ProgressStats {
233:     const now = Date.now();
234:     const elapsed = (now - this.startTime) / 1000;
235:     const percent = (this.current / this.total) * 100;
236:     const rate = this.current / elapsed;
237:    
238:     return {
239:       current: this.current,
240:       total: this.total,
241:       percent,
242:       elapsed,
243:       rate,
244:       remaining: this.total - this.current,
245:       eta: (this.total - this.current) / rate
246:     };
247:   }
248: }
249: ```
250: 
251: ### Performance Metrics
252: 
253: ```typescript
254: interface PerformanceMetrics {
255:   timestamp: Date;
256:   operation: string;
257:   duration: number;
258:   memory: {
259:     heapUsed: number;
260:     heapTotal: number;
261:   };
262:   success: boolean;
263: }
264: 
265: async function trackPerformance(
266:   operation: string,
267:   task: () => Promise<void>
268: ): Promise<void> {
269:   const start = Date.now();
270:   const startMemory = process.memoryUsage();
271:  
272:   try {
273:     await task();
274:     const endMemory = process.memoryUsage();
275:    
276:     await logInfo("Performance metrics", {
277:       operation,
278:       duration: Date.now() - start,
279:       memoryDelta: {
280:         heapUsed: endMemory.heapUsed - startMemory.heapUsed,
281:         heapTotal: endMemory.heapTotal - startMemory.heapTotal
282:       }
283:     });
284:   } catch (error) {
285:     await logError(error, "performanceTracking");
286:     throw error;
287:   }
288: }
289: ```
290: 
291: ## Best Practices
292: 
293: ### Memory Management
294: 
295: 1. Use streams for large file operations
296: 2. Implement cleanup routines
297: 3. Monitor memory usage
298: 4. Set appropriate cache limits
299: 5. Use batch processing
300: 
301: ### Network Optimization
302: 
303: 1. Implement request caching
304: 2. Use compression
305: 3. Batch API requests
306: 4. Handle rate limits
307: 5. Implement retry strategies
308: 
309: ### Database Efficiency
310: 
311: 1. Use batch operations
312: 2. Optimize indexes
313: 3. Implement caching
314: 4. Monitor query performance
315: 5. Use appropriate batch sizes
316: 
317: ### Image Processing
318: 
319: 1. Use progressive loading
320: 2. Implement size limits
321: 3. Optimize compression
322: 4. Cache processed images
323: 5. Use appropriate quality settings
324: 
325: ## Monitoring and Alerts
326: 
327: ### Key Metrics
328: 
329: ```typescript
330: interface SystemMetrics {
331:   syncDuration: number;
332:   memoryUsage: number;
333:   processedItems: number;
334:   errorRate: number;
335:   cacheHitRate: number;
336: }
337: 
338: async function monitorSystem(): Promise<SystemMetrics> {
339:   return {
340:     syncDuration: calculateSyncDuration(),
341:     memoryUsage: process.memoryUsage().heapUsed,
342:     processedItems: getProcessedCount(),
343:     errorRate: calculateErrorRate(),
344:     cacheHitRate: calculateCacheHitRate()
345:   };
346: }
347: ```
348: 
349: ### Alert Thresholds
350: 
351: ```typescript
352: const alertThresholds = {
353:   syncDuration: 1000 * 60 * 30, // 30 minutes
354:   memoryUsage: 900 * 1024 * 1024, // 900MB
355:   errorRate: 0.05, // 5%
356:   cacheHitRate: 0.7 // 70%
357: };
358: ```
</file>

<file path="security.md">
  1: # Security Guidelines
  2: 
  3: ## Overview
  4: 
  5: This guide outlines security best practices and implementations for the FFTCG Sync Service, covering authentication, data validation, rate limiting, and other security considerations.
  6: 
  7: ## Authentication
  8: 
  9: ### Firebase Authentication
 10: 
 11: ```typescript
 12: // Verify Firebase authentication token
 13: async function verifyAuth(req: Request): Promise<void> {
 14:   const token = req.headers.authorization?.split("Bearer ")[1];
 15:   if (!token) {
 16:     throw new Error("No authentication token provided");
 17:   }
 18: 
 19:   try {
 20:     await admin.auth().verifyIdToken(token);
 21:   } catch (error) {
 22:     throw new Error("Invalid authentication token");
 23:   }
 24: }
 25: ```
 26: 
 27: ### Service Account Security
 28: 
 29: ```typescript
 30: // Service account initialization
 31: async function initializeFirebase(): Promise<FirebaseFirestore.Firestore> {
 32:   try {
 33:     const serviceAccountPath = path.resolve(__dirname, "../../../service_account_key.json");
 34:     const serviceAccount = JSON.parse(await fs.readFile(serviceAccountPath, "utf8"));
 35: 
 36:     if (!admin.apps.length) {
 37:       admin.initializeApp({
 38:         credential: admin.credential.cert(serviceAccount)
 39:       });
 40:     }
 41: 
 42:     return admin.firestore();
 43:   } catch (error) {
 44:     throw new Error("Failed to initialize Firebase: " + error);
 45:   }
 46: }
 47: ```
 48: 
 49: ## Input Validation
 50: 
 51: ### Request Validation
 52: 
 53: ```typescript
 54: // Validate sync options
 55: function validateSyncOptions(options: unknown): asserts options is SyncOptions {
 56:   if (!options || typeof options !== "object") {
 57:     throw new Error("Invalid options object");
 58:   }
 59: 
 60:   const opts = options as Record<string, unknown>;
 61:  
 62:   if (opts.limit && typeof opts.limit !== "number") {
 63:     throw new Error("Limit must be a number");
 64:   }
 65: 
 66:   if (opts.groupId && typeof opts.groupId !== "string") {
 67:     throw new Error("GroupId must be a string");
 68:   }
 69: }
 70: ```
 71: 
 72: ### Image Validation
 73: 
 74: ```typescript
 75: class ImageValidator {
 76:   private static readonly MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
 77: 
 78:   static async validateImage(buffer: Buffer): Promise<ImageValidationError | null> {
 79:     // Check file size
 80:     if (buffer.length > this.MAX_FILE_SIZE) {
 81:       return {
 82:         code: "FILE_TOO_LARGE",
 83:         message: `Image exceeds maximum size of ${this.MAX_FILE_SIZE / 1024 / 1024}MB`
 84:       };
 85:     }
 86: 
 87:     // Verify file signature
 88:     if (!this.isJpeg(buffer)) {
 89:       return {
 90:         code: "INVALID_FORMAT",
 91:         message: "Image must be in JPEG format"
 92:       };
 93:     }
 94: 
 95:     return null;
 96:   }
 97: }
 98: ```
 99: 
100: ## Rate Limiting
101: 
102: ### API Rate Limiting
103: 
104: ```typescript
105: const rateLimiter = {
106:   tokens: 100,
107:   refillRate: 10,
108:   interval: 1000,
109: 
110:   async acquire(): Promise<boolean> {
111:     if (this.tokens > 0) {
112:       this.tokens--;
113:       return true;
114:     }
115:     return false;
116:   }
117: };
118: ```
119: 
120: ### Function Concurrency Control
121: 
122: ```typescript
123: // Configure function instance limits
124: exports.syncCards = onRequest({
125:   timeoutSeconds: runtimeOpts.timeoutSeconds,
126:   memory: runtimeOpts.memory,
127:   maxInstances: 1
128: }, async (req: Request, res: Response) => {
129:   // Function implementation
130: });
131: ```
132: 
133: ## Data Protection
134: 
135: ### Data Encryption
136: 
137: ```typescript
138: // Hash sensitive data
139: function getDataHash(data: any): string {
140:   return crypto.createHash("md5")
141:     .update(JSON.stringify(data, Object.keys(data).sort()))
142:     .digest("hex");
143: }
144: ```
145: 
146: ### Secure Storage Access
147: 
148: ```typescript
149: // Secure URL generation
150: async function getSecureImageUrl(path: string): Promise<string> {
151:   const [url] = await storage
152:     .bucket(STORAGE.BUCKETS.CARD_IMAGES)
153:     .file(path)
154:     .getSignedUrl({
155:       action: "read",
156:       expires: "03-01-2500"
157:     });
158:   return url;
159: }
160: ```
161: 
162: ## Error Handling
163: 
164: ### Secure Error Logging
165: 
166: ```typescript
167: export async function logDetailedError(
168:   error: Error,
169:   context: string,
170:   metadata?: Record<string, unknown>,
171:   severity: "ERROR" | "WARNING" | "CRITICAL" = "ERROR"
172: ): Promise<void> {
173:   const report: ErrorReport = {
174:     timestamp: new Date(),
175:     context,
176:     error: error.message,
177:     stackTrace: error.stack,
178:     metadata,
179:     severity
180:   };
181: 
182:   // Sanitize sensitive information before logging
183:   const sanitizedReport = sanitizeErrorReport(report);
184:   await db.collection(COLLECTION.LOGS).add(sanitizedReport);
185: }
186: ```
187: 
188: ### Error Response Sanitization
189: 
190: ```typescript
191: function sanitizeErrorMessage(error: Error): string {
192:   // Remove sensitive information from error messages
193:   return error.message.replace(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)/gi, '[EMAIL]')
194:     .replace(/\b\d{4}\b/g, '[ID]');
195: }
196: ```
197: 
198: ## Network Security
199: 
200: ### Request Configuration
201: 
202: ```typescript
203: const secureRequestConfig = {
204:   timeout: 30000,
205:   headers: {
206:     "Accept": "application/json",
207:     "User-Agent": "FFTCG-Sync-Service/1.0"
208:   },
209:   validateStatus: (status: number) => status < 400
210: };
211: ```
212: 
213: ### HTTPS Enforcement
214: 
215: ```typescript
216: // Ensure HTTPS usage
217: const BASE_URL = "https://tcgcsv.com";
218: const SECURE_STORAGE_URL = "https://storage.googleapis.com";
219: ```
220: 
221: ## Firestore Security Rules
222: 
223: ```typescript
224: // firestore.rules
225: rules_version = '2';
226: service cloud.firestore {
227:   match /databases/{database}/documents {
228:     // Card collection rules
229:     match /cards/{cardId} {
230:       allow read: if true;
231:       allow write: if request.auth != null 
232:         && request.auth.token.admin == true;
233:     }
234: 
235:     // Price collection rules
236:     match /prices/{priceId} {
237:       allow read: if true;
238:       allow write: if request.auth != null 
239:         && request.auth.token.admin == true;
240:     }
241: 
242:     // Sync metadata rules
243:     match /syncMetadata/{docId} {
244:       allow read: if request.auth != null;
245:       allow write: if request.auth != null 
246:         && request.auth.token.admin == true;
247:     }
248:   }
249: }
250: ```
251: 
252: ## Storage Security Rules
253: 
254: ```typescript
255: // storage.rules
256: rules_version = '2';
257: service firebase.storage {
258:   match /b/{bucket}/o {
259:     match /card-images/{groupId}/{imageId} {
260:       allow read: if true;
261:       allow write: if request.auth != null 
262:         && request.auth.token.admin == true
263:         && request.resource.size < 5 * 1024 * 1024
264:         && request.resource.contentType.matches('image/jpeg');
265:     }
266:   }
267: }
268: ```
269: 
270: ## Best Practices
271: 
272: ### API Security
273: 
274: 1. Use HTTPS for all requests
275: 2. Implement proper authentication
276: 3. Validate all inputs
277: 4. Rate limit requests
278: 5. Monitor for suspicious activity
279: 
280: ### Data Security
281: 
282: 1. Minimize sensitive data storage
283: 2. Encrypt sensitive information
284: 3. Implement proper access controls
285: 4. Regular security audits
286: 5. Secure backup procedures
287: 
288: ### Error Management
289: 
290: 1. Sanitize error messages
291: 2. Avoid exposing internal details
292: 3. Log security events
293: 4. Monitor error patterns
294: 5. Implement proper error recovery
295: 
296: ### Function Security
297: 
298: 1. Use minimal permissions
299: 2. Implement request validation
300: 3. Control function concurrency
301: 4. Monitor function execution
302: 5. Regular security updates
303: 
304: ## Security Monitoring
305: 
306: ### Logging Security Events
307: 
308: ```typescript
309: interface SecurityEvent {
310:   timestamp: Date;
311:   eventType: "AUTH" | "ACCESS" | "ERROR" | "MODIFICATION";
312:   severity: "LOW" | "MEDIUM" | "HIGH" | "CRITICAL";
313:   details: Record<string, unknown>;
314: }
315: 
316: async function logSecurityEvent(event: SecurityEvent): Promise<void> {
317:   await db.collection("securityLogs").add({
318:     ...event,
319:     timestamp: new Date()
320:   });
321: }
322: ```
323: 
324: ### Audit Trail
325: 
326: ```typescript
327: interface AuditLog {
328:   timestamp: Date;
329:   userId: string;
330:   action: string;
331:   resource: string;
332:   changes: Record<string, unknown>;
333: }
334: 
335: async function createAuditLog(
336:   action: string,
337:   resource: string,
338:   changes: Record<string, unknown>
339: ): Promise<void> {
340:   await db.collection("auditLogs").add({
341:     timestamp: new Date(),
342:     action,
343:     resource,
344:     changes
345:   });
346: }
347: ```
348: 
349: ### Security Metrics
350: 
351: ```typescript
352: interface SecurityMetrics {
353:   failedAuthAttempts: number;
354:   rateLimitExceeded: number;
355:   suspiciousRequests: number;
356:   securityEvents: number;
357: }
358: 
359: async function trackSecurityMetrics(): Promise<SecurityMetrics> {
360:   // Implementation of security metrics tracking
361:   return {
362:     failedAuthAttempts: 0,
363:     rateLimitExceeded: 0,
364:     suspiciousRequests: 0,
365:     securityEvents: 0
366:   };
367: }
368: ```
</file>

<file path="services/card-sync.md">
  1: # Card Synchronization Service
  2: 
  3: ## Overview
  4: 
  5: The Card Synchronization service (`cardSync.ts`) manages the automated synchronization of FFTCG card data from TCGPlayer's API. It handles card information updates, image processing, and maintains data consistency through hash-based versioning.
  6: 
  7: ## Core Features
  8: 
  9: - Automated card data synchronization
 10: - Image processing and storage
 11: - Batch processing
 12: - Error handling and retry logic
 13: - Dry run capability for testing
 14: - Progress tracking and logging
 15: 
 16: ## API Reference
 17: 
 18: ### Main Function
 19: 
 20: ```typescript
 21: async function syncCards(options: SyncOptions = {}): Promise<SyncMetadata>
 22: ```
 23: 
 24: #### Options
 25: 
 26: ```typescript
 27: interface SyncOptions {
 28:   dryRun?: boolean;      // Run without making changes
 29:   limit?: number;        // Limit number of cards processed
 30:   groupId?: string;      // Process specific group only
 31:   skipImages?: boolean;  // Skip image processing
 32: }
 33: ```
 34: 
 35: #### Response
 36: 
 37: ```typescript
 38: interface SyncMetadata {
 39:   lastSync: Date;
 40:   status: "in_progress" | "success" | "failed" | "completed_with_errors";
 41:   cardCount: number;
 42:   type: "manual" | "scheduled";
 43:   groupsProcessed: number;
 44:   groupsUpdated: number;
 45:   errors: string[];
 46:   duration?: number;
 47:   imagesProcessed?: number;
 48:   imagesUpdated?: number;
 49: }
 50: ```
 51: 
 52: ## Usage Examples
 53: 
 54: ### Scheduled Sync
 55: 
 56: The service runs automatically on a daily schedule:
 57: 
 58: ```typescript
 59: exports.scheduledCardSync = onSchedule({
 60:   schedule: "0 21 * * *", // Daily at 21:00 UTC
 61:   timeZone: "UTC",
 62:   memory: runtimeOpts.memory,
 63:   timeoutSeconds: runtimeOpts.timeoutSeconds,
 64:   retryCount: 3,
 65: });
 66: ```
 67: 
 68: ### Manual Sync
 69: 
 70: Test specific groups or cards:
 71: 
 72: ```typescript
 73: // Test sync with limits
 74: await syncCards({
 75:   dryRun: true,
 76:   limit: 5,
 77:   groupId: "23783"
 78: });
 79: 
 80: // Full manual sync
 81: await syncCards({
 82:   dryRun: false
 83: });
 84: ```
 85: 
 86: ## Error Handling
 87: 
 88: The service implements comprehensive error handling:
 89: 
 90: ```typescript
 91: class SyncError extends Error implements GenericError {
 92:   constructor(
 93:     message: string,
 94:     code?: string,
 95:     public details?: Record<string, unknown>
 96:   ) {
 97:     super(message);
 98:     this.name = "SyncError";
 99:     this.code = code;
100:   }
101: }
102: ```
103: 
104: ### Retry Logic
105: 
106: ```typescript
107: const MAX_RETRIES = 3;
108: const BASE_DELAY = 1000; // 1 second
109: 
110: // Exponential backoff
111: const delay = Math.pow(2, retryCount) * BASE_DELAY;
112: ```
113: 
114: ## Data Processing
115: 
116: ### Batch Processing
117: 
118: ```typescript
119: async function processBatch<T>(
120:   items: T[],
121:   processor: (batch: T[]) => Promise<void>,
122:   options: BatchOptions = {}
123: ): Promise<void>
124: ```
125: 
126: ### Hash Generation
127: 
128: ```typescript
129: function getDataHash(data: any): string {
130:   return crypto.createHash("md5")
131:     .update(JSON.stringify(data, Object.keys(data).sort()))
132:     .digest("hex");
133: }
134: ```
135: 
136: ## Monitoring
137: 
138: ### Progress Tracking
139: 
140: The service logs detailed progress information:
141: 
142: - Groups processed
143: - Cards updated
144: - Images processed
145: - Processing duration
146: - Error counts
147: 
148: ### Success Metrics
149: 
150: - Number of groups updated
151: - Number of cards processed
152: - Number of images updated
153: - Processing duration
154: - Error rate
155: 
156: ## Best Practices
157: 
158: 1. Testing Changes:
159: 
160: ```typescript
161: // Always test with dry run first
162: await syncCards({
163:   dryRun: true,
164:   limit: 5
165: });
166: ```
167: 
168: 1. Error Monitoring:
169: 
170: ```typescript
171: // Check sync metadata for errors
172: const metadata = await syncCards();
173: if (metadata.errors.length > 0) {
174:   console.error("Sync completed with errors:", metadata.errors);
175: }
176: ```
177: 
178: 1. Resource Management:
179: 
180: ```typescript
181: // Use limits when testing
182: const options: SyncOptions = {
183:   limit: 10,
184:   dryRun: true
185: };
186: ```
187: 
188: ## Troubleshooting
189: 
190: ### Common Issues
191: 
192: 1. Rate Limiting:
193:    - Implement proper delays between requests
194:    - Use batch processing
195:    - Follow exponential backoff
196: 
197: 2. Image Processing:
198:    - Verify storage permissions
199:    - Check image URLs
200:    - Monitor storage quotas
201: 
202: 3. Data Consistency:
203:    - Use hash verification
204:    - Implement proper error handling
205:    - Monitor sync metadata
206: 
207: ### Debug Mode
208: 
209: Enable detailed logging:
210: 
211: ```typescript
212: // Enable debug logging
213: await syncCards({
214:   dryRun: true,
215:   debug: true
216: });
217: ```
218: 
219: ## Related Components
220: 
221: - [Price Sync Service](./price-sync)
222: - [Image Handler](../utils/image-handler)
223: - [Cache System](../utils/cache)
224: - [Error Handling](../utils/error-handling)
</file>

<file path="services/price-sync.md">
  1: # Price Synchronization Service
  2: 
  3: ## Overview
  4: 
  5: The Price Synchronization service (`priceSync.ts`) manages automated price updates for FFTCG cards. It handles both normal and foil price variants, implements version control through hashing, and provides detailed logging of price changes.
  6: 
  7: ## Core Features
  8: 
  9: - Real-time price synchronization
 10: - Support for multiple price variants (Normal/Foil)
 11: - Hash-based version control
 12: - Batch processing
 13: - Detailed price change logging
 14: - Configurable sync intervals
 15: 
 16: ## API Reference
 17: 
 18: ### Main Function
 19: 
 20: ```typescript
 21: async function syncPrices(options: SyncOptions = {}): Promise<SyncMetadata>
 22: ```
 23: 
 24: #### Options
 25: 
 26: ```typescript
 27: interface SyncOptions {
 28:   dryRun?: boolean;      // Run without making changes
 29:   limit?: number;        // Limit number of prices processed
 30:   groupId?: string;      // Process specific group only
 31:   productId?: number;    // Process specific product only
 32:   showAll?: boolean;     // Show all prices, including unchanged
 33: }
 34: ```
 35: 
 36: #### Price Data Structure
 37: 
 38: ```typescript
 39: interface CardPrice {
 40:   productId: number;
 41:   lowPrice: number;
 42:   midPrice: number;
 43:   highPrice: number;
 44:   marketPrice: number | null;
 45:   directLowPrice: number | null;
 46:   subTypeName: "Normal" | "Foil";
 47: }
 48: 
 49: interface PriceData {
 50:   normal?: CardPrice;
 51:   foil?: CardPrice;
 52:   lastUpdated: Date;
 53: }
 54: ```
 55: 
 56: ## Usage Examples
 57: 
 58: ### Scheduled Sync
 59: 
 60: Automated daily price updates:
 61: 
 62: ```typescript
 63: exports.scheduledPriceSync = onSchedule({
 64:   schedule: "30 21 * * *", // Daily at 21:30 UTC
 65:   timeZone: "UTC",
 66:   memory: runtimeOpts.memory,
 67:   timeoutSeconds: runtimeOpts.timeoutSeconds,
 68:   retryCount: 3,
 69: });
 70: ```
 71: 
 72: ### Manual Price Checks
 73: 
 74: ```typescript
 75: // Test specific product
 76: await syncPrices({
 77:   dryRun: true,
 78:   productId: 477236,
 79:   showAll: true
 80: });
 81: 
 82: // Check specific group
 83: await syncPrices({
 84:   dryRun: true,
 85:   groupId: "23783",
 86:   limit: 10
 87: });
 88: ```
 89: 
 90: ## Price Processing
 91: 
 92: ### Price Data Processing
 93: 
 94: ```typescript
 95: function processPrices(prices: CardPrice[]): Record<number, PriceData> {
 96:   const priceMap: Record<number, PriceData> = {};
 97: 
 98:   prices.forEach((price) => {
 99:     if (!priceMap[price.productId]) {
100:       priceMap[price.productId] = {
101:         lastUpdated: new Date(),
102:       };
103:     }
104: 
105:     if (price.subTypeName === "Normal") {
106:       priceMap[price.productId].normal = price;
107:     } else {
108:       priceMap[price.productId].foil = price;
109:     }
110:   });
111: 
112:   return priceMap;
113: }
114: ```
115: 
116: ### Batch Processing
117: 
118: ```typescript
119: async function processBatch<T>(
120:   items: T[],
121:   processor: (batch: T[]) => Promise<void>,
122:   batchSize: number = 500
123: ): Promise<void>
124: ```
125: 
126: ## Error Handling
127: 
128: ### Error Types
129: 
130: ```typescript
131: class SyncError extends Error implements GenericError {
132:   code?: string;
133: 
134:   constructor(
135:     message: string,
136:     code?: string,
137:     public details?: Record<string, unknown>
138:   ) {
139:     super(message);
140:     this.name = "SyncError";
141:     this.code = code;
142:   }
143: }
144: ```
145: 
146: ### Request Retry Logic
147: 
148: ```typescript
149: const MAX_RETRIES = 3;
150: const BASE_DELAY = 1000; // 1 second base delay
151: 
152: // Exponential backoff implementation
153: if (retryCount < MAX_RETRIES - 1) {
154:   const delay = Math.pow(2, retryCount) * BASE_DELAY;
155:   await logWarning(`Request failed, retrying in ${delay}ms...`);
156: }
157: ```
158: 
159: ## Monitoring
160: 
161: ### Price Change Tracking
162: 
163: The service tracks:
164: 
165: - Price updates per group
166: - Number of cards processed
167: - Processing duration
168: - Error rates
169: - Price change percentages
170: 
171: ### Success Metrics
172: 
173: ```typescript
174: interface SyncMetadata {
175:   lastSync: Date;
176:   status: "in_progress" | "success" | "failed" | "completed_with_errors";
177:   cardCount: number;
178:   type: "manual" | "scheduled";
179:   groupsProcessed: number;
180:   groupsUpdated: number;
181:   errors: string[];
182:   duration?: number;
183: }
184: 
185: 
186: ## Best Practices
187: 
188: 1. Regular Monitoring:
189:    - Check sync metadata regularly
190:    - Monitor price change patterns
191:    - Track error rates
192: 
193: 1. Testing Changes:
194: 
195: ```typescript
196: // Always test with dry run
197: const testSync = await syncPrices({
198:   dryRun: true,
199:   limit: 5,
200:   showAll: true
201: });
202: ```
203: 
204: 1. Error Handling:
205: 
206: ```typescript
207: // Implement proper error checking
208: const sync = await syncPrices(options);
209: if (sync.status === "completed_with_errors") {
210:   console.error("Sync errors:", sync.errors);
211: }
212: ```
213: 
214: ## Troubleshooting
215: 
216: ### Common Issues
217: 
218: 1. Price Discrepancies:
219:    - Verify data source connection
220:    - Check price format consistency
221:    - Monitor exchange rate impacts
222: 
223: 2. Sync Failures:
224:    - Check network connectivity
225:    - Verify API rate limits
226:    - Monitor service quotas
227: 
228: 3. Performance Issues:
229:    - Use appropriate batch sizes
230:    - Implement proper delays
231:    - Monitor memory usage
232: 
233: ### Validation
234: 
235: ```typescript
236: // Validate price data
237: if (price.midPrice < 0 || price.lowPrice < 0) {
238:   throw new Error("Invalid price values detected");
239: }
240: ```
241: 
242: ## Related Components
243: 
244: - [Card Sync Service](./card-sync)
245: - [Cache System](../utils/cache)
246: - [Error Handling](../utils/error-handling)
247: - [Logger](../utils/logging)
</file>

<file path="setup/configuration.md">
  1: # Configuration Guide
  2: 
  3: ## Firebase Configuration
  4: 
  5: ### Environment Variables
  6: 
  7: Create a `.env.local` file in your project root:
  8: 
  9: ```env
 10: FIREBASE_PROJECT_ID=your-project-id
 11: FIREBASE_STORAGE_BUCKET=your-storage-bucket
 12: ```
 13: 
 14: ### Firebase Console Settings
 15: 
 16: 1. Firestore Database:
 17: 
 18: - Collection structure:
 19:   - `cards`: Stores card information
 20:   - `prices`: Stores price data
 21:   - `syncMetadata`: Stores sync operation logs
 22:   - `logs`: System logs
 23:   - `cardHashes`: Card data version control
 24:   - `priceHashes`: Price data version control
 25:   - `imageMetadata`: Image processing metadata
 26: 
 27: 1. Storage:
 28: 
 29: - Bucket structure:
 30:   - `/card-images/{groupId}/{productId}_200w.jpg`
 31:   - `/card-images/{groupId}/{productId}_400w.jpg`
 32: 
 33: ## Application Configuration
 34: 
 35: ### Runtime Options
 36: 
 37: Located in `src/config/firebase.ts`:
 38: 
 39: ```typescript
 40: export const runtimeOpts = {
 41:   timeoutSeconds: 540,
 42:   memory: "1GiB",
 43: } as const;
 44: ```
 45: 
 46: ### API Configuration
 47: 
 48: Base URL and category settings:
 49: 
 50: ```typescript
 51: export const BASE_URL = "https://tcgcsv.com";
 52: export const FFTCG_CATEGORY_ID = "24";
 53: ```
 54: 
 55: ### Collection Names
 56: 
 57: ```typescript
 58: export const COLLECTION = {
 59:   CARDS: "cards",
 60:   PRICES: "prices",
 61:   SYNC_METADATA: "syncMetadata",
 62:   LOGS: "logs",
 63:   CARD_HASHES: "cardHashes",
 64:   PRICE_HASHES: "priceHashes",
 65:   IMAGE_METADATA: "imageMetadata",
 66: };
 67: ```
 68: 
 69: ## Sync Configuration
 70: 
 71: ### Card Sync Schedule
 72: 
 73: ```typescript
 74: exports.scheduledCardSync = onSchedule({
 75:   schedule: "0 21 * * *", // Daily at 21:00 UTC
 76:   timeZone: "UTC",
 77:   memory: runtimeOpts.memory,
 78:   timeoutSeconds: runtimeOpts.timeoutSeconds,
 79:   retryCount: 3,
 80: });
 81: ```
 82: 
 83: ### Price Sync Schedule
 84: 
 85: ```typescript
 86: exports.scheduledPriceSync = onSchedule({
 87:   schedule: "30 21 * * *", // Daily at 21:30 UTC
 88:   timeZone: "UTC",
 89:   memory: runtimeOpts.memory,
 90:   timeoutSeconds: runtimeOpts.timeoutSeconds,
 91:   retryCount: 3,
 92: });
 93: ```
 94: 
 95: ## Image Processing Configuration
 96: 
 97: ### Compression Settings
 98: 
 99: ```typescript
100: private static readonly QUALITY = {
101:   HIGH_RES: 90,
102:   LOW_RES: 85,
103: };
104: 
105: private static readonly DIMENSIONS = {
106:   HIGH_RES: 400,
107:   LOW_RES: 200,
108: };
109: ```
110: 
111: ### Cache Settings
112: 
113: ```typescript
114: const options = {
115:   max: 500,
116:   ttl: 1000 * 60 * 60, // 1 hour
117: };
118: ```
119: 
120: ## Testing Configuration
121: 
122: ### Test Cases
123: 
124: ```typescript
125: const TEST_CASES = [
126:   {
127:     imageUrl: "https://tcgplayer-cdn.tcgplayer.com/product/477236_200w.jpg",
128:     groupId: "23783",
129:     productId: 477236,
130:     description: "FFVII Boss Deck",
131:   },
132: ];
133: ```
134: 
135: ## Error Handling Configuration
136: 
137: ### Log Levels
138: 
139: ```typescript
140: export interface ErrorReport {
141:   timestamp: Date;
142:   context: string;
143:   error: string;
144:   stackTrace?: string;
145:   metadata?: Record<string, unknown>;
146:   severity: "ERROR" | "WARNING" | "CRITICAL";
147: }
148: ```
</file>

<file path="setup/installation.md">
 1: # Installation Guide
 2: 
 3: ## Prerequisites
 4: 
 5: - Node.js 18 or higher
 6: - Firebase CLI
 7: - Git (for version control)
 8: - A Firebase project with Firestore and Storage enabled
 9: 
10: ## Firebase Project Setup
11: 
12: 1. Create or select a Firebase project:
13: 
14: - Visit the [Firebase Console](https://console.firebase.google.com/)
15: - Create a new project or select an existing one
16: - Note your project ID for later use
17: 
18: 1. Enable required services:
19: 
20: - Firestore Database
21: - Cloud Storage
22: - Cloud Functions
23: 
24: 1. Configure Firebase Authentication:
25: 
26: - Enable Google Authentication
27: - Add authorized domains if needed
28: - Set up authorized email addresses for admin access
29: 
30: ## Local Development Setup
31: 
32: 1. Clone the repository:
33: 
34: ```bash
35: git clone <repository-url>
36: cd fftcg-sync-service
</file>

<file path="troubleshooting.md">
  1: # Troubleshooting Guide
  2: 
  3: ## Quick Diagnosis
  4: 
  5: ### System Status Check
  6: 
  7: ```bash
  8: # Check service health
  9: curl https://${REGION}-${PROJECT_ID}.cloudfunctions.net/healthCheck
 10: 
 11: # Expected Response
 12: {
 13:   "status": "healthy",
 14:   "timestamp": "2024-11-22T01:47:16.617Z",
 15:   "version": "1.0.0"
 16: }
 17: ```
 18: 
 19: ### Log Analysis
 20: 
 21: ```typescript
 22: // View recent logs
 23: firebase functions:log
 24: 
 25: // Filter for errors
 26: firebase functions:log --only errors
 27: 
 28: // View specific function logs
 29: firebase functions:log --only syncCards
 30: ```
 31: 
 32: ## Common Issues
 33: 
 34: ### Synchronization Failures
 35: 
 36: #### Cards Not Syncing
 37: 
 38: **Symptoms:**
 39: 
 40: - Missing card data
 41: - Outdated information
 42: - Sync operation completes without updates
 43: 
 44: **Solutions:**
 45: 
 46: 1. Check API access:
 47: 
 48: ```typescript
 49: // Test API connection
 50: const response = await makeRequest<{ results: any[] }>(
 51:   `${FFTCG_CATEGORY_ID}/groups`,
 52:   {metadata: {operation: "fetchGroups"}}
 53: );
 54: ```
 55: 
 56: 1. Verify hash comparison:
 57: 
 58: ```typescript
 59: // Force sync by clearing hashes
 60: await db.collection(COLLECTION.CARD_HASHES).doc(groupId).delete();
 61: ```
 62: 
 63: 1. Check rate limits:
 64: 
 65: ```typescript
 66: // Monitor rate limit logs
 67: await logInfo("Rate limit status", {
 68:   remaining: rateLimiter.tokens,
 69:   nextRefill: rateLimiter.nextRefillTime
 70: });
 71: ```
 72: 
 73: #### Price Updates Failed
 74: 
 75: **Symptoms:**
 76: 
 77: - Outdated prices
 78: - Partial updates
 79: - Sync metadata shows errors
 80: 
 81: **Solutions:**
 82: 
 83: 1. Validate price data:
 84: 
 85: ```typescript
 86: const priceResult = await validateCollection(
 87:   db,
 88:   COLLECTION.PRICES,
 89:   (data) => {
 90:     return (
 91:       data.lastUpdated instanceof Timestamp &&
 92:       (!data.normal || typeof data.normal.midPrice === "number") &&
 93:       (!data.foil || typeof data.foil.midPrice === "number")
 94:     );
 95:   }
 96: );
 97: ```
 98: 
 99: 1. Force price sync:
100: 
101: ```typescript
102: await syncPrices({
103:   dryRun: false,
104:   groupId: specificGroupId,
105:   forceUpdate: true
106: });
107: ```
108: 
109: ### Image Processing Issues
110: 
111: #### Image Upload Failures
112: 
113: **Symptoms:**
114: 
115: - Missing images in storage
116: - Failed compression attempts
117: - Storage quota errors
118: 
119: **Solutions:**
120: 
121: 1. Check image validation:
122: 
123: ```typescript
124: const validationResult = await ImageValidator.validateImage(buffer);
125: if (validationResult) {
126:   console.error("Validation failed:", validationResult.message);
127: }
128: ```
129: 
130: 1. Verify storage permissions:
131: 
132: ```typescript
133: try {
134:   await storage.bucket(STORAGE.BUCKETS.CARD_IMAGES).file(path).save(buffer);
135: } catch (error) {
136:   console.error("Storage access error:", error);
137: }
138: ```
139: 
140: 1. Monitor storage quota:
141: 
142: ```typescript
143: const [usage] = await storage.bucket().getMetadata();
144: console.log("Storage usage:", usage.size);
145: ```
146: 
147: #### Image Compression Problems
148: 
149: **Symptoms:**
150: 
151: - Large file sizes
152: - Poor image quality
153: - Processing timeouts
154: 
155: **Solutions:**
156: 
157: 1. Adjust compression settings:
158: 
159: ```typescript
160: const compressionOptions = {
161:   quality: ImageCompressor.QUALITY.HIGH_RES,
162:   progressive: true,
163:   mozjpeg: true
164: };
165: ```
166: 
167: 1. Debug compression process:
168: 
169: ```typescript
170: const result = await ImageCompressor.compress(buffer, false);
171: console.log("Compression results:", {
172:   originalSize: buffer.length,
173:   compressedSize: result.buffer.length,
174:   ratio: result.buffer.length / buffer.length
175: });
176: ```
177: 
178: ### Database Issues
179: 
180: #### Write Operations Failed
181: 
182: **Symptoms:**
183: 
184: - Timeout errors
185: - Batch operation failures
186: - Inconsistent data state
187: 
188: **Solutions:**
189: 
190: 1. Check batch size:
191: 
192: ```typescript
193: // Reduce batch size
194: const batchOptions = {
195:   batchSize: 100,  // Decrease from default 500
196:   delayBetweenBatches: 1000
197: };
198: ```
199: 
200: 1. Monitor write operations:
201: 
202: ```typescript
203: const stats = {
204:   attempted: 0,
205:   successful: 0,
206:   failed: 0
207: };
208: 
209: await processBatch(items, async (batch) => {
210:   try {
211:     await writeBatch.commit();
212:     stats.successful += batch.length;
213:   } catch (error) {
214:     stats.failed += batch.length;
215:     await logError(error, "writeBatch");
216:   }
217:   stats.attempted += batch.length;
218: });
219: ```
220: 
221: #### Cache Inconsistency
222: 
223: **Symptoms:**
224: 
225: - Stale data
226: - Memory usage spikes
227: - Inconsistent results
228: 
229: **Solutions:**
230: 
231: 1. Clear caches:
232: 
233: ```typescript
234: // Clear specific cache
235: imageCache.clear();
236: cardCache.clear();
237: 
238: // Clear all caches
239: await Promise.all([
240:   imageCache.clear(),
241:   cardCache.clear(),
242:   db.clearPersistence()
243: ]);
244: ```
245: 
246: 1. Verify cache settings:
247: 
248: ```typescript
249: const cacheOptions = {
250:   max: 500,
251:   ttl: 1000 * 60 * 60, // 1 hour
252:   updateAgeOnGet: true
253: };
254: ```
255: 
256: ### Performance Issues
257: 
258: #### High Memory Usage
259: 
260: **Symptoms:**
261: 
262: - Function timeouts
263: - Out of memory errors
264: - Slow processing
265: 
266: **Solutions:**
267: 
268: 1. Monitor memory usage:
269: 
270: ```typescript
271: const used = process.memoryUsage();
272: await logInfo("Memory usage", {
273:   heapUsed: `${Math.round(used.heapUsed / 1024 / 1024 * 100) / 100} MB`,
274:   heapTotal: `${Math.round(used.heapTotal / 1024 / 1024 * 100) / 100} MB`,
275: });
276: ```
277: 
278: 1. Implement cleanup:
279: 
280: ```typescript
281: async function cleanupResources(): Promise<void> {
282:   await imageCache.clear();
283:   global.gc && global.gc();
284: }
285: ```
286: 
287: #### Slow Synchronization
288: 
289: **Symptoms:**
290: 
291: - Long sync duration
292: - Timeout errors
293: - Queue buildup
294: 
295: **Solutions:**
296: 
297: 1. Enable progress tracking:
298: 
299: ```typescript
300: const progress = new EnhancedProgressTracker(
301:   totalItems,
302:   "Processing Cards",
303:   { updateInterval: 1000 }
304: );
305: 
306: // Monitor progress
307: progress.update(1);
308: const stats = progress.getProgress();
309: ```
310: 
311: 1. Optimize batch processing:
312: 
313: ```typescript
314: const optimizedBatch = new AdaptiveBatchProcessor();
315: await optimizedBatch.processBatch(items, processor);
316: ```
317: 
318: ### Network Issues
319: 
320: #### API Connection Failures
321: 
322: **Symptoms:**
323: 
324: - Request timeouts
325: - Connection refused
326: - DNS resolution failed
327: 
328: **Solutions:**
329: 
330: 1. Implement retry logic:
331: 
332: ```typescript
333: const requestWithRetry = async () => {
334:   const retryStrategy = new RetryStrategy();
335:   return retryStrategy.executeWithRetry(
336:     operation,
337:     "API_REQUEST"
338:   );
339: };
340: ```
341: 
342: 1. Check network status:
343: 
344: ```typescript
345: async function checkConnectivity(): Promise<boolean> {
346:   try {
347:     await axios.get(BASE_URL, { timeout: 5000 });
348:     return true;
349:   } catch (error) {
350:     await logError(error, "connectivityCheck");
351:     return false;
352:   }
353: }
354: ```
355: 
356: ## Debugging Tools
357: 
358: ### Logging and Diagnostics
359: 
360: ```typescript
361: // Enable detailed logging
362: const logger = new SyncLogger({
363:   type: "manual",
364:   limit: 10,
365:   dryRun: true,
366:   verbose: true
367: });
368: 
369: // Track specific operations
370: await logger.logGroupDetails(groupId, products.length, prices.length);
371: ```
372: 
373: ### Validation Tools
374: 
375: ```typescript
376: // Validate sync state
377: await validateSync({
378:   limit: 100,
379:   verbose: true,
380:   groupId: "test_group"
381: });
382: 
383: // Check data integrity
384: const integrityCheck = await validateCollection(db, COLLECTION.CARDS);
385: console.log("Integrity check results:", integrityCheck);
386: ```
387: 
388: ### Performance Monitoring
389: 
390: ```typescript
391: // Track operation timing
392: const timer = {
393:   start: Date.now(),
394:   checkPoint(operation: string) {
395:     const duration = Date.now() - this.start;
396:     console.log(`${operation}: ${duration}ms`);
397:   }
398: };
399: 
400: // Monitor async operations
401: async function trackAsyncOperation<T>(
402:   operation: () => Promise<T>,
403:   name: string
404: ): Promise<T> {
405:   const start = Date.now();
406:   try {
407:     const result = await operation();
408:     const duration = Date.now() - start;
409:     await logInfo(`${name} completed`, { duration });
410:     return result;
411:   } catch (error) {
412:     await logError(error, name);
413:     throw error;
414:   }
415: }
416: ```
417: 
418: ## Recovery Procedures
419: 
420: ### Data Recovery
421: 
422: 1. Backup verification:
423: 
424: ```typescript
425: async function verifyBackups(): Promise<boolean> {
426:   const backups = await db.collection('backups').get();
427:   return backups.size > 0;
428: }
429: ```
430: 
431: 1. Restore procedure:
432: 
433: ```typescript
434: async function restoreData(timestamp: Date): Promise<void> {
435:   const backup = await db.collection('backups')
436:     .where('timestamp', '<=', timestamp)
437:     .orderBy('timestamp', 'desc')
438:     .limit(1)
439:     .get();
440:    
441:   if (!backup.empty) {
442:     await restoreFromBackup(backup.docs[0]);
443:   }
444: }
445: ```
446: 
447: ### Error Recovery
448: 
449: 1. Clear error state:
450: 
451: ```typescript
452: async function clearErrorState(): Promise<void> {
453:   await db.collection(COLLECTION.SYNC_METADATA)
454:     .where('status', '==', 'failed')
455:     .get()
456:     .then(snapshot => {
457:       const batch = db.batch();
458:       snapshot.forEach(doc => {
459:         batch.update(doc.ref, { status: 'ready' });
460:       });
461:       return batch.commit();
462:     });
463: }
464: ```
465: 
466: 1. Reset sync state:
467: 
468: ```typescript
469: async function resetSyncState(): Promise<void> {
470:   await Promise.all([
471:     db.collection(COLLECTION.CARD_HASHES).get()
472:       .then(snapshot => {
473:         const batch = db.batch();
474:         snapshot.forEach(doc => batch.delete(doc.ref));
475:         return batch.commit();
476:       }),
477:     db.collection(COLLECTION.PRICE_HASHES).get()
478:       .then(snapshot => {
479:         const batch = db.batch();
480:         snapshot.forEach(doc => batch.delete(doc.ref));
481:         return batch.commit();
482:       })
483:   ]);
484: }
485: ```
</file>

<file path="usage-guide.md">
  1: # FFTCG Sync Service Usage Guide
  2: 
  3: ## Overview
  4: 
  5: This guide provides comprehensive instructions for using the FFTCG Sync Service, including setup, operations, and best practices.
  6: 
  7: ## Quick Start
  8: 
  9: ### Prerequisites
 10: 
 11: - Node.js 18 or higher
 12: - Firebase CLI installed (`npm install -g firebase-tools`)
 13: - Firebase project created
 14: - Service account key configured
 15: 
 16: ### Initial Setup
 17: 
 18: 1. Clone the repository
 19: 
 20: ```bash
 21: git clone https://github.com/yourusername/fftcg-sync-service.git
 22: cd fftcg-sync-service
 23: ```
 24: 
 25: 1. Install dependencies
 26: 
 27: ```bash
 28: npm install
 29: ```
 30: 
 31: 1. Initialize Firebase
 32: 
 33: ```bash
 34: firebase login
 35: firebase init
 36: ```
 37: 
 38: ## API Reference
 39: 
 40: ### Card Management Endpoints
 41: 
 42: #### Test Card Sync
 43: 
 44: ```http
 45: GET /testCardSync?limit=5&dryRun=true&groupId=23783
 46: ```
 47: 
 48: #### Manual Card Sync
 49: 
 50: ```http
 51: GET /manualCardSync
 52: ```
 53: 
 54: ### Price Management Endpoints
 55: 
 56: #### Test Price Sync
 57: 
 58: ```http
 59: GET /testPriceSync?limit=5&dryRun=true&groupId=23783
 60: ```
 61: 
 62: #### Manual Price Sync
 63: 
 64: ```http
 65: GET /manualPriceSync
 66: ```
 67: 
 68: ## Synchronization Features
 69: 
 70: ### Card Data Synchronization
 71: 
 72: ```typescript
 73: // Test sync with limited cards
 74: const options = {
 75:   dryRun: true,
 76:   limit: 5,
 77:   groupId: "23783" // Optional: specific group
 78: };
 79: 
 80: await syncCards(options);
 81: ```
 82: 
 83: ### Price Data Synchronization
 84: 
 85: ```typescript
 86: // Test price sync for specific cards
 87: const options = {
 88:   dryRun: true,
 89:   limit: 10,
 90:   groupId: "23783",
 91:   productId: 477236 // Optional: specific card
 92: };
 93: 
 94: await syncPrices(options);
 95: ```
 96: 
 97: ## Image Management
 98: 
 99: ### Basic Image Processing
100: 
101: ```typescript
102: const imageHandler = new ImageHandler();
103: 
104: const result = await imageHandler.processImage(
105:   imageUrl,
106:   groupId,
107:   productId
108: );
109: ```
110: 
111: ### Image Processing Options
112: 
113: ```typescript
114: const options = {
115:   skipImages: false,    // Skip image processing
116:   retryFailedImages: true,    // Retry failed images
117:   batchSize: 25        // Batch size for processing
118: };
119: ```
120: 
121: ## Batch Operations
122: 
123: ### Standard Batch Processing
124: 
125: ```typescript
126: const batchOptions = {
127:   batchSize: 100,
128:   delayBetweenBatches: 1000,
129:   onBatchComplete: async (stats) => {
130:     console.log(`Processed: ${stats.processed}/${stats.total}`);
131:   }
132: };
133: 
134: await processBatch(items, processor, batchOptions);
135: ```
136: 
137: ## Logging System
138: 
139: ### Core Logging Operations
140: 
141: ```typescript
142: // Info logging
143: await logInfo("Operation started", {
144:   context: "syncOperation",
145:   timestamp: new Date()
146: });
147: 
148: // Warning logging
149: await logWarning("Retry required", {
150:   attempt: 2,
151:   maxRetries: 3
152: });
153: 
154: // Error logging
155: await logError(error, "operationName");
156: ```
157: 
158: ### Sync Status Logging
159: 
160: ```typescript
161: const logger = new SyncLogger({
162:   type: "manual",
163:   limit: 10,
164:   dryRun: true
165: });
166: 
167: await logger.start();
168: await logger.logGroupDetails(groupId, products.length, prices.length);
169: await logger.finish();
170: ```
171: 
172: ## Testing Infrastructure
173: 
174: ### Image System Testing
175: 
176: ```typescript
177: // Run the image processing test suite
178: npm run test:images
179: 
180: // Test specific image handling
181: const testCase = {
182:   imageUrl: "https://example.com/card.jpg",
183:   groupId: "23783",
184:   productId: 477236
185: };
186: 
187: await testImageProcessing(testCase);
188: ```
189: 
190: ### Sync System Testing
191: 
192: ```bash
193: # Basic validation
194: npm run validate-sync
195: 
196: # Advanced validation with options
197: npm run validate-sync -- --limit 10 --verbose --groupId 23783
198: ```
199: 
200: ## System Observation
201: 
202: ### Health Monitoring
203: 
204: ```typescript
205: // Endpoint: GET /healthCheck
206: const healthResponse = {
207:   status: "healthy",
208:   timestamp: "2024-11-22T01:47:16.617Z",
209:   version: "1.0.0"
210: };
211: ```
212: 
213: ### Runtime Monitoring
214: 
215: ```typescript
216: // Monitor sync operations
217: const syncStats = {
218:   processedItems: 0,
219:   totalItems: 100,
220:   startTime: Date.now(),
221:   errors: []
222: };
223: 
224: // Update monitoring stats
225: function updateStats(processed: number): void {
226:   syncStats.processedItems = processed;
227:   const elapsed = Date.now() - syncStats.startTime;
228:   const rate = processed / (elapsed / 1000);
229:   console.log(`Processing rate: ${rate.toFixed(2)} items/second`);
230: }
231: ```
232: 
233: ## Operational Procedures
234: 
235: ### Sync Process Workflow
236: 
237: 1. Initialize sync operation
238: 
239: ```typescript
240: const syncOptions = {
241:   dryRun: false,
242:   limit: undefined,
243:   groupId: undefined
244: };
245: ```
246: 
247: 1. Fetch and validate data
248: 
249: ```typescript
250: const rawData = await fetchData();
251: const validatedData = await validateData(rawData);
252: ```
253: 
254: 1. Process updates
255: 
256: ```typescript
257: await processBatch(validatedData, async (batch) => {
258:   await updateDatabase(batch);
259: });
260: ```
261: 
262: 1. Handle image processing
263: 
264: ```typescript
265: await processImages(validatedData, {
266:   compression: true,
267:   validateMetadata: true
268: });
269: ```
270: 
271: 1. Update cache system
272: 
273: ```typescript
274: await updateCacheEntries(processedData);
275: ```
276: 
277: ### Image Pipeline Workflow
278: 
279: #### Image Acquisition and Validation
280: 
281: ```typescript
282: const imageHandler = new ImageHandler();
283: const validator = new ImageValidator();
284: 
285: const buffer = await imageHandler.downloadImage(url);
286: const validationResult = await validator.validateImage(buffer);
287: ```
288: 
289: #### Image Processing and Storage
290: 
291: ```typescript
292: const compressor = new ImageCompressor();
293: const result = await compressor.compress(buffer, {
294:   quality: 85,
295:   maxWidth: 800
296: });
297: 
298: await storageService.uploadImage(result.buffer, {
299:   metadata: result.info
300: });
301: ```
302: 
303: ## System Optimization
304: 
305: ### Database Performance
306: 
307: ```typescript
308: // Use batch operations for multiple updates
309: const batch = db.batch();
310: updates.forEach(update => {
311:   const ref = db.collection('cards').doc(update.id);
312:   batch.update(ref, update.data);
313: });
314: await batch.commit();
315: ```
316: 
317: ### Resource Management
318: 
319: ```typescript
320: // Implement cleanup for large operations
321: async function cleanupResources(): Promise<void> {
322:   await imageCache.clear();
323:   global.gc && global.gc();
324: }
325: ```
326: 
327: ### Request Rate Management
328: 
329: ```typescript
330: const rateLimiter = {
331:   tokens: 100,
332:   refillRate: 10,
333:   interval: 1000,
334: 
335:   async acquire(): Promise<boolean> {
336:     if (this.tokens > 0) {
337:       this.tokens--;
338:       return true;
339:     }
340:     return false;
341:   }
342: };
343: ```
344: 
345: ## Security Controls
346: 
347: ### Input Validation
348: 
349: ```typescript
350: // Implement strict type checking
351: function validateSyncOptions(options: unknown): asserts options is SyncOptions {
352:   if (!options || typeof options !== "object") {
353:     throw new Error("Invalid options object");
354:   }
355: 
356:   const opts = options as Record<string, unknown>;
357:  
358:   if (opts.limit && typeof opts.limit !== "number") {
359:     throw new Error("Limit must be a number");
360:   }
361: 
362:   if (opts.groupId && typeof opts.groupId !== "string") {
363:     throw new Error("GroupId must be a string");
364:   }
365: }
366: ```
367: 
368: ### Authentication
369: 
370: ```typescript
371: // Verify Firebase authentication
372: async function verifyAuth(req: Request): Promise<void> {
373:   const token = req.headers.authorization?.split("Bearer ")[1];
374:   if (!token) {
375:     throw new Error("No authentication token provided");
376:   }
377: 
378:   try {
379:     await admin.auth().verifyIdToken(token);
380:   } catch (error) {
381:     throw new Error("Invalid authentication token");
382:   }
383: }
384: ```
385: 
386: ## Advanced Patterns
387: 
388: ### Custom Synchronization
389: 
390: ```typescript
391: // Implement custom sync logic
392: async function customSync<T extends BaseEntity>(
393:   fetcher: DataFetcher<T>,
394:   processor: DataProcessor<T>,
395:   options: SyncOptions
396: ): Promise<SyncMetadata> {
397:   const logger = new SyncLogger({
398:     type: "custom",
399:     ...options
400:   });
401: 
402:   await logger.start();
403:  
404:   try {
405:     const data = await fetcher.fetch();
406:     const processed = await processor.process(data);
407:     return {
408:       status: "success",
409:       processed: processed.length,
410:       timestamp: new Date()
411:     };
412:   } catch (error) {
413:     await logger.logError(error);
414:     throw error;
415:   } finally {
416:     await logger.finish();
417:   }
418: }
419: ```
420: 
421: ### Advanced Caching
422: 
423: ```typescript
424: // Implement hierarchical caching
425: class HierarchicalCache<T> {
426:   private l1Cache = new Map<string, T>();
427:   private l2Cache: LRUCache<string, T>;
428: 
429:   constructor(options: CacheOptions) {
430:     this.l2Cache = new LRUCache<string, T>({
431:       max: options.maxSize,
432:       ttl: options.ttl
433:     });
434:   }
435: 
436:   async get(key: string): Promise<T | undefined> {
437:     // Check L1 cache first
438:     const l1Result = this.l1Cache.get(key);
439:     if (l1Result) return l1Result;
440: 
441:     // Check L2 cache
442:     const l2Result = this.l2Cache.get(key);
443:     if (l2Result) {
444:       this.l1Cache.set(key, l2Result);
445:       return l2Result;
446:     }
447: 
448:     return undefined;
449:   }
450: }
451: ```
452: 
453: ### Advanced Batch Processing
454: 
455: ```typescript
456: // Implement adaptive batch sizing
457: class AdaptiveBatchProcessor {
458:   private optimalBatchSize: number = 100;
459:   private processingTimes: number[] = [];
460: 
461:   async processBatch<T>(
462:     items: T[],
463:     processor: (batch: T[]) => Promise<void>
464:   ): Promise<void> {
465:     for (let i = 0; i < items.length; i += this.optimalBatchSize) {
466:       const start = Date.now();
467:       const batch = items.slice(i, i + this.optimalBatchSize);
468:      
469:       await processor(batch);
470:      
471:       const duration = Date.now() - start;
472:       this.adjustBatchSize(duration);
473:     }
474:   }
475: 
476:   private adjustBatchSize(lastProcessingTime: number): void {
477:     this.processingTimes.push(lastProcessingTime);
478:     if (this.processingTimes.length >= 5) {
479:       const avgTime = this.calculateAverage(this.processingTimes);
480:       if (avgTime > 1000) {
481:         this.optimalBatchSize = Math.max(10, this.optimalBatchSize * 0.8);
482:       } else if (avgTime < 500) {
483:         this.optimalBatchSize = Math.min(1000, this.optimalBatchSize * 1.2);
484:       }
485:       this.processingTimes = [];
486:     }
487:   }
488: }
489: ```
490: 
491: ### Recovery Strategies
492: 
493: ```typescript
494: // Implement progressive retry with backoff
495: class RetryStrategy {
496:   private static readonly MAX_RETRIES = 3;
497:   private static readonly BASE_DELAY = 1000;
498: 
499:   async executeWithRetry<T>(
500:     operation: () => Promise<T>,
501:     context: string
502:   ): Promise<T> {
503:     let lastError: Error;
504:    
505:     for (let attempt = 0; attempt < RetryStrategy.MAX_RETRIES; attempt++) {
506:       try {
507:         return await operation();
508:       } catch (error) {
509:         lastError = error instanceof Error ? error : new Error(String(error));
510:         const delay = Math.pow(2, attempt) * RetryStrategy.BASE_DELAY;
511:        
512:         await logWarning(
513:           `Operation failed, attempting retry ${attempt + 1}/${RetryStrategy.MAX_RETRIES}`,
514:           { context, error: lastError.message }
515:         );
516:        
517:         await new Promise(resolve => setTimeout(resolve, delay));
518:       }
519:     }
520:    
521:     throw lastError!;
522:   }
523: }
524: ```
525: 
526: ## Reference Materials
527: 
528: ### CLI Commands
529: 
530: ```bash
531: # Build the project
532: npm run build
533: 
534: # Run linting
535: npm run lint
536: 
537: # Fix linting issues
538: npm run lint:fix
539: 
540: # Run tests
541: npm run test:images
542: 
543: # Deploy functions
544: npm run deploy
545: ```
546: 
547: ### Documentation Links
548: 
549: - [Architecture Overview](./architecture.md)
550: - [API Documentation](./api/index.md)
551: - [Troubleshooting Guide](./troubleshooting.md)
552: - [Security Guidelines](./security.md)
553: - [Performance Guide](./performance.md)
</file>

<file path="utils/batch.md">
  1: # Batch Processing Utility
  2: 
  3: ## Overview
  4: 
  5: The Batch Processor (`batch.ts`) manages efficient processing of large data sets through controlled batching. It provides configurable batch sizes, concurrent processing, and progress tracking for synchronization operations.
  6: 
  7: ## Core Features
  8: 
  9: - Configurable batch sizes
 10: - Concurrent processing
 11: - Progress tracking
 12: - Error handling
 13: - Memory management
 14: - Rate limiting
 15: 
 16: ## Main Interfaces
 17: 
 18: ### Batch Options
 19: 
 20: ```typescript
 21: interface BatchOptions {
 22:   batchSize?: number;
 23:   concurrency?: number;
 24:   retries?: number;
 25:   backoff?: number;
 26:   onProgress?: (progress: BatchProgress) => void;
 27:   abortSignal?: AbortSignal;
 28: }
 29: ```
 30: 
 31: ### Progress Interface
 32: 
 33: ```typescript
 34: interface BatchProgress {
 35:   total: number;
 36:   processed: number;
 37:   failed: number;
 38:   currentBatch: number;
 39:   totalBatches: number;
 40:   percentage: number;
 41:   estimatedTimeRemaining?: number;
 42: }
 43: ```
 44: 
 45: ## Core Methods
 46: 
 47: ### Batch Processing
 48: 
 49: ```typescript
 50: export async function processBatch<T>(
 51:   items: T[],
 52:   processor: (batch: T[]) => Promise<void>,
 53:   options: BatchOptions = {}
 54: ): Promise<BatchResult> {
 55:   const {
 56:     batchSize = 100,
 57:     concurrency = 1,
 58:     retries = 3,
 59:     onProgress
 60:   } = options;
 61: 
 62:   const batches = chunk(items, batchSize);
 63:   let processed = 0;
 64:   let failed = 0;
 65: 
 66:   for (let i = 0; i < batches.length; i++) {
 67:     try {
 68:       await processor(batches[i]);
 69:       processed += batches[i].length;
 70:     } catch (error) {
 71:       failed += batches[i].length;
 72:       await handleBatchError(error, retries);
 73:     }
 74: 
 75:     if (onProgress) {
 76:       onProgress({
 77:         total: items.length,
 78:         processed,
 79:         failed,
 80:         currentBatch: i + 1,
 81:         totalBatches: batches.length,
 82:         percentage: (processed + failed) / items.length * 100
 83:       });
 84:     }
 85:   }
 86: 
 87:   return { processed, failed };
 88: }
 89: ```
 90: 
 91: ## Implementation Examples
 92: 
 93: ### Basic Usage
 94: 
 95: ```typescript
 96: const items = await fetchItems();
 97: const result = await processBatch(
 98:   items,
 99:   async (batch) => {
100:     await processItems(batch);
101:   },
102:   {
103:     batchSize: 50,
104:     onProgress: (progress) => {
105:       console.log(
106:         `Processed ${progress.processed}/${progress.total} items`
107:       );
108:     }
109:   }
110: );
111: ```
112: 
113: ### With Concurrency
114: 
115: ```typescript
116: const processConcurrentBatches = async <T>(
117:   items: T[],
118:   processor: (item: T) => Promise<void>
119: ): Promise<void> => {
120:   await processBatch(items, async (batch) => {
121:     await Promise.all(
122:       batch.map(item => processor(item))
123:     );
124:   }, {
125:     batchSize: 25,
126:     concurrency: 3
127:   });
128: };
129: ```
130: 
131: ## Error Management
132: 
133: ### Retry Logic
134: 
135: ```typescript
136: async function handleBatchError(
137:   error: unknown,
138:   retriesLeft: number,
139:   backoff: number = 1000
140: ): Promise<void> {
141:   if (retriesLeft <= 0) {
142:     throw error;
143:   }
144: 
145:   await new Promise(resolve => 
146:     setTimeout(resolve, backoff * (4 - retriesLeft))
147:   );
148:  
149:   return handleBatchError(
150:     error,
151:     retriesLeft - 1,
152:     backoff
153:   );
154: }
155: ```
156: 
157: ### Error Collection
158: 
159: ```typescript
160: interface BatchError {
161:   batchIndex: number;
162:   items: unknown[];
163:   error: Error;
164: }
165: 
166: const collectErrors = async <T>(
167:   items: T[],
168:   processor: (batch: T[]) => Promise<void>
169: ): Promise<BatchError[]> => {
170:   const errors: BatchError[] = [];
171:  
172:   await processBatch(items, async (batch, index) => {
173:     try {
174:       await processor(batch);
175:     } catch (error) {
176:       errors.push({
177:         batchIndex: index,
178:         items: batch,
179:         error: error instanceof Error ? error : new Error(String(error))
180:       });
181:     }
182:   });
183: 
184:   return errors;
185: };
186: ```
187: 
188: ## Memory Management
189: 
190: ### Chunking Function
191: 
192: ```typescript
193: function chunk<T>(
194:   items: T[], 
195:   size: number
196: ): T[][] {
197:   const chunks: T[][] = [];
198:  
199:   for (let i = 0; i < items.length; i += size) {
200:     chunks.push(items.slice(i, i + size));
201:   }
202:  
203:   return chunks;
204: }
205: ```
206: 
207: ### Resource Cleanup
208: 
209: ```typescript
210: async function processWithCleanup<T>(
211:   items: T[],
212:   processor: (batch: T[]) => Promise<void>
213: ): Promise<void> {
214:   let currentBatch: T[] = [];
215:  
216:   try {
217:     await processBatch(items, async (batch) => {
218:       currentBatch = batch;
219:       await processor(batch);
220:       currentBatch = [];
221:     });
222:   } finally {
223:     currentBatch = [];
224:   }
225: }
226: ```
227: 
228: ## Progress Tracking
229: 
230: ### Progress Calculator
231: 
232: ```typescript
233: function calculateProgress(
234:   processed: number,
235:   total: number,
236:   startTime: number
237: ): BatchProgress {
238:   const elapsed = Date.now() - startTime;
239:   const rate = processed / (elapsed / 1000);
240:   const remaining = total - processed;
241:  
242:   return {
243:     processed,
244:     total,
245:     percentage: (processed / total) * 100,
246:     estimatedTimeRemaining: remaining / rate
247:   };
248: }
249: ```
250: 
251: ## Best Practices
252: 
253: ### Batch Size Selection
254: 
255: - Consider memory constraints
256: - Balance throughput and overhead
257: - Monitor processing times
258: 
259: ### Error Handling
260: 
261: - Implement proper retries
262: - Log batch failures
263: - Maintain item context
264: 
265: ### Resource Management
266: 
267: - Clean up after processing
268: - Monitor memory usage
269: - Handle aborted operations
270: 
271: ## Related Components
272: 
273: - [Progress Tracker](./progress)
274: - [Error Handler](./error-handling)
275: - [Logger](./logging)
276: 
277: ## Troubleshooting
278: 
279: ### Common Issues
280: 
281: 1. Memory Problems:
282:    - Reduce batch size
283:    - Implement cleanup
284:    - Monitor heap usage
285: 
286: 2. Performance Issues:
287:    - Adjust concurrency
288:    - Optimize batch size
289:    - Monitor processing rates
290: 
291: 3. Error Handling:
292:    - Check retry logic
293:    - Verify error collection
294:    - Monitor failure patterns
</file>

<file path="utils/cache.md">
  1: # Cache System
  2: 
  3: ## Overview
  4: 
  5: The Cache System provides efficient memory caching for card data, prices, and images. It implements an LRU (Least Recently Used) caching strategy and includes specialized caching for different data types.
  6: 
  7: ## Components
  8: 
  9: The system consists of two main cache implementations:
 10: 
 11: 1. Basic LRU Cache (`cache.ts`)
 12: 2. Specialized Image Cache (`imageCache.ts`)
 13: 
 14: ## Basic Cache Implementation
 15: 
 16: ### Configuration
 17: 
 18: ```typescript
 19: const options = {
 20:   max: 500,                // Maximum number of items
 21:   ttl: 1000 * 60 * 60,    // Time to live: 1 hour
 22: };
 23: 
 24: export const cardCache = new LRUCache<string, CardProduct>(options);
 25: ```
 26: 
 27: ### Basic Key Generation
 28: 
 29: ```typescript
 30: export type CacheType = "card" | "price" | "image";
 31: 
 32: export const getCacheKey = (type: CacheType, id: number): string => {
 33:   return `${type}:${id}`;
 34: };
 35: ```
 36: 
 37: ## Image Cache Implementation
 38: 
 39: ### Class Structure
 40: 
 41: ```typescript
 42: export class ImageCache {
 43:   private metadataCache: LRUCache<string, ImageMetadata>;
 44:   private bufferCache: LRUCache<string, Buffer>;
 45:   private existsCache: LRUCache<string, boolean>;
 46:   private stats: CacheStats;
 47: }
 48: ```
 49: 
 50: ### Cache Configuration
 51: 
 52: ```typescript
 53: constructor() {
 54:   this.metadataCache = new LRUCache<string, ImageMetadata>({
 55:     max: 1000,
 56:     ttl: 1000 * 60 * 60,  // 1 hour
 57:     updateAgeOnGet: true,
 58:   });
 59: 
 60:   this.bufferCache = new LRUCache<string, Buffer>({
 61:     max: 100,
 62:     ttl: 1000 * 60 * 5,   // 5 minutes
 63:     updateAgeOnGet: true,
 64:     maxSize: 50 * 1024 * 1024,  // 50MB max cache size
 65:     sizeCalculation: (buffer) => buffer.length,
 66:   });
 67: 
 68:   this.existsCache = new LRUCache<string, boolean>({
 69:     max: 1000,
 70:     ttl: 1000 * 60 * 60,  // 1 hour
 71:     updateAgeOnGet: true,
 72:   });
 73: }
 74: ```
 75: 
 76: ## Usage Examples
 77: 
 78: ### Basic Cache Usage
 79: 
 80: ```typescript
 81: // Store card data
 82: const cardId = 477236;
 83: const cacheKey = getCacheKey("card", cardId);
 84: cardCache.set(cacheKey, cardData);
 85: 
 86: // Retrieve card data
 87: const cachedCard = cardCache.get(cacheKey);
 88: if (cachedCard) {
 89:   return cachedCard;
 90: }
 91: ```
 92: 
 93: ### Image Cache Usage
 94: 
 95: ```typescript
 96: const imageCache = new ImageCache();
 97: 
 98: // Get metadata
 99: const metadataKey = imageCache.getMetadataCacheKey(groupId, productId, false);
100: const metadata = await imageCache.getMetadata(metadataKey);
101: 
102: // Get image buffer
103: const bufferKey = imageCache.getBufferCacheKey(imageUrl);
104: const buffer = await imageCache.getBuffer(bufferKey);
105: 
106: // Check existence
107: const existsKey = imageCache.getExistsCacheKey(groupId, productId, false);
108: const exists = imageCache.getExists(existsKey);
109: ```
110: 
111: ## Image Cache Key Types
112: 
113: ### Metadata Keys
114: 
115: ```typescript
116: getMetadataCacheKey(
117:   groupId: string,
118:   productId: number,
119:   isHighRes: boolean
120: ): string {
121:   return `metadata:${groupId}:${productId}:${isHighRes ? "high" : "original"}`;
122: }
123: ```
124: 
125: ### Buffer Keys
126: 
127: ```typescript
128: getBufferCacheKey(url: string): string {
129:   return `buffer:${url}`;
130: }
131: ```
132: 
133: ### Existence Check Keys
134: 
135: ```typescript
136: getExistsCacheKey(
137:   groupId: string,
138:   productId: number,
139:   isHighRes: boolean
140: ): string {
141:   return `exists:${groupId}:${productId}:${isHighRes ? "high" : "original"}`;
142: }
143: ```
144: 
145: ## Statistics Tracking
146: 
147: ```typescript
148: interface CacheStats {
149:   hits: number;
150:   misses: number;
151:   totalRequests: number;
152: }
153: 
154: getStats(): CacheStats {
155:   return {...this.stats};
156: }
157: ```
158: 
159: ## Cache Management
160: 
161: ### Clearing Cache
162: 
163: ```typescript
164: clear(): void {
165:   this.metadataCache.clear();
166:   this.bufferCache.clear();
167:   this.existsCache.clear();
168:   this.stats = {
169:     hits: 0,
170:     misses: 0,
171:     totalRequests: 0,
172:   };
173: }
174: ```
175: 
176: ### Performance Monitoring
177: 
178: ```typescript
179: async getMetadata(key: string): Promise<ImageMetadata | undefined> {
180:   this.stats.totalRequests++;
181:   const value = this.metadataCache.get(key);
182:   if (value) {
183:     this.stats.hits++;
184:     await logInfo("Cache hit: metadata", {
185:       key,
186:       timestamp: new Date().toISOString(),
187:     });
188:   } else {
189:     this.stats.misses++;
190:   }
191:   return value;
192: }
193: ```
194: 
195: ## Best Practices
196: 
197: 1. **Memory Management**:
198:    - Set appropriate cache sizes
199:    - Monitor memory usage
200:    - Implement TTL for all cached items
201: 
202: 2. **Performance Optimization**:
203:    - Use buffer cache for frequently accessed images
204:    - Implement size limits for buffer cache
205:    - Track cache statistics
206: 
207: 3. **Error Handling**:
208:    - Graceful degradation on cache misses
209:    - Monitor cache hit rates
210:    - Log cache operations
211: 
212: ## Troubleshooting
213: 
214: ### Common Issues
215: 
216: 1. Memory Usage:
217:    - Monitor cache size
218:    - Adjust max entries
219:    - Check TTL settings
220: 
221: 2. Cache Misses:
222:    - Verify key generation
223:    - Check TTL values
224:    - Monitor hit rates
225: 
226: 3. Performance:
227:    - Analyze cache stats
228:    - Adjust cache sizes
229:    - Optimize key generation
230: 
231: ## Related Components
232: 
233: - [Image Handler](./image-handler)
234: - [Logger](./logging)
235: - [Error Handling](./error-handling)
</file>

<file path="utils/error-handling.md">
  1: # Error Handling System
  2: 
  3: ## Overview
  4: 
  5: The Error Handling system (`error.ts`) provides a standardized approach to error management across the application. It includes error classification, detailed logging, and integration with the logging system for comprehensive error tracking.
  6: 
  7: ## Features
  8: 
  9: - Custom error types
 10: - Detailed error reporting
 11: - Error severity levels
 12: - Metadata support
 13: - Firestore integration
 14: - Stack trace preservation
 15: 
 16: ## Core Components
 17: 
 18: ### Error Types
 19: 
 20: ```typescript
 21: export interface ErrorReport {
 22:   timestamp: Date;
 23:   context: string;
 24:   error: string;
 25:   stackTrace?: string;
 26:   metadata?: Record<string, unknown>;
 27:   severity: "ERROR" | "WARNING" | "CRITICAL";
 28: }
 29: 
 30: export class DetailedError extends Error {
 31:   constructor(
 32:     message: string,
 33:     public context: string,
 34:     public metadata?: Record<string, unknown>,
 35:     public severity: "ERROR" | "WARNING" | "CRITICAL" = "ERROR"
 36:   ) {
 37:     super(message);
 38:     this.name = "DetailedError";
 39:   }
 40: }
 41: ```
 42: 
 43: ## Error Logging
 44: 
 45: ### Basic Error Logging
 46: 
 47: ```typescript
 48: export async function logDetailedError(
 49:   error: Error,
 50:   context: string,
 51:   metadata?: Record<string, unknown>,
 52:   severity: "ERROR" | "WARNING" | "CRITICAL" = "ERROR"
 53: ): Promise<void> {
 54:   const report: ErrorReport = {
 55:     timestamp: new Date(),
 56:     context,
 57:     error: error.message,
 58:     stackTrace: error.stack,
 59:     metadata,
 60:     severity,
 61:   };
 62: 
 63:   await db.collection(COLLECTION.LOGS).add(report);
 64:   await logError(error, context);
 65: }
 66: ```
 67: 
 68: ## Usage Examples
 69: 
 70: ### Basic Error Handling
 71: 
 72: ```typescript
 73: try {
 74:   await processImage(imageUrl);
 75: } catch (error) {
 76:   await logDetailedError(
 77:     error as Error,
 78:     "imageProcessing",
 79:     { imageUrl, timestamp: new Date() },
 80:     "ERROR"
 81:   );
 82: }
 83: ```
 84: 
 85: ### Custom Error Creation
 86: 
 87: ```typescript
 88: const handleImageError = async (error: unknown, imageUrl: string) => {
 89:   const detailedError = new DetailedError(
 90:     "Image processing failed",
 91:     "imageHandler:process",
 92:     {
 93:       imageUrl,
 94:       originalError: error instanceof Error ? error.message : "Unknown error",
 95:       timestamp: new Date().toISOString()
 96:     },
 97:     "ERROR"
 98:   );
 99: 
100:   await logDetailedError(detailedError, detailedError.context);
101: };
102: ```
103: 
104: ## Error Classification
105: 
106: ### Severity Levels
107: 
108: ```typescript
109: type ErrorSeverity = "ERROR" | "WARNING" | "CRITICAL";
110: 
111: const determineSeverity = (error: Error): ErrorSeverity => {
112:   if (error instanceof NetworkError) return "WARNING";
113:   if (error instanceof DataCorruptionError) return "CRITICAL";
114:   return "ERROR";
115: };
116: ```
117: 
118: ### Context Management
119: 
120: ```typescript
121: interface ErrorContext {
122:   component: string;
123:   operation: string;
124:   metadata?: Record<string, unknown>;
125: }
126: 
127: const createErrorContext = (
128:   component: string,
129:   operation: string,
130:   metadata?: Record<string, unknown>
131: ): ErrorContext => ({
132:   component,
133:   operation,
134:   metadata
135: });
136: ```
137: 
138: ## Best Practices
139: 
140: ### 1. Error Wrapping
141: 
142: ```typescript
143: try {
144:   await externalOperation();
145: } catch (error) {
146:   const wrappedError = new DetailedError(
147:     "External operation failed",
148:     "externalService:operation",
149:     {
150:       originalError: error instanceof Error ? error.message : "Unknown error",
151:       timestamp: new Date().toISOString()
152:     }
153:   );
154:   throw wrappedError;
155: }
156: ```
157: 
158: ### 2. Error Recovery
159: 
160: ```typescript
161: async function withErrorRecovery<T>(
162:   operation: () => Promise<T>,
163:   fallback: T,
164:   context: string
165: ): Promise<T> {
166:   try {
167:     return await operation();
168:   } catch (error) {
169:     await logDetailedError(
170:       error as Error,
171:       context,
172:       { recoveryAction: "using fallback" }
173:     );
174:     return fallback;
175:   }
176: }
177: ```
178: 
179: ### 3. Batch Error Handling
180: 
181: ```typescript
182: interface BatchError {
183:   index: number;
184:   error: Error;
185:   item: unknown;
186: }
187: 
188: async function processBatchWithErrors<T>(
189:   items: T[],
190:   processor: (item: T) => Promise<void>
191: ): Promise<BatchError[]> {
192:   const errors: BatchError[] = [];
193: 
194:   for (let i = 0; i < items.length; i++) {
195:     try {
196:       await processor(items[i]);
197:     } catch (error) {
198:       errors.push({
199:         index: i,
200:         error: error as Error,
201:         item: items[i]
202:       });
203:     }
204:   }
205: 
206:   return errors;
207: }
208: ```
209: 
210: ## Error Monitoring
211: 
212: ### Error Aggregation
213: 
214: ```typescript
215: interface ErrorAggregate {
216:   count: number;
217:   lastOccurrence: Date;
218:   contexts: string[];
219: }
220: 
221: const aggregateErrors = async (
222:   timeWindow: number
223: ): Promise<Map<string, ErrorAggregate>> => {
224:   const now = new Date();
225:   const windowStart = new Date(now.getTime() - timeWindow);
226: 
227:   const errors = await db
228:     .collection(COLLECTION.LOGS)
229:     .where("timestamp", ">=", windowStart)
230:     .where("level", "==", "ERROR")
231:     .get();
232: 
233:   return errors.docs.reduce((acc, doc) => {
234:     const data = doc.data();
235:     const key = data.error;
236:     const existing = acc.get(key) || {
237:       count: 0,
238:       lastOccurrence: windowStart,
239:       contexts: []
240:     };
241: 
242:     existing.count++;
243:     existing.lastOccurrence = data.timestamp.toDate();
244:     if (!existing.contexts.includes(data.context)) {
245:       existing.contexts.push(data.context);
246:     }
247: 
248:     acc.set(key, existing);
249:     return acc;
250:   }, new Map<string, ErrorAggregate>());
251: };
252: ```
253: 
254: ## Error Resolution
255: 
256: ### Automatic Recovery
257: 
258: ```typescript
259: async function attemptRecovery(
260:   error: DetailedError,
261:   maxAttempts: number = 3
262: ): Promise<boolean> {
263:   let attempts = 0;
264:   let recovered = false;
265: 
266:   while (attempts < maxAttempts && !recovered) {
267:     try {
268:       await recoveryStrategies[error.name]?.(error);
269:       recovered = true;
270:     } catch (recoveryError) {
271:       attempts++;
272:       await logWarning(
273:         `Recovery attempt ${attempts} failed`,
274:         { error: recoveryError }
275:       );
276:     }
277:   }
278: 
279:   return recovered;
280: }
281: ```
282: 
283: ## Related Components
284: 
285: - [Logger](./logging)
286: - [Sync Logger](./sync-logger)
287: - [Image Handler](./image-handler)
288: 
289: ## Troubleshooting
290: 
291: ### Common Issues
292: 
293: 1. Missing Error Context:
294:    - Ensure proper error wrapping
295:    - Include relevant metadata
296:    - Use appropriate error types
297: 
298: 2. Error Recovery:
299:    - Implement fallback mechanisms
300:    - Use appropriate retry strategies
301:    - Monitor recovery success rates
302: 
303: 3. Performance Impact:
304:    - Balance logging detail with performance
305:    - Implement error aggregation
306:    - Use appropriate severity levels
</file>

<file path="utils/image-compressor.md">
  1: # Image Compressor Utility
  2: 
  3: ## Overview
  4: 
  5: The Image Compressor (`imageCompressor.ts`) handles image optimization and compression for card images. It provides configurable compression settings for both standard and high-resolution images while maintaining image quality.
  6: 
  7: ## Core Features
  8: 
  9: - Dual resolution support (200w/400w)
 10: - Quality-preserving compression
 11: - Dimension optimization
 12: - Progressive JPEG support
 13: - Metadata preservation
 14: - Compression statistics
 15: 
 16: ## Configuration
 17: 
 18: ### Quality Settings
 19: 
 20: ```typescript
 21: private static readonly QUALITY = {
 22:   HIGH_RES: 90,
 23:   LOW_RES: 85,
 24: };
 25: ```
 26: 
 27: ### Dimension Settings
 28: 
 29: ```typescript
 30: private static readonly DIMENSIONS = {
 31:   HIGH_RES: 400,
 32:   LOW_RES: 200,
 33: };
 34: ```
 35: 
 36: ## Main Interfaces
 37: 
 38: ### Compression Result
 39: 
 40: ```typescript
 41: export interface CompressionResult {
 42:   buffer: Buffer;
 43:   info: {
 44:     width: number;
 45:     height: number;
 46:     size: number;
 47:     format: string;
 48:     quality: number;
 49:   };
 50: }
 51: ```
 52: 
 53: ## Primary Methods
 54: 
 55: ### Compression Method
 56: 
 57: ```typescript
 58: static async compress(
 59:   buffer: Buffer,
 60:   isHighRes: boolean = false
 61: ): Promise<CompressionResult>
 62: ```
 63: 
 64: ### Format Validation
 65: 
 66: ```typescript
 67: static async isCompressible(buffer: Buffer): Promise<boolean>
 68: ```
 69: 
 70: ## Implementation Examples
 71: 
 72: ### Basic Compression
 73: 
 74: ```typescript
 75: const imageBuffer = await fetchImage(url);
 76: const result = await ImageCompressor.compress(imageBuffer, false);
 77: 
 78: console.log("Compression stats:", {
 79:   originalSize: imageBuffer.length,
 80:   compressedSize: result.buffer.length,
 81:   dimensions: `${result.info.width}x${result.info.height}`,
 82:   quality: result.info.quality
 83: });
 84: ```
 85: 
 86: ### High-Resolution Processing
 87: 
 88: ```typescript
 89: const highResResult = await ImageCompressor.compress(buffer, true);
 90: await logInfo("High-res compression complete", {
 91:   originalSize: buffer.length,
 92:   compressedSize: highResResult.buffer.length,
 93:   dimensions: `${highResResult.info.width}x${highResResult.info.height}`,
 94:   quality: highResResult.info.quality
 95: });
 96: ```
 97: 
 98: ## Compression Pipeline
 99: 
100: ### Image Analysis
101: 
102: ```typescript
103: const originalInfo = await sharp(buffer).metadata();
104: const originalSize = buffer.length;
105: ```
106: 
107: ### Optimization Process
108: 
109: ```typescript
110: const image = sharp(buffer).jpeg({
111:   quality,
112:   progressive: true,
113:   mozjpeg: true,
114: });
115: 
116: if (originalInfo.width && originalInfo.width > targetWidth) {
117:   image.resize(targetWidth, null, {
118:     fit: "inside",
119:     withoutEnlargement: true,
120:   });
121: }
122: ```
123: 
124: ## Performance Monitoring
125: 
126: ### Size Reduction Tracking
127: 
128: ```typescript
129: const compressionStats = {
130:   originalSize: buffer.length,
131:   compressedSize: compressedBuffer.length,
132:   reductionPercent: (
133:     (buffer.length - compressedBuffer.length) / 
134:     buffer.length * 100
135:   ).toFixed(2)
136: };
137: ```
138: 
139: ### Quality Metrics
140: 
141: ```typescript
142: const qualityMetrics = {
143:   dimensions: `${compressedInfo.width}x${compressedInfo.height}`,
144:   format: compressedInfo.format,
145:   quality: isHighRes ? QUALITY.HIGH_RES : QUALITY.LOW_RES
146: };
147: ```
148: 
149: ## Best Practices
150: 
151: ### Memory Management
152: 
153: - Process one image at a time
154: - Release buffers after processing
155: - Monitor memory usage
156: 
157: ### Quality Control
158: 
159: - Use appropriate quality settings
160: - Validate output dimensions
161: - Check compression ratios
162: 
163: ### Error Prevention
164: 
165: - Validate input formats
166: - Check buffer integrity
167: - Monitor compression results
168: 
169: ## Usage Guidelines
170: 
171: ### Standard Resolution
172: 
173: ```typescript
174: const standardResult = await ImageCompressor.compress(buffer);
175: if (standardResult.buffer.length > buffer.length) {
176:   // Use original if compression didn't help
177:   return buffer;
178: }
179: ```
180: 
181: ### High Resolution
182: 
183: ```typescript
184: const highResResult = await ImageCompressor.compress(buffer, true);
185: if (!highResResult.info.width || highResResult.info.width < 400) {
186:   throw new Error("High-res compression failed to meet size requirements");
187: }
188: ```
189: 
190: ## Error Handling
191: 
192: ### Input Validation
193: 
194: ```typescript
195: if (!buffer || buffer.length === 0) {
196:   throw new Error("Invalid input buffer");
197: }
198: 
199: if (!await ImageCompressor.isCompressible(buffer)) {
200:   throw new Error("Unsupported image format");
201: }
202: ```
203: 
204: ### Processing Errors
205: 
206: ```typescript
207: try {
208:   return await ImageCompressor.compress(buffer);
209: } catch (error) {
210:   throw new Error(
211:     `Image compression failed: ${
212:       error instanceof Error ? error.message : "Unknown error"
213:     }`
214:   );
215: }
216: ```
217: 
218: ## Related Components
219: 
220: - [Image Handler](./image-handler)
221: - [Image Validator](./image-validator)
222: - [Logger](./logging)
223: 
224: ## Troubleshooting
225: 
226: ### Common Issues
227: 
228: 1. Memory Constraints:
229:    - Monitor buffer sizes
230:    - Process images sequentially
231:    - Implement garbage collection
232: 
233: 2. Quality Problems:
234:    - Verify quality settings
235:    - Check dimension constraints
236:    - Validate output formats
237: 
238: 3. Performance Issues:
239:    - Monitor processing times
240:    - Track compression ratios
241:    - Optimize batch processing
</file>

<file path="utils/image-handler.md">
  1: # Image Handler Utility
  2: 
  3: ## Overview
  4: 
  5: The Image Handler (`imageHandler.ts`) is a comprehensive utility for managing card images. It handles downloading, processing, compression, caching, and storage of both standard and high-resolution card images in Firebase Storage.
  6: 
  7: ## Features
  8: 
  9: - Dual resolution support (200w and 400w)
 10: - Image compression and optimization
 11: - Caching system
 12: - Hash-based change detection
 13: - Error handling and retry logic
 14: - Storage path management
 15: - Metadata tracking
 16: 
 17: ## Class Structure
 18: 
 19: ```typescript
 20: export class ImageHandler {
 21:   private bucket = storage.bucket(STORAGE.BUCKETS.CARD_IMAGES);
 22:  
 23:   // Main method
 24:   async processImage(
 25:     imageUrl: string,
 26:     groupId: string,
 27:     productId: number
 28:   ): Promise<ImageProcessingResult>
 29: }
 30: ```
 31: 
 32: ## Core Methods
 33: 
 34: ### Process Image
 35: 
 36: ```typescript
 37: async processImage(
 38:   imageUrl: string,
 39:   groupId: string,
 40:   productId: number
 41: ): Promise<ImageProcessingResult>
 42: ```
 43: 
 44: #### Parameters
 45: 
 46: - `imageUrl`: Source URL of the card image
 47: - `groupId`: Card group identifier
 48: - `productId`: Unique card identifier
 49: 
 50: #### Returns
 51: 
 52: ```typescript
 53: interface ImageProcessingResult {
 54:   originalUrl: string;      // URL of standard resolution image
 55:   highResUrl: string;       // URL of high resolution image
 56:   metadata: ImageMetadata;  // Image processing metadata
 57:   updated: boolean;         // Whether image was updated
 58: }
 59: ```
 60: 
 61: ### Image Processing Pipeline
 62: 
 63: 1. **URL Processing**:
 64: 
 65: ```typescript
 66: private getHighResUrl(imageUrl: string): string {
 67:   return imageUrl.replace(/_200w\.jpg$/, "_400w.jpg");
 68: }
 69: ```
 70: 
 71: 1. **Storage Path Management**:
 72: 
 73: ```typescript
 74: private getStoragePath(
 75:   groupId: string,
 76:   productId: number,
 77:   isHighRes: boolean = false
 78: ): string {
 79:   const suffix = isHighRes ? "_400w" : "_200w";
 80:   return `${STORAGE.PATHS.IMAGES}/${groupId}/${productId}${suffix}.jpg`;
 81: }
 82: ```
 83: 
 84: 1. **Image Download**:
 85: 
 86: ```typescript
 87: private async downloadImage(url: string): Promise<Buffer>
 88: ```
 89: 
 90: 1. **Image Compression**:
 91: 
 92: ```typescript
 93: private async compressImage(
 94:   buffer: Buffer,
 95:   isHighRes: boolean
 96: ): Promise<Buffer>
 97: ```
 98: 
 99: ## Configuration
100: 
101: ### Storage Settings
102: 
103: ```typescript
104: export const STORAGE = {
105:   BUCKETS: {
106:     CARD_IMAGES: "fftcg-sync-service.firebasestorage.app",
107:   },
108:   PATHS: {
109:     IMAGES: "card-images",
110:   },
111: };
112: ```
113: 
114: ### Compression Settings
115: 
116: ```typescript
117: private static readonly QUALITY = {
118:   HIGH_RES: 90,
119:   LOW_RES: 85,
120: };
121: 
122: private static readonly DIMENSIONS = {
123:   HIGH_RES: 400,
124:   LOW_RES: 200,
125: };
126: ```
127: 
128: ## Usage Examples
129: 
130: ### Basic Image Processing
131: 
132: ```typescript
133: const imageHandler = new ImageHandler();
134: 
135: const result = await imageHandler.processImage(
136:   "https://tcgplayer-cdn.tcgplayer.com/product/477236_200w.jpg",
137:   "23783",
138:   477236
139: );
140: 
141: console.log("Image URLs:", {
142:   original: result.originalUrl,
143:   highRes: result.highResUrl
144: });
145: ```
146: 
147: ### With Error Handling
148: 
149: ```typescript
150: try {
151:   const imageHandler = new ImageHandler();
152:   const result = await imageHandler.processImage(imageUrl, groupId, productId);
153:  
154:   if (result.updated) {
155:     console.log("Image updated successfully");
156:     console.log("Metadata:", result.metadata);
157:   }
158: } catch (error) {
159:   console.error("Image processing failed:", error);
160: }
161: ```
162: 
163: ## Metadata Management
164: 
165: ### Metadata Structure
166: 
167: ```typescript
168: interface ImageMetadata {
169:   contentType: string;
170:   size: number;
171:   updated: Date;
172:   hash: string;
173:   originalUrl: string;
174:   highResUrl: string;
175:   originalSize?: number;
176:   highResSize?: number;
177: }
178: ```
179: 
180: ### Saving Metadata
181: 
182: ```typescript
183: private async saveMetadata(
184:   groupId: string,
185:   productId: number,
186:   metadata: ImageMetadata
187: ): Promise<void>
188: ```
189: 
190: ## Cache Integration
191: 
192: The Image Handler integrates with the caching system for improved performance:
193: 
194: ```typescript
195: const cacheKey = imageCache.getBufferCacheKey(url);
196: const cachedBuffer = await imageCache.getBuffer(cacheKey);
197: 
198: if (cachedBuffer) {
199:   return cachedBuffer;
200: }
201: ```
202: 
203: ## Error Handling
204: 
205: ### Error Types
206: 
207: ```typescript
208: interface ImageProcessingError extends GenericError {
209:   productId: number;
210:   groupId: string;
211:   originalUrl: string;
212:   type: "download" | "upload" | "metadata" | "unknown";
213: }
214: ```
215: 
216: ### Error Recovery
217: 
218: ```typescript
219: catch (error) {
220:   return {
221:     originalUrl: imageUrl,
222:     highResUrl: this.getHighResUrl(imageUrl),
223:     metadata: {
224:       contentType: "image/jpeg",
225:       size: 0,
226:       updated: new Date(),
227:       hash: "",
228:       originalUrl: imageUrl,
229:       highResUrl: this.getHighResUrl(imageUrl),
230:     },
231:     updated: false,
232:   };
233: }
234: ```
235: 
236: ## Best Practices
237: 
238: 1. **Memory Management**:
239:    - Process one resolution at a time
240:    - Use streams for large files
241:    - Implement proper cleanup
242: 
243: 2. **Error Handling**:
244:    - Implement retries for transient failures
245:    - Log detailed error information
246:    - Maintain fallback URLs
247: 
248: 3. **Performance**:
249:    - Utilize caching effectively
250:    - Implement batch processing
251:    - Monitor storage quotas
252: 
253: ## Related Components
254: 
255: - [Image Cache](./cache)
256: - [Image Compressor](./image-compressor)
257: - [Image Validator](./image-validator)
258: - [Logger](./logging)
</file>

<file path="utils/image-validator.md">
  1: # Image Validator Utility
  2: 
  3: ## Overview
  4: 
  5: The Image Validator (`imageValidator.ts`) ensures image integrity and conformance to required specifications before processing. It validates format, dimensions, file size, and other critical image attributes.
  6: 
  7: ## Core Features
  8: 
  9: - Format validation
 10: - Dimension verification
 11: - Size limit enforcement
 12: - Metadata validation
 13: - URL structure validation
 14: - MIME type checking
 15: 
 16: ## Configuration
 17: 
 18: ### Size Limits
 19: 
 20: ```typescript
 21: export const IMAGE_LIMITS = {
 22:   MAX_SIZE: 10 * 1024 * 1024,  // 10MB
 23:   MIN_SIZE: 1024,              // 1KB
 24:   MAX_WIDTH: 2048,
 25:   MAX_HEIGHT: 2048,
 26:   MIN_WIDTH: 100,
 27:   MIN_HEIGHT: 100,
 28: };
 29: ```
 30: 
 31: ### Format Settings
 32: 
 33: ```typescript
 34: export const SUPPORTED_FORMATS = [
 35:   "image/jpeg",
 36:   "image/jpg",
 37:   "image/png"
 38: ] as const;
 39: 
 40: export const REQUIRED_DIMENSIONS = {
 41:   STANDARD: {
 42:     width: 200,
 43:     height: 200
 44:   },
 45:   HIGH_RES: {
 46:     width: 400,
 47:     height: 400
 48:   }
 49: };
 50: ```
 51: 
 52: ## Validation Methods
 53: 
 54: ### URL Pattern Check
 55: 
 56: ```typescript
 57: export function isValidImageUrl(url: string): boolean {
 58:   const pattern = /^https:\/\/.*\.(jpg|jpeg|png)(\?.*)?$/i;
 59:   return pattern.test(url);
 60: }
 61: ```
 62: 
 63: ### Format Verification
 64: 
 65: ```typescript
 66: export async function isValidFormat(
 67:   buffer: Buffer
 68: ): Promise<boolean> {
 69:   try {
 70:     const metadata = await sharp(buffer).metadata();
 71:     return SUPPORTED_FORMATS.includes(
 72:       `image/${metadata.format}` as typeof SUPPORTED_FORMATS[number]
 73:     );
 74:   } catch {
 75:     return false;
 76:   }
 77: }
 78: ```
 79: 
 80: ## Implementation Examples
 81: 
 82: ### Basic Validation
 83: 
 84: ```typescript
 85: const validator = new ImageValidator();
 86: 
 87: try {
 88:   await validator.validate(imageBuffer);
 89:   console.log("Image validation successful");
 90: } catch (error) {
 91:   console.error("Validation failed:", error.message);
 92: }
 93: ```
 94: 
 95: ### URL Validation
 96: 
 97: ```typescript
 98: const isValid = validator.validateUrl(imageUrl);
 99: if (!isValid) {
100:   throw new Error(`Invalid image URL: ${imageUrl}`);
101: }
102: ```
103: 
104: ## Validation Pipeline
105: 
106: ### Size Check
107: 
108: ```typescript
109: private async validateSize(buffer: Buffer): Promise<void> {
110:   const size = buffer.length;
111:  
112:   if (size > IMAGE_LIMITS.MAX_SIZE) {
113:     throw new Error(
114:       `Image size ${size} exceeds maximum limit of ${IMAGE_LIMITS.MAX_SIZE}`
115:     );
116:   }
117:  
118:   if (size < IMAGE_LIMITS.MIN_SIZE) {
119:     throw new Error(
120:       `Image size ${size} below minimum requirement of ${IMAGE_LIMITS.MIN_SIZE}`
121:     );
122:   }
123: }
124: ```
125: 
126: ### Dimension Check
127: 
128: ```typescript
129: private async validateDimensions(
130:   metadata: sharp.Metadata
131: ): Promise<void> {
132:   const { width, height } = metadata;
133:  
134:   if (!width || !height) {
135:     throw new Error("Unable to determine image dimensions");
136:   }
137:  
138:   if (width > IMAGE_LIMITS.MAX_WIDTH || height > IMAGE_LIMITS.MAX_HEIGHT) {
139:     throw new Error("Image dimensions exceed maximum limits");
140:   }
141:  
142:   if (width < IMAGE_LIMITS.MIN_WIDTH || height < IMAGE_LIMITS.MIN_HEIGHT) {
143:     throw new Error("Image dimensions below minimum requirements");
144:   }
145: }
146: ```
147: 
148: ## Utility Functions
149: 
150: ### Metadata Extraction
151: 
152: ```typescript
153: async function getImageMetadata(
154:   buffer: Buffer
155: ): Promise<sharp.Metadata> {
156:   try {
157:     return await sharp(buffer).metadata();
158:   } catch (error) {
159:     throw new Error("Failed to extract image metadata");
160:   }
161: }
162: ```
163: 
164: ### Resolution Check
165: 
166: ```typescript
167: function isValidResolution(
168:   width: number,
169:   height: number,
170:   isHighRes: boolean
171: ): boolean {
172:   const requirements = isHighRes ? 
173:     REQUIRED_DIMENSIONS.HIGH_RES : 
174:     REQUIRED_DIMENSIONS.STANDARD;
175:    
176:   return width >= requirements.width && 
177:          height >= requirements.height;
178: }
179: ```
180: 
181: ## Error Messages
182: 
183: ### Custom Validation Errors
184: 
185: ```typescript
186: export class ImageValidationError extends Error {
187:   constructor(
188:     message: string,
189:     public code: string,
190:     public details?: Record<string, unknown>
191:   ) {
192:     super(message);
193:     this.name = "ImageValidationError";
194:   }
195: }
196: ```
197: 
198: ### Error Codes
199: 
200: ```typescript
201: export const VALIDATION_ERRORS = {
202:   INVALID_FORMAT: "INVALID_FORMAT",
203:   INVALID_SIZE: "INVALID_SIZE",
204:   INVALID_DIMENSIONS: "INVALID_DIMENSIONS",
205:   INVALID_URL: "INVALID_URL",
206:   METADATA_ERROR: "METADATA_ERROR"
207: } as const;
208: ```
209: 
210: ## Best Practices
211: 
212: ### Input Validation
213: 
214: - Check buffer integrity
215: - Validate URL structure
216: - Verify MIME types
217: 
218: ### Performance Optimization
219: 
220: - Cache validation results
221: - Implement early returns
222: - Use efficient checks
223: 
224: ### Error Handling
225: 
226: - Provide detailed error messages
227: - Include validation context
228: - Log validation failures
229: 
230: ## Usage Guidelines
231: 
232: ### Standard Validation
233: 
234: ```typescript
235: const validateImage = async (buffer: Buffer): Promise<void> => {
236:   const validator = new ImageValidator();
237:  
238:   try {
239:     await validator.validate(buffer);
240:   } catch (error) {
241:     await logError(error, "imageValidation");
242:     throw error;
243:   }
244: };
245: ```
246: 
247: ### URL Pattern Validation
248: 
249: ```typescript
250: const validateImageUrl = (url: string): void => {
251:   if (!isValidImageUrl(url)) {
252:     throw new ImageValidationError(
253:       `Invalid image URL: ${url}`,
254:       VALIDATION_ERRORS.INVALID_URL,
255:       { url }
256:     );
257:   }
258: };
259: ```
260: 
261: ## Related Components
262: 
263: - [Image Compressor](./image-compressor)
264: - [Image Handler](./image-handler)
265: - [Error Handling](./error-handling)
266: 
267: ## Troubleshooting
268: 
269: ### Common Issues
270: 
271: 1. Format Problems:
272:    - Check file extensions
273:    - Verify MIME types
274:    - Validate image headers
275: 
276: 2. Size Issues:
277:    - Monitor file sizes
278:    - Check compression settings
279:    - Verify buffer integrity
280: 
281: 3. Dimension Errors:
282:    - Validate aspect ratios
283:    - Check resolution requirements
284:    - Monitor scaling issues
</file>

<file path="utils/logging.md">
  1: # Logging System
  2: 
  3: ## Overview
  4: 
  5: The Logging System (`logger.ts`) provides comprehensive logging functionality across the application. It integrates with Firebase Functions logger and Firestore for persistent log storage, supporting multiple log levels and structured logging data.
  6: 
  7: ## Features
  8: 
  9: - Multiple log levels (INFO, WARNING, ERROR)
 10: - Structured logging with metadata
 11: - Firestore integration for log persistence
 12: - Data cleaning and sanitization
 13: - Flexible context tracking
 14: - Type-safe logging interfaces
 15: 
 16: ## Basic Usage
 17: 
 18: ### Importing the Logger
 19: 
 20: ```typescript
 21: import { logInfo, logWarning, logError } from "../utils/logger";
 22: import { logger } from "firebase-functions";
 23: ```
 24: 
 25: ### Log Levels
 26: 
 27: ```typescript
 28: // Info level logging
 29: await logInfo("Processing started", {
 30:   timestamp: new Date().toISOString(),
 31:   operation: "syncCards"
 32: });
 33: 
 34: // Warning level logging
 35: await logWarning("Retry attempt required", {
 36:   attempt: 2,
 37:   maxRetries: 3
 38: });
 39: 
 40: // Error level logging
 41: await logError(error, "syncCards:main");
 42: ```
 43: 
 44: ## Data Structures
 45: 
 46: ### Log Entry Interface
 47: 
 48: ```typescript
 49: interface LogEntry {
 50:   timestamp: Date;
 51:   level: "INFO" | "WARNING" | "ERROR";
 52:   message: string;
 53:   context?: string;
 54:   data?: Record<string, unknown>;
 55: }
 56: ```
 57: 
 58: ### Error Logging Interface
 59: 
 60: ```typescript
 61: interface GenericError {
 62:   message: string;
 63:   name: string;
 64:   code?: string;
 65:   stack?: string;
 66: }
 67: ```
 68: 
 69: ## Core Functions
 70: 
 71: ### Info Logging
 72: 
 73: ```typescript
 74: export const logInfo = async (
 75:   message: string,
 76:   data?: LogData
 77: ) => {
 78:   const cleanedData = data ? cleanLogData({
 79:     ...data,
 80:     timestamp: new Date().toISOString(),
 81:   }) : undefined;
 82: 
 83:   const entry: LogEntry = {
 84:     timestamp: new Date(),
 85:     level: "INFO",
 86:     message,
 87:     ...(cleanedData && {data: cleanedData}),
 88:   };
 89: 
 90:   logger.info(message, cleanedData);
 91:   await saveLogEntry(entry);
 92: };
 93: ```
 94: 
 95: ### Error Logging
 96: 
 97: ```typescript
 98: export const logError = async (
 99:   error: GenericError | GenericObject,
100:   context: string
101: ) => {
102:   const errorData = cleanLogData({
103:     stack: error.stack,
104:     code: error.code,
105:     ...(error as GenericObject),
106:     timestamp: new Date().toISOString(),
107:   });
108: 
109:   const entry: LogEntry = {
110:     timestamp: new Date(),
111:     level: "ERROR",
112:     message: error.message || "Unknown error",
113:     context,
114:     data: errorData,
115:   };
116: 
117:   logger.error(entry.message, errorData);
118:   await saveLogEntry(entry);
119: };
120: ```
121: 
122: ## Data Cleaning
123: 
124: ### Clean Log Data Function
125: 
126: ```typescript
127: function cleanLogData(
128:   data: Record<string, unknown>
129: ): Record<string, unknown> {
130:   return Object.entries(data).reduce((acc, [key, value]) => {
131:     if (value !== undefined && value !== null) {
132:       if (value && typeof value === "object") {
133:         const cleaned = cleanLogData(value as Record<string, unknown>);
134:         if (Object.keys(cleaned).length > 0) {
135:           acc[key] = cleaned;
136:         }
137:       } else {
138:         acc[key] = value instanceof Date ? value.toISOString() : value;
139:       }
140:     }
141:     return acc;
142:   }, {} as Record<string, unknown>);
143: }
144: ```
145: 
146: ## Firestore Integration
147: 
148: ### Save Log Entry
149: 
150: ```typescript
151: async function saveLogEntry(entry: LogEntry): Promise<void> {
152:   const cleanEntry = {
153:     timestamp: entry.timestamp,
154:     level: entry.level,
155:     message: entry.message,
156:     ...(entry.context && {context: entry.context}),
157:     ...(entry.data && {data: cleanLogData(entry.data)}),
158:   };
159: 
160:   await db.collection(COLLECTION.LOGS).add(cleanEntry);
161: }
162: ```
163: 
164: ## Best Practices
165: 
166: 1. **Structured Logging**:
167: 
168:    ```typescript
169:    await logInfo("Card sync completed", {
170:      cardsProcessed: 50,
171:      updatedCount: 10,
172:      duration: "5m30s",
173:      timestamp: new Date().toISOString()
174:    });
175:    ```
176: 
177: 2. **Error Context**:
178: 
179:    ```typescript
180:    await logError(error, "cardSync:processGroup", {
181:      groupId: "23783",
182:      attempt: 2,
183:      operation: "imageProcessing"
184:    });
185:    ```
186: 
187: 3. **Performance Monitoring**:
188: 
189:    ```typescript
190:    await logInfo("Operation timing", {
191:      operation: "imageCompression",
192:      duration: endTime - startTime,
193:      size: {
194:        before: originalSize,
195:        after: compressedSize
196:      }
197:    });
198:    ```
199: 
200: ## Error Handling
201: 
202: ### Common Patterns
203: 
204: ```typescript
205: try {
206:   // Operation code
207: } catch (error) {
208:   await logError(
209:     error instanceof Error ? error : new Error("Unknown error"),
210:     "operationName",
211:     { contextData: "relevant info" }
212:   );
213:   throw error;
214: }
215: ```
216: 
217: ### Error with Context
218: 
219: ```typescript
220: class DetailedError extends Error {
221:   constructor(
222:     message: string,
223:     public context: string,
224:     public metadata?: Record<string, unknown>
225:   ) {
226:     super(message);
227:     this.name = "DetailedError";
228:   }
229: }
230: ```
231: 
232: ## Query Examples
233: 
234: ### Firestore Queries
235: 
236: ```typescript
237: // Get recent errors
238: const recentErrors = await db
239:   .collection(COLLECTION.LOGS)
240:   .where("level", "==", "ERROR")
241:   .orderBy("timestamp", "desc")
242:   .limit(10)
243:   .get();
244: 
245: // Get logs by context
246: const contextLogs = await db
247:   .collection(COLLECTION.LOGS)
248:   .where("context", "==", "cardSync:processGroup")
249:   .get();
250: ```
251: 
252: ## Related Components
253: 
254: - [Error Handling](./error-handling)
255: - [Sync Logger](./sync-logger)
256: - [Progress Tracking](./progress)
257: 
258: ## Troubleshooting
259: 
260: ### Common Issues
261: 
262: 1. Missing Logs:
263:    - Check log level configuration
264:    - Verify Firestore permissions
265:    - Check error handling implementation
266: 
267: 2. Performance Impact:
268:    - Use appropriate log levels
269:    - Implement log batching for high-volume operations
270:    - Monitor Firestore usage
271: 
272: 3. Data Size:
273:    - Implement log rotation
274:    - Clean sensitive data
275:    - Monitor storage usage
</file>

<file path="utils/progress.md">
  1: # Progress Tracking Utility
  2: 
  3: ## Overview
  4: 
  5: The Progress Tracker (`progress.ts`) provides real-time monitoring and reporting of long-running operations, particularly during synchronization processes. It handles progress calculation, ETA estimation, and status updates.
  6: 
  7: ## Core Features
  8: 
  9: - Real-time progress tracking
 10: - ETA calculations
 11: - Operation statistics
 12: - Progress bar visualization
 13: - Step-by-step monitoring
 14: - Batch progress tracking
 15: 
 16: ## Main Interfaces
 17: 
 18: ### Progress Options
 19: 
 20: ```typescript
 21: interface ProgressOptions {
 22:   total: number;
 23:   title?: string;
 24:   showBar?: boolean;
 25:   showEta?: boolean;
 26:   batchSize?: number;
 27: }
 28: ```
 29: 
 30: ### Progress State
 31: 
 32: ```typescript
 33: interface ProgressState {
 34:   current: number;
 35:   total: number;
 36:   startTime: Date;
 37:   lastUpdateTime: Date;
 38:   completed: boolean;
 39:   eta?: Date;
 40:   rate?: number;
 41: }
 42: ```
 43: 
 44: ## Implementation Examples
 45: 
 46: ### Basic Usage
 47: 
 48: ```typescript
 49: const progress = new ProgressTracker({
 50:   total: totalItems,
 51:   title: "Processing Cards",
 52:   showBar: true,
 53:   showEta: true
 54: });
 55: 
 56: progress.start();
 57: 
 58: for (const item of items) {
 59:   await processItem(item);
 60:   progress.increment();
 61: }
 62: 
 63: progress.finish();
 64: ```
 65: 
 66: ### Batch Processing
 67: 
 68: ```typescript
 69: const tracker = new ProgressTracker({
 70:   total: totalGroups,
 71:   title: "Syncing Groups",
 72:   batchSize: 25
 73: });
 74: 
 75: tracker.start();
 76: 
 77: for (const batch of batches) {
 78:   await processBatch(batch);
 79:   tracker.incrementBatch(batch.length);
 80: }
 81: 
 82: tracker.finish();
 83: ```
 84: 
 85: ## Progress Visualization
 86: 
 87: ### Progress Bar
 88: 
 89: ```typescript
 90: private renderBar(
 91:   percentage: number,
 92:   width: number = 30
 93: ): string {
 94:   const filled = Math.floor(width * (percentage / 100));
 95:   const empty = width - filled;
 96:  
 97:   return '[' + 
 98:     '='.repeat(filled) + 
 99:     ' '.repeat(empty) + 
100:     ']';
101: }
102: ```
103: 
104: ### Status Line
105: 
106: ```typescript
107: private renderStatus(): string {
108:   const percentage = this.getPercentage();
109:   const current = this.state.current;
110:   const total = this.state.total;
111:  
112:   return `${this.options.title || 'Progress'}: ` +
113:     `${current}/${total} ` +
114:     `(${percentage.toFixed(1)}%)`;
115: }
116: ```
117: 
118: ## Time Calculations
119: 
120: ### ETA Estimation
121: 
122: ```typescript
123: private calculateEta(): Date | undefined {
124:   if (this.state.current === 0) return undefined;
125:  
126:   const elapsed = Date.now() - this.state.startTime.getTime();
127:   const rate = this.state.current / (elapsed / 1000);
128:   const remaining = this.state.total - this.state.current;
129:  
130:   return new Date(
131:     Date.now() + (remaining / rate) * 1000
132:   );
133: }
134: ```
135: 
136: ### Processing Rate
137: 
138: ```typescript
139: private calculateRate(): number {
140:   const elapsed = (
141:     this.state.lastUpdateTime.getTime() - 
142:     this.state.startTime.getTime()
143:   ) / 1000;
144:  
145:   return this.state.current / elapsed;
146: }
147: ```
148: 
149: ## Event Handling
150: 
151: ### Progress Updates
152: 
153: ```typescript
154: onProgress(callback: ProgressCallback): void {
155:   this.progressCallbacks.push(callback);
156: }
157: 
158: private emitProgress(): void {
159:   const progress = {
160:     current: this.state.current,
161:     total: this.state.total,
162:     percentage: this.getPercentage(),
163:     eta: this.state.eta,
164:     rate: this.state.rate
165:   };
166:  
167:   this.progressCallbacks.forEach(callback => callback(progress));
168: }
169: ```
170: 
171: ### Completion Events
172: 
173: ```typescript
174: onComplete(callback: CompleteCallback): void {
175:   this.completeCallbacks.push(callback);
176: }
177: 
178: private emitComplete(): void {
179:   const summary = {
180:     total: this.state.total,
181:     duration: this.getDuration(),
182:     averageRate: this.calculateAverageRate()
183:   };
184:  
185:   this.completeCallbacks.forEach(callback => callback(summary));
186: }
187: ```
188: 
189: ## Usage Patterns
190: 
191: ### With Async Operations
192: 
193: ```typescript
194: const processWithProgress = async (
195:   items: any[],
196:   processor: (item: any) => Promise<void>
197: ): Promise<void> => {
198:   const progress = new ProgressTracker({
199:     total: items.length,
200:     title: "Processing Items",
201:     showBar: true
202:   });
203:  
204:   progress.start();
205:  
206:   for (const item of items) {
207:     await processor(item);
208:     progress.increment();
209:     await new Promise(resolve => setTimeout(resolve, 10));
210:   }
211:  
212:   progress.finish();
213: };
214: ```
215: 
216: ### With Batch Processing
217: 
218: ```typescript
219: const processBatchWithProgress = async (
220:   batches: any[][],
221:   processor: (batch: any[]) => Promise<void>
222: ): Promise<void> => {
223:   const totalItems = batches.reduce(
224:     (sum, batch) => sum + batch.length, 
225:     0
226:   );
227:  
228:   const progress = new ProgressTracker({
229:     total: totalItems,
230:     title: "Processing Batches",
231:     batchSize: batches[0].length
232:   });
233:  
234:   progress.start();
235:  
236:   for (const batch of batches) {
237:     await processor(batch);
238:     progress.incrementBatch(batch.length);
239:   }
240:  
241:   progress.finish();
242: };
243: ```
244: 
245: ## Best Practices
246: 
247: ### Memory Efficiency
248: 
249: - Clear callbacks after completion
250: - Limit status update frequency
251: - Manage event listener count
252: 
253: ### Accuracy
254: 
255: - Update progress immediately
256: - Calculate rates periodically
257: - Maintain precise counters
258: 
259: ### User Experience
260: 
261: - Show meaningful titles
262: - Provide accurate ETAs
263: - Update status consistently
264: 
265: ## Related Components
266: 
267: - [Sync Logger](./sync-logger)
268: - [Batch Processor](./batch)
269: - [Logger](./logging)
270: 
271: ## Troubleshooting
272: 
273: ### Common Issues
274: 
275: 1. Performance Impact:
276:    - Limit update frequency
277:    - Optimize calculations
278:    - Monitor memory usage
279: 
280: 2. Accuracy Problems:
281:    - Verify counter updates
282:    - Check time calculations
283:    - Validate batch sizes
284: 
285: 3. Display Issues:
286:    - Check terminal width
287:    - Verify output formatting
288:    - Monitor update rates
</file>

<file path="utils/request.md">
  1: # Request Handler Utility
  2: 
  3: ## Overview
  4: 
  5: The Request Handler (`request.ts`) manages HTTP requests with built-in retry logic, rate limiting, and error handling. It provides a robust foundation for external API communications, particularly with TCGplayer's API.
  6: 
  7: ## Core Features
  8: 
  9: - Configurable retry logic
 10: - Rate limiting
 11: - Request queuing
 12: - Response caching
 13: - Error standardization
 14: - Request logging
 15: 
 16: ## Configuration
 17: 
 18: ### Request Settings
 19: 
 20: ```typescript
 21: interface RequestOptions {
 22:   baseURL?: string;
 23:   timeout?: number;
 24:   retries?: number;
 25:   backoff?: number;
 26:   headers?: Record<string, string>;
 27:   cache?: boolean;
 28:   validateStatus?: (status: number) => boolean;
 29: }
 30: ```
 31: 
 32: ### Default Configuration
 33: 
 34: ```typescript
 35: const DEFAULT_OPTIONS: RequestOptions = {
 36:   timeout: 10000,
 37:   retries: 3,
 38:   backoff: 1000,
 39:   cache: true,
 40:   validateStatus: (status: number) => status >= 200 && status < 300
 41: };
 42: ```
 43: 
 44: ## Main Methods
 45: 
 46: ### HTTP Methods
 47: 
 48: ```typescript
 49: class RequestHandler {
 50:   async get<T>(
 51:     url: string, 
 52:     options?: RequestOptions
 53:   ): Promise<T>
 54: 
 55:   async post<T>(
 56:     url: string, 
 57:     data: unknown, 
 58:     options?: RequestOptions
 59:   ): Promise<T>
 60: 
 61:   async put<T>(
 62:     url: string, 
 63:     data: unknown, 
 64:     options?: RequestOptions
 65:   ): Promise<T>
 66: 
 67:   async delete<T>(
 68:     url: string, 
 69:     options?: RequestOptions
 70:   ): Promise<T>
 71: }
 72: ```
 73: 
 74: ## Implementation Examples
 75: 
 76: ### Basic Request
 77: 
 78: ```typescript
 79: const requestHandler = new RequestHandler({
 80:   baseURL: "https://api.tcgplayer.com",
 81:   headers: {
 82:     "Authorization": `Bearer ${token}`,
 83:     "Content-Type": "application/json"
 84:   }
 85: });
 86: 
 87: const data = await requestHandler.get<CardResponse>(
 88:   `/catalog/products/${productId}`
 89: );
 90: ```
 91: 
 92: ### With Retry Logic
 93: 
 94: ```typescript
 95: const fetchWithRetry = async <T>(
 96:   url: string,
 97:   options: RequestOptions = {}
 98: ): Promise<T> => {
 99:   let attempt = 0;
100:  
101:   while (attempt < (options.retries || DEFAULT_OPTIONS.retries)) {
102:     try {
103:       return await requestHandler.get<T>(url, options);
104:     } catch (error) {
105:       attempt++;
106:       if (attempt === options.retries) throw error;
107:      
108:       const delay = Math.pow(2, attempt) * options.backoff;
109:       await new Promise(resolve => setTimeout(resolve, delay));
110:     }
111:   }
112:  
113:   throw new Error("Max retries exceeded");
114: };
115: ```
116: 
117: ## Error Handling
118: 
119: ### Request Error
120: 
121: ```typescript
122: export class RequestError extends Error {
123:   constructor(
124:     message: string,
125:     public status?: number,
126:     public code?: string,
127:     public response?: unknown
128:   ) {
129:     super(message);
130:     this.name = "RequestError";
131:   }
132: }
133: ```
134: 
135: ### Error Processing
136: 
137: ```typescript
138: private processError(error: unknown): never {
139:   if (axios.isAxiosError(error)) {
140:     throw new RequestError(
141:       error.message,
142:       error.response?.status,
143:       error.code,
144:       error.response?.data
145:     );
146:   }
147:  
148:   throw error;
149: }
150: ```
151: 
152: ## Rate Limiting
153: 
154: ### Rate Limiter
155: 
156: ```typescript
157: class RateLimiter {
158:   private queue: Array<() => Promise<void>> = [];
159:   private processing = false;
160:  
161:   async add<T>(
162:     request: () => Promise<T>
163:   ): Promise<T> {
164:     return new Promise((resolve, reject) => {
165:       this.queue.push(async () => {
166:         try {
167:           const result = await request();
168:           resolve(result);
169:         } catch (error) {
170:           reject(error);
171:         }
172:       });
173:      
174:       if (!this.processing) {
175:         this.processQueue();
176:       }
177:     });
178:   }
179: }
180: ```
181: 
182: ### Queue Processing
183: 
184: ```typescript
185: private async processQueue(): Promise<void> {
186:   if (this.queue.length === 0) {
187:     this.processing = false;
188:     return;
189:   }
190:  
191:   this.processing = true;
192:   const request = this.queue.shift();
193:  
194:   if (request) {
195:     await request();
196:     await new Promise(resolve => 
197:       setTimeout(resolve, this.requestDelay)
198:     );
199:     await this.processQueue();
200:   }
201: }
202: ```
203: 
204: ## Response Caching
205: 
206: ### Cache Implementation
207: 
208: ```typescript
209: class ResponseCache {
210:   private cache = new Map<string, CacheEntry>();
211:  
212:   set(key: string, value: unknown, ttl: number): void {
213:     this.cache.set(key, {
214:       value,
215:       expiry: Date.now() + ttl
216:     });
217:   }
218:  
219:   get(key: string): unknown | undefined {
220:     const entry = this.cache.get(key);
221:     if (!entry) return undefined;
222:    
223:     if (Date.now() > entry.expiry) {
224:       this.cache.delete(key);
225:       return undefined;
226:     }
227:    
228:     return entry.value;
229:   }
230: }
231: ```
232: 
233: ## Usage Guidelines
234: 
235: ### Basic Usage
236: 
237: ```typescript
238: const handler = new RequestHandler();
239: 
240: // GET request
241: const data = await handler.get<DataType>(url);
242: 
243: // POST request
244: const response = await handler.post<ResponseType>(
245:   url,
246:   requestData
247: );
248: ```
249: 
250: ### With Options
251: 
252: ```typescript
253: const response = await handler.get<CardData>(url, {
254:   timeout: 5000,
255:   retries: 2,
256:   cache: true,
257:   headers: {
258:     "Authorization": `Bearer ${token}`
259:   }
260: });
261: ```
262: 
263: ## Best Practices
264: 
265: ### Error Management
266: 
267: - Implement proper error handling
268: - Use retry logic appropriately
269: - Log failed requests
270: 
271: ### Performance
272: 
273: - Enable caching when appropriate
274: - Use rate limiting
275: - Monitor response times
276: 
277: ### Security
278: 
279: - Validate URLs
280: - Secure sensitive headers
281: - Monitor request patterns
282: 
283: ## Related Components
284: 
285: - [Error Handler](./error-handling)
286: - [Logger](./logging)
287: - [Cache System](./cache)
288: 
289: ## Troubleshooting
290: 
291: ### Common Issues
292: 
293: 1. Request Timeouts:
294:    - Check network connectivity
295:    - Verify timeout settings
296:    - Monitor server response times
297: 
298: 2. Rate Limiting:
299:    - Review rate limit settings
300:    - Check queue processing
301:    - Monitor request patterns
302: 
303: 3. Cache Issues:
304:    - Verify cache configuration
305:    - Check TTL settings
306:    - Monitor cache hit rates
</file>

<file path="utils/sync-logger.md">
  1: # Sync Logger Utility
  2: 
  3: ## Overview
  4: 
  5: The Sync Logger (`syncLogger.ts`) provides specialized logging functionality for synchronization operations. It offers detailed tracking of card and price synchronization processes, including group details, card information, and sync results.
  6: 
  7: ## Features
  8: 
  9: - Detailed sync operation logging
 10: - Card and price details tracking
 11: - Group processing information
 12: - Progress monitoring
 13: - Results summarization
 14: - Support for dry run operations
 15: 
 16: ## Core Interfaces
 17: 
 18: ### Logger Options
 19: 
 20: ```typescript
 21: interface SyncLoggerOptions {
 22:   type: "manual" | "scheduled" | "both";
 23:   limit?: number;
 24:   dryRun?: boolean;
 25:   groupId?: string;
 26:   batchSize?: number;
 27: }
 28: ```
 29: 
 30: ### Card Details
 31: 
 32: ```typescript
 33: interface CardDetails {
 34:   id: number;
 35:   name: string;
 36:   groupId: string;
 37:   normalPrice?: number;
 38:   foilPrice?: number;
 39:   rawPrices: Array<{
 40:     type: "Normal" | "Foil";
 41:     price: number;
 42:     groupId: string;
 43:   }>;
 44:   imageUrl?: string;
 45:   storageImageUrl?: string;
 46: }
 47: ```
 48: 
 49: ### Sync Results
 50: 
 51: ```typescript
 52: interface SyncResults {
 53:   success: number;
 54:   failures: number;
 55:   groupId?: string;
 56:   type: "Manual" | "Scheduled";
 57:   imagesProcessed?: number;
 58:   imagesUpdated?: number;
 59: }
 60: ```
 61: 
 62: ## Usage Examples
 63: 
 64: ### Basic Usage
 65: 
 66: ```typescript
 67: const logger = new SyncLogger({
 68:   type: "manual",
 69:   dryRun: true,
 70:   limit: 10,
 71:   batchSize: 25
 72: });
 73: 
 74: await logger.start();
 75: await logger.logGroupFound(totalGroups);
 76: await logger.logCardDetails(cardDetails);
 77: await logger.finish();
 78: ```
 79: 
 80: ### Sync Process Logging
 81: 
 82: ```typescript
 83: // Initialize logger
 84: const logger = new SyncLogger({
 85:   type: options.dryRun ? "manual" : "scheduled",
 86:   limit: options.limit,
 87:   dryRun: options.dryRun,
 88:   groupId: options.groupId
 89: });
 90: 
 91: // Start logging
 92: await logger.start();
 93: 
 94: // Log group information
 95: await logger.logGroupDetails(groupId, products.length, prices.length);
 96: 
 97: // Log individual card details
 98: await logger.logCardDetails({
 99:   id: product.productId,
100:   name: product.name,
101:   groupId: product.groupId.toString(),
102:   normalPrice: normalPrice,
103:   foilPrice: foilPrice,
104:   rawPrices: pricesArray
105: });
106: 
107: // Log final results
108: await logger.logSyncResults({
109:   success: processedCount,
110:   failures: errorCount,
111:   type: "Manual",
112:   imagesProcessed: 100,
113:   imagesUpdated: 25
114: });
115: ```
116: 
117: ## Core Methods
118: 
119: ### Start Logging
120: 
121: ```typescript
122: async start(): Promise<void> {
123:   console.log("\nStarting sync test...");
124:   console.log(`Type: ${this.options.type}`);
125:   if (this.options.limit) console.log(`Limit: ${this.options.limit} cards`);
126:   console.log(`Dry Run: ${this.options.dryRun ? "true" : "false"}`);
127:   console.log("\n=== Fetching Raw Data ===");
128: }
129: ```
130: 
131: ### Group Logging
132: 
133: ```typescript
134: async logGroupDetails(
135:   groupId: string,
136:   products: number,
137:   prices: number
138: ): Promise<void> {
139:   this.groups.set(groupId, {products, prices});
140:   console.log(
141:     `Group ${groupId} has ${products} products and ${prices} prices`
142:   );
143: }
144: ```
145: 
146: ### Card Details Logging
147: 
148: ```typescript
149: async logCardDetails(details: CardDetails): Promise<void> {
150:   this.cards.push(details);
151:   if (this.cards.length === 1) {
152:     console.log("\n=== Card Details ===");
153:   }
154: 
155:   console.log(`Card: ${details.name} (${details.groupId || "UNKNOWN"})`);
156:   console.log(`- ID: ${details.id}`);
157:   console.log(`- Group ID: ${details.groupId || "UNKNOWN"}`);
158: 
159:   if (details.rawPrices.length > 0) {
160:     console.log("- Raw Prices:");
161:     details.rawPrices.forEach((price) => {
162:       console.log(
163:         `  > ${price.type}: $${price.price.toFixed(2)} ` +
164:         `(Group: ${price.groupId})`
165:       );
166:     });
167:   }
168: }
169: ```
170: 
171: ## Output Examples
172: 
173: ### Sync Start
174: 
175: ```text
176: Starting sync test...
177: Type: manual
178: Limit: 10 cards
179: Dry Run: true
180: 
181: === Fetching Raw Data ===
182: ```
183: 
184: ### Group Information
185: 
186: ```text
187: Found 15 groups
188: Group 23783 has 100 products and 200 prices
189: ```
190: 
191: ### Card Details Output Example
192: 
193: ```text
194: === Card Details ===
195: Card: Cloud (23783)
196: - ID: 477236
197: - Group ID: 23783
198: - Raw Prices:
199:   > Normal: $1.99 (Group: 23783)
200:   > Foil: $5.99 (Group: 23783)
201: - Image URL: https://example.com/image.jpg
202: - Storage URL: gs://bucket/image.jpg
203: ```
204: 
205: ## Best Practices
206: 
207: 1. **Consistent Usage**:
208: 
209:    ```typescript
210:    const logger = new SyncLogger(options);
211:    await logger.start();
212:    try {
213:      // Sync operations
214:    } finally {
215:      await logger.finish();
216:    }
217:    ```
218: 
219: 2. **Detailed Logging**:
220: 
221:    ```typescript
222:    await logger.logCardDetails({
223:      id: product.id,
224:      name: product.name,
225:      groupId: product.groupId,
226:      normalPrice: product.prices.normal,
227:      foilPrice: product.prices.foil,
228:      rawPrices: product.allPrices,
229:      imageUrl: product.imageUrl,
230:      storageImageUrl: product.storageUrl
231:    });
232:    ```
233: 
234: 3. **Error Tracking**:
235: 
236:    ```typescript
237:    try {
238:      await processGroup(group);
239:    } catch (error) {
240:      await logger.logSyncResults({
241:        success: processed,
242:        failures: failures + 1,
243:        type: "Manual"
244:      });
245:    }
246:    ```
247: 
248: ## Related Components
249: 
250: - [Logger](./logging)
251: - [Error Handling](./error-handling)
252: - [Progress Tracking](./progress)
253: 
254: ## Troubleshooting
255: 
256: ### Common Issues
257: 
258: 1. Missing Information:
259:    - Verify all required fields are provided
260:    - Check logging options configuration
261:    - Ensure proper error handling
262: 
263: 2. Performance Impact:
264:    - Use appropriate batch sizes
265:    - Monitor memory usage
266:    - Implement log rotation
267: 
268: 3. Output Formatting:
269:    - Verify console output formatting
270:    - Check price formatting
271:    - Validate date/time formats
</file>

</repository_files>
